#!/usr/bin/env python3
"""
Script for monitoring workflow runs queued in GitHub Actions.
Sends notifications to Telegram when stuck jobs are detected.
"""

import requests
import json
import os
import sys
import argparse
import subprocess
from collections import Counter, defaultdict
from typing import Dict, List, Any
from datetime import datetime, timezone
import time

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TAIL_MESSAGE = "üìä [–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ](https://datalens.yandex/wkptiaeyxz7qj?tab=ka)\n\nFYI: @KirLynx"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
MAX_AGE_DAYS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç jobs –≤ –¥–Ω—è—Ö (–∏—Å–∫–ª—é—á–∞–µ–º –±–∞–≥–∏ GitHub)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
SEND_WHEN_ALL_GOOD = False  # Whether to send a message when all jobs are working fine

# –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö jobs
# –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: [pattern, threshold_hours, display_name]
WORKFLOW_THRESHOLDS = [
    ["PR-check", 1, "PR-check"],
    ["Postcommit", 6, "Postcommit"],
    # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞:
    # ["Nightly", 12, "Nightly-Build"]
]

def fetch_workflow_runs(status: str = "queued", per_page: int = 1000, page: int = 1) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ workflow runs –∏–∑ GitHub API.
    
    Args:
        status: –°—Ç–∞—Ç—É—Å workflow runs (queued, in_progress, completed, etc.)
        per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ API –æ—Ç–≤–µ—Ç–∞
    """
    url = "https://api.github.com/repos/ydb-platform/ydb/actions/runs"
    params = {
        "per_page": per_page,
        "page": page,
        "status": status
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error when requesting API: {e}")
        return {}

def analyze_queued_workflows(workflow_runs: List[Dict[str, Any]]) -> Dict[str, Dict[str, Any]]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç workflow runs –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π job –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞.
    
    Args:
        workflow_runs: –°–ø–∏—Å–æ–∫ workflow runs –∏–∑ API
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–º —Ç–∏–ø–µ workflow
    """
    workflow_info = defaultdict(lambda: {
        'count': 0,
        'oldest_created_at': None,
        'oldest_run_id': None,
        'runs': []
    })
    
    current_time = datetime.now(timezone.utc)
    
    for run in workflow_runs:
        workflow_name = run.get('name', 'Unknown')
        created_at_str = run.get('created_at')
        run_id = run.get('id')
        
        workflow_info[workflow_name]['count'] += 1
        workflow_info[workflow_name]['runs'].append(run)
        
        if created_at_str:
            try:
                # –ü–∞—Ä—Å–∏–º ISO 8601 —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
                created_at = datetime.fromisoformat(created_at_str.replace('Z', '+00:00'))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç run —Å–∞–º—ã–º —Å—Ç–∞—Ä—ã–º
                if (workflow_info[workflow_name]['oldest_created_at'] is None or 
                    created_at < workflow_info[workflow_name]['oldest_created_at']):
                    workflow_info[workflow_name]['oldest_created_at'] = created_at
                    workflow_info[workflow_name]['oldest_run_id'] = run_id
                    
            except ValueError as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è run {run_id}: {e}")
    
    return dict(workflow_info)

def format_time_ago(created_at: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ "X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤/–¥–Ω–µ–π –Ω–∞–∑–∞–¥".
    
    Args:
        created_at: –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    if created_at is None:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    current_time = datetime.now(timezone.utc)
    time_diff = current_time - created_at
    
    total_seconds = time_diff.total_seconds()
    
    if total_seconds < 60:
        return f"{int(total_seconds)} —Å–µ–∫"
    elif total_seconds < 3600:
        minutes = total_seconds / 60
        return f"{minutes:.1f} –º–∏–Ω"
    elif total_seconds < 86400:
        hours = total_seconds / 3600
        return f"{hours:.1f} —á"
    else:
        days = total_seconds / 86400
        return f"{days:.1f} –¥–Ω"

def filter_old_jobs(workflow_runs: List[Dict[str, Any]], max_age_days: int = None) -> List[Dict[str, Any]]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç jobs —Å—Ç–∞—Ä—à–µ max_age_days (–∏—Å–∫–ª—é—á–∞–µ—Ç –±–∞–≥–∏ GitHub).
    
    Args:
        workflow_runs: –°–ø–∏—Å–æ–∫ workflow runs –≤ –æ—á–µ—Ä–µ–¥–∏
        max_age_days: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MAX_AGE_DAYS)
    
    Returns:
        –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ workflow runs
    """
    if max_age_days is None:
        max_age_days = MAX_AGE_DAYS
    current_time = datetime.now(timezone.utc)
    max_age_seconds = max_age_days * 24 * 3600
    filtered_runs = []
    excluded_count = 0
    
    for run in workflow_runs:
        created_at_str = run.get('created_at')
        if created_at_str:
            try:
                created_at = datetime.fromisoformat(created_at_str.replace('Z', '+00:00'))
                time_diff = current_time - created_at
                
                if time_diff.total_seconds() <= max_age_seconds:
                    filtered_runs.append(run)
                else:
                    excluded_count += 1
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, –≤–∫–ª—é—á–∞–µ–º –≤ –æ—Ç—á–µ—Ç
                filtered_runs.append(run)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è, –≤–∫–ª—é—á–∞–µ–º –≤ –æ—Ç—á–µ—Ç
            filtered_runs.append(run)
    
    if excluded_count > 0:
        print(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–æ {excluded_count} jobs —Å—Ç–∞—Ä—à–µ {max_age_days} –¥–Ω–µ–π (–≤–µ—Ä–æ—è—Ç–Ω–æ –±–∞–≥–∏ GitHub)")
    
    return filtered_runs

def is_job_stuck_by_criteria(run, waiting_hours):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ job –∑–∞—Å—Ç—Ä—è–≤—à–∏–º –ø–æ –Ω–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
    
    Args:
        run: Workflow run –æ–±—ä–µ–∫—Ç
        waiting_hours: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —á–∞—Å–∞—Ö
    
    Returns:
        bool: True –µ—Å–ª–∏ job —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞—Å—Ç—Ä—è–≤—à–∏–º
    """
    workflow_name = run.get('name', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø workflow –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for pattern, threshold_hours, display_name in WORKFLOW_THRESHOLDS:
        if pattern in workflow_name and waiting_hours > threshold_hours:
            return True
    
    return False

def count_stuck_jobs_by_type(stuck_jobs: List[Dict[str, Any]]) -> Dict[str, int]:
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö jobs –ø–æ —Ç–∏–ø–∞–º.
    
    Args:
        stuck_jobs: –°–ø–∏—Å–æ–∫ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö jobs
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö jobs –ø–æ —Ç–∏–ø–∞–º
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    counts = {}
    for pattern, threshold_hours, display_name in WORKFLOW_THRESHOLDS:
        counts[display_name] = 0
    counts['Other'] = 0
    
    for stuck_job in stuck_jobs:
        workflow_name = stuck_job['run'].get('name', '')
        found_type = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for pattern, threshold_hours, display_name in WORKFLOW_THRESHOLDS:
            if pattern in workflow_name:
                counts[display_name] += 1
                found_type = True
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ç–∏–ø, –¥–æ–±–∞–≤–ª—è–µ–º –≤ Other
        if not found_type:
            counts['Other'] += 1
    
    return counts

def check_for_stuck_jobs(workflow_runs: List[Dict[str, Any]], threshold_hours: int = 1) -> List[Dict[str, Any]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç "–∑–∞—Å—Ç—Ä—è–≤—à–∏–µ" jobs –ø–æ –Ω–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–∑ WORKFLOW_THRESHOLDS.
    
    Args:
        workflow_runs: –°–ø–∏—Å–æ–∫ workflow runs –≤ –æ—á–µ—Ä–µ–¥–∏
        threshold_hours: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö jobs
    """
    stuck_jobs = []
    current_time = datetime.now(timezone.utc)
    
    for run in workflow_runs:
        created_at_str = run.get('created_at')
        if created_at_str:
            try:
                created_at = datetime.fromisoformat(created_at_str.replace('Z', '+00:00'))
                time_diff = current_time - created_at
                waiting_hours = time_diff.total_seconds() / 3600
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö jobs
                if is_job_stuck_by_criteria(run, waiting_hours):
                    stuck_jobs.append({
                        'run': run,
                        'waiting_hours': waiting_hours
                    })
            except ValueError:
                pass
    
    return stuck_jobs

def format_telegram_messages(workflow_info: Dict[str, Dict[str, Any]], stuck_jobs: List[Dict[str, Any]], total_queued: int, excluded_count: int = 0) -> List[str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (—Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ 2 —á–∞—Å—Ç–∏).
    
    Args:
        workflow_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ workflow
        stuck_jobs: –°–ø–∏—Å–æ–∫ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö jobs
        total_queued: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ jobs –≤ –æ—á–µ—Ä–µ–¥–∏
        excluded_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö jobs (—Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π)
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∏–∑ 2 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram
    """
    messages = []
    
    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message1_parts = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    if stuck_jobs:
        message1_parts.append("üö® *–ú–û–ù–ò–¢–û–†–ò–ù–ì GITHUB ACTIONS*")
        message1_parts.append("‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ jobs!*")
    else:
        message1_parts.append("‚úÖ *–ú–û–ù–ò–¢–û–†–ò–ù–ì GITHUB ACTIONS*")
        message1_parts.append("–í—Å–µ jobs –≤ –æ—á–µ—Ä–µ–¥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
    
    message1_parts.append("")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message1_parts.append(f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*")
    message1_parts.append(f"‚Ä¢ –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {total_queued} jobs")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö jobs –ø–æ —Ç–∏–ø–∞–º
    stuck_counts = count_stuck_jobs_by_type(stuck_jobs)
    total_stuck = sum(stuck_counts.values())
    
    if total_stuck > 0:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
        for pattern, threshold_hours, display_name in WORKFLOW_THRESHOLDS:
            if stuck_counts[display_name] > 0:
                message1_parts.append(f"‚Ä¢ –ó–∞—Å—Ç—Ä—è–≤—à–∏—Ö {display_name} (>{threshold_hours}—á): {stuck_counts[display_name]}")
        if stuck_counts['Other'] > 0:
            message1_parts.append(f"‚Ä¢ –ó–∞—Å—Ç—Ä—è–≤—à–∏—Ö Other: {stuck_counts['Other']}")
    else:
        message1_parts.append(f"‚Ä¢ –ó–∞—Å—Ç—Ä—è–≤—à–∏—Ö: 0")
    
    if excluded_count > 0:
        message1_parts.append(f"‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–æ (>3–¥–Ω): {excluded_count} jobs")
    message1_parts.append("")
    
    # –°–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø–∞–º workflow
    if workflow_info:
        message1_parts.append("üìã *–ü–æ —Ç–∏–ø–∞–º workflow:*")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –∏–∑ WORKFLOW_THRESHOLDS
        threshold_workflows = []
        other_workflows = []
        
        for workflow_name, info in workflow_info.items():
            is_threshold_type = False
            for pattern, threshold_hours, display_name in WORKFLOW_THRESHOLDS:
                if pattern in workflow_name:
                    threshold_workflows.append((workflow_name, info))
                    is_threshold_type = True
                    break
            if not is_threshold_type:
                other_workflows.append((workflow_name, info))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É jobs
        threshold_workflows.sort(key=lambda x: x[1]['count'], reverse=True)
        other_workflows.sort(key=lambda x: x[1]['count'], reverse=True)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏: —Å–Ω–∞—á–∞–ª–∞ threshold —Ç–∏–ø—ã, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        all_workflows = threshold_workflows + other_workflows
        
        for workflow_name, info in all_workflows:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã
            count = info['count']
            oldest_time = info['oldest_created_at']
            time_ago = format_time_ago(oldest_time)
            message1_parts.append(f"‚Ä¢ `{workflow_name}`: {count} jobs (—Å—Ç–∞—Ä–µ–π—à–∏–π: {time_ago})")
    
    message1_parts.append("")
    message1_parts.append(f"üïê *–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:* {datetime.now().strftime('%H:%M:%S UTC')}")
    
    messages.append("\n".join(message1_parts))
    
    # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–µ—Ç–∞–ª–∏ –ø–æ –∑–∞—Å—Ç—Ä—è–≤—à–∏–º jobs (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
    if stuck_jobs:
        message2_parts = []
        message2_parts.append("üö® *–ó–∞—Å—Ç—Ä—è–≤—à–∏–µ jobs:*")
        message2_parts.append("")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        stuck_jobs_sorted = sorted(stuck_jobs, key=lambda x: x['waiting_hours'], reverse=True)
        
        for i, stuck_job in enumerate(stuck_jobs_sorted[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 15 jobs
            run = stuck_job['run']
            waiting_hours = stuck_job['waiting_hours']
            workflow_name = run.get('name', 'Unknown')
            run_id = run.get('id')
            
            if waiting_hours > 24:
                waiting_str = f"{waiting_hours/24:.1f} –¥–Ω"
            elif waiting_hours > 1:
                waiting_str = f"{waiting_hours:.1f} —á"
            else:
                waiting_str = f"{waiting_hours*60:.0f} –º–∏–Ω"
            
            github_url = f"https://github.com/ydb-platform/ydb/actions/runs/{run_id}" if run_id else "N/A"
            message2_parts.append(f"{i}. `{workflow_name}` - {waiting_str}")
            if run_id:
                message2_parts.append(f"   [Run {run_id}]({github_url})")
            message2_parts.append("")
        
        if len(stuck_jobs) > 15:
            message2_parts.append(f"‚Ä¢ ... –∏ –µ—â–µ {len(stuck_jobs) - 15} jobs")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∞—à–±–æ—Ä–¥
        message2_parts.append("")
        message2_parts.append(TAIL_MESSAGE)
        
        messages.append("\n".join(message2_parts))
    
    return messages

def test_telegram_connection(bot_token: str, chat_id: str, thread_id: int = None) -> bool:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    Args:
        bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        thread_id: ID thread –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Returns:
        True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
    """
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
    if thread_id:
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º thread {thread_id}...")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üîç Bot token: {bot_token[:10]}...{bot_token[-10:] if len(bot_token) > 20 else 'SHORT'}")
    print(f"üîç Chat ID: {chat_id}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º getChat –º–µ—Ç–æ–¥ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    url = f"https://api.telegram.org/bot{bot_token}/getChat"
    data = {'chat_id': chat_id}
    
    if thread_id:
        data['message_thread_id'] = thread_id
    
    try:
        response = requests.post(url, data=data, timeout=10)
        response.raise_for_status()
        
        result = response.json()
        if result.get('ok'):
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram: {e}")
        return False

def send_telegram_message(bot_token: str, chat_id: str, message: str, thread_id: int = None, parse_mode: str = "MarkdownV2") -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏—Å–ø–æ–ª—å–∑—É—è –≤–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç.
    
    Args:
        bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        thread_id: ID thread –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É send_telegram_message.py
        script_dir = os.path.dirname(os.path.abspath(__file__))
        send_script = os.path.join(script_dir, 'send_telegram_message.py')
        
        # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        print(f"Chat ID: {chat_id}")
        cmd = [
            'python3', send_script,
            '--bot-token', bot_token,
            '--chat-id', chat_id,
            '--message', message,
            '--parse-mode', parse_mode
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º thread_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if thread_id:
            cmd.extend(['--message-thread-id', str(thread_id)])
        
        result = subprocess.run(cmd, text=True, timeout=60)
        
        if result.returncode == 0:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–∫–æ–¥ {result.returncode})")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ workflow runs –≤ –æ—á–µ—Ä–µ–¥–∏ GitHub Actions")
    parser.add_argument('--dry-run', action='store_true', 
                       help='–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram')
    parser.add_argument('--bot-token', 
                       help='Telegram bot token (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ TELEGRAM_BOT_TOKEN env var)')
    parser.add_argument('--chat-id', 
                       help='Telegram chat ID (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1003017506311)')
    parser.add_argument('--channel', 
                       help='Telegram channel ID (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è --chat-id)')
    parser.add_argument('--thread-id', type=int,
                       help='Telegram thread ID –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')
    parser.add_argument('--test-connection', action='store_true',
                       help='–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram')
    parser.add_argument('--send-when-all-good', action='store_true',
                       help='–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –≤—Å–µ jobs —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ')
    
    args = parser.parse_args()
    
    print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ workflow runs –≤ –æ—á–µ—Ä–µ–¥–∏ GitHub Actions")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = args.bot_token or os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = args.channel or args.chat_id or os.getenv('TELEGRAM_CHAT_ID', '1003017506311')
    thread_id = args.thread_id or os.getenv('TELEGRAM_THREAD_ID')
    dry_run = args.dry_run or os.getenv('DRY_RUN', 'false').lower() == 'true'
    send_when_all_good = args.send_when_all_good or os.getenv('SEND_WHEN_ALL_GOOD', 'false').lower() == 'true'
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç chat_id –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ (–∫–∞–∫ –≤ parse_and_send_team_issues.py)
    if chat_id and not chat_id.startswith('-') and len(chat_id) >= 10:
        # –î–æ–±–∞–≤–ª—è–µ–º -100 –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è supergroup
        chat_id = f"-100{chat_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if args.test_connection:
        if not bot_token:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --bot-token –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
            sys.exit(1)
        
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram...")
        if test_telegram_connection(bot_token, chat_id, thread_id):
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
            sys.exit(1)
    
    if dry_run:
        print("üß™ –†–ï–ñ–ò–ú DRY-RUN: –¢–æ–∫–µ–Ω—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è, —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
        print("=" * 60)
    elif not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --dry-run")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "queued"
    print("üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: queued")
    data = fetch_workflow_runs(status="queued")
    
    if 'workflow_runs' not in data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API")
        sys.exit(1)
    
    queued_runs = data['workflow_runs']
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(queued_runs)} workflow runs –≤ –æ—á–µ—Ä–µ–¥–∏")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ jobs (—Å—Ç–∞—Ä—à–µ MAX_AGE_DAYS –¥–Ω–µ–π)
    filtered_runs = filter_old_jobs(queued_runs)
    excluded_count = len(queued_runs) - len(filtered_runs)
    print(f"üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_runs)} workflow runs (–∏—Å–∫–ª—é—á–µ–Ω—ã jobs —Å—Ç–∞—Ä—à–µ {MAX_AGE_DAYS} –¥–Ω–µ–π)")
    
    if not filtered_runs:
        print("‚úÖ –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö workflow runs –≤ –æ—á–µ—Ä–µ–¥–∏")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        message = "‚úÖ *–ú–û–ù–ò–¢–û–†–ò–ù–ì GITHUB ACTIONS*\n\n–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ - –≤—Å–µ jobs —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ! üéâ"
        
        if dry_run:
            print(f"\nüì§ DRY-RUN: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:{chat_id}:{thread_id}")
            print("-" * 50)
            print(message)
            print("-" * 50)
        elif send_when_all_good:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏ –≤ Telegram")
            if send_telegram_message(bot_token, chat_id, message, thread_id, "MarkdownV2"):
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏")
        else:
            print(f"üì§ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    workflow_info = analyze_queued_workflows(filtered_runs)
    total_queued = sum(info['count'] for info in workflow_info.values())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ jobs –ø–æ –Ω–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    stuck_jobs = check_for_stuck_jobs(filtered_runs, threshold_hours=1)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
    telegram_messages = format_telegram_messages(workflow_info, stuck_jobs, total_queued, excluded_count)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö jobs, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not stuck_jobs:
        if send_when_all_good:
            print(f"‚úÖ –ù–µ—Ç –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö jobs –ø–æ –Ω–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        else:
            print(f"‚úÖ –ù–µ—Ç –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö jobs –ø–æ –Ω–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º - –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        criteria_parts = []
        for pattern, threshold_hours, display_name in WORKFLOW_THRESHOLDS:
            criteria_parts.append(f"{display_name} >{threshold_hours}—á")
        criteria_str = ", ".join(criteria_parts)
        print(f"   ({criteria_str})")
        print("\nüìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 50)
        for i, message in enumerate(telegram_messages, 1):
            print(f"\n--- –û—Ç—á–µ—Ç {i} ---")
            print(message)
        print("=" * 50)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–≥–¥–∞ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –≤—ã—Ö–æ–¥–∏–º
        if not send_when_all_good:
            return
    
    print(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(stuck_jobs)} –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö jobs –ø–æ –Ω–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
    
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ dry-run —Ä–µ–∂–∏–º–µ
    if dry_run:
        print(f"\nüì§ DRY-RUN: {len(telegram_messages)} —Å–æ–æ–±—â–µ–Ω–∏–µ(–π) –¥–ª—è Telegram:")
        for i, message in enumerate(telegram_messages, 1):
            print(f"\n--- –°–æ–æ–±—â–µ–Ω–∏–µ {i} ---")
            print("=" * 60)
            print(message)
            print("=" * 60)
        print("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω (dry-run —Ä–µ–∂–∏–º)")
        sys.exit(0)
    else:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(telegram_messages)} —Å–æ–æ–±—â–µ–Ω–∏–µ(–π) –≤ Telegram {chat_id}:{thread_id}")
        
        success_count = 0
        for i, message in enumerate(telegram_messages, 1):
            print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {i}/{len(telegram_messages)}...")
            if send_telegram_message(bot_token, chat_id, message, thread_id, "MarkdownV2"):
                success_count += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {i}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(telegram_messages):
                print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...")
                time.sleep(2)
        
        if success_count == len(telegram_messages):
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            sys.exit(0)
        else:
            print(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count}/{len(telegram_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            sys.exit(1)

if __name__ == "__main__":
    main()
