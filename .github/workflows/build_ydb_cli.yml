name: Build-YDB-CLI
run-name: Build YDB CLI
on:
  workflow_dispatch:
    inputs:
      build-linux:
        type: boolean
        description: Build YDB CLI for Linux
        default: true
      build-darwin-amd:
        type: boolean
        description: Build YDB CLI for Darwin amd64
        default: true
      build-darwin-arm:
        type: boolean
        description: Build YDB CLI for Darwin arm64
        default: true
      build-windows:
        type: boolean
        description: Build YDB CLI for Windows
        default: true
      commit_sha:
        type: string
        default: ""
      s3_host:
        type: string
        default: "storage.yandexcloud.net"
        description: "S3 endpoint. Details: https://yandex.cloud/en/docs/storage/tools/s3cmd"
      s3_bucket:
        type: string
        default: "yandexcloud-ydb"
        description: "S3 bucket. S3Uri (without hostname). Details: https://yandex.cloud/en/docs/storage/tools/s3cmd"
      s3_dns_host_bucket:
        type: string
        default: "%(bucket)s.storage.yandexcloud.net"
        description: "S3 DNS-style bucket+hostname:port template for accessing a bucket. Details: https://yandex.cloud/en/docs/storage/tools/s3cmd"
      s3_region:
        type: string
        default: "ru-central1"
        description: "S3 region. Details: https://yandex.cloud/en/docs/storage/tools/s3cmd"
defaults:
  run:
    shell: bash

jobs:
  build-matrix:
    name: Build matrix for the next job from selected platforms to build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Create file with future platform list
        id: set-matrix
        run: |
          MATRIX='{"include":[]}'
          if [ "${{ inputs.build-linux }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "linux", "runner": "ubuntu-latest", "shell": "bash"}]')
            echo "Matrix after adding linux: $MATRIX"
          fi
          if [ "${{ inputs.build-darwin-amd }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "darwin-amd", "runner": "macos-13", "shell": "bash"}]')
            echo "Matrix after adding darwin-amd: $MATRIX"
          fi
          if [ "${{ inputs.build-darwin-arm }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "darwin-arm", "runner": "macos-latest", "shell": "bash"}]')
            echo "Matrix after adding darwin-arm: $MATRIX"
          fi
          if [ "${{ inputs.build-windows }}" == "true" ]; then
            MATRIX=$(echo $MATRIX | jq -c '.include += [{"os": "windows", "runner": "windows-latest", "shell": "bash"}]')
            echo "Matrix after adding windows: $MATRIX"
          fi

          echo "Final matrix: $MATRIX"

          echo "testmatrix={\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}"
          echo "testmatrix=$MATRIX"
          
          echo "matrix=<<EOF" >> $GITHUB_OUTPUT
          echo "$MATRIX" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
# https://github.com/github/docs/issues/21529

  build-platform-specific-binary:
    strategy:
      matrix: ${{ fromJSON(needs.build-matrix.outputs.matrix) }}
    name: Build YDB CLI for ${{ matrix.os }}
#          - { os: linux, runner: ubuntu-latest, shell: bash }
#          - { os: darwin-amd, runner: macos-13, shell: bash }
#          - { os: darwin-arm, runner: macos-latest, shell: bash }
#          - { os: windows, runner: windows-latest, shell: pwsh }
#    if: (${{ inputs.build-linux }} == 'true' && ${{ matrix.os }} == 'linux') || (${{ inputs.build-darwin-amd }} == 'true' && ${{ matrix.os }} == 'darwin-amd') || (${{ inputs.build-darwin-arm }} == 'true' && ${{ matrix.os }} == 'darwin-arm') || (${{ inputs.build-windows }} == 'true' && ${{ matrix.os }} == 'windows')
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
    
#    - name: MSVS content
#      run: Dir -Recurse "C:\Program Files (x86)\Microsoft Visual Studio" | Get-Childitem
    
#    - name: MSVS 14 content
#      run: Dir -Recurse "C:\Program Files (x86)\Microsoft Visual Studio 14.0" | Get-Childitem
    
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.commit_sha }}

#    - name: Print env vars before installing Windows SDK
#      run: gci env:* | sort-object name
    
#    - name: Install windows10 SDK
#      uses: GuillaumeFalourd/setup-windows10-sdk-action@v2

#    - name: Print env vars
#      run: gci env:* | sort-object name

    - name: Print uname
      run: uname -a
    
    - name: Print YDB CLI version
      run: cat ydb/apps/ydb/version.txt
    
    - name: Fake create file
      run: echo 'test' > ydb/apps/ydb/ydb
    
#    - name: Build binary with ya make
#      run: python ya make ydb/apps/ydb -DUSE_CLANG_CL=yes --host-platform-flag USE_CLANG_CL=yes

    - name: Upload binary to artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-binary
        path: ydb/apps/ydb/ydb
        if-no-files-found: error
        retention-days: 1

  gather-and-push-to-s3:
    name: Gather built binaries and push to s3
    needs: build-platform-specific-binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_sha }}
      - name: Get YDB CLI version from ydb/apps/ydb/version.txt
        id: getver
        run: echo "cli_version=$(cat ydb/apps/ydb/version.txt)-${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: Print YDB CLI version
        run: echo ${{ steps.getver.outputs.cli_version }}
      - name: Download s3
        run: wget https://github.com/s3tools/s3cmd/releases/download/v2.4.0/s3cmd-2.4.0.tar.gz
      - name: Unzip s3
        run: tar -xf s3cmd-2.4.0.tar.gz
      - name: Install s3
        run: |
          cd s3cmd-2.4.0
          sudo python3 setup.py install
          cd ..

#      - name: Prepare s3cmd
#        uses: ./.github/actions/s3cmd
#        with:
#          s3_endpoint: ${{ vars.CLI_S3_ENDPOINT }}
#          s3_bucket: ${{ vars.CLI_S3_BUCKET }}
#          s3_key_id: ${{ secrets.CLI_S3_KEY_ID }}
#          s3_key_secret: ${{ secrets.CLI_S3_KEY_SECRET_ID }}

      - name: Prepare directory for linux binary
        if: ${{ inputs.build-linux == 'true' }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/linux/amd64

      - name: Prepare directory for Darwin amd binary
        if: ${{ inputs.build-darwin-amd == 'true' }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/darwin/amd64

      - name: Prepare directory for Darwin arm binary
        if: ${{ inputs.build-darwin-arm == 'true' }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/darwin/arm64

      - name: Prepare directory forWindows binary
        if: ${{ inputs.build-windows == 'true' }}
        run: mkdir -p ${{ steps.getver.outputs.cli_version }}/windows/amd64/unsigned

      - name: Copy linux binary
        if: ${{ inputs.build-linux == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: linux-binary
          path: ${{ steps.getver.outputs.cli_version }}/linux/amd64/
      - name: Copy darwin amd64 binary
        if: ${{ inputs.build-darwin-amd == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: macos-amd-binary
          path: ${{ steps.getver.outputs.cli_version }}/darwin/amd64/
      - name: Copy darwin arm64 binary
        if: ${{ inputs.build-darwin-arm == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: macos-arm-binary
          path: ${{ steps.getver.outputs.cli_version }}/darwin/arm64/
      - name: Copy windows binary (unsigned)
        if: ${{ inputs.build-windows == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: windows-binary
          path: ${{ steps.getver.outputs.cli_version }}/windows/amd64/unsigned

      - name: Print resulting file hierarchy
        run: find ${{ steps.getver.outputs.cli_version }} | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"

      - name: Upload to S3
        run: s3cmd --access_key=${{ secrets.CLI_S3_KEY_ID }} --secret_key=${{ secrets.CLI_S3_KEY_SECRET_ID }} --host=${{ inputs.s3_host }} --host-bucket="%(bucket)s.${{ inputs.s3_host }}" --region=${{ inputs.s3_region }} sync --recursive ${{ steps.getver.outputs.cli_version }} s3://${{ inputs.s3_bucket }}/release/
      
