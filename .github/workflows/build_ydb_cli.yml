name: Build-YDB-CLI
run-name: Build YDB CLI ${{ inputs.version }}
on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        default: ""
        description: "YDB CLI version (optional)"
      runner_label:
        type: string
        default: "auto-provisioned"
        description: "runner label"
      commit_sha:
        type: string
        default: ""
defaults:
  run:
    shell: bash

jobs:
  build-platform-specific-binary:
    strategy:
      matrix:
        include:
#          - { os: windows, runner: windows-latest, shell: pwsh }
          - { os: linux, runner: ubuntu-latest, shell: bash }
#          - { os: macos-amd, runner: macos-13, shell: bash }
#          - { os: macos-arm, runner: macos-latest, shell: bash }
    name: Build YDB CLI for ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
    
#    - name: MSVS content
#      run: Dir -Recurse "C:\Program Files (x86)\Microsoft Visual Studio" | Get-Childitem
    
#    - name: MSVS 14 content
#      run: Dir -Recurse "C:\Program Files (x86)\Microsoft Visual Studio 14.0" | Get-Childitem
    
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.commit_sha }}

#    - name: Print env vars before installing Windows SDK
#      run: gci env:* | sort-object name
    
#    - name: Install windows10 SDK
#      uses: GuillaumeFalourd/setup-windows10-sdk-action@v2

#    - name: Print env vars
#      run: gci env:* | sort-object name

#    - name: Print uname
#      run: uname -a
    
#    - name: Print YDB CLI version
#      run: cat ydb/apps/ydb/version.txt


    
    - name: Fake create file
      run: echo 'test' > ydb/apps/ydb/ydb
    
#    - name: Build binary with ya make
#      run: python ya make ydb/apps/ydb -DUSE_CLANG_CL=yes --host-platform-flag USE_CLANG_CL=yes

    - name: Upload binary to artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-binary
        path: ydb/apps/ydb/ydb
        if-no-files-found: error
        retention-days: 1

  gather-and-push-to-s3:
    name: Gather built binaries and push to s3
    needs: build-platform-specific-binary
    runs-on: ubuntu-latest
    steps:
      - name: Download s3
        run: wget https://github.com/s3tools/s3cmd/releases/download/v2.4.0/s3cmd-2.4.0.tar.gz
      - name: Unzip s3
        run: tar -xf s3cmd-2.4.0.tar.gz
#      - name: Set up S3cmd cli tool
#        uses: s3-actions/s3cmd@v1.8.0
#        with:
#          provider: aws # default is linode
#          region: 'ru-central1'
#          access_key: ${{ secrets.CLI_S3_KEY_ID }}
#          secret_key: ${{ secrets.CLI_S3_KEY_SECRET_ID }}
      - name: Prepare s3cmd
        uses: ./.github/actions/s3cmd
        with:
          s3_endpoint: ${{ vars.CLI_S3_ENDPOINT }}
          s3_bucket: ${{ vars.CLI_S3_BUCKET }}
          s3_key_id: ${{ secrets.CLI_S3_KEY_ID }}
          s3_key_secret: ${{ secrets.CLI_S3_KEY_SECRET_ID }}

      - name: prepare directories
        run: mkdir -p ${{ inputs.version }}/linux/amd64
             mkdir -p ${{ inputs.version }}/darwin/amd64
             mkdir -p ${{ inputs.version }}/windows/amd64
             mkdir -p ${{ inputs.version }}/darwin/arm64

      - name: copy linux binary
        uses: actions/download-artifact@v4
        with:
          name: linux-binary
          path: ${{ inputs.version }}/linux/amd64/
#      - name: copy darwin amd64 binary
#        uses: actions/download-artifact@v4
#        with:
#          name: macos-amd-binary
#          path: ${{ inputs.version }}/darwin/amd64/
#      - name: copy darwin arm64 binary
#        uses: actions/download-artifact@v4
#        with:
#          name: macos-arm-binary
#          path: ${{ inputs.version }}/darwin/arm64/
#      - name: copy windows binary
#        uses: actions/download-artifact@v4
#        with:
#          name: windows-binary
#          path: ${{ inputs.version }}/windows/amd64/

      - name: Print result
        run: ls -R ${{ inputs.version }}

      - name: Print result
        run: s3cmd-2.4.0/s3cmd put --recursive ${{ inputs.version }} release/
      
