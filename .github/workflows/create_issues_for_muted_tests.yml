name: Create issues for muted tests

on:
  pull_request_review:
    types:
      - submitted
    branches:
      - main
  workflow_dispatch:
    inputs:
        pr_number: 
            description: 'The pull request number'
            required: true
            type: number

env:
  GH_TOKEN: ${{ secrets.YDBOT_TOKEN }}
  MUTED_YA_FILE_PATH: .github/config/muted_ya.txt

jobs:
  create-issues-for-muted-tests:
    runs-on: ubuntu-latest
    if: |
        (github.event_name == 'pull_request_review' && 
        github.event.review.state == 'approved' && 
        contains(github.event.pull_request.labels.*.name, 'mute-unmute')) || 
        github.event_name == 'workflow_dispatch'
    steps:
      - name: Get PR info for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        id: get_pr_info
        run: |
          PR_DATA=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.inputs.pr_number }})
          HEAD_REF=$(echo "$PR_DATA" | jq -r '.head.ref')
          BASE_REF=$(echo "$PR_DATA" | jq -r '.base.ref')
          echo "head_ref=$HEAD_REF" >> $GITHUB_OUTPUT
          echo "base_ref=$BASE_REF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ env.GH_TOKEN }}

      - name: Set environment variables for branches
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "BRANCH_FOR_PR=${{ steps.get_pr_info.outputs.head_ref }}" >> $GITHUB_ENV
            echo "BASE_BRANCH=${{ steps.get_pr_info.outputs.base_ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_FOR_PR=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
            echo "BASE_BRANCH=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            ref: ${{ github.event_name == 'workflow_dispatch' && steps.get_pr_info.outputs.head_ref || github.event.pull_request.head.ref }}

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install ydb[yc] PyGithub requests matplotlib numpy

      - name: Setup ydb access
        uses: ./.github/actions/setup_ci_ydb_service_account_key_file_credentials
        with:
            ci_ydb_service_account_key_file_credentials: ${{ secrets.CI_YDB_SERVICE_ACCOUNT_KEY_FILE_CREDENTIALS }}

      - name: Create issues for muted tests
        id: create_issues
        env:
          GITHUB_TOKEN: ${{ env.GH_TOKEN }}
        run: .github/scripts/tests/create_new_muted_ya.py create_issues --file_path=${{ github.workspace }}/${{ env.MUTED_YA_FILE_PATH }} 
 
      - name: Add issues to PR
        env:
          GITHUB_TOKEN: ${{ env.GH_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PR_NUMBER=${{ github.event.inputs.pr_number }}
          else
            PR_NUMBER=${{ github.event.pull_request.number }}
          fi
          python .github/scripts/create_or_update_pr.py append_pr_body --pr_number=$PR_NUMBER --body=${{ steps.create_issues.outputs.created_issues_file }}
      
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const workflowUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const filePath = '${{ steps.create_issues.outputs.created_issues_file }}';
            const bodyText = fs.readFileSync(filePath, 'utf8');
            const completeBody = `Collected in workflow [#${{ github.run_number }}](${workflowUrl})\n\n${bodyText}`;
            
            let prNumber;
            if ('${{ github.event_name }}' === 'workflow_dispatch') {
              prNumber = ${{ github.event.inputs.pr_number }};
            } else {
              prNumber = ${{ github.event.pull_request.number }};
            }
      
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: completeBody
            });

      - name: Send team-specific messages to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_YDBOT_TOKEN }}
          TEAM_CHANNELS: ${{ vars.TG_TEAM_CHANNELS }}
        run: |
          python .github/scripts/telegram/parse_and_send_team_issues.py \
            --on-mute-change-update \
            --file "${{ steps.create_issues.outputs.created_issues_file }}" \
            --bot-token "$TELEGRAM_BOT_TOKEN" \
            --team-channels "$TEAM_CHANNELS" \
            --include-plots \
            --delay 2
