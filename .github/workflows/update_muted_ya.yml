name: Update Muted tests

on:
  schedule:
    - cron: "0 */2 * * *"  # At the beginning of every 2nd hour
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BRANCH_FOR_PR: update-muted-ya
  TITLE: "Update muted_ya.txt"
  BASE_BRANCH: main
  REVIEWERS: "['ci']"
  LABEL: mute-unmute

jobs:
  create-or-update-muted-ya:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BASE_BRANCH }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ydb[yc] PyGithub

      - name: Setup ydb access
        uses: ./.github/actions/setup_ci_ydb_service_account_key_file_credentials
        with:
          ci_ydb_service_account_key_file_credentials: ${{ secrets.CI_YDB_SERVICE_ACCOUNT_KEY_FILE_CREDENTIALS }}

      - name: Update branch with base branch
        run: |
          git config user.name YDBot
          git config user.email ydbot@ydb.tech
      
          # Fetch the latest changes from remote
          git fetch origin ${{ env.BRANCH_FOR_PR }}_${{ env.BASE_BRANCH }}
      
          # Checkout BRANCH_FOR_PR, create if it doesn't exist based on BASE_BRANCH
          if git show-ref --quiet origin ${{ env.BRANCH_FOR_PR }}_${{ env.BASE_BRANCH }}; then
            echo 'Branch ${{ env.BRANCH_FOR_PR }}_${{ env.BASE_BRANCH }} exists.'
            git checkout ${{ env.BRANCH_FOR_PR }}_${{ env.BASE_BRANCH }}
          else
            echo 'Branch ${{ env.BRANCH_FOR_PR }}_${{ env.BASE_BRANCH }} does not exist. Creating based on ${{ env.BASE_BRANCH }}'
            git checkout -b ${{ env.BRANCH_FOR_PR }}_${{ env.BASE_BRANCH }} origin/${{ env.BASE_BRANCH }}
          fi
      
          # Attempt to rebase BRANCH_FOR_PR onto BASE_BRANCH
          if ! git rebase origin/${{ env.BASE_BRANCH }} -X theirs; then
            echo "Rebase failed, resetting branch to match BASE_BRANCH..."
      
            # Abort the rebase process
            git rebase --abort
      
            # Reset the branch to BASE_BRANCH
            git reset --hard origin/${{ env.BASE_BRANCH }}
            
          fi
          git push origin ${{ env.BRANCH_FOR_PR }}_${{ env.BASE_BRANCH }} --force
        
      - name: Run the script
        run: |
          .github/scripts/tests/create_new_muted_ya.py update_muted_ya

      - name: Move new_muted_ya_with_flaky.txt to muted_ya.txt
        run: |
          cp mute_update/new_muted_ya_with_flaky.txt .github/config/muted_ya.txt

      - name: Check if changes exist
        id: changes_check
        run: |
          if git diff --quiet .github/config/muted_ya.txt; then
            echo "No changes detected in muted_ya.txt"
            echo "changes=false" >> $GITHUB_ENV
          else
            echo "Changes detected in muted_ya.txt"
            echo "changes=true" >> $GITHUB_ENV
          fi

      - name: Collect PR description
        id: pr_description
        run: |
          PR_BODY=''
          PR_BODY_FILE="pr_body_content.txt"

          if [ -s mute_update/deleted_tests_in_mute_debug.txt ]; then
              DELETED_COUNT=$(wc -l < mute_update/deleted_tests_in_mute_debug.txt)
              PR_BODY+=$'**Removed from mute: '"${DELETED_COUNT}**"$'\n\n'
              PR_BODY+=$'```\n'
              PR_BODY+=$(cat mute_update/deleted_tests_in_mute_debug.txt)
              PR_BODY+=$'\n```\n\n'
          fi
          if [ -s mute_update/flaky_debug.txt ]; then
              FLAKY_COUNT=$(wc -l < mute_update/flaky_debug.txt)
              PR_BODY+=$'**Muted flaky: '"${FLAKY_COUNT}**"$'\n\n'
              PR_BODY+=$'```\n'
              PR_BODY+=$(cat mute_update/flaky_debug.txt)
              PR_BODY+=$'\n```\n\n'
          fi
          if [ -s mute_update/muted_stable_debug.txt ]; then
              MUTED_STABLE_COUNT=$(wc -l < mute_update/muted_stable_debug.txt)
              PR_BODY+=$'**Unmuted stable: '"${MUTED_STABLE_COUNT}**"$'\n\n'
              PR_BODY+=$'```\n'
              PR_BODY+=$(cat mute_update/muted_stable_debug.txt)
              PR_BODY+=$'\n```\n\n'
          fi

          # Save PR_BODY to the file
          echo "$PR_BODY" > "$PR_BODY_FILE"
          # Export the path to the file to the GitHub environment
          echo "PR_BODY_PATH=$PR_BODY_FILE" >> $GITHUB_ENV

      - name: Stage changes if any
        if: env.changes == 'true'
        run: |
          git add .github/config/muted_ya.txt

      - name: Delete other files
        run: |
          rm -rf mute_update

      - name: Commit changes
        if: env.changes == 'true'
        run: |
          git commit -m "Update muted YA file"

      - name: Push changes
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.YDBOT_TOKEN }}
          branch: ${{ env.BRANCH_FOR_PR }}_${{ env.BASE_BRANCH }}
          force: true

      - name: Install PyGithub
        run: |
          pip install PyGithub

      - name: Create or update PR
        id: create_or_update_pr
        env:
          GITHUB_TOKEN: ${{ secrets.YDBOT_TOKEN }}
        run: |
          python .github/scripts/create_or_update_pr.py create_or_update --base_branch="${{ env.BASE_BRANCH }}" --branch_for_pr="${{ env.BRANCH_FOR_PR }}_${{ env.BASE_BRANCH }}" --title="${{ env.TITLE }} in ${{ env.BASE_BRANCH }}" --body="${{ env.PR_BODY_PATH }}"

        
      - name: Comment PR
        continue-on-error: true
        uses: actions/github-script@v7
        
        with:
          github-token: ${{ secrets.YDBOT_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const workflowUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const filePath = path.join(process.env.GITHUB_WORKSPACE, 'pr_body_content.txt');
            const bodyText = fs.readFileSync(filePath, 'utf8');
            const completeBody = `Collected in workflow [#${{ github.run_number }}](${workflowUrl})\n\n${bodyText}`;
      
            github.rest.issues.createComment({
              issue_number: ${{ steps.create_or_update_pr.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: completeBody
            });
      
            github.rest.issues.addLabels({
              ...context.repo,
              issue_number: ${{ steps.create_or_update_pr.outputs.pr_number }},
              labels: ['${{ env.LABEL }}']
            });

      - name: Add reviewers
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          pull_number: ${{ steps.create_or_update_pr.outputs.pr_number }}
          team_reviewers: ${{ env.REVIEWERS }}
          token: ${{ secrets.YDBOT_TOKEN }}
  
  