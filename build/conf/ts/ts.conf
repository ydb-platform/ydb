NODEJS_ROOT=
NODEJS_BIN=$NODEJS_ROOT/node

TS_TRACE=no
TS_LOCAL_CLI=no
# Use outdir defined in tsconfig (actual not for bundlers, they use own way to define output directory)
TS_CONFIG_USE_OUTDIR=

NOTS_TOOL=${tool:"devtools/frontend_build_platform/nots/builder"}


TS_CONFIG_PATH=tsconfig.json

### @usage: TS_CONFIG(ConfigPath)
###
### Macro sets the path for "TypeScript Config".
###
### - ConfigPath - config path (one at least)
macro TS_CONFIG(FirstConfigPath, ConfigPath...) {
    SET(TS_CONFIG_PATH $FirstConfigPath $ConfigPath)
}


# Arguments for the all commands of the `nots/builder`, passed before the command
NOTS_TOOL_BASE_ARGS=\
  --arcadia-root $ARCADIA_ROOT \
  --arcadia-build-root $ARCADIA_BUILD_ROOT \
  --moddir $MODDIR \
  --local-cli $TS_LOCAL_CLI \
  --nodejs-bin $NODEJS_BIN \
  --pnpm-script $PNPM_SCRIPT \
  --contribs $NPM_CONTRIBS_PATH \
  --trace $TS_TRACE \
  --verbose $TS_LOG \
  $_YATOOL_PREBUILDER_ARG

NOTS_TOOL_BUILD_ENV=

# Arguments for builders' commands, passed after the command
NOTS_TOOL_COMMON_BUILDER_ARGS=\
  --output-file ${output:TS_OUTPUT_FILE} ${output;hide:TS_OUTPUT_FILE_UUID} \
  --tsconfigs $TS_CONFIG_PATH \
  --vcs-info "${VCS_INFO_FILE}" \
  $NOTS_TOOL_BUILD_ENV

ERM_PACKAGES_PATH=devtools/frontend_build_platform/erm/erm-packages.json

TS_OUTPUT_FILE=output.tar
TS_OUTPUT_FILE_UUID=output.tar.uuid
TS_EXCLUDE_DIR_GLOB=(.idea|.vscode|node_modules)/**/*
TS_COMMON_OUTDIR_GLOB=(build|dist|bundle|\${join=|:WEBPACK_OUTPUT_DIR}|$TS_NEXT_OUTPUT_DIR|$VITE_OUTPUT_DIR)/**/*

TS_GLOB_EXCLUDE_ADDITIONAL=

### @usage: TS_EXCLUDE_FILES_GLOB(GlobExpression)
###
### Macro sets glob to mark some files to ignore while building.
### These files won't be copied to BINDIR.
###
### - GlobExpression - glob expression
macro TS_EXCLUDE_FILES_GLOB(GlobExpression) {
  SET(TS_GLOB_EXCLUDE_ADDITIONAL $GlobExpression)
}

module _TS_BASE_UNIT: _BARE_UNIT {
    # Propagates peers to related modules
    .PEERDIR_POLICY=as_build_from
    .NODE_TYPE=Bundle
    # Needed for DEPENDS in tests to choose right submodule from multimodule
    .FINAL_TARGET=yes
    # use TS_FILES instead of FILES
    .ALIASES=FILES=TS_FILES

    # .NODE_TYPE=Bundle is required for peers propagation, but it also affects
    # how merging of pic/nopic graphs. Here we can override this merging behaviour
    SET(MODULE_TYPE LIBRARY)
    # Include processor works only for TS tag
    SET(MODULE_TAG TS)
    SET(MODULE_LANG TS)
    # TS should peer to TS
    SET(PEERDIR_TAGS TS TS_PROTO)
    # .fake tells builder to not materialize it in results
    SET(MODULE_SUFFIX .ts.fake)

    # We read erm-packages.json during configuration, so we have to include it to configuration cache key
    SET_APPEND(_MAKEFILE_INCLUDE_LIKE_DEPS ${ARCADIA_ROOT}/$ERM_PACKAGES_PATH)

    # PEERDIR that reads required version of tool from package.json
    _PEERDIR_TS_RESOURCE(nodejs pnpm)
}


# tag:test
ESLINT_CONFIG_PATH=.eslintrc.js

### @usage: TS_ESLINT_CONFIG(ConfigPath)
###
### Macro sets the path for ESLint config file.
###
### - ConfigPath - config path
macro TS_ESLINT_CONFIG(ConfigName) {
  SET(ESLINT_CONFIG_PATH $ConfigName)
}

_TS_LINT_SRCS_VALUE=
### _TS_CONFIG_EPILOGUE() # internal
###
### This macro executes macros which should be invoked after all user specified macros in the ya.make file
macro _TS_CONFIG_EPILOGUE() {
    ### Fill $TS_GLOB_FILES with potential inputs.
    ### It will be reduced later in _TS_CONFIGURE based on `tsconfig.json` rules.
    _GLOB(TS_GLOB_FILES $TS_GLOB_INCLUDE EXCLUDE $TS_GLOB_EXCLUDE)

    _GLOB(_TS_LINT_SRCS_VALUE **/*.(ts|tsx|js|jsx) EXCLUDE $TS_EXCLUDE_DIR_GLOB $TS_COMMON_OUTDIR_GLOB $TS_GLOB_EXCLUDE_ADDITIONAL)

    _SETUP_BUILD_ENV()
}

# Used as inputs in TS_COMPILE through `$_AS_HIDDEN_INPUTS(IN $TS_INPUT_FILES)`
TS_INPUT_FILES=

# List of the files, filled in _TS_CONFIG_EPILOGUE. Will be reduced in _TS_CONFIGURE macro to TS_INPUT_FILES.
TS_GLOB_FILES=

# Hardcoded "include" list (all other files will be ignored)
TS_GLOB_INCLUDE=**/*

# Hardcoded "exclude" list (reasonable default).
TS_GLOB_EXCLUDE=$TS_CONFIG_PATH \
  ya.make a.yaml \
  $TS_EXCLUDE_DIR_GLOB \
  $TS_COMMON_OUTDIR_GLOB \
  $TS_GLOB_EXCLUDE_ADDITIONAL \
  package.json pnpm-lock.yaml .* \
  tests/**/* **/*.(test|spec).(ts|tsx|js|jsx)


# Ugly hack for using inputs from the variable
macro _AS_HIDDEN_INPUTS(IN{input}[]) {
  # "context=TEXT" exclude file from the "include processing"
  .CMD=${input;hide;context=TEXT:IN}
}


_TS_FILES_COPY_CMD=

### TS_FILES(Files...)
###
### Adds files to output as is. Similar to FILES but works for TS build modules
macro TS_FILES(Files...) {
    _TS_FILES($Files)
}

@import "${CONF_ROOT}/conf/ts/node_modules.conf"
@import "${CONF_ROOT}/conf/ts/ts_next.conf"
@import "${CONF_ROOT}/conf/ts/ts_package.conf"
@import "${CONF_ROOT}/conf/ts/ts_proto.conf"
@import "${CONF_ROOT}/conf/ts/ts_test.conf"
@import "${CONF_ROOT}/conf/ts/ts_tsc.conf"
@import "${CONF_ROOT}/conf/ts/ts_vite.conf"
@import "${CONF_ROOT}/conf/ts/ts_webpack.conf"
