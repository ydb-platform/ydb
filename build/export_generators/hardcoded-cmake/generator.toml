[root]
templates=[
    { path="root_cmake_lists.jinja", dest="CMakeLists.txt" },
    { path="root_global_vars.jinja", dest="cmake/global_vars.cmake" },
]
copy=[
	"cmake/global_flags.compiler.gnu.cmake",
    "cmake/global_flags.compiler.msvc.cmake",
    "cmake/global_flags.linker.gnu.cmake",
    "cmake/global_flags.linker.msvc.cmake",
    "cmake/global_flags.cmake",
]

[attrs.root]
project_name="str"
project_language_list="list"
use_conan="bool"
platform_flags="list"
platform_cmakelists="list"
platform_vars="list"
includes="sorted_set"

[attrs.target]

[[rules]]
attrs=["run_antlr"]
copy=["cmake/antlr.cmake"]
add_values=[{attr="includes", values=["cmake/antlr.cmake"]}]

[[rules]]
attrs=[
    "target_bison_parser",
    "target_flex_lexers"
]
copy=["cmake/bison.cmake"]
add_values=[{attr="includes", values=["cmake/bison.cmake"]}]

[[rules]]
attrs=[
    "conan_add_remote",
    "conan_check",
    "conan_cmake_autodetect",
    "conan_cmake_configure",
    "conan_cmake_detect_unix_libcxx",
    "conan_cmake_detect_vs_runtime",
    "conan_cmake_generate_conanfile",
    "conan_cmake_install",
    "conan_cmake_run",
    "conan_cmake_settings",
    "conan_cmake_setup_conanfile",
    "conan_config_install",
    "conan_load_buildinfo",
    "conan_parse_arguments",
    "conan_require",
    "conan_require_tool",
    "old_conan_cmake_install",
]
copy=["cmake/conan.cmake"]
add_values=[{attr="includes", values=["cmake/conan.cmake"]}]

[[rules]]
attrs=[
    "target_ev_messages",
    "target_proto_messages",
    "target_proto_plugin",
    "target_proto_outs",
    "target_proto_addincls",
]
copy=["cmake/protobuf.cmake"]
add_values=[{attr="includes", values=["cmake/protobuf.cmake"]}]

[[rules]]
attrs=[
    "add_global_library_for",
    "archive",
    "resources_file",
    "generate_enum_serilization",
    "copy",
    "target_joined_source",
    "target_ragel_lexers",
    "target_yasm_source",
    "vcs_info",
    "target_sources_custom",
    "use_export_script",
    "add_yunittest",
    "set_yunittest_property",   
]
copy=[
    "cmake/common.cmake",
    "build/scripts/export_script_gen.py",
    "build/scripts/split_unittest.py",
    "build/scripts/generate_vcs_info.py"
]
add_values=[{attr="includes", values=["cmake/common.cmake"]}]

[[rules]]
attrs=[
    "llvm_compile_c",
    "llvm_compile_cxx",
]
copy=["cmake/llvm-tools.cmake"]
add_values=[{attr="includes", values=["cmake/llvm-tools.cmake"]}]

[[rules]]
attrs=["curdir_masm_flags"]
copy=["cmake/masm.cmake"]
add_values=[{attr="includes", values=["cmake/masm.cmake"]}]

[[rules]]
attrs=["target_fbs_source"]
copy=["cmake/fbs.cmake"]
add_values=[{attr="includes", values=["cmake/fbs.cmake"]}]

[[rules]]
attrs=["add_fat_object"]
copy=["cmake/fat_object.cmake"]
add_values=[{attr="includes", values=["cmake/fat_objects.cmake"]}]

[[rules]]
attrs=["add_recursive_library"]
copy=[
    "cmake/recursive_library.cmake",
    "build/scripts/create_recursive_library_for_cmake.py"
]
add_values=[{attr="includes", values=["cmake/recursive_library.cmake"]}]

[[rules]]
attrs=["add_shared_library"]
copy=["cmake/shared_libs.cmake"]
add_values=[{attr="includes", values=["cmake/shared_libs.cmake"]}]

[[rules]]
attrs=[
    "target_cuda_flags",
    "target_cuda_cflags",
    "target_cuda_sources"
]
copy=["cmake/cuda.cmake"]
add_values=[{attr="includes", values=["cmake/cuda.cmake"]}]

[[rules]]
attrs=["target_rodata_sources"]
copy=["cmake/archive.cmake"]
add_values=[{attr="includes", values=["cmake/archive.cmake"]}]

[[rules]]
attrs=[
    "target_cython_sources",
    "target_cython_options",
    "target_cython_include_directories",
    "set_python_type_for_cython",
]
copy=["cmake/cython.cmake"]
add_values=[{attr="includes", values=["cmake/cython.cmake"]}]

[[rules]]
attrs=[
    "swig_add_library",
    "add_jar"
]
copy=[
    "cmake/swig.cmake",
    "build/scripts/gather_swig_java.cmake"
]
add_values=[{attr="includes", values=["cmake/swig.cmake"]}]
