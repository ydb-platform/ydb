
{% include '[generator]/disclaimer.jinja' -%}


cmake_minimum_required(VERSION 3.15)
if (POLICY CMP0132)
  cmake_policy(SET CMP0132 NEW)
endif()

project({{project_name}} LANGUAGES{% for value in project_language_list %} {{value}}{% endfor %})

set(BUILD_SHARED_LIBS Off)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_EXTENSIONS Off)
set({{project_name}}_MAX_LINK_JOBS 5 CACHE STRING "Maximum parallel link jobs for Ninja generator")
set_property(GLOBAL PROPERTY JOB_POOLS link_jobs=${{ '{' }}{{project_name}}_MAX_LINK_JOBS{{ '}' }})
set(CMAKE_JOB_POOL_LINK link_jobs)

list(APPEND CMAKE_MODULE_PATH ${{ '{' }}PROJECT_BINARY_DIR{{ '}' }} ${{ '{' }}PROJECT_SOURCE_DIR{{ '}' }}/cmake)
include_directories(${{ '{' }}PROJECT_SOURCE_DIR{{ '}' }} ${{ '{' }}PROJECT_BINARY_DIR{{ '}' }})
list(APPEND CMAKE_CTEST_ARGUMENTS "--output-on-failure")
enable_testing()

# Disable 'empty CUDA_ARCHITECTURES not allowed' warning
# Can't set it in cuda.cmake because of CMake policy subdirectory stack rules
cmake_policy(SET CMP0104 OLD)

include(cmake/global_flags.cmake)
include(cmake/global_vars.cmake)
{% if includes is defined -%}
{%     for incl in includes -%}
include({{ incl }})
{%     endfor -%}
{% endif -%}
{% if use_conan %}
if (CMAKE_CROSSCOMPILING)
  include(${PROJECT_BINARY_DIR}/conan_paths.cmake)
else()
  conan_cmake_autodetect(settings)
  conan_cmake_install(
    PATH_OR_REFERENCE ${PROJECT_SOURCE_DIR}
    INSTALL_FOLDER ${PROJECT_BINARY_DIR}
    BUILD missing
    REMOTE conancenter
    SETTINGS ${settings}
      ENV "CONAN_CMAKE_GENERATOR=${CMAKE_GENERATOR}"
      CONF "tools.cmake.cmaketoolchain:generator=${CMAKE_GENERATOR}"
  )
endif(){% endif %}

{%- if vanilla_protobuf %}

set(vanilla_protobuf "yes")
{%- endif %}

{%  set platforms_count = platform_names|length -%}
{%  if platforms_count > 0 -%}
{%      for i in range(platforms_count) -%}
{%          if i != 0 %}else{% endif %}if ({{ platforms[platform_names[i]] }})
  include(CMakeLists.{{ platform_names[i] }}.txt)
{%      endfor -%}
endif()
{%  endif %}
