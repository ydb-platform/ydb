{%- set javac_flags = [] -%}
{%- if target.javac.flags|length -%}
{#-     skip errorprone options -#}
{%-     set javac_flags = target.javac.flags|reject('startsWith', '-Xep') -%}
{%-     if javac_flags|length -%}
{%-         if (javac_flags|length == 1) and (javac_flags|first == '-parameters') -%}
{%-             set javac_flags = [] -%}
{%-         endif -%}
{%-     endif -%}
{%- endif -%}

{%- if javac_flags|length or has_errorprone %}

tasks.withType<JavaCompile> {
{%-     if javac_flags|length -%}
{%-         for javac_flag in javac_flags %}
    options.compilerArgs.add("{{ javac_flag }}")
{%-         endfor -%}
{%-     endif -%}

{%-     if has_errorprone -%}
{%-         set ep_checks = target.javac.flags|select('startsWith', '-Xep:') -%}
{%-         set ep_checkopts = target.javac.flags|select('startsWith', '-XepOpt:') -%}
{%-         set ep_props = target.javac.flags|reject('startsWith', '-XepOpt:')|select('startsWith', '-Xep') -%}
{%-         if ep_checks|length %}
    options.errorprone.checks.set(
        mapOf(
{%-             for ep_check in ep_checks -%}
{%-                 set key_and_value = split(ep_check|replace('-Xep:', ''), ':', 2) %}
            "{{ key_and_value[0] }}" to CheckSeverity.{{ key_and_value[1] }},
{%-             endfor %}
        )
    )
{%          endif -%}
{%-         if ep_checkopts|length -%}
{%-             for ep_checkopt in ep_checkopts -%}
{#-                 TODO Support NullAway -#}
{%-                 set key_and_value = split(ep_check|replace('-XepOpt:', '')|replace('NullAway:', ''), '=', 2) %}
            options.errorprone.option("{{ key_and_value[0] }}", "{{ key_and_value[1] }}")
{%-             endfor -%}
{%-         endif -%}
{%-         if ep_props|length -%}
{%-             for ep_prop in ep_props -%}
{%-                 set ep_prop = ep_prop|replace('-Xep', '') -%}
{%-                 if ep_prop == 'DisableAllChecks' %}
    options.errorprone.disableAllChecks.set(true)
{%-                 elif ep_prop == 'DisableAllWarnings' %}
    options.errorprone.disableAllWarnings.set(true)
{%-                 elif ep_prop == 'AllErrorsAsWarnings' %}
    options.errorprone.allErrorsAsWarnings.set(true)
{%-                 elif ep_prop == 'DisabledChecksAsWarnings' %}
    options.errorprone.disabledChecksAsWarnings.set(true)
{%-                 elif ep_prop == 'DisableWarningsInGeneratedCode' %}
    options.errorprone.disableWarningsInGeneratedCode.set(true)
{%-                 elif ep_prop == 'IgnoreUnknownCheckNames' %}
    options.errorprone.ignoreUnknownCheckNames.set(true)
{%-                 elif ep_prop == 'IgnoreSuppressionAnnotations' %}
    options.errorprone.ignoreSuppressionAnnotations.set(true)
{%-                 elif ep_prop == 'CompilingTestOnlyCode' %}
    options.errorprone.isCompilingTestOnlyCode.set(true)
{%-                 elif ep_prop|replace('ExcludedPaths:', '') != ep_prop %}
    options.errorprone.excludedPaths.set("{{ ep_prop|replace('ExcludedPaths:', '') }}")
{%-                 endif -%}
{%-             endfor -%}
{%-         endif -%}
{%-     endif %}
}
{%  endif -%}
