{%- if prepareProtosTask %}

val prepareMainProtos = tasks.register<Copy>("prepareMainProtos") {
{%-     if target.proto_files|length %}
    from("$arcadia_root") {
{#- list of all current project proto files -#}
{%-         for proto in target.proto_files %}
        include("{{ proto }}")
{%-         endfor %}
    }
{%      endif -%}
{%-     if target.runs|length or target.custom_runs|length %}
    from("$baseBuildDir") {
{%-         for run in target.runs -%}
{%-             for out in run.out %}
        include({{ PatchGeneratedProto(out, true) }})
{%-             endfor -%}
{%-             for out_dir in run.out_dir %}
        include({{ PatchGeneratedProto(out_dir, true) }} + "/**/*.proto")
{%-             endfor -%}
{%-         endfor -%}
{%-         for custom_run in target.custom_runs -%}
{%-             for out in custom_run.outputs %}
        include({{ PatchGeneratedProto(out, true) }})
{%-             endfor -%}
{%-         endfor %}
    }
{%      endif -%}
    into(mainProtosDir)
}
{%- endif -%}

{%- if extractLibrariesProtosTask %}

val extractMainLibrariesProtos = tasks.register<Copy>("extractMainLibrariesProtos") {
{%- set root_libraries = libraries|rejectattr('proto_namespace') -%}
{%- set ns_libraries = libraries|selectattr('proto_namespace') -%}
{%- if root_libraries|length %}
    from("$arcadia_root") {
{%-     for library in root_libraries -%}
{%-         set path_and_jar = rsplit(library.jar, '/', 2) %}
        include("{{ path_and_jar[0] }}/**/*.proto")
{%-     endfor %}
    }
{%- endif -%}
{%- if ns_libraries|length -%}
{%-     for library in ns_libraries -%}
{%-         set path_and_jar = rsplit(library.jar, '/', 2) -%}
{%-         set path = "#R/" + path_and_jar[0] -%}
{%-         set path = path|replace("#R/" + library.proto_namespace + "/", "")|replace("#R/", "") %}
    from("$arcadia_root/{{ library.proto_namespace }}") {
        include("{{ path }}/**/*.proto")
    }
{%-     endfor -%}
{%- endif %}
    into(mainExtractedIncludeProtosDir)
}
{%- endif %}

afterEvaluate {
{%- if prepareProtosTask %}
    tasks.getByName("extractProto").dependsOn(prepareMainProtos)
{%- endif %}
{%- if extractLibrariesProtosTask %}
    tasks.getByName("extractProto").dependsOn(extractMainLibrariesProtos)
{%- endif %}
}

tasks.getByName("sourcesJar").dependsOn("generateProto")
{%- if with_kotlin %}
tasks.getByName("compileKotlin").dependsOn("generateProto")
{%- endif %}
