{%- if target.custom_runs|length -%}
{%-     for custom_run in target.custom_runs %}

val runProg{{ loop.index }} = task<Exec>("runProgram{{ loop.index }}") {
    group = "build"
    description = "Code generation by run custom program"

{%-        if custom_run.cwd %}
    workingDir = file({{ PatchRoots(custom_run.cwd) }})
{%-        endif %}

    commandLine(
{%-        for arg in custom_run.command -%}
{%-            if custom_run.depends|select("eq", arg)|length -%}
{{ PatchRoots(arg, true) }}
{%-            elif proto_template -%}
{#- generated proto put to prepared proto dir -#}
{{ PatchGeneratedProto(arg) }}
{%-            else -%}
{{ PatchRoots(arg) }}
{%-            endif -%}
{%-            if not loop.last %}, {% endif -%}
{%-        endfor -%})

{%-        if custom_run.depends|length -%}
{%-            for depend in custom_run.depends|unique %}
    inputs.files({{ PatchRoots(depend, true) }})
{%             endfor -%}
{%-        endif -%}

{%-        if custom_run.outputs|length -%}
{%-            for out in custom_run.outputs|unique %}
{%-                if proto_template %}
    outputs.files({{ PatchGeneratedProto(out) }})
{%-                else %}
    outputs.files({{ PatchRoots(out) }})
{%-                endif -%}
{%-            endfor -%}
{%-        endif -%}
{#-
    Не использованы атрибуты
    custom_run-env="list"
#}
}

{%- if proto_template %}

tasks.getByName("extractMainLibrariesProtos").dependsOn(runProg{{ loop.index }})
{% else %}

tasks.getByName("sourcesJar").dependsOn(runProg{{ loop.index }})
{% endif -%}

tasks.compileJava.configure {
    dependsOn(runProg{{ loop.index }})
}
{%-        if with_kotlin %}

tasks.compileKotlin.configure {
    dependsOn(runProg{{ loop.index }})
}
{%-        endif %}
{%     endfor -%}
{% endif -%}
