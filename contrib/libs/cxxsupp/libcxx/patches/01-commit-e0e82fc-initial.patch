diff --git a/include/__config b/include/__config
index adff13e..51463fc 100644
--- a/include/__config
+++ b/include/__config
@@ -127,7 +127,12 @@
 // Previously libc++ used "unsigned int" exclusively.
 #    define _LIBCPP_ABI_VARIANT_INDEX_TYPE_OPTIMIZATION
 // Unstable attempt to provide a more optimized std::function
-#    define _LIBCPP_ABI_OPTIMIZED_FUNCTION
+#    ifdef __EMSCRIPTEN__
+// XXX EMSCRIPTEN https://github.com/emscripten-core/emscripten/issues/11022
+// #    define _LIBCPP_ABI_OPTIMIZED_FUNCTION
+#    else
+#      define _LIBCPP_ABI_OPTIMIZED_FUNCTION
+#    endif
 // All the regex constants must be distinct and nonzero.
 #    define _LIBCPP_ABI_REGEX_CONSTANTS_NONZERO
 // Re-worked external template instantiations for std::string with a focus on
diff --git a/include/typeinfo b/include/typeinfo
index 39a9067..ed89a4f 100644
--- a/include/typeinfo
+++ b/include/typeinfo
@@ -98,7 +98,13 @@ public:
 
   size_t hash_code() const _NOEXCEPT;
 
-  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool operator==(const type_info& __arg) const _NOEXCEPT {
+#    ifdef __EMSCRIPTEN__
+  // XXX Emscripten: adding `always_inline` fixes
+  // https://github.com/emscripten-core/emscripten/issues/13330
+  __attribute__((always_inline))
+#    endif
+  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool
+  operator==(const type_info& __arg) const _NOEXCEPT {
     // When evaluated in a constant expression, both type infos simply can't come
     // from different translation units, so it is sufficient to compare their addresses.
     if (__libcpp_is_constant_evaluated()) {
diff --git a/src/filesystem/operations.cpp b/src/filesystem/operations.cpp
index 6bee340..1b9f260 100644
--- a/src/filesystem/operations.cpp
+++ b/src/filesystem/operations.cpp
@@ -37,7 +37,7 @@
 #include <fcntl.h> /* values for fchmodat */
 #include <time.h>
 
-#if __has_include(<sys/sendfile.h>)
+#if __has_include(<sys/sendfile.h>) && !defined(__EMSCRIPTEN__)
 #  include <sys/sendfile.h>
 #  define _LIBCPP_FILESYSTEM_USE_SENDFILE
 #elif defined(__APPLE__) || __has_include(<copyfile.h>)
diff --git a/src/new.cpp b/src/new.cpp
index 033bba5..e9a4adc 100644
--- a/src/new.cpp
+++ b/src/new.cpp
@@ -41,6 +41,16 @@ _LIBCPP_WEAK void* operator new(std::size_t size) _THROW_BAD_ALLOC {
 #  ifndef _LIBCPP_HAS_NO_EXCEPTIONS
   if (p == nullptr)
     throw std::bad_alloc();
+#  else
+#    ifdef __EMSCRIPTEN__
+  if (p == nullptr)
+    // Abort here so that when exceptions are disabled, we do not just
+    // return 0 when malloc returns 0.
+    // We could also do this with set_new_handler, but that adds a
+    // global constructor and a table entry, overhead that we can avoid
+    // by doing it this way.
+    abort();
+#    endif
 #  endif
   return p;
 }
diff --git a/src/support/runtime/exception_fallback.ipp b/src/support/runtime/exception_fallback.ipp
index 18ff4b8..d54a9a5 100644
--- a/src/support/runtime/exception_fallback.ipp
+++ b/src/support/runtime/exception_fallback.ipp
@@ -33,6 +33,7 @@ terminate_handler set_terminate(terminate_handler func) noexcept {
 
 terminate_handler get_terminate() noexcept { return __libcpp_atomic_load(&__terminate_handler); }
 
+#ifndef __EMSCRIPTEN__ // We provide this in JS
 _LIBCPP_NORETURN void terminate() noexcept {
 #ifndef _LIBCPP_HAS_NO_EXCEPTIONS
   try {
@@ -49,7 +50,9 @@ _LIBCPP_NORETURN void terminate() noexcept {
   }
 #endif // _LIBCPP_HAS_NO_EXCEPTIONS
 }
+#endif // !__EMSCRIPTEN__
 
+#if !defined(__EMSCRIPTEN__)
 bool uncaught_exception() noexcept { return uncaught_exceptions() > 0; }
 
 int uncaught_exceptions() noexcept {
@@ -57,6 +60,7 @@ int uncaught_exceptions() noexcept {
   fprintf(stderr, "uncaught_exceptions not yet implemented\n");
   ::abort();
 }
+#endif // !__EMSCRIPTEN__
 
 exception::~exception() noexcept {}
 
