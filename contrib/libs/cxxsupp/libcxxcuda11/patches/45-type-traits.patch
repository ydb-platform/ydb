diff --git a/include/__type_traits/enable_if.h b/include/__type_traits/enable_if.h
index 77da962..c1d8896 100644
--- a/include/__type_traits/enable_if.h
+++ b/include/__type_traits/enable_if.h
@@ -32,6 +32,12 @@ template <bool _Bp, class _Tp = void>
 using enable_if_t = typename enable_if<_Bp, _Tp>::type;
 #endif
 
+// CUDA headers use libc++ internals.
+#ifdef __CUDACC__
+template <bool _Cond, class _Ret = void>
+using __lazy_enable_if _LIBCPP_NODEBUG = __enable_if_t<_Cond, _Ret>;
+#endif
+
 _LIBCPP_END_NAMESPACE_STD
 
 #endif // _LIBCPP___TYPE_TRAITS_ENABLE_IF_H
diff --git a/include/__type_traits/extent.h b/include/__type_traits/extent.h
index bab03fe..8f281b3 100644
--- a/include/__type_traits/extent.h
+++ b/include/__type_traits/extent.h
@@ -19,7 +19,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__array_extent)
+#if __has_builtin(__array_extent) && !defined(__CUDACC__)
 
 template <class _Tp, size_t _Dim = 0>
 struct _LIBCPP_TEMPLATE_VIS extent : integral_constant<size_t, __array_extent(_Tp, _Dim)> {};
diff --git a/include/__type_traits/is_compound.h b/include/__type_traits/is_compound.h
index cd208ce..60cce34 100644
--- a/include/__type_traits/is_compound.h
+++ b/include/__type_traits/is_compound.h
@@ -19,7 +19,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_compound)
+#if __has_builtin(__is_compound) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_compound : _BoolConstant<__is_compound(_Tp)> {};
diff --git a/include/__type_traits/is_const.h b/include/__type_traits/is_const.h
index 47ef708..0aeceec 100644
--- a/include/__type_traits/is_const.h
+++ b/include/__type_traits/is_const.h
@@ -18,7 +18,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_const)
+#if __has_builtin(__is_const) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_const : _BoolConstant<__is_const(_Tp)> {};
diff --git a/include/__type_traits/is_constant_evaluated.h b/include/__type_traits/is_constant_evaluated.h
index d7af462..713ccfc 100644
--- a/include/__type_traits/is_constant_evaluated.h
+++ b/include/__type_traits/is_constant_evaluated.h
@@ -17,6 +17,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
+#ifndef _LIBCPP_HAS_NO_BUILTIN_IS_CONSTANT_EVALUATED
 #if _LIBCPP_STD_VER >= 20
 _LIBCPP_INLINE_VISIBILITY inline constexpr bool is_constant_evaluated() noexcept {
   return __builtin_is_constant_evaluated();
@@ -26,6 +27,10 @@ _LIBCPP_INLINE_VISIBILITY inline constexpr bool is_constant_evaluated() noexcept
 _LIBCPP_HIDE_FROM_ABI inline _LIBCPP_CONSTEXPR bool __libcpp_is_constant_evaluated() _NOEXCEPT {
   return __builtin_is_constant_evaluated();
 }
+#else
+inline _LIBCPP_CONSTEXPR
+bool __libcpp_is_constant_evaluated() _NOEXCEPT { return false; }
+#endif // !_LIBCPP_HAS_NO_BUILTIN_IS_CONSTANT_EVALUATED
 
 _LIBCPP_END_NAMESPACE_STD
 
diff --git a/include/__type_traits/is_destructible.h b/include/__type_traits/is_destructible.h
index 3248b07..b3e9bfe 100644
--- a/include/__type_traits/is_destructible.h
+++ b/include/__type_traits/is_destructible.h
@@ -22,7 +22,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_destructible)
+#if __has_builtin(__is_destructible) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_destructible : _BoolConstant<__is_destructible(_Tp)> {};
diff --git a/include/__type_traits/is_function.h b/include/__type_traits/is_function.h
index f09f19a..580d1b6 100644
--- a/include/__type_traits/is_function.h
+++ b/include/__type_traits/is_function.h
@@ -20,7 +20,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_function)
+#if __has_builtin(__is_function) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_function : integral_constant<bool, __is_function(_Tp)> {};
diff --git a/include/__type_traits/is_fundamental.h b/include/__type_traits/is_fundamental.h
index 57206e0..417739f 100644
--- a/include/__type_traits/is_fundamental.h
+++ b/include/__type_traits/is_fundamental.h
@@ -20,7 +20,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_fundamental)
+#if __has_builtin(__is_fundamental) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_fundamental : _BoolConstant<__is_fundamental(_Tp)> {};
diff --git a/include/__type_traits/is_integral.h b/include/__type_traits/is_integral.h
index 2696988..a099f7f 100644
--- a/include/__type_traits/is_integral.h
+++ b/include/__type_traits/is_integral.h
@@ -47,7 +47,7 @@ template <>          struct __libcpp_is_integral<__uint128_t>        { enum { va
 #endif
 // clang-format on
 
-#if __has_builtin(__is_integral)
+#if __has_builtin(__is_integral) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_integral : _BoolConstant<__is_integral(_Tp)> {};
diff --git a/include/__type_traits/is_member_function_pointer.h b/include/__type_traits/is_member_function_pointer.h
index 11c8a00..af2c3e2 100644
--- a/include/__type_traits/is_member_function_pointer.h
+++ b/include/__type_traits/is_member_function_pointer.h
@@ -34,7 +34,7 @@ struct __libcpp_is_member_pointer<_Tp _Up::*> {
   };
 };
 
-#if __has_builtin(__is_member_function_pointer)
+#if __has_builtin(__is_member_function_pointer) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_member_function_pointer : _BoolConstant<__is_member_function_pointer(_Tp)> {};
diff --git a/include/__type_traits/is_member_object_pointer.h b/include/__type_traits/is_member_object_pointer.h
index 9141f9d..645488e 100644
--- a/include/__type_traits/is_member_object_pointer.h
+++ b/include/__type_traits/is_member_object_pointer.h
@@ -18,7 +18,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_member_object_pointer)
+#if __has_builtin(__is_member_object_pointer) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_member_object_pointer : _BoolConstant<__is_member_object_pointer(_Tp)> {};
diff --git a/include/__type_traits/is_member_pointer.h b/include/__type_traits/is_member_pointer.h
index 4ca01d1..429f2af 100644
--- a/include/__type_traits/is_member_pointer.h
+++ b/include/__type_traits/is_member_pointer.h
@@ -19,7 +19,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_member_pointer)
+#if __has_builtin(__is_member_pointer) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_member_pointer : _BoolConstant<__is_member_pointer(_Tp)> {};
diff --git a/include/__type_traits/is_nothrow_constructible.h b/include/__type_traits/is_nothrow_constructible.h
index 4949062..456c760 100644
--- a/include/__type_traits/is_nothrow_constructible.h
+++ b/include/__type_traits/is_nothrow_constructible.h
@@ -23,7 +23,7 @@
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 // GCC is disabled due to https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106611
-#if __has_builtin(__is_nothrow_constructible) && !defined(_LIBCPP_COMPILER_GCC)
+#if __has_builtin(__is_nothrow_constructible) && !defined(_LIBCPP_COMPILER_GCC) && !defined(__CUDACC__)
 
 template < class _Tp, class... _Args>
 struct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible
diff --git a/include/__type_traits/is_object.h b/include/__type_traits/is_object.h
index 5ac1d85..cdfe483 100644
--- a/include/__type_traits/is_object.h
+++ b/include/__type_traits/is_object.h
@@ -22,7 +22,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_object)
+#if __has_builtin(__is_object) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_object : _BoolConstant<__is_object(_Tp)> {};
diff --git a/include/__type_traits/is_pointer.h b/include/__type_traits/is_pointer.h
index 38eb799..5b52619 100644
--- a/include/__type_traits/is_pointer.h
+++ b/include/__type_traits/is_pointer.h
@@ -19,7 +19,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_pointer)
+#if __has_builtin(__is_pointer) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_pointer : _BoolConstant<__is_pointer(_Tp)> {};
diff --git a/include/__type_traits/is_reference.h b/include/__type_traits/is_reference.h
index 42853d4..277300b 100644
--- a/include/__type_traits/is_reference.h
+++ b/include/__type_traits/is_reference.h
@@ -18,7 +18,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_lvalue_reference) && __has_builtin(__is_rvalue_reference) && __has_builtin(__is_reference)
+#if __has_builtin(__is_lvalue_reference) && __has_builtin(__is_rvalue_reference) && __has_builtin(__is_reference) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference : _BoolConstant<__is_lvalue_reference(_Tp)> {};
diff --git a/include/__type_traits/is_same.h b/include/__type_traits/is_same.h
index 9561b7b..00a191a 100644
--- a/include/__type_traits/is_same.h
+++ b/include/__type_traits/is_same.h
@@ -18,6 +18,8 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
+#if __has_keyword(__is_same) && !defined(__CUDACC__)
+
 template <class _Tp, class _Up>
 struct _LIBCPP_TEMPLATE_VIS is_same : _BoolConstant<__is_same(_Tp, _Up)> {};
 
@@ -26,6 +28,17 @@ template <class _Tp, class _Up>
 inline constexpr bool is_same_v = __is_same(_Tp, _Up);
 #endif
 
+#else
+
+template <class _Tp, class _Up> struct _LIBCPP_TEMPLATE_VIS is_same           : public false_type {};
+template <class _Tp>            struct _LIBCPP_TEMPLATE_VIS is_same<_Tp, _Tp> : public true_type {};
+
+#if _LIBCPP_STD_VER > 14
+template <class _Tp, class _Up>
+inline constexpr bool is_same_v = is_same<_Tp, _Up>::value;
+#endif
+
+#endif // __is_same
 // _IsSame<T,U> has the same effect as is_same<T,U> but instantiates fewer types:
 // is_same<A,B> and is_same<C,D> are guaranteed to be different types, but
 // _IsSame<A,B> and _IsSame<C,D> are the same type (namely, false_type).
@@ -34,10 +47,23 @@ inline constexpr bool is_same_v = __is_same(_Tp, _Up);
 // (such as in a dependent return type).
 
 template <class _Tp, class _Up>
-using _IsSame = _BoolConstant<__is_same(_Tp, _Up)>;
+using _IsSame = _BoolConstant<
+#if defined(__clang__) && !defined(__CUDACC__)
+    __is_same(_Tp, _Up)
+#else
+    is_same<_Tp, _Up>::value
+#endif
+>;
 
 template <class _Tp, class _Up>
-using _IsNotSame = _BoolConstant<!__is_same(_Tp, _Up)>;
+using _IsNotSame = _BoolConstant<
+#if defined(__clang__) && !defined(__CUDACC__)
+    !__is_same(_Tp, _Up)
+#else
+    !is_same<_Tp, _Up>::value
+#endif
+>;
+
 
 _LIBCPP_END_NAMESPACE_STD
 
diff --git a/include/__type_traits/is_scalar.h b/include/__type_traits/is_scalar.h
index 15f1c71..e6f8e87 100644
--- a/include/__type_traits/is_scalar.h
+++ b/include/__type_traits/is_scalar.h
@@ -23,7 +23,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_scalar)
+#if __has_builtin(__is_scalar) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_scalar : _BoolConstant<__is_scalar(_Tp)> {};
diff --git a/include/__type_traits/is_signed.h b/include/__type_traits/is_signed.h
index fd6f93e..2f355e5 100644
--- a/include/__type_traits/is_signed.h
+++ b/include/__type_traits/is_signed.h
@@ -20,7 +20,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_signed)
+#if __has_builtin(__is_signed) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_signed : _BoolConstant<__is_signed(_Tp)> {};
diff --git a/include/__type_traits/is_trivially_destructible.h b/include/__type_traits/is_trivially_destructible.h
index 5f9652f..e50819f 100644
--- a/include/__type_traits/is_trivially_destructible.h
+++ b/include/__type_traits/is_trivially_destructible.h
@@ -19,7 +19,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_trivially_destructible)
+#if __has_builtin(__is_trivially_destructible) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible
diff --git a/include/__type_traits/is_unsigned.h b/include/__type_traits/is_unsigned.h
index 48c5751..44f6152 100644
--- a/include/__type_traits/is_unsigned.h
+++ b/include/__type_traits/is_unsigned.h
@@ -20,7 +20,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_unsigned)
+#if __has_builtin(__is_unsigned) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_unsigned : _BoolConstant<__is_unsigned(_Tp)> {};
diff --git a/include/__type_traits/is_void.h b/include/__type_traits/is_void.h
index 4c27060..69eea76 100644
--- a/include/__type_traits/is_void.h
+++ b/include/__type_traits/is_void.h
@@ -20,7 +20,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_void)
+#if __has_builtin(__is_void) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_void : _BoolConstant<__is_void(_Tp)> {};
diff --git a/include/__type_traits/is_volatile.h b/include/__type_traits/is_volatile.h
index 87960a8..cefadcb 100644
--- a/include/__type_traits/is_volatile.h
+++ b/include/__type_traits/is_volatile.h
@@ -18,7 +18,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__is_volatile)
+#if __has_builtin(__is_volatile) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_volatile : _BoolConstant<__is_volatile(_Tp)> {};
diff --git a/include/__type_traits/remove_cvref.h b/include/__type_traits/remove_cvref.h
index e8e8745..3ec17b4 100644
--- a/include/__type_traits/remove_cvref.h
+++ b/include/__type_traits/remove_cvref.h
@@ -20,7 +20,7 @@
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
-#if __has_builtin(__remove_cvref) && !defined(_LIBCPP_COMPILER_GCC)
+#if __has_builtin(__remove_cvref) && !defined(_LIBCPP_COMPILER_GCC) && !defined(__CUDACC__)
 template <class _Tp>
 using __remove_cvref_t _LIBCPP_NODEBUG = __remove_cvref(_Tp);
 #else
