diff --git a/include/deque b/include/deque
index b0fd148..a4ab230 100644
--- a/include/deque
+++ b/include/deque
@@ -289,7 +289,9 @@ move_backward(__deque_iterator<_V1, _P1, _R1, _M1, _D1, _B1> __f,
 
 template <class _ValueType, class _DiffType>
 struct __deque_block_size {
-  static const _DiffType value = sizeof(_ValueType) < 256 ? 4096 / sizeof(_ValueType) : 16;
+  static const _DiffType __buf_size = 64 * sizeof(void*);
+  static const _DiffType value = (__buf_size / sizeof(_ValueType)) > 2 ? (__buf_size / sizeof(_ValueType)) : 2;
+  //static const _DiffType value = sizeof(_ValueType) < 256 ? 4096 / sizeof(_ValueType) : 16;
 };
 
 template <class _ValueType, class _Pointer, class _Reference, class _MapPointer,
@@ -1465,7 +1467,7 @@ public:
         _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||
                    __is_nothrow_swappable<allocator_type>::value);
 #endif
-    _LIBCPP_INLINE_VISIBILITY
+    _LIBCPP_REINITIALIZES_OBJECT _LIBCPP_INLINE_VISIBILITY
     void clear() _NOEXCEPT;
 
     _LIBCPP_INLINE_VISIBILITY
@@ -2413,7 +2415,7 @@ void
 deque<_Tp, _Allocator>::__add_front_capacity()
 {
     allocator_type& __a = __base::__alloc();
-    if (__back_spare() >= __base::__block_size)
+    if (__back_spare() >= size_type(__base::__block_size))
     {
         __base::__start_ += __base::__block_size;
         pointer __pt = __base::__map_.back();
@@ -2558,7 +2560,7 @@ void
 deque<_Tp, _Allocator>::__add_back_capacity()
 {
     allocator_type& __a = __base::__alloc();
-    if (__front_spare() >= __base::__block_size)
+    if (__front_spare() >= size_type(__base::__block_size))
     {
         __base::__start_ -= __base::__block_size;
         pointer __pt = __base::__map_.front();
@@ -2946,6 +2948,7 @@ deque<_Tp, _Allocator>::swap(deque& __c)
 }
 
 template <class _Tp, class _Allocator>
+_LIBCPP_REINITIALIZES_OBJECT
 inline
 void
 deque<_Tp, _Allocator>::clear() _NOEXCEPT
