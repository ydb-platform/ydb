diff --git a/include/type_traits b/include/type_traits
index 86bc5fa..df31e76 100644
--- a/include/type_traits
+++ b/include/type_traits
@@ -424,6 +424,10 @@ namespace std
 #if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
 #  pragma GCC system_header
 #endif
+#ifdef _LIBCPP_COMPILER_MSVC
+#pragma warning(push)
+#pragma warning(disable: 4296)
+#endif
 
 _LIBCPP_BEGIN_NAMESPACE_STD
 
@@ -484,6 +488,8 @@ struct _MetaBase<true> {
   using _SecondImpl _LIBCPP_NODEBUG = _Second;
   template <class _Result, class _First, class ..._Rest>
   using _OrImpl _LIBCPP_NODEBUG = typename _MetaBase<_First::value != true && sizeof...(_Rest) != 0>::template _OrImpl<_First, _Rest...>;
+  template <class _Result, class _First, class ..._Rest>
+  using _AndImpl _LIBCPP_NODEBUG = typename _MetaBase<_First::value == true && sizeof...(_Rest) != 0>::template _AndImpl<_First, _Rest...>;
 };
 
 template <>
@@ -494,25 +500,45 @@ struct _MetaBase<false> {
   using _SelectApplyImpl _LIBCPP_NODEBUG = _SecondFn<_Args...>;
   template <class _Result, class ...>
   using _OrImpl _LIBCPP_NODEBUG = _Result;
+  template <class _Result, class ...>
+  using _AndImpl _LIBCPP_NODEBUG = _Result;
 };
+// Workaround for MSVC. Sometimes compiler thinks that sizeof...(Type) is parameter pack rather than the number.
+// So it doesn't allow sizeof...(Type) in expression that goes into the boolean template parameter of _MetaBase.
+// This simple wrapper allows us to hide sizeof... from the compiler.
+template<class... _Pack>
+struct _Sizeof {
+    static constexpr size_t value = sizeof...(_Pack);
+};
+// CUDA headers use libc++ internals.
+#ifdef __CUDACC__
+template <bool _Cond, class _Ret = void>
+using __lazy_enable_if _LIBCPP_NODEBUG = __enable_if_t<_Cond, _Ret>;
+#endif
 template <bool _Cond, class _IfRes, class _ElseRes>
 using _If _LIBCPP_NODEBUG = typename _MetaBase<_Cond>::template _SelectImpl<_IfRes, _ElseRes>;
 template <class ..._Rest>
-using _Or _LIBCPP_NODEBUG = typename _MetaBase< sizeof...(_Rest) != 0 >::template _OrImpl<false_type, _Rest...>;
+using _Or _LIBCPP_NODEBUG = typename _MetaBase< _Sizeof<_Rest...>::value != 0 >::template _OrImpl<false_type, _Rest...>;
 template <class _Pred>
 struct _Not : _BoolConstant<!_Pred::value> {};
 template <class ..._Args>
-using _FirstType _LIBCPP_NODEBUG = typename _MetaBase<(sizeof...(_Args) >= 1)>::template _FirstImpl<_Args...>;
+using _FirstType _LIBCPP_NODEBUG = typename _MetaBase<(_Sizeof<_Args...>::value >= 1)>::template _FirstImpl<_Args...>;
 template <class ..._Args>
-using _SecondType _LIBCPP_NODEBUG = typename _MetaBase<(sizeof...(_Args) >= 2)>::template _SecondImpl<_Args...>;
+using _SecondType _LIBCPP_NODEBUG = typename _MetaBase<(_Sizeof<_Args...>::value >= 2)>::template _SecondImpl<_Args...>;
 
+// fold-based implementation fails on multiple compilers.
+#if 1
+template <class ..._Rest>
+using _And _LIBCPP_NODEBUG = typename _MetaBase< _Sizeof<_Rest...>::value != 0 >::template _AndImpl<true_type, _Rest...>;
+#else
 template <class ...> using __expand_to_true = true_type;
 template <class ..._Pred>
-__expand_to_true<__enable_if_t<_Pred::value>...> __and_helper(int);
+__expand_to_true<__enable_if_t<std::bool_constant<_Pred::value>::value>...> __and_helper(int);
 template <class ...>
 false_type __and_helper(...);
 template <class ..._Pred>
-using _And _LIBCPP_NODEBUG = decltype(__and_helper<_Pred...>(0));
+using _And _LIBCPP_NODEBUG = decltype(__and_helper<std::bool_constant<_Pred::value>...>(0));
+#endif
 
 template <template <class...> class _Func, class ..._Args>
 struct _Lazy : _Func<_Args...> {};
@@ -551,6 +577,8 @@ template <bool _Bp, class _If, class _Then> using conditional_t = typename condi
 
 // is_same
 
+#if __has_keyword(__is_same) && !defined(__CUDACC__)
+
 template <class _Tp, class _Up>
 struct _LIBCPP_TEMPLATE_VIS is_same : _BoolConstant<__is_same(_Tp, _Up)> { };
 
@@ -559,6 +587,17 @@ template <class _Tp, class _Up>
 inline constexpr bool is_same_v = __is_same(_Tp, _Up);
 #endif
 
+#else
+
+template <class _Tp, class _Up> struct _LIBCPP_TEMPLATE_VIS is_same           : public false_type {};
+template <class _Tp>            struct _LIBCPP_TEMPLATE_VIS is_same<_Tp, _Tp> : public true_type {};
+
+#if _LIBCPP_STD_VER > 14
+template <class _Tp, class _Up>
+inline constexpr bool is_same_v = is_same<_Tp, _Up>::value;
+#endif
+
+#endif // __is_same
 // _IsSame<T,U> has the same effect as is_same<T,U> but instantiates fewer types:
 // is_same<A,B> and is_same<C,D> are guaranteed to be different types, but
 // _IsSame<A,B> and _IsSame<C,D> are the same type (namely, false_type).
@@ -567,10 +606,23 @@ inline constexpr bool is_same_v = __is_same(_Tp, _Up);
 // (such as in a dependent return type).
 
 template <class _Tp, class _Up>
-using _IsSame = _BoolConstant<__is_same(_Tp, _Up)>;
+using _IsSame = _BoolConstant<
+#if defined(__clang__) && !defined(__CUDACC__)
+    __is_same(_Tp, _Up)
+#else
+    is_same<_Tp, _Up>::value
+#endif
+>;
 
 template <class _Tp, class _Up>
-using _IsNotSame = _BoolConstant<!__is_same(_Tp, _Up)>;
+using _IsNotSame = _BoolConstant<
+#if defined(__clang__) && !defined(__CUDACC__)
+    !__is_same(_Tp, _Up)
+#else
+    !is_same<_Tp, _Up>::value
+#endif
+>;
+
 
 template <class _Tp>
 using __test_for_primary_template = __enable_if_t<
@@ -587,7 +639,7 @@ struct __two {char __lx[2];};
 
 // is_const
 
-#if __has_keyword(__is_const)
+#if __has_keyword(__is_const) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_const : _BoolConstant<__is_const(_Tp)> { };
@@ -611,7 +663,7 @@ inline constexpr bool is_const_v = is_const<_Tp>::value;
 
 // is_volatile
 
-#if __has_keyword(__is_volatile)
+#if __has_keyword(__is_volatile) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_volatile : _BoolConstant<__is_volatile(_Tp)> { };
@@ -659,7 +711,7 @@ template <class _Tp> using remove_cv_t = typename remove_cv<_Tp>::type;
 
 // is_void
 
-#if __has_keyword(__is_void)
+#if __has_keyword(__is_void) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_void : _BoolConstant<__is_void(_Tp)> { };
@@ -701,7 +753,7 @@ inline constexpr bool is_null_pointer_v = is_null_pointer<_Tp>::value;
 
 // is_integral
 
-#if __has_keyword(__is_integral)
+#if __has_keyword(__is_integral) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_integral : _BoolConstant<__is_integral(_Tp)> { };
@@ -766,7 +818,7 @@ inline constexpr bool is_floating_point_v = is_floating_point<_Tp>::value;
 
 // is_array
 
-#if __has_keyword(__is_array)
+#if __has_keyword(__is_array) && !defined(__CUDACC__)
 
 template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_array : _BoolConstant<__is_array(_Tp)> { };
@@ -796,7 +848,8 @@ inline constexpr bool is_array_v = is_array<_Tp>::value;
 
 // Before AppleClang 12.0.5, __is_pointer didn't work for Objective-C types.
 #if __has_keyword(__is_pointer) &&                                             \
-    !(defined(_LIBCPP_APPLE_CLANG_VER) && _LIBCPP_APPLE_CLANG_VER < 1205)
+    !(defined(_LIBCPP_APPLE_CLANG_VER) && _LIBCPP_APPLE_CLANG_VER < 1205) &&   \
+    !defined(__CUDACC__)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_pointer : _BoolConstant<__is_pointer(_Tp)> { };
@@ -833,7 +886,7 @@ inline constexpr bool is_pointer_v = is_pointer<_Tp>::value;
 
 #if __has_keyword(__is_lvalue_reference) && \
     __has_keyword(__is_rvalue_reference) && \
-    __has_keyword(__is_reference)
+    __has_keyword(__is_reference) && !defined(__CUDACC__)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference : _BoolConstant<__is_lvalue_reference(_Tp)> { };
@@ -925,15 +978,24 @@ inline constexpr bool is_class_v = is_class<_Tp>::value;
 
 // is_function
 
+#ifdef _LIBCPP_COMPILER_MSVC
+#pragma warning(push)
+#pragma warning(disable: 4180)
+#endif
+
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_function
     : public _BoolConstant<
-#ifdef __clang__
+#if defined(__clang__) && !defined(__CUDACC__)
     __is_function(_Tp)
 #else
  !(is_reference<_Tp>::value || is_const<const _Tp>::value)
 #endif
     > {};
 
+#ifdef _LIBCPP_COMPILER_MSVC
+#pragma warning(pop)
+#endif
+
 
 #if _LIBCPP_STD_VER > 14
 template <class _Tp>
@@ -955,7 +1017,7 @@ template <class _Tp, class _Up> struct __libcpp_is_member_pointer<_Tp _Up::*> {
   };
 };
 
-#if __has_keyword(__is_member_function_pointer)
+#if __has_keyword(__is_member_function_pointer) && !defined(__CUDACC__)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_member_function_pointer
@@ -980,7 +1042,7 @@ inline constexpr bool is_member_function_pointer_v = is_member_function_pointer<
 
 // is_member_pointer
 
-#if __has_keyword(__is_member_pointer)
+#if __has_keyword(__is_member_pointer) && !defined(__CUDACC__)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_member_pointer : _BoolConstant<__is_member_pointer(_Tp)> { };
@@ -1004,7 +1066,7 @@ inline constexpr bool is_member_pointer_v = is_member_pointer<_Tp>::value;
 
 // is_member_object_pointer
 
-#if __has_keyword(__is_member_object_pointer)
+#if __has_keyword(__is_member_object_pointer) && !defined(__CUDACC__)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_member_object_pointer
@@ -1078,7 +1140,7 @@ inline constexpr bool is_arithmetic_v = is_arithmetic<_Tp>::value;
 // In C++03 nullptr_t is library-provided but must still count as "fundamental."
 #if __has_keyword(__is_fundamental) &&                                         \
     !(defined(_LIBCPP_CLANG_VER) && _LIBCPP_CLANG_VER < 1000) &&               \
-    !defined(_LIBCPP_CXX03_LANG)
+    !defined(_LIBCPP_CXX03_LANG) && !defined(__CUDACC__)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_fundamental : _BoolConstant<__is_fundamental(_Tp)> { };
@@ -1105,7 +1167,7 @@ inline constexpr bool is_fundamental_v = is_fundamental<_Tp>::value;
 // is_scalar
 
 // In C++03 nullptr_t is library-provided but must still count as "scalar."
-#if __has_keyword(__is_scalar) && !defined(_LIBCPP_CXX03_LANG)
+#if __has_keyword(__is_scalar) && !defined(_LIBCPP_CXX03_LANG) && !defined(__CUDACC__)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_scalar : _BoolConstant<__is_scalar(_Tp)> { };
@@ -1141,7 +1203,7 @@ inline constexpr bool is_scalar_v = is_scalar<_Tp>::value;
 
 // is_object
 
-#if __has_keyword(__is_object)
+#if __has_keyword(__is_object) && !defined(__CUDACC__)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_object : _BoolConstant<__is_object(_Tp)> { };
@@ -1169,7 +1231,7 @@ inline constexpr bool is_object_v = is_object<_Tp>::value;
 // is_compound
 
 // >= 11 because in C++03 nullptr isn't actually nullptr
-#if __has_keyword(__is_compound) && !defined(_LIBCPP_CXX03_LANG)
+#if __has_keyword(__is_compound) && !defined(_LIBCPP_CXX03_LANG) && !defined(__CUDACC__)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_compound : _BoolConstant<__is_compound(_Tp)> { };
@@ -1264,17 +1326,6 @@ template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_rvalue_reference
 template <class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;
 #endif
 
-// Suppress deprecation notice for volatile-qualified return type resulting
-// from volatile-qualified types _Tp.
-_LIBCPP_SUPPRESS_DEPRECATED_PUSH
-template <class _Tp> _Tp&& __declval(int);
-template <class _Tp> _Tp   __declval(long);
-_LIBCPP_SUPPRESS_DEPRECATED_POP
-
-template <class _Tp>
-decltype(__declval<_Tp>(0))
-declval() _NOEXCEPT;
-
 template <class _Tp>
 struct __unconstref {
     typedef _LIBCPP_NODEBUG typename remove_const<typename remove_reference<_Tp>::type>::type type;
@@ -1288,7 +1339,8 @@ using __uncvref_t _LIBCPP_NODEBUG = typename remove_cv<typename remove_reference
 template <class _Tp, class _Up>
 struct __is_same_uncvref : _IsSame<__uncvref_t<_Tp>, __uncvref_t<_Up> > {};
 
-#if _LIBCPP_STD_VER > 17
+// C++20, enabled for C++17 in Arcadia
+#if _LIBCPP_STD_VER > 14
 // remove_cvref - same as __uncvref
 template <class _Tp>
 struct remove_cvref {
@@ -1341,7 +1393,7 @@ template<class _Tp> using type_identity_t = typename type_identity<_Tp>::type;
 
 // is_signed
 
-#if __has_keyword(__is_signed)
+#if __has_keyword(__is_signed) && !defined(__CUDACC__)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_signed : _BoolConstant<__is_signed(_Tp)> { };
@@ -1379,7 +1431,7 @@ inline constexpr bool is_signed_v = is_signed<_Tp>::value;
 // No currently-released version of AppleClang contains the fixed intrinsic.
 #if __has_keyword(__is_unsigned) &&                                            \
     !(defined(_LIBCPP_CLANG_VER) && _LIBCPP_CLANG_VER < 1300) &&               \
-    !defined(_LIBCPP_APPLE_CLANG_VER)
+    !defined(_LIBCPP_APPLE_CLANG_VER) && !defined(__CUDACC__)
 
 template<class _Tp>
 struct _LIBCPP_TEMPLATE_VIS is_unsigned : _BoolConstant<__is_unsigned(_Tp)> { };
@@ -1427,7 +1479,7 @@ inline constexpr size_t rank_v = rank<_Tp>::value;
 
 // extent
 
-#if __has_keyword(__array_extent)
+#if __has_keyword(__array_extent) && !defined(__CUDACC__)
 
 template<class _Tp, size_t _Dim = 0>
 struct _LIBCPP_TEMPLATE_VIS extent
@@ -1915,6 +1967,17 @@ template <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::valu
     using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;
 #endif
 
+// MSVC compiler doesn't support more that 4 byte alignment on the stack on Win32.
+// If you try to pass parameter which is aligned by alignas to 8 or more bytes
+// on Win32, MSVC throws compile error C2719.
+// To avoid this compile error we delete all alignas specializations and use
+// union alignment instead. Just like for double, this will mean that 8 bytes
+// aligned types will only be aligned to 4 bytes on the stack.
+// Larger alignments will generate assert error which is allowed by the standard
+// since it is implementation-defined behavior. Default _Align argument will never
+// be more than 8 bytes on Win32 and so will not generate assert errors.
+#if !(defined(_LIBCPP_COMPILER_MSVC) && defined(_M_IX86))
+
 #define _CREATE_ALIGNED_STORAGE_SPECIALIZATION(n) \
 template <size_t _Len>\
 struct _LIBCPP_TEMPLATE_VIS aligned_storage<_Len, n>\
@@ -1945,6 +2008,7 @@ _CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x4000);
 #endif // !defined(_LIBCPP_OBJECT_FORMAT_COFF)
 
 #undef _CREATE_ALIGNED_STORAGE_SPECIALIZATION
+#endif  // !(defined(_LIBCPP_COMPILER_MSVC) && defined(_M_IX86))
 
 
 // aligned_union
@@ -2307,14 +2371,13 @@ template <class _Tp>
 struct _LIBCPP_TEMPLATE_VIS common_type<_Tp>
     : public common_type<_Tp, _Tp> {};
 
-// bullet 3 - sizeof...(Tp) == 2
-
 // sub-bullet 1 - "If is_same_v<T1, D1> is false or ..."
 template <class _Tp, class _Up>
 struct _LIBCPP_TEMPLATE_VIS common_type<_Tp, _Up>
     : conditional<
         _IsSame<_Tp, typename decay<_Tp>::type>::value && _IsSame<_Up, typename decay<_Up>::type>::value,
-        __common_type2_imp<_Tp, _Up>,
+        // Fix for MSVC which thinks that std::common_type<int, void>::type == void.
+        __common_type2_imp<_Tp, _Up, typename conditional<is_void<_Tp>::value ^ is_void<_Up>::value, int, void>::type>,
         common_type<typename decay<_Tp>::type, typename decay<_Up>::type>
     >::type
 {};
@@ -2577,9 +2640,15 @@ struct __is_assignable_imp<_Tp, _Arg, true>
 {
 };
 
+#ifdef _LIBCPP_COMPILER_MSVC
+template <class _Tp, class _Arg>
+struct is_assignable
+    : public _VSTD::integral_constant<bool, __is_assignable(_Tp, _Arg)> {};
+#else
 template <class _Tp, class _Arg>
 struct is_assignable
     : public __is_assignable_imp<_Tp, _Arg> {};
+#endif
 
 #if _LIBCPP_STD_VER > 14
 template <class _Tp, class _Arg>
@@ -2631,6 +2700,13 @@ inline constexpr bool is_destructible_v = __is_destructible(_Tp);
 //  Otherwise, return "declval<_Up&>().~_Up()" is well-formed
 //    where _Up is remove_all_extents<_Tp>::type
 
+#if defined(_LIBCPP_COMPILER_MSVC)
+
+template <typename _Tp>
+struct is_destructible : integral_constant<bool, __is_destructible(_Tp)> {};
+
+#else
+
 template <class>
 struct __is_destructible_apply { typedef int type; };
 
@@ -2680,6 +2756,8 @@ template <>
 struct is_destructible<void>
     : public false_type {};
 
+#endif
+
 #if _LIBCPP_STD_VER > 14
 template <class _Tp>
 inline constexpr bool is_destructible_v = is_destructible<_Tp>::value;
@@ -4074,6 +4152,7 @@ template <class _ValTy, class _Key, class _RawValTy>
 struct __can_extract_map_key<_ValTy, _Key, _Key, _RawValTy>
     : false_type {};
 
+#ifndef _LIBCPP_HAS_NO_BUILTIN_IS_CONSTANT_EVALUATED
 #if _LIBCPP_STD_VER > 17
 _LIBCPP_INLINE_VISIBILITY
 inline constexpr bool is_constant_evaluated() noexcept {
@@ -4083,6 +4162,10 @@ inline constexpr bool is_constant_evaluated() noexcept {
 
 inline _LIBCPP_CONSTEXPR
 bool __libcpp_is_constant_evaluated() _NOEXCEPT { return __builtin_is_constant_evaluated(); }
+#else
+inline _LIBCPP_CONSTEXPR
+bool __libcpp_is_constant_evaluated() _NOEXCEPT { return false; }
+#endif
 
 template <class _CharT>
 using _IsCharLikeType = _And<is_standard_layout<_CharT>, is_trivial<_CharT> >;
@@ -4097,4 +4180,8 @@ using __maybe_const = conditional_t<_Const, const _Tp, _Tp>;
 
 _LIBCPP_END_NAMESPACE_STD
 
+#ifdef _LIBCPP_COMPILER_MSVC
+#pragma warning(pop)
+#endif
+
 #endif // _LIBCPP_TYPE_TRAITS
