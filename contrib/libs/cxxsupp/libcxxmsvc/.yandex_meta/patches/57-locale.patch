diff --git a/src/locale.cpp b/src/locale.cpp
index 220caee..fc95dad 100644
--- a/src/locale.cpp
+++ b/src/locale.cpp
@@ -43,7 +43,7 @@
 #   include <langinfo.h>
 #endif
 
-#include "include/atomic_support.h"
+#include "atomic"
 #include "include/sso_allocator.h"
 
 // On Linux, wint_t and wchar_t have different signed-ness, and this causes
@@ -141,14 +141,7 @@ class _LIBCPP_HIDDEN locale::__imp
     : public facet
 {
     enum {N = 30};
-#if defined(_LIBCPP_COMPILER_MSVC)
-// FIXME: MSVC doesn't support aligned parameters by value.
-// I can't get the __sso_allocator to work here
-// for MSVC I think for this reason.
-    vector<facet*> facets_;
-#else
     vector<facet*, __sso_allocator<facet*, N> > facets_;
-#endif
     string         name_;
 public:
     explicit __imp(size_t refs = 0);
@@ -701,8 +694,6 @@ locale::facet::__on_zero_shared() noexcept
 
 // locale::id
 
-int32_t locale::id::__next_id = 0;
-
 namespace
 {
 
@@ -722,17 +713,22 @@ public:
 
 }
 
+int32_t locale::id::__next_id;
+
 long
 locale::id::__get()
 {
-    call_once(__flag_, __fake_bind(&locale::id::__init, this));
-    return __id_ - 1;
-}
-
-void
-locale::id::__init()
-{
-    __id_ = __libcpp_atomic_add(&__next_id, 1);
+    int32_t result = __id_.load(std::memory_order_acquire);
+    if (result == 0) {
+        static std::mutex m;
+        std::lock_guard<std::mutex> guard(m);
+        result = __id_.load(std::memory_order_acquire);
+        if (result == 0) {
+            result = ++__next_id;
+            __id_.store(result, std::memory_order_release);
+        }
+    }
+    return result - 1;
 }
 
 // template <> class collate_byname<char>
@@ -1106,6 +1102,11 @@ extern "C" const int ** __ctype_tolower_loc();
 extern "C" const int ** __ctype_toupper_loc();
 #endif
 
+#if defined(__ANDROID__)
+// See src/support/android/android_locale.cpp
+extern "C" const unsigned short* const _ctype_android;
+#endif
+
 #ifdef _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE
 const ctype<char>::mask*
 ctype<char>::classic_table() noexcept
@@ -1205,6 +1206,8 @@ ctype<char>::classic_table() noexcept
 #elif defined(_NEWLIB_VERSION)
     // Newlib has a 257-entry table in ctype_.c, where (char)0 starts at [1].
     return _ctype_ + 1;
+#elif defined(__ANDROID__)
+    return _ctype_android;
 #elif defined(_AIX)
     return (const unsigned int *)__lc_ctype_ptr->obj->mask;
 #elif defined(__MVS__)
@@ -4218,14 +4221,25 @@ __codecvt_utf16<char32_t, true>::do_out(state_type&,
     const intern_type* frm, const intern_type* frm_end, const intern_type*& frm_nxt,
     extern_type* to, extern_type* to_end, extern_type*& to_nxt) const
 {
+#if defined(_LIBCPP_SHORT_WCHAR)
+    const uint16_t* _frm = reinterpret_cast<const uint16_t*>(frm);
+    const uint16_t* _frm_end = reinterpret_cast<const uint16_t*>(frm_end);
+    const uint16_t* _frm_nxt = _frm;
+#else
     const uint32_t* _frm = reinterpret_cast<const uint32_t*>(frm);
     const uint32_t* _frm_end = reinterpret_cast<const uint32_t*>(frm_end);
     const uint32_t* _frm_nxt = _frm;
+#endif
     uint8_t* _to = reinterpret_cast<uint8_t*>(to);
     uint8_t* _to_end = reinterpret_cast<uint8_t*>(to_end);
     uint8_t* _to_nxt = _to;
+#if defined(_LIBCPP_SHORT_WCHAR)
+    result r = ucs2_to_utf16le(_frm, _frm_end, _frm_nxt, _to, _to_end, _to_nxt,
+                               _Maxcode_, _Mode_);
+#else
     result r = ucs4_to_utf16le(_frm, _frm_end, _frm_nxt, _to, _to_end, _to_nxt,
                                _Maxcode_, _Mode_);
+#endif
     frm_nxt = frm + (_frm_nxt - _frm);
     to_nxt = to + (_to_nxt - _to);
     return r;
@@ -4294,7 +4308,7 @@ __codecvt_utf8_utf16<wchar_t>::do_out(state_type&,
     const intern_type* frm, const intern_type* frm_end, const intern_type*& frm_nxt,
     extern_type* to, extern_type* to_end, extern_type*& to_nxt) const
 {
-#if defined(_LIBCPP_SHORT_WCHAR)
+#ifdef _WIN32
     const uint16_t* _frm = reinterpret_cast<const uint16_t*>(frm);
     const uint16_t* _frm_end = reinterpret_cast<const uint16_t*>(frm_end);
     const uint16_t* _frm_nxt = _frm;
@@ -4321,7 +4335,7 @@ __codecvt_utf8_utf16<wchar_t>::do_in(state_type&,
     const uint8_t* _frm = reinterpret_cast<const uint8_t*>(frm);
     const uint8_t* _frm_end = reinterpret_cast<const uint8_t*>(frm_end);
     const uint8_t* _frm_nxt = _frm;
-#if defined(_LIBCPP_SHORT_WCHAR)
+#ifdef _WIN32
     uint16_t* _to = reinterpret_cast<uint16_t*>(to);
     uint16_t* _to_end = reinterpret_cast<uint16_t*>(to_end);
     uint16_t* _to_nxt = _to;
@@ -4478,9 +4492,15 @@ __codecvt_utf8_utf16<char32_t>::do_in(state_type&,
     const uint8_t* _frm = reinterpret_cast<const uint8_t*>(frm);
     const uint8_t* _frm_end = reinterpret_cast<const uint8_t*>(frm_end);
     const uint8_t* _frm_nxt = _frm;
+#if defined(_LIBCPP_SHORT_WCHAR)
+    uint16_t* _to = reinterpret_cast<uint16_t*>(to);
+    uint16_t* _to_end = reinterpret_cast<uint16_t*>(to_end);
+    uint16_t* _to_nxt = _to;
+#else
     uint32_t* _to = reinterpret_cast<uint32_t*>(to);
     uint32_t* _to_end = reinterpret_cast<uint32_t*>(to_end);
     uint32_t* _to_nxt = _to;
+#endif
     result r = utf8_to_utf16(_frm, _frm_end, _frm_nxt, _to, _to_end, _to_nxt,
                              _Maxcode_, _Mode_);
     frm_nxt = frm + (_frm_nxt - _frm);
@@ -5950,7 +5970,7 @@ __init_pat(money_base::pattern& pat, basic_string<charT>& __curr_symbol_,
                     // We insert the space into the symbol instead of
                     // setting pat.field[2]=space so that when
                     // showbase is not set, the space goes away too.
-                    __curr_symbol_.insert(0, 1, space_char);
+                    __curr_symbol_.insert((size_t)0, 1, space_char);
                 }
                 return;
             default:
@@ -5973,7 +5993,7 @@ __init_pat(money_base::pattern& pat, basic_string<charT>& __curr_symbol_,
                     // We insert the space into the symbol instead of
                     // setting pat.field[2]=space so that when
                     // showbase is not set, the space goes away too.
-                    __curr_symbol_.insert(0, 1, space_char);
+                    __curr_symbol_.insert((size_t)0, 1, space_char);
                 }
                 return;
             case 2:  // Space between sign and currency or value.
@@ -6003,7 +6023,7 @@ __init_pat(money_base::pattern& pat, basic_string<charT>& __curr_symbol_,
                     // We insert the space into the symbol instead of
                     // setting pat.field[1]=space so that when
                     // showbase is not set, the space goes away too.
-                    __curr_symbol_.insert(0, 1, space_char);
+                    __curr_symbol_.insert((size_t)0, 1, space_char);
                 }
                 pat.field[1] = none;
                 pat.field[2] = symbol;
@@ -6046,7 +6066,7 @@ __init_pat(money_base::pattern& pat, basic_string<charT>& __curr_symbol_,
                     // We insert the space into the symbol instead of
                     // setting pat.field[2]=space so that when
                     // showbase is not set, the space goes away too.
-                    __curr_symbol_.insert(0, 1, space_char);
+                    __curr_symbol_.insert((size_t)0, 1, space_char);
                 }
                 return;
             default:
@@ -6069,7 +6089,7 @@ __init_pat(money_base::pattern& pat, basic_string<charT>& __curr_symbol_,
                     // We insert the space into the symbol instead of
                     // setting pat.field[1]=space so that when
                     // showbase is not set, the space goes away too.
-                    __curr_symbol_.insert(0, 1, space_char);
+                    __curr_symbol_.insert((size_t)0, 1, space_char);
                 }
                 return;
             case 2:  // Space between sign and currency or value.
@@ -6110,7 +6130,7 @@ __init_pat(money_base::pattern& pat, basic_string<charT>& __curr_symbol_,
                     // We insert the space into the symbol instead of
                     // setting pat.field[2]=space so that when
                     // showbase is not set, the space goes away too.
-                    __curr_symbol_.insert(0, 1, space_char);
+                    __curr_symbol_.insert((size_t)0, 1, space_char);
                 }
                 return;
             default:
