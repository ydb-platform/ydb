--- contrib/libs/jinja2cpp/src/internal_value.cpp	(index)
+++ contrib/libs/jinja2cpp/src/internal_value.cpp	(working tree)
@@ -8,6 +8,20 @@
 namespace jinja2
 {
 
+void InternalValue::SetParentData(const InternalValue& val) {
+    m_parentData = val.GetData();
+}
+
+void InternalValue::SetParentData(InternalValue&& val) {
+    m_parentData = std::move(val.GetData());
+}
+
+void ListAdapter::Iterator::increment() {
+    m_isFinished = !m_iterator->MoveNext();
+    ++ m_currentIndex;
+    m_currentVal = m_isFinished ? InternalValue() : m_iterator->GetCurrent();
+}
+
 std::atomic_uint64_t UserCallable::m_gen{};
 
 bool Value::IsEqual(const Value& rhs) const
--- contrib/libs/jinja2cpp/src/internal_value.h	(index)
+++ contrib/libs/jinja2cpp/src/internal_value.h	(working tree)
@@ -382,15 +382,9 @@ public:
     auto& GetParentData() {return m_parentData;}
     auto& GetParentData() const {return m_parentData;}
 
-    void SetParentData(const InternalValue& val)
-    {
-        m_parentData = val.GetData();
-    }
+    void SetParentData(const InternalValue& val);
 
-    void SetParentData(InternalValue&& val)
-    {
-        m_parentData = std::move(val.GetData());
-    }
+    void SetParentData(InternalValue&& val);
 
     bool ShouldExtendLifetime() const
     {
@@ -444,12 +438,7 @@ public:
 private:
     friend class boost::iterator_core_access;
 
-    void increment()
-    {
-        m_isFinished = !m_iterator->MoveNext();
-        ++ m_currentIndex;
-        m_currentVal = m_isFinished ? InternalValue() : m_iterator->GetCurrent();
-    }
+    void increment();
 
     bool equal(const Iterator& other) const
     {
