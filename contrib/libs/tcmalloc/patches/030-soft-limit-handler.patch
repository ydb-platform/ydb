diff --git a/tcmalloc/malloc_extension.cc b/tcmalloc/malloc_extension.cc
index b7ca15a..dc4aeb5 100644
--- a/tcmalloc/malloc_extension.cc
+++ b/tcmalloc/malloc_extension.cc
@@ -804,6 +804,20 @@ void MallocExtension::EnableForkSupport() {
 #endif
 }
 
+static std::atomic<MallocExtension::SoftMemoryLimitCallback*> SoftMemoryLimitHandler_;
+
+void MallocExtension::SetSoftMemoryLimitHandler(SoftMemoryLimitCallback* handler) {
+#if ABSL_INTERNAL_HAVE_WEAK_MALLOCEXTENSION_STUBS
+  SoftMemoryLimitHandler_.store(handler);
+#endif
+}
+
+MallocExtension::SoftMemoryLimitCallback* MallocExtension::GetSoftMemoryLimitHandler() {
+#if ABSL_INTERNAL_HAVE_WEAK_MALLOCEXTENSION_STUBS
+  return SoftMemoryLimitHandler_.load();
+#endif
+}
+
 void MallocExtension::SetSampleUserDataCallbacks(
     CreateSampleUserDataCallback create,
     CopySampleUserDataCallback copy,
diff --git a/tcmalloc/malloc_extension.h b/tcmalloc/malloc_extension.h
index 702baa8..0505971 100644
--- a/tcmalloc/malloc_extension.h
+++ b/tcmalloc/malloc_extension.h
@@ -667,6 +667,10 @@ class MallocExtension final {
   // Allocator will continue to function correctly in the child, after calling fork().
   static void EnableForkSupport();
 
+  using SoftMemoryLimitCallback = void();
+  static void SetSoftMemoryLimitHandler(SoftMemoryLimitCallback* handler);
+  static SoftMemoryLimitCallback* GetSoftMemoryLimitHandler();
+
   using CreateSampleUserDataCallback = void*();
   using CopySampleUserDataCallback = void*(void*);
   using DestroySampleUserDataCallback = void(void*);
diff --git a/tcmalloc/page_allocator.cc b/tcmalloc/page_allocator.cc
index 2f450d8..f723297 100644
--- a/tcmalloc/page_allocator.cc
+++ b/tcmalloc/page_allocator.cc
@@ -138,6 +138,10 @@ void PageAllocator::ShrinkToUsageLimit(Length n) {
   warned = true;
   TC_LOG("Couldn't respect usage limit of %v and OOM is likely to follow.",
          limits_[kSoft]);
+
+  if (auto* handler = MallocExtension::GetSoftMemoryLimitHandler()) {
+    (*handler)();
+  }
 }
 
 bool PageAllocator::ShrinkHardBy(Length pages, LimitKind limit_kind) {
