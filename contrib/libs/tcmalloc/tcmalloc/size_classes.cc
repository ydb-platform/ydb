// Copyright 2019 The TCMalloc Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "absl/types/span.h"
#include "tcmalloc/common.h"
#include "tcmalloc/internal/config.h"
#include "tcmalloc/size_class_info.h"

GOOGLE_MALLOC_SECTION_BEGIN
namespace tcmalloc {
namespace tcmalloc_internal {

// Columns in the following tables:
// - bytes: size of the size class
// - pages: number of pages per span
// - batch: preferred number of objects for transfers between caches
// - cap: maximum cpu cache capacity
// - class: size class number
// - objs: number of objects per span
// - waste/fixed: fixed per-size-class overhead due to end-of-span fragmentation
//   and other factors. For instance, if we have a 96 byte size class, and use
//   a single 8KiB page, then we will hold 85 objects per span, and have 32
//   bytes left over. There is also a fixed component of 48 bytes of TCMalloc
//   metadata per span. Together, the fixed overhead would be wasted/allocated
//   = (32 + 48) / (8192 - 32) ~= 0.98%.
// - waste/sampling: overhead due to heap sampling
//   (rounding to page size, proxy object, metadata).
// - inc: increment from the previous size class. This caps the dynamic
//   overhead component based on mismatches between the number of bytes
//   requested and the number of bytes provided by the size class. Together
//   they sum to the total overhead; for instance if you asked for a 50-byte
//   allocation that rounds up to a 64-byte size class, the dynamic overhead
//   would be 28%, and if waste were 22% it would mean (on average) 25 bytes
//   of overhead for allocations of that size.

// clang-format off
#if defined(__cpp_aligned_new) && __STDCPP_DEFAULT_NEW_ALIGNMENT__ <= 8
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 3692},  //  0  1024  0.58%    0.42%   0.00%
  {    16,    1,   32, 3692},  //  1   512  0.58%    0.42% 100.00%
  {    32,    1,   32, 3695},  //  2   256  0.58%    0.42% 100.00%
  {    64,    1,   32, 3692},  //  3   128  0.58%    0.42% 100.00%
  {    72,    1,   32, 3692},  //  4   113  1.26%    0.42%  12.50%
  {    80,    1,   32, 2832},  //  5   102  0.97%    0.42%  11.11%
  {    88,    1,   32, 3580},  //  6    93  0.68%    0.42%  10.00%
  {    96,    1,   32, 2255},  //  7    85  0.97%    0.42%   9.09%
  {   104,    1,   32, 1641},  //  8    78  1.55%    0.42%   8.33%
  {   112,    1,   32, 1641},  //  9    73  0.78%    0.42%   7.69%
  {   120,    1,   32, 1177},  // 10    68  0.97%    0.42%   7.14%
  {   128,    1,   32, 2526},  // 11    64  0.58%    0.42%   6.67%
  {   136,    1,   32,  977},  // 12    60  0.97%    0.42%   6.25%
  {   144,    1,   32, 1121},  // 13    56  2.14%    0.42%   5.88%
  {   152,    1,   32,  880},  // 14    53  2.23%    0.42%   5.56%
  {   160,    1,   32,  912},  // 15    51  0.97%    0.42%   5.26%
  {   168,    1,   32, 1038},  // 16    48  2.14%    0.42%   5.00%
  {   184,    1,   32,  974},  // 17    44  1.75%    0.42%   9.52%
  {   192,    1,   32,  847},  // 18    42  2.14%    0.42%   4.35%
  {   208,    1,   32,  690},  // 19    39  1.55%    0.42%   8.33%
  {   224,    1,   32,  696},  // 20    36  2.14%    0.42%   7.69%
  {   240,    1,   32,  627},  // 21    34  0.97%    0.42%   7.14%
  {   256,    1,   32, 1406},  // 22    32  0.58%    0.42%   6.67%
  {   264,    1,   32,  357},  // 23    31  0.68%    0.42%   3.12%
  {   280,    1,   32,  571},  // 24    29  1.46%    0.42%   6.06%
  {   312,    1,   32,  710},  // 25    26  1.55%    0.42%  11.43%
  {   336,    1,   32,  719},  // 26    24  2.14%    0.42%   7.69%
  {   352,    1,   32,  343},  // 27    23  1.75%    0.42%   4.76%
  {   384,    1,   32,  463},  // 28    21  2.14%    0.42%   9.09%
  {   408,    1,   32,  416},  // 29    20  0.97%    0.42%   6.25%
  {   448,    1,   32,  440},  // 30    18  2.14%    0.42%   9.80%
  {   480,    1,   32,  492},  // 31    17  0.97%    0.42%   7.14%
  {   512,    1,   32,  685},  // 32    16  0.58%    0.42%   6.67%
  {   576,    1,   32,  499},  // 33    14  2.14%    0.42%  12.50%
  {   640,    1,   32,  393},  // 34    12  6.80%    0.43%  11.11%
  {   704,    1,   32,  370},  // 35    11  6.02%    0.43%  10.00%
  {   768,    1,   32,  335},  // 36    10  6.80%    0.43%   9.09%
  {   896,    1,   32,  420},  // 37     9  2.14%    0.43%  16.67%
  {  1024,    1,   32,  759},  // 38     8  0.58%    0.42%  14.29%
  {  1152,    2,   32,  395},  // 39    14  1.85%    0.43%  12.50%
  {  1280,    2,   32,  334},  // 40    12  6.52%    0.43%  11.11%
  {  1408,    2,   32,  297},  // 41    11  5.74%    0.43%  10.00%
  {  1536,    2,   32,  325},  // 42    10  6.52%    0.43%   9.09%
  {  1792,    2,   32,  299},  // 43     9  1.85%    0.43%  16.67%
  {  2048,    2,   32,  386},  // 44     8  0.29%    0.42%  14.29%
  {  2304,    2,   28,  290},  // 45     7  1.85%    0.43%  12.50%
  {  2688,    2,   24,  276},  // 46     6  1.85%    0.43%  16.67%
  {  3200,    2,   20,  278},  // 47     5  2.63%    0.43%  19.05%
  {  3584,    4,   18,  256},  // 48     9  1.71%    0.43%  12.00%
  {  4096,    1,   16,  698},  // 49     2  0.58%    0.43%  14.29%
  {  4736,    3,   13,  281},  // 50     5  3.83%    0.43%  15.62%
  {  5376,    2,   12,  243},  // 51     3  1.85%    0.43%  13.51%
  {  6144,    3,   10,  254},  // 52     4  0.19%    0.42%  14.29%
  {  6528,    4,   10,  238},  // 53     5  0.54%    0.43%   6.25%
  {  7168,    7,    9,  242},  // 54     8  0.08%    0.42%   9.80%
  {  8192,    1,    8,  393},  // 55     1  0.58%    0.03%  14.29%
  {  9472,    5,    6,  245},  // 56     4  7.61%    0.85%  15.62%
  { 10240,    4,    6,  234},  // 57     3  6.39%    0.85%   8.11%
  { 12288,    3,    5,  247},  // 58     2  0.19%    0.82%  20.00%
  { 13568,    5,    4,  236},  // 59     3  0.74%    0.82%  10.42%
  { 14336,    7,    4,  233},  // 60     4  0.08%    0.82%   5.66%
  { 16384,    2,    4,  254},  // 61     1  0.29%    0.03%  14.29%
  { 20480,    5,    3,  242},  // 62     2  0.12%    1.21%  25.00%
  { 24576,    3,    2,  240},  // 63     1  0.19%    0.03%  20.00%
  { 28672,    7,    2,  236},  // 64     2  0.08%    1.60%  16.67%
  { 32768,    4,    2,  288},  // 65     1  0.15%    0.03%  14.29%
  { 40960,    5,    2,  240},  // 66     1  0.12%    0.03%  25.00%
  { 49152,    6,    2,  233},  // 67     1  0.10%    0.03%  20.00%
  { 57344,    7,    2,  233},  // 68     1  0.08%    0.03%  16.67%
  { 65536,    8,    2,  251},  // 69     1  0.07%    0.03%  14.29%
  { 73728,    9,    2,  234},  // 70     1  0.07%    0.03%  12.50%
  { 81920,   10,    2,  234},  // 71     1  0.06%    0.03%  11.11%
  { 98304,   12,    2,  234},  // 72     1  0.05%    0.03%  20.00%
  {114688,   14,    2,  233},  // 73     1  0.04%    0.03%  16.67%
  {131072,   16,    2,  234},  // 74     1  0.04%    0.03%  14.29%
  {139264,   17,    2,  234},  // 75     1  0.03%    0.03%   6.25%
  {155648,   19,    2,  231},  // 76     1  0.03%    0.03%  11.76%
  {180224,   22,    2,  231},  // 77     1  0.03%    0.03%  15.79%
  {204800,   25,    2,  231},  // 78     1  0.02%    0.03%  13.64%
  {229376,   28,    2,  231},  // 79     1  0.02%    0.03%  12.00%
  {262144,   32,    2,  231},  // 80     1  0.02%    0.03%  14.29%
};
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 3832},  //  0  4096  0.15%    1.60%   0.00%
  {    16,    1,   32, 3832},  //  1  2048  0.15%    1.60% 100.00%
  {    32,    1,   32, 3833},  //  2  1024  0.15%    1.60% 100.00%
  {    64,    1,   32, 3832},  //  3   512  0.15%    1.60% 100.00%
  {    72,    1,   32, 3832},  //  4   455  0.17%    1.60%  12.50%
  {    80,    1,   32, 2509},  //  5   409  0.29%    1.60%  11.11%
  {    88,    1,   32, 2614},  //  6   372  0.24%    1.60%  10.00%
  {    96,    1,   32, 2882},  //  7   341  0.24%    1.60%   9.09%
  {   104,    1,   32, 2377},  //  8   315  0.17%    1.60%   8.33%
  {   112,    1,   32, 1302},  //  9   292  0.34%    1.60%   7.69%
  {   120,    1,   32, 1106},  // 10   273  0.17%    1.60%   7.14%
  {   128,    1,   32, 3110},  // 11   256  0.15%    1.60%   6.67%
  {   144,    1,   32, 1591},  // 12   227  0.39%    1.60%  12.50%
  {   160,    1,   32, 1374},  // 13   204  0.54%    1.60%  11.11%
  {   176,    1,   32, 1334},  // 14   186  0.24%    1.60%  10.00%
  {   192,    1,   32, 1194},  // 15   170  0.54%    1.60%   9.09%
  {   208,    1,   32,  941},  // 16   157  0.49%    1.60%   8.33%
  {   224,    1,   32,  762},  // 17   146  0.34%    1.60%   7.69%
  {   240,    1,   32,  541},  // 18   136  0.54%    1.60%   7.14%
  {   256,    1,   32, 1407},  // 19   128  0.15%    1.60%   6.67%
  {   280,    1,   32,  679},  // 20   117  0.17%    1.60%   9.38%
  {   312,    1,   32,  632},  // 21   105  0.17%    1.60%  11.43%
  {   344,    1,   32,  833},  // 22    95  0.41%    1.60%  10.26%
  {   376,    1,   32,  457},  // 23    87  0.32%    1.60%   9.30%
  {   400,    1,   32,  496},  // 24    81  1.27%    1.60%   6.38%
  {   448,    1,   32,  515},  // 25    73  0.34%    1.60%  12.00%
  {   512,    1,   32,  956},  // 26    64  0.15%    1.60%  14.29%
  {   576,    1,   32,  470},  // 27    56  1.71%    1.60%  12.50%
  {   640,    1,   32,  619},  // 28    51  0.54%    1.60%  11.11%
  {   704,    1,   32,  434},  // 29    46  1.32%    1.60%  10.00%
  {   768,    1,   32,  451},  // 30    42  1.71%    1.60%   9.09%
  {   896,    1,   32,  496},  // 31    36  1.71%    1.60%  16.67%
  {  1024,    1,   32,  749},  // 32    32  0.15%    1.60%  14.29%
  {  1152,    1,   32,  391},  // 33    28  1.71%    1.60%  12.50%
  {  1280,    1,   32,  348},  // 34    25  2.49%    1.60%  11.11%
  {  1536,    1,   32,  473},  // 35    21  1.71%    1.60%  20.00%
  {  1664,    1,   32,  298},  // 36    19  3.66%    1.60%   8.33%
  {  1920,    1,   32,  313},  // 37    17  0.54%    1.60%  15.38%
  {  2048,    1,   32,  365},  // 38    16  0.15%    1.60%   6.67%
  {  2176,    1,   30,  352},  // 39    15  0.54%    1.60%   6.25%
  {  2432,    1,   26,  299},  // 40    13  3.66%    1.60%  11.76%
  {  2688,    1,   24,  283},  // 41    12  1.71%    1.60%  10.53%
  {  2944,    1,   22,  266},  // 42    11  1.32%    1.60%   9.52%
  {  3200,    1,   20,  273},  // 43    10  2.49%    1.60%   8.70%
  {  3584,    1,   18,  268},  // 44     9  1.71%    1.60%  12.00%
  {  4096,    1,   16,  655},  // 45     8  0.15%    1.60%  14.29%
  {  4608,    1,   14,  286},  // 46     7  1.71%    1.60%  12.50%
  {  5376,    1,   12,  269},  // 47     6  1.71%    1.60%  16.67%
  {  6528,    1,   10,  294},  // 48     5  0.54%    1.60%  21.43%
  {  8192,    1,    8,  414},  // 49     4  0.15%    1.60%  25.49%
  {  9344,    2,    7,  264},  // 50     7  0.27%    1.60%  14.06%
  { 10880,    1,    6,  249},  // 51     3  0.54%    1.60%  16.44%
  { 13056,    2,    5,  262},  // 52     5  0.46%    1.60%  20.00%
  { 13952,    3,    4,  243},  // 53     7  0.70%    1.60%   6.86%
  { 16384,    1,    4,  372},  // 54     2  0.15%    1.60%  17.43%
  { 19072,    3,    3,  253},  // 55     5  3.04%    1.62%  16.41%
  { 21760,    2,    3,  245},  // 56     3  0.46%    1.60%  14.09%
  { 24576,    3,    2,  247},  // 57     4  0.05%    1.60%  12.94%
  { 28672,    7,    2,  245},  // 58     8  0.02%    1.60%  16.67%
  { 32768,    1,    2,  286},  // 59     1  0.15%    0.03%  14.29%
  { 38144,    5,    2,  243},  // 60     4  6.90%    3.28%  16.41%
  { 40960,    4,    2,  240},  // 61     3  6.28%    3.28%   7.38%
  { 49152,    3,    2,  241},  // 62     2  0.05%    3.16%  20.00%
  { 57344,    7,    2,  241},  // 63     4  0.02%    3.16%  16.67%
  { 65536,    2,    2,  264},  // 64     1  0.07%    0.03%  14.29%
  { 81920,    5,    2,  247},  // 65     2  0.03%    4.72%  25.00%
  { 98304,    3,    2,  241},  // 66     1  0.05%    0.03%  20.00%
  {114688,    7,    2,  241},  // 67     2  0.02%    6.28%  16.67%
  {131072,    4,    2,  299},  // 68     1  0.04%    0.03%  14.29%
  {163840,    5,    2,  241},  // 69     1  0.03%    0.03%  25.00%
  {196608,    6,    2,  240},  // 70     1  0.02%    0.03%  20.00%
  {229376,    7,    2,  240},  // 71     1  0.02%    0.03%  16.67%
  {262144,    8,    2,  243},  // 72     1  0.02%    0.03%  14.29%
};
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 4188},  //  0 32768  0.02%   12.53%   0.00%
  {    16,    1,   32, 4188},  //  1 16384  0.02%   12.53% 100.00%
  {    32,    1,   32, 4188},  //  2  8192  0.02%   12.53% 100.00%
  {    64,    1,   32, 4188},  //  3  4096  0.02%   12.53% 100.00%
  {    72,    1,   32, 4188},  //  4  3640  0.04%   12.53%  12.50%
  {    80,    1,   32, 2517},  //  5  3276  0.04%   12.53%  11.11%
  {    88,    1,   32, 1648},  //  6  2978  0.05%   12.53%  10.00%
  {    96,    1,   32, 1738},  //  7  2730  0.04%   12.53%   9.09%
  {   104,    1,   32,  945},  //  8  2520  0.04%   12.53%   8.33%
  {   112,    1,   32, 1593},  //  9  2340  0.04%   12.53%   7.69%
  {   128,    1,   32, 1983},  // 10  2048  0.02%   12.53%  14.29%
  {   144,    1,   32, 1826},  // 11  1820  0.04%   12.53%  12.50%
  {   160,    1,   32, 1574},  // 12  1638  0.04%   12.53%  11.11%
  {   176,    1,   32, 1153},  // 13  1489  0.05%   12.53%  10.00%
  {   192,    1,   32, 1090},  // 14  1365  0.04%   12.53%   9.09%
  {   208,    1,   32,  732},  // 15  1260  0.04%   12.53%   8.33%
  {   232,    1,   32, 1012},  // 16  1129  0.10%   12.53%  11.54%
  {   256,    1,   32, 1245},  // 17  1024  0.02%   12.53%  10.34%
  {   280,    1,   32,  767},  // 18   936  0.04%   12.53%   9.38%
  {   304,    1,   32,  783},  // 19   862  0.05%   12.53%   8.57%
  {   336,    1,   32,  881},  // 20   780  0.04%   12.53%  10.53%
  {   384,    1,   32,  587},  // 21   682  0.12%   12.53%  14.29%
  {   448,    1,   32,  844},  // 22   585  0.04%   12.53%  16.67%
  {   480,    1,   32,  362},  // 23   546  0.04%   12.53%   7.14%
  {   512,    1,   32,  618},  // 24   512  0.02%   12.53%   6.67%
  {   576,    1,   32,  489},  // 25   455  0.04%   12.53%  12.50%
  {   640,    1,   32,  560},  // 26   409  0.16%   12.53%  11.11%
  {   704,    1,   32,  413},  // 27   372  0.12%   12.53%  10.00%
  {   768,    1,   32,  411},  // 28   341  0.12%   12.53%   9.09%
  {   896,    1,   32,  456},  // 29   292  0.21%   12.53%  16.67%
  {  1024,    1,   32,  671},  // 30   256  0.02%   12.53%  14.29%
  {  1152,    1,   32,  429},  // 31   227  0.26%   12.53%  12.50%
  {  1280,    1,   32,  382},  // 32   204  0.41%   12.53%  11.11%
  {  1408,    1,   32,  327},  // 33   186  0.12%   12.53%  10.00%
  {  1664,    1,   32,  550},  // 34   157  0.36%   12.53%  18.18%
  {  1920,    1,   32,  409},  // 35   136  0.41%   12.53%  15.38%
  {  2048,    1,   32,  382},  // 36   128  0.02%   12.53%   6.67%
  {  2304,    1,   28,  370},  // 37   113  0.70%   12.53%  12.50%
  {  2560,    1,   25,  313},  // 38   102  0.41%   12.53%  11.11%
  {  2688,    1,   24,  346},  // 39    97  0.56%   12.53%   5.00%
  {  3072,    1,   21,  294},  // 40    85  0.41%   12.53%  14.29%
  {  3328,    1,   19,  290},  // 41    78  0.99%   12.54%   8.33%
  {  3584,    1,   18,  278},  // 42    73  0.21%   12.53%   7.69%
  {  3840,    1,   17,  276},  // 43    68  0.41%   12.53%   7.14%
  {  4096,    1,   16,  607},  // 44    64  0.02%   12.53%   6.67%
  {  4224,    1,   15,  272},  // 45    62  0.12%   12.53%   3.12%
  {  4480,    1,   14,  288},  // 46    58  0.90%   12.54%   6.06%
  {  4736,    1,   13,  276},  // 47    55  0.65%   12.54%   5.71%
  {  5120,    1,   12,  288},  // 48    51  0.41%   12.53%   8.11%
  {  5504,    1,   11,  274},  // 49    47  1.34%   12.54%   7.50%
  {  6144,    1,   10,  274},  // 50    42  1.58%   12.54%  11.63%
  {  6528,    1,   10,  270},  // 51    40  0.41%   12.53%   6.25%
  {  7168,    1,    9,  268},  // 52    36  1.58%   12.54%   9.80%
  {  8192,    1,    8,  327},  // 53    32  0.02%   12.53%  14.29%
  {  9344,    1,    7,  280},  // 54    28  0.21%   12.53%  14.06%
  { 10368,    1,    6,  270},  // 55    25  1.14%   12.54%  10.96%
  { 11392,    1,    5,  266},  // 56    23  0.07%   12.53%   9.88%
  { 12416,    1,    5,  270},  // 57    21  0.56%   12.54%   8.99%
  { 13696,    1,    4,  270},  // 58    19  0.75%   12.54%  10.31%
  { 15360,    1,    4,  270},  // 59    17  0.41%   12.54%  12.15%
  { 16384,    1,    4,  288},  // 60    16  0.02%   12.53%   6.67%
  { 17408,    1,    3,  266},  // 61    15  0.41%   12.54%   6.25%
  { 18688,    1,    3,  268},  // 62    14  0.21%   12.54%   7.35%
  { 20096,    1,    3,  264},  // 63    13  0.36%   12.54%   7.53%
  { 21760,    1,    3,  268},  // 64    12  0.41%   12.54%   8.28%
  { 23808,    1,    2,  266},  // 65    11  0.12%   12.53%   9.41%
  { 26112,    1,    2,  268},  // 66    10  0.41%   12.54%   9.68%
  { 29056,    1,    2,  268},  // 67     9  0.26%   12.54%  11.27%
  { 32768,    1,    2,  337},  // 68     8  0.02%   12.53%  12.78%
  { 37376,    1,    2,  266},  // 69     7  0.21%   12.54%  14.06%
  { 43648,    1,    2,  266},  // 70     6  0.12%   12.54%  16.78%
  { 45568,    2,    2,  262},  // 71    11  4.40%   12.63%   4.40%
  { 52352,    1,    2,  264},  // 72     5  0.16%   12.54%  14.89%
  { 56064,    2,    2,  262},  // 73     9  3.77%   12.63%   7.09%
  { 65536,    1,    2,  268},  // 74     4  0.02%   12.53%  16.89%
  { 74880,    2,    2,  264},  // 75     7  0.03%   12.53%  14.26%
  { 87296,    1,    2,  264},  // 76     3  0.12%   12.54%  16.58%
  {104832,    2,    2,  264},  // 77     5  0.03%   12.54%  20.09%
  {112256,    3,    2,  259},  // 78     7  0.09%   12.54%   7.08%
  {131072,    1,    2,  266},  // 79     2  0.02%   12.53%  16.76%
  {149760,    3,    2,  262},  // 80     5  4.79%   12.88%  14.26%
  {174720,    2,    2,  262},  // 81     3  0.03%   12.54%  16.67%
  {209664,    4,    2,  262},  // 82     5  0.03%   12.54%  20.00%
  {262144,    1,    2,  266},  // 83     1  0.02%    0.03%  25.03%
};
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = false,
  .span_size = 48,
  .sampling_interval = 524288,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 4217},  //  0   512  1.16%    0.92%   0.00%
  {    16,    1,   32, 4217},  //  1   256  1.16%    0.92% 100.00%
  {    32,    1,   32, 4217},  //  2   128  1.16%    0.92% 100.00%
  {    64,    1,   32, 4217},  //  3    64  1.16%    0.92% 100.00%
  {    72,    1,   32, 4217},  //  4    56  2.70%    0.92%  12.50%
  {    80,    1,   32, 4091},  //  5    51  1.54%    0.92%  11.11%
  {    88,    1,   32, 2971},  //  6    46  2.32%    0.92%  10.00%
  {    96,    1,   32, 2176},  //  7    42  2.70%    0.92%   9.09%
  {   104,    1,   32, 2417},  //  8    39  2.12%    0.92%   8.33%
  {   112,    1,   32, 1089},  //  9    36  2.70%    0.92%   7.69%
  {   128,    1,   32, 3504},  // 10    32  1.16%    0.92%  14.29%
  {   144,    1,   32, 2613},  // 11    28  2.70%    0.92%  12.50%
  {   160,    1,   32, 2584},  // 12    25  3.47%    0.92%  11.11%
  {   176,    1,   32, 1112},  // 13    23  2.32%    0.92%  10.00%
  {   192,    1,   32, 1149},  // 14    21  2.70%    0.92%   9.09%
  {   208,    1,   32,  988},  // 15    19  4.63%    0.92%   8.33%
  {   224,    1,   32,  898},  // 16    18  2.70%    0.92%   7.69%
  {   240,    1,   32,  869},  // 17    17  1.54%    0.92%   7.14%
  {   256,    1,   32, 1468},  // 18    16  1.16%    0.92%   6.67%
  {   272,    1,   32,  560},  // 19    15  1.54%    0.92%   6.25%
  {   312,    1,   32,  647},  // 20    13  2.12%    0.92%  14.71%
  {   336,    1,   32,  881},  // 21    12  2.70%    0.92%   7.69%
  {   368,    1,   32,  424},  // 22    11  2.32%    0.92%   9.52%
  {   448,    1,   32,  529},  // 23     9  2.70%    0.92%  21.74%
  {   512,    1,   32, 1672},  // 24     8  1.16%    0.92%  14.29%
  {   576,    2,   32,  702},  // 25    14  2.14%    0.92%  12.50%
  {   704,    2,   32,  348},  // 26    11  6.02%    0.92%  22.22%
  {   768,    2,   32,  441},  // 27    10  6.80%    0.93%   9.09%
  {   896,    2,   32,  756},  // 28     9  2.14%    0.92%  16.67%
  {  1024,    2,   32, 4134},  // 29     8  0.58%    0.92%  14.29%
  {  1152,    3,   32,  375},  // 30    10  6.61%    0.93%  12.50%
  {  1536,    3,   32,  348},  // 31     8  0.39%    0.92%  33.33%
  {  1792,    4,   32,  311},  // 32     9  1.85%    0.92%  16.67%
  {  2048,    4,   32,  531},  // 33     8  0.29%    0.92%  14.29%
  {  2688,    4,   24,  327},  // 34     6  1.85%    0.93%  31.25%
  {  3200,    4,   20,  286},  // 35     5  2.63%    0.93%  19.05%
  {  4096,    4,   16, 1824},  // 36     4  0.29%    0.92%  28.00%
  {  4736,    5,   13,  358},  // 37     4  7.72%    1.77%  15.62%
  {  6144,    3,   10,  263},  // 38     2  0.39%    1.70%  29.73%
  {  7168,    7,    9,  272},  // 39     4  0.17%    1.70%  16.67%
  {  8192,    4,    8,  451},  // 40     2  0.29%    1.70%  14.29%
};
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#else
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 4592},  //  0  1024  0.58%    0.42%   0.00%
  {    16,    1,   32, 4592},  //  1   512  0.58%    0.42% 100.00%
  {    32,    1,   32, 4595},  //  2   256  0.58%    0.42% 100.00%
  {    64,    1,   32, 4592},  //  3   128  0.58%    0.42% 100.00%
  {    80,    1,   32, 4592},  //  4   102  0.97%    0.42%  25.00%
  {    96,    1,   32, 4117},  //  5    85  0.97%    0.42%  20.00%
  {   112,    1,   32, 2307},  //  6    73  0.78%    0.42%  16.67%
  {   128,    1,   32, 2621},  //  7    64  0.58%    0.42%  14.29%
  {   144,    1,   32, 1464},  //  8    56  2.14%    0.42%  12.50%
  {   160,    1,   32, 1244},  //  9    51  0.97%    0.42%  11.11%
  {   176,    1,   32, 1119},  // 10    46  1.75%    0.42%  10.00%
  {   192,    1,   32, 1018},  // 11    42  2.14%    0.42%   9.09%
  {   208,    1,   32,  619},  // 12    39  1.55%    0.42%   8.33%
  {   224,    1,   32,  623},  // 13    36  2.14%    0.42%   7.69%
  {   240,    1,   32,  574},  // 14    34  0.97%    0.42%   7.14%
  {   256,    1,   32, 1137},  // 15    32  0.58%    0.42%   6.67%
  {   272,    1,   32,  491},  // 16    30  0.97%    0.42%   6.25%
  {   288,    1,   32,  511},  // 17    28  2.14%    0.42%   5.88%
  {   304,    1,   32,  408},  // 18    26  4.08%    0.42%   5.56%
  {   320,    1,   32,  545},  // 19    25  2.91%    0.42%   5.26%
  {   336,    1,   32,  518},  // 20    24  2.14%    0.42%   5.00%
  {   352,    1,   32,  368},  // 21    23  1.75%    0.42%   4.76%
  {   368,    1,   32,  348},  // 22    22  1.75%    0.42%   4.55%
  {   384,    1,   32,  395},  // 23    21  2.14%    0.42%   4.35%
  {   400,    1,   32,  370},  // 24    20  2.91%    0.42%   4.17%
  {   416,    1,   32,  374},  // 25    19  4.08%    0.43%   4.00%
  {   448,    1,   32,  406},  // 26    18  2.14%    0.42%   7.69%
  {   480,    1,   32,  475},  // 27    17  0.97%    0.42%   7.14%
  {   512,    1,   32,  617},  // 28    16  0.58%    0.42%   6.67%
  {   576,    1,   32,  480},  // 29    14  2.14%    0.42%  12.50%
  {   640,    1,   32,  404},  // 30    12  6.80%    0.43%  11.11%
  {   704,    1,   32,  388},  // 31    11  6.02%    0.43%  10.00%
  {   768,    1,   32,  363},  // 32    10  6.80%    0.43%   9.09%
  {   896,    1,   32,  424},  // 33     9  2.14%    0.43%  16.67%
  {  1024,    1,   32,  668},  // 34     8  0.58%    0.42%  14.29%
  {  1152,    2,   32,  406},  // 35    14  1.85%    0.43%  12.50%
  {  1280,    2,   32,  361},  // 36    12  6.52%    0.43%  11.11%
  {  1408,    2,   32,  336},  // 37    11  5.74%    0.43%  10.00%
  {  1536,    2,   32,  354},  // 38    10  6.52%    0.43%   9.09%
  {  1792,    2,   32,  336},  // 39     9  1.85%    0.43%  16.67%
  {  2048,    2,   32,  399},  // 40     8  0.29%    0.42%  14.29%
  {  2304,    2,   28,  330},  // 41     7  1.85%    0.43%  12.50%
  {  2688,    2,   24,  318},  // 42     6  1.85%    0.43%  16.67%
  {  2816,    3,   23,  298},  // 43     8  8.51%    0.44%   4.76%
  {  3200,    2,   20,  312},  // 44     5  2.63%    0.43%  13.64%
  {  3456,    3,   18,  300},  // 45     7  1.75%    0.43%   8.00%
  {  3584,    4,   18,  291},  // 46     9  1.71%    0.43%   3.70%
  {  4096,    1,   16,  626},  // 47     2  0.58%    0.43%  14.29%
  {  4736,    3,   13,  323},  // 48     5  3.83%    0.43%  15.62%
  {  5376,    2,   12,  296},  // 49     3  1.85%    0.43%  13.51%
  {  6144,    3,   10,  305},  // 50     4  0.19%    0.42%  14.29%
  {  6528,    4,   10,  294},  // 51     5  0.54%    0.43%   6.25%
  {  7168,    7,    9,  296},  // 52     8  0.08%    0.42%   9.80%
  {  8192,    1,    8,  404},  // 53     1  0.58%    0.03%  14.29%
  {  9472,    5,    6,  298},  // 54     4  7.61%    0.85%  15.62%
  { 10240,    4,    6,  289},  // 55     3  6.39%    0.85%   8.11%
  { 12288,    3,    5,  300},  // 56     2  0.19%    0.82%  20.00%
  { 13568,    5,    4,  291},  // 57     3  0.74%    0.82%  10.42%
  { 14336,    7,    4,  289},  // 58     4  0.08%    0.82%   5.66%
  { 16384,    2,    4,  305},  // 59     1  0.29%    0.03%  14.29%
  { 20480,    5,    3,  296},  // 60     2  0.12%    1.21%  25.00%
  { 24576,    3,    2,  294},  // 61     1  0.19%    0.03%  20.00%
  { 28672,    7,    2,  291},  // 62     2  0.08%    1.60%  16.67%
  { 32768,    4,    2,  330},  // 63     1  0.15%    0.03%  14.29%
  { 40960,    5,    2,  294},  // 64     1  0.12%    0.03%  25.00%
  { 49152,    6,    2,  289},  // 65     1  0.10%    0.03%  20.00%
  { 57344,    7,    2,  289},  // 66     1  0.08%    0.03%  16.67%
  { 65536,    8,    2,  303},  // 67     1  0.07%    0.03%  14.29%
  { 73728,    9,    2,  289},  // 68     1  0.07%    0.03%  12.50%
  { 81920,   10,    2,  289},  // 69     1  0.06%    0.03%  11.11%
  { 90112,   11,    2,  287},  // 70     1  0.05%    0.03%  10.00%
  { 98304,   12,    2,  289},  // 71     1  0.05%    0.03%   9.09%
  {106496,   13,    2,  287},  // 72     1  0.05%    0.03%   8.33%
  {114688,   14,    2,  287},  // 73     1  0.04%    0.03%   7.69%
  {131072,   16,    2,  289},  // 74     1  0.04%    0.03%  14.29%
  {139264,   17,    2,  289},  // 75     1  0.03%    0.03%   6.25%
  {147456,   18,    2,  287},  // 76     1  0.03%    0.03%   5.88%
  {155648,   19,    2,  287},  // 77     1  0.03%    0.03%   5.56%
  {172032,   21,    2,  287},  // 78     1  0.03%    0.03%  10.53%
  {188416,   23,    2,  287},  // 79     1  0.03%    0.03%   9.52%
  {204800,   25,    2,  287},  // 80     1  0.02%    0.03%   8.70%
  {221184,   27,    2,  287},  // 81     1  0.02%    0.03%   8.00%
  {237568,   29,    2,  287},  // 82     1  0.02%    0.03%   7.41%
  {262144,   32,    2,  287},  // 83     1  0.02%    0.03%  10.34%
};
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 4665},  //  0  4096  0.15%    1.60%   0.00%
  {    16,    1,   32, 4665},  //  1  2048  0.15%    1.60% 100.00%
  {    32,    1,   32, 4665},  //  2  1024  0.15%    1.60% 100.00%
  {    64,    1,   32, 4665},  //  3   512  0.15%    1.60% 100.00%
  {    80,    1,   32, 4665},  //  4   409  0.29%    1.60%  25.00%
  {    96,    1,   32, 4066},  //  5   341  0.24%    1.60%  20.00%
  {   112,    1,   32, 2699},  //  6   292  0.34%    1.60%  16.67%
  {   128,    1,   32, 3125},  //  7   256  0.15%    1.60%  14.29%
  {   144,    1,   32, 1319},  //  8   227  0.39%    1.60%  12.50%
  {   160,    1,   32, 1155},  //  9   204  0.54%    1.60%  11.11%
  {   176,    1,   32, 1123},  // 10   186  0.24%    1.60%  10.00%
  {   192,    1,   32, 1018},  // 11   170  0.54%    1.60%   9.09%
  {   208,    1,   32,  825},  // 12   157  0.49%    1.60%   8.33%
  {   224,    1,   32,  688},  // 13   146  0.34%    1.60%   7.69%
  {   240,    1,   32,  522},  // 14   136  0.54%    1.60%   7.14%
  {   256,    1,   32, 1178},  // 15   128  0.15%    1.60%   6.67%
  {   288,    1,   32,  686},  // 16   113  0.83%    1.60%  12.50%
  {   320,    1,   32,  597},  // 17   102  0.54%    1.60%  11.11%
  {   352,    1,   32,  718},  // 18    93  0.24%    1.60%  10.00%
  {   384,    1,   32,  542},  // 19    85  0.54%    1.60%   9.09%
  {   400,    1,   32,  360},  // 20    81  1.27%    1.60%   4.17%
  {   448,    1,   32,  501},  // 21    73  0.34%    1.60%  12.00%
  {   480,    1,   32,  503},  // 22    68  0.54%    1.60%   7.14%
  {   512,    1,   32,  624},  // 23    64  0.15%    1.60%   6.67%
  {   576,    1,   32,  467},  // 24    56  1.71%    1.60%  12.50%
  {   640,    1,   32,  581},  // 25    51  0.54%    1.60%  11.11%
  {   704,    1,   32,  440},  // 26    46  1.32%    1.60%  10.00%
  {   768,    1,   32,  453},  // 27    42  1.71%    1.60%   9.09%
  {   832,    1,   32,  410},  // 28    39  1.12%    1.60%   8.33%
  {   896,    1,   32,  367},  // 29    36  1.71%    1.60%   7.69%
  {  1024,    1,   32,  679},  // 30    32  0.15%    1.60%  14.29%
  {  1152,    1,   32,  408},  // 31    28  1.71%    1.60%  12.50%
  {  1280,    1,   32,  374},  // 32    25  2.49%    1.60%  11.11%
  {  1408,    1,   32,  355},  // 33    23  1.32%    1.60%  10.00%
  {  1536,    1,   32,  403},  // 34    21  1.71%    1.60%   9.09%
  {  1664,    1,   32,  335},  // 35    19  3.66%    1.60%   8.33%
  {  1792,    1,   32,  326},  // 36    18  1.71%    1.60%   7.69%
  {  1920,    1,   32,  312},  // 37    17  0.54%    1.60%   7.14%
  {  2048,    1,   32,  387},  // 38    16  0.15%    1.60%   6.67%
  {  2176,    1,   30,  378},  // 39    15  0.54%    1.60%   6.25%
  {  2304,    1,   28,  317},  // 40    14  1.71%    1.60%   5.88%
  {  2432,    1,   26,  312},  // 41    13  3.66%    1.60%   5.56%
  {  2688,    1,   24,  323},  // 42    12  1.71%    1.60%  10.53%
  {  2944,    1,   22,  312},  // 43    11  1.32%    1.60%   9.52%
  {  3200,    1,   20,  317},  // 44    10  2.49%    1.60%   8.70%
  {  3584,    1,   18,  312},  // 45     9  1.71%    1.60%  12.00%
  {  4096,    1,   16,  608},  // 46     8  0.15%    1.60%  14.29%
  {  4608,    1,   14,  328},  // 47     7  1.71%    1.60%  12.50%
  {  5376,    1,   12,  314},  // 48     6  1.71%    1.60%  16.67%
  {  6528,    1,   10,  333},  // 49     5  0.54%    1.60%  21.43%
  {  7168,    2,    9,  296},  // 50     9  1.63%    1.60%   9.80%
  {  8192,    1,    8,  419},  // 51     4  0.15%    1.60%  14.29%
  {  9344,    2,    7,  310},  // 52     7  0.27%    1.60%  14.06%
  { 10880,    1,    6,  298},  // 53     3  0.54%    1.60%  16.44%
  { 13056,    2,    5,  308},  // 54     5  0.46%    1.60%  20.00%
  { 13952,    3,    4,  294},  // 55     7  0.70%    1.60%   6.86%
  { 16384,    1,    4,  392},  // 56     2  0.15%    1.60%  17.43%
  { 19072,    3,    3,  303},  // 57     5  3.04%    1.62%  16.41%
  { 21760,    2,    3,  296},  // 58     3  0.46%    1.60%  14.09%
  { 24576,    3,    2,  296},  // 59     4  0.05%    1.60%  12.94%
  { 26112,    4,    2,  294},  // 60     5  0.43%    1.60%   6.25%
  { 28672,    7,    2,  294},  // 61     8  0.02%    1.60%   9.80%
  { 32768,    1,    2,  328},  // 62     1  0.15%    0.03%  14.29%
  { 38144,    5,    2,  294},  // 63     4  6.90%    3.28%  16.41%
  { 40960,    4,    2,  286},  // 64     3  6.28%    3.28%   7.38%
  { 49152,    3,    2,  294},  // 65     2  0.05%    3.16%  20.00%
  { 57344,    7,    2,  294},  // 66     4  0.02%    3.16%  16.67%
  { 65536,    2,    2,  310},  // 67     1  0.07%    0.03%  14.29%
  { 81920,    5,    2,  296},  // 68     2  0.03%    4.72%  25.00%
  { 98304,    3,    2,  292},  // 69     1  0.05%    0.03%  20.00%
  {114688,    7,    2,  294},  // 70     2  0.02%    6.28%  16.67%
  {131072,    4,    2,  337},  // 71     1  0.04%    0.03%  14.29%
  {163840,    5,    2,  292},  // 72     1  0.03%    0.03%  25.00%
  {196608,    6,    2,  292},  // 73     1  0.02%    0.03%  20.00%
  {229376,    7,    2,  292},  // 74     1  0.02%    0.03%  16.67%
  {262144,    8,    2,  294},  // 75     1  0.02%    0.03%  14.29%
};
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = true,
  .span_size = 48,
  .sampling_interval = 2097152,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 4831},  //  0 32768  0.02%   12.53%   0.00%
  {    16,    1,   32, 4831},  //  1 16384  0.02%   12.53% 100.00%
  {    32,    1,   32, 4831},  //  2  8192  0.02%   12.53% 100.00%
  {    64,    1,   32, 4831},  //  3  4096  0.02%   12.53% 100.00%
  {    80,    1,   32, 4831},  //  4  3276  0.04%   12.53%  25.00%
  {    96,    1,   32, 2418},  //  5  2730  0.04%   12.53%  20.00%
  {   112,    1,   32, 1800},  //  6  2340  0.04%   12.53%  16.67%
  {   128,    1,   32, 1587},  //  7  2048  0.02%   12.53%  14.29%
  {   144,    1,   32, 1470},  //  8  1820  0.04%   12.53%  12.50%
  {   160,    1,   32, 1283},  //  9  1638  0.04%   12.53%  11.11%
  {   176,    1,   32,  967},  // 10  1489  0.05%   12.53%  10.00%
  {   192,    1,   32,  920},  // 11  1365  0.04%   12.53%   9.09%
  {   208,    1,   32,  653},  // 12  1260  0.04%   12.53%   8.33%
  {   224,    1,   32,  823},  // 13  1170  0.04%   12.53%   7.69%
  {   240,    1,   32,  394},  // 14  1092  0.04%   12.53%   7.14%
  {   256,    1,   32,  988},  // 15  1024  0.02%   12.53%   6.67%
  {   272,    1,   32,  564},  // 16   963  0.10%   12.53%   6.25%
  {   304,    1,   32,  807},  // 17   862  0.05%   12.53%  11.76%
  {   336,    1,   32,  764},  // 18   780  0.04%   12.53%  10.53%
  {   384,    1,   32,  545},  // 19   682  0.12%   12.53%  14.29%
  {   416,    1,   32,  465},  // 20   630  0.04%   12.53%   8.33%
  {   448,    1,   32,  576},  // 21   585  0.04%   12.53%   7.69%
  {   480,    1,   32,  377},  // 22   546  0.04%   12.53%   7.14%
  {   512,    1,   32,  566},  // 23   512  0.02%   12.53%   6.67%
  {   576,    1,   32,  472},  // 24   455  0.04%   12.53%  12.50%
  {   640,    1,   32,  526},  // 25   409  0.16%   12.53%  11.11%
  {   704,    1,   32,  415},  // 26   372  0.12%   12.53%  10.00%
  {   768,    1,   32,  413},  // 27   341  0.12%   12.53%   9.09%
  {   896,    1,   32,  446},  // 28   292  0.21%   12.53%  16.67%
  {  1024,    1,   32,  606},  // 29   256  0.02%   12.53%  14.29%
  {  1152,    1,   32,  427},  // 30   227  0.26%   12.53%  12.50%
  {  1280,    1,   32,  392},  // 31   204  0.41%   12.53%  11.11%
  {  1408,    1,   32,  351},  // 32   186  0.12%   12.53%  10.00%
  {  1536,    1,   32,  356},  // 33   170  0.41%   12.53%   9.09%
  {  1664,    1,   32,  462},  // 34   157  0.36%   12.53%   8.33%
  {  1920,    1,   32,  413},  // 35   136  0.41%   12.53%  15.38%
  {  2048,    1,   32,  392},  // 36   128  0.02%   12.53%   6.67%
  {  2304,    1,   28,  382},  // 37   113  0.70%   12.53%  12.50%
  {  2560,    1,   25,  340},  // 38   102  0.41%   12.53%  11.11%
  {  2688,    1,   24,  366},  // 39    97  0.56%   12.53%   5.00%
  {  3072,    1,   21,  328},  // 40    85  0.41%   12.53%  14.29%
  {  3328,    1,   19,  323},  // 41    78  0.99%   12.54%   8.33%
  {  3584,    1,   18,  316},  // 42    73  0.21%   12.53%   7.69%
  {  3840,    1,   17,  314},  // 43    68  0.41%   12.53%   7.14%
  {  4096,    1,   16,  559},  // 44    64  0.02%   12.53%   6.67%
  {  4224,    1,   15,  309},  // 45    62  0.12%   12.53%   3.12%
  {  4480,    1,   14,  323},  // 46    58  0.90%   12.54%   6.06%
  {  4736,    1,   13,  311},  // 47    55  0.65%   12.54%   5.71%
  {  5120,    1,   12,  321},  // 48    51  0.41%   12.53%   8.11%
  {  5504,    1,   11,  311},  // 49    47  1.34%   12.54%   7.50%
  {  6144,    1,   10,  311},  // 50    42  1.58%   12.54%  11.63%
  {  6528,    1,   10,  309},  // 51    40  0.41%   12.53%   6.25%
  {  7168,    1,    9,  307},  // 52    36  1.58%   12.54%   9.80%
  {  8192,    1,    8,  351},  // 53    32  0.02%   12.53%  14.29%
  {  8704,    1,    7,  309},  // 54    30  0.41%   12.54%   6.25%
  {  9344,    1,    7,  307},  // 55    28  0.21%   12.53%   7.35%
  { 10368,    1,    6,  307},  // 56    25  1.14%   12.54%  10.96%
  { 11392,    1,    5,  304},  // 57    23  0.07%   12.53%   9.88%
  { 12416,    1,    5,  309},  // 58    21  0.56%   12.54%   8.99%
  { 13056,    1,    5,  304},  // 59    20  0.41%   12.54%   5.15%
  { 13696,    1,    4,  304},  // 60    19  0.75%   12.54%   4.90%
  { 15360,    1,    4,  307},  // 61    17  0.41%   12.54%  12.15%
  { 16384,    1,    4,  321},  // 62    16  0.02%   12.53%   6.67%
  { 17408,    1,    3,  304},  // 63    15  0.41%   12.54%   6.25%
  { 18688,    1,    3,  307},  // 64    14  0.21%   12.54%   7.35%
  { 20096,    1,    3,  304},  // 65    13  0.36%   12.54%   7.53%
  { 21760,    1,    3,  307},  // 66    12  0.41%   12.54%   8.28%
  { 23808,    1,    2,  307},  // 67    11  0.12%   12.53%   9.41%
  { 26112,    1,    2,  307},  // 68    10  0.41%   12.54%   9.68%
  { 29056,    1,    2,  307},  // 69     9  0.26%   12.54%  11.27%
  { 32768,    1,    2,  359},  // 70     8  0.02%   12.53%  12.78%
  { 37376,    1,    2,  304},  // 71     7  0.21%   12.54%  14.06%
  { 43648,    1,    2,  304},  // 72     6  0.12%   12.54%  16.78%
  { 45568,    2,    2,  302},  // 73    11  4.40%   12.63%   4.40%
  { 52352,    1,    2,  304},  // 74     5  0.16%   12.54%  14.89%
  { 56064,    2,    2,  302},  // 75     9  3.77%   12.63%   7.09%
  { 65536,    1,    2,  307},  // 76     4  0.02%   12.53%  16.89%
  { 74880,    2,    2,  304},  // 77     7  0.03%   12.53%  14.26%
  { 87296,    1,    2,  302},  // 78     3  0.12%   12.54%  16.58%
  {104832,    2,    2,  302},  // 79     5  0.03%   12.54%  20.09%
  {112256,    3,    2,  302},  // 80     7  0.09%   12.54%   7.08%
  {131072,    1,    2,  304},  // 81     2  0.02%   12.53%  16.76%
  {149760,    3,    2,  302},  // 82     5  4.79%   12.88%  14.26%
  {174720,    2,    2,  302},  // 83     3  0.03%   12.54%  16.67%
  {196608,    3,    2,  300},  // 84     4  0.01%   12.53%  12.53%
  {209664,    4,    2,  302},  // 85     5  0.03%   12.54%   6.64%
  {262144,    1,    2,  307},  // 86     1  0.02%    0.03%  25.03%
};
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static constexpr SizeClassAssumptions Assumptions{
  .has_expanded_classes = false,
  .span_size = 48,
  .sampling_interval = 524288,
  .large_size = 1024,
  .large_size_alignment = 128,
};
static constexpr SizeClassInfo List[] = {
//                                         |    waste     |
//  bytes pages batch   cap    class  objs |fixed sampling|    inc
  {     0,    0,    0,    0},  //  0     0  0.00%    0.00%   0.00%
  {     8,    1,   32, 5811},  //  0   512  1.16%    0.92%   0.00%
  {    16,    1,   32, 5811},  //  1   256  1.16%    0.92% 100.00%
  {    32,    1,   32, 5811},  //  2   128  1.16%    0.92% 100.00%
  {    64,    1,   32, 5811},  //  3    64  1.16%    0.92% 100.00%
  {    80,    1,   32, 5811},  //  4    51  1.54%    0.92%  25.00%
  {    96,    1,   32, 3615},  //  5    42  2.70%    0.92%  20.00%
  {   112,    1,   32, 2468},  //  6    36  2.70%    0.92%  16.67%
  {   128,    1,   32, 2667},  //  7    32  1.16%    0.92%  14.29%
  {   144,    1,   32, 2037},  //  8    28  2.70%    0.92%  12.50%
  {   160,    1,   32, 2017},  //  9    25  3.47%    0.92%  11.11%
  {   176,    1,   32,  973},  // 10    23  2.32%    0.92%  10.00%
  {   192,    1,   32,  999},  // 11    21  2.70%    0.92%   9.09%
  {   208,    1,   32,  885},  // 12    19  4.63%    0.92%   8.33%
  {   224,    1,   32,  820},  // 13    18  2.70%    0.92%   7.69%
  {   240,    1,   32,  800},  // 14    17  1.54%    0.92%   7.14%
  {   256,    1,   32, 1226},  // 15    16  1.16%    0.92%   6.67%
  {   272,    1,   32,  582},  // 16    15  1.54%    0.92%   6.25%
  {   288,    1,   32,  502},  // 17    14  2.70%    0.92%   5.88%
  {   304,    1,   32,  460},  // 18    13  4.63%    0.92%   5.56%
  {   336,    1,   32,  854},  // 19    12  2.70%    0.92%  10.53%
  {   368,    1,   32,  485},  // 20    11  2.32%    0.92%   9.52%
  {   448,    1,   32,  559},  // 21     9  2.70%    0.92%  21.74%
  {   512,    1,   32, 1370},  // 22     8  1.16%    0.92%  14.29%
  {   576,    2,   32,  684},  // 23    14  2.14%    0.92%  12.50%
  {   640,    2,   32,  403},  // 24    12  6.80%    0.92%  11.11%
  {   704,    2,   32,  389},  // 25    11  6.02%    0.92%  10.00%
  {   768,    2,   32,  497},  // 26    10  6.80%    0.93%   9.09%
  {   896,    2,   32,  721},  // 27     9  2.14%    0.92%  16.67%
  {  1024,    2,   32, 3115},  // 28     8  0.58%    0.92%  14.29%
  {  1152,    3,   32,  451},  // 29    10  6.61%    0.93%  12.50%
  {  1280,    3,   32,  372},  // 30     9  6.61%    0.93%  11.11%
  {  1536,    3,   32,  420},  // 31     8  0.39%    0.92%  20.00%
  {  1792,    4,   32,  406},  // 32     9  1.85%    0.92%  16.67%
  {  2048,    4,   32,  562},  // 33     8  0.29%    0.92%  14.29%
  {  2304,    4,   28,  380},  // 34     7  1.85%    0.92%  12.50%
  {  2688,    4,   24,  394},  // 35     6  1.85%    0.93%  16.67%
  {  3200,    4,   20,  389},  // 36     5  2.63%    0.93%  19.05%
  {  3584,    7,   18,  409},  // 37     8  0.17%    0.92%  12.00%
  {  4096,    4,   16, 1430},  // 38     4  0.29%    0.92%  14.29%
  {  4736,    5,   13,  440},  // 39     4  7.72%    1.77%  15.62%
  {  5376,    4,   12,  361},  // 40     3  1.85%    1.72%  13.51%
  {  6144,    3,   10,  369},  // 41     2  0.39%    1.70%  14.29%
  {  7168,    7,    9,  377},  // 42     4  0.17%    1.70%  16.67%
  {  8192,    4,    8,  505},  // 43     2  0.29%    1.70%  14.29%
};
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#endif
// clang-format on

static_assert(sizeof(List) / sizeof(List[0]) <= kNumBaseClasses);
extern constexpr SizeClasses kSizeClasses{List, Assumptions};

}  // namespace tcmalloc_internal
}  // namespace tcmalloc
GOOGLE_MALLOC_SECTION_END
