--- contrib/python/aiohttp/aiohttp/client.py
+++ contrib/python/aiohttp/aiohttp/client.py
@@ -174,11 +174,11 @@ class _RequestOptions(TypedDict, total=False):
     read_until_eof: bool
     proxy: Union[StrOrURL, None]
     proxy_auth: Union[BasicAuth, None]
-    timeout: "Union[ClientTimeout, _SENTINEL, None]"
+    timeout: "Union[ClientTimeout, _SENTINEL, int, float, None]"
     ssl: Union[SSLContext, bool, Fingerprint]
     server_hostname: Union[str, None]
     proxy_headers: Union[LooseHeaders, None]
-    trace_request_ctx: Union[Mapping[str, str], None]
+    trace_request_ctx: Any #Union[Mapping[str, str], None]
     read_bufsize: Union[int, None]
     auto_decompress: Union[bool, None]
     max_line_size: Union[int, None]
--- contrib/python/aiohttp/aiohttp/typedefs.py
+++ contrib/python/aiohttp/aiohttp/typedefs.py
@@ -69,12 +69,7 @@ LooseCookies = Union[
 ]
 
 Handler = Callable[["Request"], Awaitable["StreamResponse"]]
-
-
-class Middleware(Protocol):
-    def __call__(
-        self, request: "Request", handler: Handler
-    ) -> Awaitable["StreamResponse"]: ...
+Middleware = Callable[["Request", Handler], Awaitable["StreamResponse"]]
 
 
 PathLike = Union[str, "os.PathLike[str]"]
--- contrib/python/aiohttp/aiohttp/multipart.py
+++ contrib/python/aiohttp/aiohttp/multipart.py
@@ -287,7 +287,7 @@ class BodyPartReader:
         self._content_eof = 0
         self._cache: Dict[str, Any] = {}
 
-    def __aiter__(self: Self) -> Self:
+    def __aiter__(self: Self):
         return self
 
     async def __anext__(self) -> bytes:
@@ -593,7 +593,7 @@ class MultipartReader:
     response_wrapper_cls = MultipartResponseWrapper
     #: Multipart reader class, used to handle multipart/* body parts.
     #: None points to type(self)
-    multipart_reader_cls: Optional[Type["MultipartReader"]] = None
+    multipart_reader_cls = None
     #: Body part reader class for non multipart/* content types.
     part_reader_cls = BodyPartReader
 
@@ -614,7 +614,7 @@ class MultipartReader:
         self._at_bof = True
         self._unread: List[bytes] = []
 
-    def __aiter__(self: Self) -> Self:
+    def __aiter__(self: Self):
         return self
 
     async def __anext__(
