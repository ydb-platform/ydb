# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.34
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class V1FileKeySelector(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key': 'str',
        'optional': 'bool',
        'path': 'str',
        'volume_name': 'str'
    }

    attribute_map = {
        'key': 'key',
        'optional': 'optional',
        'path': 'path',
        'volume_name': 'volumeName'
    }

    def __init__(self, key=None, optional=None, path=None, volume_name=None, local_vars_configuration=None):  # noqa: E501
        """V1FileKeySelector - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._optional = None
        self._path = None
        self._volume_name = None
        self.discriminator = None

        self.key = key
        if optional is not None:
            self.optional = optional
        self.path = path
        self.volume_name = volume_name

    @property
    def key(self):
        """Gets the key of this V1FileKeySelector.  # noqa: E501

        The key within the env file. An invalid key will prevent the pod from starting. The keys defined within a source may consist of any printable ASCII characters except '='. During Alpha stage of the EnvFiles feature gate, the key size is limited to 128 characters.  # noqa: E501

        :return: The key of this V1FileKeySelector.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this V1FileKeySelector.

        The key within the env file. An invalid key will prevent the pod from starting. The keys defined within a source may consist of any printable ASCII characters except '='. During Alpha stage of the EnvFiles feature gate, the key size is limited to 128 characters.  # noqa: E501

        :param key: The key of this V1FileKeySelector.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and key is None:  # noqa: E501
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def optional(self):
        """Gets the optional of this V1FileKeySelector.  # noqa: E501

        Specify whether the file or its key must be defined. If the file or key does not exist, then the env var is not published. If optional is set to true and the specified key does not exist, the environment variable will not be set in the Pod's containers.  If optional is set to false and the specified key does not exist, an error will be returned during Pod creation.  # noqa: E501

        :return: The optional of this V1FileKeySelector.  # noqa: E501
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this V1FileKeySelector.

        Specify whether the file or its key must be defined. If the file or key does not exist, then the env var is not published. If optional is set to true and the specified key does not exist, the environment variable will not be set in the Pod's containers.  If optional is set to false and the specified key does not exist, an error will be returned during Pod creation.  # noqa: E501

        :param optional: The optional of this V1FileKeySelector.  # noqa: E501
        :type: bool
        """

        self._optional = optional

    @property
    def path(self):
        """Gets the path of this V1FileKeySelector.  # noqa: E501

        The path within the volume from which to select the file. Must be relative and may not contain the '..' path or start with '..'.  # noqa: E501

        :return: The path of this V1FileKeySelector.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this V1FileKeySelector.

        The path within the volume from which to select the file. Must be relative and may not contain the '..' path or start with '..'.  # noqa: E501

        :param path: The path of this V1FileKeySelector.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def volume_name(self):
        """Gets the volume_name of this V1FileKeySelector.  # noqa: E501

        The name of the volume mount containing the env file.  # noqa: E501

        :return: The volume_name of this V1FileKeySelector.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this V1FileKeySelector.

        The name of the volume mount containing the env file.  # noqa: E501

        :param volume_name: The volume_name of this V1FileKeySelector.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and volume_name is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_name`, must not be `None`")  # noqa: E501

        self._volume_name = volume_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1FileKeySelector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1FileKeySelector):
            return True

        return self.to_dict() != other.to_dict()
