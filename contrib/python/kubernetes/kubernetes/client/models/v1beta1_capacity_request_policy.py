# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.34
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class V1beta1CapacityRequestPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default': 'str',
        'valid_range': 'V1beta1CapacityRequestPolicyRange',
        'valid_values': 'list[str]'
    }

    attribute_map = {
        'default': 'default',
        'valid_range': 'validRange',
        'valid_values': 'validValues'
    }

    def __init__(self, default=None, valid_range=None, valid_values=None, local_vars_configuration=None):  # noqa: E501
        """V1beta1CapacityRequestPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._default = None
        self._valid_range = None
        self._valid_values = None
        self.discriminator = None

        if default is not None:
            self.default = default
        if valid_range is not None:
            self.valid_range = valid_range
        if valid_values is not None:
            self.valid_values = valid_values

    @property
    def default(self):
        """Gets the default of this V1beta1CapacityRequestPolicy.  # noqa: E501

        Default specifies how much of this capacity is consumed by a request that does not contain an entry for it in DeviceRequest's Capacity.  # noqa: E501

        :return: The default of this V1beta1CapacityRequestPolicy.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this V1beta1CapacityRequestPolicy.

        Default specifies how much of this capacity is consumed by a request that does not contain an entry for it in DeviceRequest's Capacity.  # noqa: E501

        :param default: The default of this V1beta1CapacityRequestPolicy.  # noqa: E501
        :type: str
        """

        self._default = default

    @property
    def valid_range(self):
        """Gets the valid_range of this V1beta1CapacityRequestPolicy.  # noqa: E501


        :return: The valid_range of this V1beta1CapacityRequestPolicy.  # noqa: E501
        :rtype: V1beta1CapacityRequestPolicyRange
        """
        return self._valid_range

    @valid_range.setter
    def valid_range(self, valid_range):
        """Sets the valid_range of this V1beta1CapacityRequestPolicy.


        :param valid_range: The valid_range of this V1beta1CapacityRequestPolicy.  # noqa: E501
        :type: V1beta1CapacityRequestPolicyRange
        """

        self._valid_range = valid_range

    @property
    def valid_values(self):
        """Gets the valid_values of this V1beta1CapacityRequestPolicy.  # noqa: E501

        ValidValues defines a set of acceptable quantity values in consuming requests.  Must not contain more than 10 entries. Must be sorted in ascending order.  If this field is set, Default must be defined and it must be included in ValidValues list.  If the requested amount does not match any valid value but smaller than some valid values, the scheduler calculates the smallest valid value that is greater than or equal to the request. That is: min(ceil(requestedValue) ∈ validValues), where requestedValue ≤ max(validValues).  If the requested amount exceeds all valid values, the request violates the policy, and this device cannot be allocated.  # noqa: E501

        :return: The valid_values of this V1beta1CapacityRequestPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._valid_values

    @valid_values.setter
    def valid_values(self, valid_values):
        """Sets the valid_values of this V1beta1CapacityRequestPolicy.

        ValidValues defines a set of acceptable quantity values in consuming requests.  Must not contain more than 10 entries. Must be sorted in ascending order.  If this field is set, Default must be defined and it must be included in ValidValues list.  If the requested amount does not match any valid value but smaller than some valid values, the scheduler calculates the smallest valid value that is greater than or equal to the request. That is: min(ceil(requestedValue) ∈ validValues), where requestedValue ≤ max(validValues).  If the requested amount exceeds all valid values, the request violates the policy, and this device cannot be allocated.  # noqa: E501

        :param valid_values: The valid_values of this V1beta1CapacityRequestPolicy.  # noqa: E501
        :type: list[str]
        """

        self._valid_values = valid_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1CapacityRequestPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1CapacityRequestPolicy):
            return True

        return self.to_dict() != other.to_dict()
