# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.34
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class V1beta1CapacityRequestPolicyRange(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'max': 'str',
        'min': 'str',
        'step': 'str'
    }

    attribute_map = {
        'max': 'max',
        'min': 'min',
        'step': 'step'
    }

    def __init__(self, max=None, min=None, step=None, local_vars_configuration=None):  # noqa: E501
        """V1beta1CapacityRequestPolicyRange - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._max = None
        self._min = None
        self._step = None
        self.discriminator = None

        if max is not None:
            self.max = max
        self.min = min
        if step is not None:
            self.step = step

    @property
    def max(self):
        """Gets the max of this V1beta1CapacityRequestPolicyRange.  # noqa: E501

        Max defines the upper limit for capacity that can be requested.  Max must be less than or equal to the capacity value. Min and requestPolicy.default must be less than or equal to the maximum.  # noqa: E501

        :return: The max of this V1beta1CapacityRequestPolicyRange.  # noqa: E501
        :rtype: str
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this V1beta1CapacityRequestPolicyRange.

        Max defines the upper limit for capacity that can be requested.  Max must be less than or equal to the capacity value. Min and requestPolicy.default must be less than or equal to the maximum.  # noqa: E501

        :param max: The max of this V1beta1CapacityRequestPolicyRange.  # noqa: E501
        :type: str
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this V1beta1CapacityRequestPolicyRange.  # noqa: E501

        Min specifies the minimum capacity allowed for a consumption request.  Min must be greater than or equal to zero, and less than or equal to the capacity value. requestPolicy.default must be more than or equal to the minimum.  # noqa: E501

        :return: The min of this V1beta1CapacityRequestPolicyRange.  # noqa: E501
        :rtype: str
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this V1beta1CapacityRequestPolicyRange.

        Min specifies the minimum capacity allowed for a consumption request.  Min must be greater than or equal to zero, and less than or equal to the capacity value. requestPolicy.default must be more than or equal to the minimum.  # noqa: E501

        :param min: The min of this V1beta1CapacityRequestPolicyRange.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and min is None:  # noqa: E501
            raise ValueError("Invalid value for `min`, must not be `None`")  # noqa: E501

        self._min = min

    @property
    def step(self):
        """Gets the step of this V1beta1CapacityRequestPolicyRange.  # noqa: E501

        Step defines the step size between valid capacity amounts within the range.  Max (if set) and requestPolicy.default must be a multiple of Step. Min + Step must be less than or equal to the capacity value.  # noqa: E501

        :return: The step of this V1beta1CapacityRequestPolicyRange.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this V1beta1CapacityRequestPolicyRange.

        Step defines the step size between valid capacity amounts within the range.  Max (if set) and requestPolicy.default must be a multiple of Step. Min + Step must be less than or equal to the capacity value.  # noqa: E501

        :param step: The step of this V1beta1CapacityRequestPolicyRange.  # noqa: E501
        :type: str
        """

        self._step = step

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1CapacityRequestPolicyRange):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1CapacityRequestPolicyRange):
            return True

        return self.to_dict() != other.to_dict()
