# distutils: language = c++
# cython: language_level=3

# This file was generated by stats/_boost/include/code_gen.py
# All modifications to this file will be overwritten.

from numpy cimport (
    import_array,
    import_ufunc,
    PyUFunc_FromFuncAndData,
    PyUFuncGenericFunction,
    PyUFunc_None,
    NPY_FLOAT,
    NPY_DOUBLE
)
from templated_pyufunc cimport PyUFunc_T
from func_defs cimport (
    boost_pdf_beta2,
    boost_cdf2,
    boost_sf2,
    boost_ppf2,
    boost_isf2,
    boost_mean2,
    boost_variance2,
    boost_skewness2,
    boost_kurtosis_excess2,
)
cdef extern from "boost/math/distributions/beta.hpp" namespace "boost::math" nogil:
    cdef cppclass beta_distribution nogil:
        pass

# Workaround for Cython's lack of non-type template parameter
# support
cdef extern from * nogil:
    ctypedef int NINPUTS2 "2"
    ctypedef int NINPUTS3 "3"

_DUMMY = ""
import_array()
import_ufunc()

cdef PyUFuncGenericFunction loop_func0[2]
cdef void* func0[1*2]
cdef char types0[4*2]
loop_func0[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS3]
func0[0] = <void*>boost_pdf_beta2[beta_distribution, float, float, float]
types0[0+0*4] = NPY_FLOAT
types0[1+0*4] = NPY_FLOAT
types0[2+0*4] = NPY_FLOAT
types0[3+0*4] = NPY_FLOAT
loop_func0[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS3]
func0[1] = <void*>boost_pdf_beta2[beta_distribution, double, double, double]
types0[0+1*4] = NPY_DOUBLE
types0[1+1*4] = NPY_DOUBLE
types0[2+1*4] = NPY_DOUBLE
types0[3+1*4] = NPY_DOUBLE

_beta_pdf = PyUFunc_FromFuncAndData(
    loop_func0,
    func0,
    types0,
    2,  # number of supported input types
    3,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_beta_pdf",  # function name
    ("_beta_pdf(a, b) -> computes "
     "pdf_beta of beta distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func1[2]
cdef void* func1[1*2]
cdef char types1[4*2]
loop_func1[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS3]
func1[0] = <void*>boost_cdf2[beta_distribution, float, float, float]
types1[0+0*4] = NPY_FLOAT
types1[1+0*4] = NPY_FLOAT
types1[2+0*4] = NPY_FLOAT
types1[3+0*4] = NPY_FLOAT
loop_func1[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS3]
func1[1] = <void*>boost_cdf2[beta_distribution, double, double, double]
types1[0+1*4] = NPY_DOUBLE
types1[1+1*4] = NPY_DOUBLE
types1[2+1*4] = NPY_DOUBLE
types1[3+1*4] = NPY_DOUBLE

_beta_cdf = PyUFunc_FromFuncAndData(
    loop_func1,
    func1,
    types1,
    2,  # number of supported input types
    3,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_beta_cdf",  # function name
    ("_beta_cdf(x, a, b) -> computes "
     "cdf of beta distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func2[2]
cdef void* func2[1*2]
cdef char types2[4*2]
loop_func2[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS3]
func2[0] = <void*>boost_sf2[beta_distribution, float, float, float]
types2[0+0*4] = NPY_FLOAT
types2[1+0*4] = NPY_FLOAT
types2[2+0*4] = NPY_FLOAT
types2[3+0*4] = NPY_FLOAT
loop_func2[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS3]
func2[1] = <void*>boost_sf2[beta_distribution, double, double, double]
types2[0+1*4] = NPY_DOUBLE
types2[1+1*4] = NPY_DOUBLE
types2[2+1*4] = NPY_DOUBLE
types2[3+1*4] = NPY_DOUBLE

_beta_sf = PyUFunc_FromFuncAndData(
    loop_func2,
    func2,
    types2,
    2,  # number of supported input types
    3,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_beta_sf",  # function name
    ("_beta_sf(x, a, b) -> computes "
     "sf of beta distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func3[2]
cdef void* func3[1*2]
cdef char types3[4*2]
loop_func3[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS3]
func3[0] = <void*>boost_ppf2[beta_distribution, float, float, float]
types3[0+0*4] = NPY_FLOAT
types3[1+0*4] = NPY_FLOAT
types3[2+0*4] = NPY_FLOAT
types3[3+0*4] = NPY_FLOAT
loop_func3[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS3]
func3[1] = <void*>boost_ppf2[beta_distribution, double, double, double]
types3[0+1*4] = NPY_DOUBLE
types3[1+1*4] = NPY_DOUBLE
types3[2+1*4] = NPY_DOUBLE
types3[3+1*4] = NPY_DOUBLE

_beta_ppf = PyUFunc_FromFuncAndData(
    loop_func3,
    func3,
    types3,
    2,  # number of supported input types
    3,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_beta_ppf",  # function name
    ("_beta_ppf(x, a, b) -> computes "
     "ppf of beta distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func4[2]
cdef void* func4[1*2]
cdef char types4[4*2]
loop_func4[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS3]
func4[0] = <void*>boost_isf2[beta_distribution, float, float, float]
types4[0+0*4] = NPY_FLOAT
types4[1+0*4] = NPY_FLOAT
types4[2+0*4] = NPY_FLOAT
types4[3+0*4] = NPY_FLOAT
loop_func4[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS3]
func4[1] = <void*>boost_isf2[beta_distribution, double, double, double]
types4[0+1*4] = NPY_DOUBLE
types4[1+1*4] = NPY_DOUBLE
types4[2+1*4] = NPY_DOUBLE
types4[3+1*4] = NPY_DOUBLE

_beta_isf = PyUFunc_FromFuncAndData(
    loop_func4,
    func4,
    types4,
    2,  # number of supported input types
    3,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_beta_isf",  # function name
    ("_beta_isf(x, a, b) -> computes "
     "isf of beta distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func5[2]
cdef void* func5[1*2]
cdef char types5[3*2]
loop_func5[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS2]
func5[0] = <void*>boost_mean2[beta_distribution, float, float, float]
types5[0+0*3] = NPY_FLOAT
types5[1+0*3] = NPY_FLOAT
types5[2+0*3] = NPY_FLOAT
loop_func5[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS2]
func5[1] = <void*>boost_mean2[beta_distribution, double, double, double]
types5[0+1*3] = NPY_DOUBLE
types5[1+1*3] = NPY_DOUBLE
types5[2+1*3] = NPY_DOUBLE

_beta_mean = PyUFunc_FromFuncAndData(
    loop_func5,
    func5,
    types5,
    2,  # number of supported input types
    2,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_beta_mean",  # function name
    ("_beta_mean(a, b) -> computes "
     "mean of beta distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func6[2]
cdef void* func6[1*2]
cdef char types6[3*2]
loop_func6[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS2]
func6[0] = <void*>boost_variance2[beta_distribution, float, float, float]
types6[0+0*3] = NPY_FLOAT
types6[1+0*3] = NPY_FLOAT
types6[2+0*3] = NPY_FLOAT
loop_func6[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS2]
func6[1] = <void*>boost_variance2[beta_distribution, double, double, double]
types6[0+1*3] = NPY_DOUBLE
types6[1+1*3] = NPY_DOUBLE
types6[2+1*3] = NPY_DOUBLE

_beta_variance = PyUFunc_FromFuncAndData(
    loop_func6,
    func6,
    types6,
    2,  # number of supported input types
    2,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_beta_variance",  # function name
    ("_beta_variance(a, b) -> computes "
     "variance of beta distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func7[2]
cdef void* func7[1*2]
cdef char types7[3*2]
loop_func7[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS2]
func7[0] = <void*>boost_skewness2[beta_distribution, float, float, float]
types7[0+0*3] = NPY_FLOAT
types7[1+0*3] = NPY_FLOAT
types7[2+0*3] = NPY_FLOAT
loop_func7[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS2]
func7[1] = <void*>boost_skewness2[beta_distribution, double, double, double]
types7[0+1*3] = NPY_DOUBLE
types7[1+1*3] = NPY_DOUBLE
types7[2+1*3] = NPY_DOUBLE

_beta_skewness = PyUFunc_FromFuncAndData(
    loop_func7,
    func7,
    types7,
    2,  # number of supported input types
    2,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_beta_skewness",  # function name
    ("_beta_skewness(a, b) -> computes "
     "skewness of beta distribution"),
    0  # unused
)

cdef PyUFuncGenericFunction loop_func8[2]
cdef void* func8[1*2]
cdef char types8[3*2]
loop_func8[0] = <PyUFuncGenericFunction>PyUFunc_T[float, NINPUTS2]
func8[0] = <void*>boost_kurtosis_excess2[beta_distribution, float, float, float]
types8[0+0*3] = NPY_FLOAT
types8[1+0*3] = NPY_FLOAT
types8[2+0*3] = NPY_FLOAT
loop_func8[1] = <PyUFuncGenericFunction>PyUFunc_T[double, NINPUTS2]
func8[1] = <void*>boost_kurtosis_excess2[beta_distribution, double, double, double]
types8[0+1*3] = NPY_DOUBLE
types8[1+1*3] = NPY_DOUBLE
types8[2+1*3] = NPY_DOUBLE

_beta_kurtosis_excess = PyUFunc_FromFuncAndData(
    loop_func8,
    func8,
    types8,
    2,  # number of supported input types
    2,  # number of input args
    1,  # number of output args
    PyUFunc_None,  # `identity` element, never mind this
    "_beta_kurtosis_excess",  # function name
    ("_beta_kurtosis_excess(a, b) -> computes "
     "kurtosis_excess of beta distribution"),
    0  # unused
)
