from pkgutil import extend_path

__path__ = extend_path(__path__, __name__)

from .credentials import *  # noqa
from .driver import *  # noqa
from .global_settings import *  # noqa
from .table import *  # noqa
from .issues import *  # noqa
from .types import *  # noqa
from .scheme import *  # noqa
from .settings import *  # noqa
from .resolver import *  # noqa
from .export import *  # noqa
from .auth_helpers import *  # noqa
from .operation import *  # noqa
from .scripting import *  # noqa
from .import_client import *  # noqa
from .tracing import *  # noqa
from .topic import *  # noqa

try:
    import ydb.aio as aio  # noqa
except Exception:
    pass

# THIS AND BELOW IS AUTOGENERATED for arcadia only
try:
    import kikimr.public.sdk.python.ydb_v3_new_behavior  # noqa
    global_allow_split_transactions(False)  # noqa
    global_allow_truncated_result(False)  # noqa
except ModuleNotFoundError:
    # Old, deprecated

    import warnings
    warnings.warn("Used deprecated behavior, for fix ADD PEERDIR kikimr/public/sdk/python/ydb_v3_new_behavior")

    global_allow_split_transactions(True)  # noqa
    global_allow_truncated_result(True)  # noqa


def construct_credentials_from_environ(tracer=None):
    import os
    import warnings

    from . import credentials, tracing

    tracer = tracer if tracer is not None else tracing.Tracer(None)
    warnings.warn(
        "using construct_credentials_from_environ method DEPRECATED, use ydb.credentials_from_env_variables "
    )

    # dynamically import required authentication libraries
    if (
        os.getenv("USE_METADATA_CREDENTIALS") is not None
        and int(os.getenv("USE_METADATA_CREDENTIALS")) == 1
    ):
        import ydb.iam

        tracing.trace(tracer, {"credentials.metadata": True})
        return ydb.iam.MetadataUrlCredentials()

    if os.getenv("YDB_TOKEN") is not None:
        tracing.trace(tracer, {"credentials.access_token": True})
        return credentials.AuthTokenCredentials(os.getenv("YDB_TOKEN"))

    if os.getenv("SA_KEY_FILE") is not None:

        import ydb.iam

        tracing.trace(tracer, {"credentials.sa_key_file": True})
        root_certificates_file = os.getenv("SSL_ROOT_CERTIFICATES_FILE", None)
        iam_channel_credentials = {}
        if root_certificates_file is not None:
            iam_channel_credentials = {
                "root_certificates": read_bytes(root_certificates_file)  # noqa
            }
        return ydb.iam.ServiceAccountCredentials.from_file(
            os.getenv("SA_KEY_FILE"),
            iam_channel_credentials=iam_channel_credentials,
            iam_endpoint=os.getenv("IAM_ENDPOINT", "iam.api.cloud.yandex.net:443"),
        )
