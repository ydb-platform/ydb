--- contrib/restricted/abseil-cpp-tstring/y_absl/container/internal/layout.h	(index)
+++ contrib/restricted/abseil-cpp-tstring/y_absl/container/internal/layout.h	(working tree)
@@ -306,11 +306,6 @@ constexpr size_t Max(size_t a, size_t b, Ts... rest) {
 template <class T>
 TString TypeName() {
   TString out;
-#if Y_ABSL_INTERNAL_HAS_RTTI
-  y_absl::StrAppend(&out, "<",
-                  y_absl::debugging_internal::DemangleString(typeid(T).name()),
-                  ">");
-#endif
   return out;
 }
 
--- contrib/restricted/abseil-cpp-tstring/y_absl/log/internal/log_message.cc	(index)
+++ contrib/restricted/abseil-cpp-tstring/y_absl/log/internal/log_message.cc	(working tree)
@@ -585,11 +585,15 @@ void LogMessage::LogBacktraceIfNeeded() {
     return;
   OstreamView view(*data_);
   view.stream() << " (stacktrace:\n";
+#ifndef Y_ABSL_DONT_USE_DEBUG_LIBRARY
   debugging_internal::DumpStackTrace(
       1, log_internal::MaxFramesInLogStackTrace(),
       log_internal::ShouldSymbolizeLogStackTrace(), WriteToStream,
       &view.stream());
   view.stream() << ") ";
+#else
+  view.stream() << "abseil disable stacktrace prining) ";
+#endif
 }
 
 // Encodes into `data_->encoded_remaining()` a partial `logging.proto.Event`
--- contrib/restricted/abseil-cpp-tstring/y_absl/strings/internal/cordz_info.cc	(index)
+++ contrib/restricted/abseil-cpp-tstring/y_absl/strings/internal/cordz_info.cc	(working tree)
@@ -307,9 +307,14 @@ CordzInfo::CordzInfo(CordRep* rep, const CordzInfo* src,
                      MethodIdentifier method, int64_t sampling_stride)
     : rep_(rep),
       stack_depth_(
+#ifdef Y_ABSL_DONT_USE_DEBUG_LIBRARY
+          0
+#else 
           static_cast<size_t>(y_absl::GetStackTrace(stack_,
                                                   /*max_depth=*/kMaxStackDepth,
-                                                  /*skip_count=*/1))),
+                                                  /*skip_count=*/1))
+#endif
+      ),
       parent_stack_depth_(FillParentStack(src, parent_stack_)),
       method_(method),
       parent_method_(GetParentMethod(src)),
--- contrib/restricted/abseil-cpp-tstring/y_absl/synchronization/mutex.cc	(index)
+++ contrib/restricted/abseil-cpp-tstring/y_absl/synchronization/mutex.cc	(working tree)
@@ -434,6 +434,7 @@ static SynchEvent* GetSynchEvent(const void* addr) {
 // if event recording is on
 static void PostSynchEvent(void* obj, int ev) {
   SynchEvent* e = GetSynchEvent(obj);
+#ifndef Y_ABSL_DONT_USE_DEBUG_LIBRARY
   // logging is on if event recording is on and either there's no event struct,
   // or it explicitly says to log
   if (e == nullptr || e->log) {
@@ -455,6 +456,7 @@ static void PostSynchEvent(void* obj, int ev) {
     Y_ABSL_RAW_LOG(INFO, "%s%p %s %s", event_properties[ev].msg, obj,
                  (e == nullptr ? "" : e->name), buffer);
   }
+#endif
   const int flags = event_properties[ev].flags;
   if ((flags & SYNCH_F_LCK) != 0 && e != nullptr && e->invariant != nullptr) {
     // Calling the invariant as is causes problems under ThreadSanitizer.
@@ -1320,6 +1322,7 @@ static inline void DebugOnlyLockLeave(Mutex* mu) {
 
 static char* StackString(void** pcs, int n, char* buf, int maxlen,
                          bool symbolize) {
+#ifndef Y_ABSL_DONT_USE_DEBUG_LIBRARY
   static constexpr int kSymLen = 200;
   char sym[kSymLen];
   int len = 0;
@@ -1339,12 +1342,21 @@ static char* StackString(void** pcs, int n, char* buf, int maxlen,
     len += strlen(&buf[len]);
   }
   return buf;
+#else
+  buf[0] = 0;
+  return buf;
+#endif
 }
 
 static char* CurrentStackString(char* buf, int maxlen, bool symbolize) {
+#ifndef Y_ABSL_DONT_USE_DEBUG_LIBRARY
   void* pcs[40];
   return StackString(pcs, y_absl::GetStackTrace(pcs, Y_ABSL_ARRAYSIZE(pcs), 2), buf,
                      maxlen, symbolize);
+#else
+  buf[0] = 0;
+  return buf;
+#endif
 }
 
 namespace {
@@ -1370,7 +1382,11 @@ struct ScopedDeadlockReportBuffers {
 
 // Helper to pass to GraphCycles::UpdateStackTrace.
 int GetStack(void** stack, int max_depth) {
+#ifndef Y_ABSL_DONT_USE_DEBUG_LIBRARY
   return y_absl::GetStackTrace(stack, max_depth, 3);
+#else
+  return 0;
+#endif
 }
 }  // anonymous namespace
 
