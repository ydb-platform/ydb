commit 49daa300b3ae81f69963b3a406421e7b24ff2430 (HEAD -> Try-to-use-separated-pr-10452378, arcadia/users/mikhnenko/submit-c4887d14-5ed67618-a751d28-56f4ed75)
author: mikhnenko
date: 2025-10-24T14:06:52+03:00

    fix global flags

--- contrib/restricted/grpc_py2/src/core/lib/config/config_vars.cc	(35465cc3ad1c31b5e4dd3a0223c2f544e55a1c1f)
+++ contrib/restricted/grpc_py2/src/core/lib/config/config_vars.cc	(49daa300b3ae81f69963b3a406421e7b24ff2430)
@@ -36,10 +36,10 @@
 #define GRPC_ENABLE_FORK_SUPPORT_DEFAULT false
 #endif  // GRPC_ENABLE_FORK_SUPPORT
 
-Y_ABSL_FLAG(y_absl::optional<TString>, grpc_experiments, y_absl::nullopt,
+Y_ABSL_FLAG(y_absl::optional<TString>, grpcpy2_experiments, y_absl::nullopt,
           "A comma separated list of currently active experiments. Experiments "
           "may be prefixed with a '-' to disable them.");
-Y_ABSL_FLAG(y_absl::optional<int32_t>, grpc_client_channel_backup_poll_interval_ms,
+Y_ABSL_FLAG(y_absl::optional<int32_t>, grpcpy2_client_channel_backup_poll_interval_ms,
           y_absl::nullopt,
           "Declares the interval in ms between two backup polls on client "
           "channels. These polls are run in the timer thread so that gRPC can "
@@ -47,68 +47,68 @@ Y_ABSL_FLAG(y_absl::optional<int32_t>, grpc_client_channel_backup_poll_interval_
           "thread. They help reconnect disconnected client channels (mostly "
           "due to idleness), so that the next RPC on this channel won't fail. "
           "Set to 0 to turn off the backup polls.");
-Y_ABSL_FLAG(y_absl::optional<TString>, grpc_dns_resolver, y_absl::nullopt,
+Y_ABSL_FLAG(y_absl::optional<TString>, grpcpy2_dns_resolver, y_absl::nullopt,
           "Declares which DNS resolver to use. The default is ares if gRPC is "
           "built with c-ares support. Otherwise, the value of this environment "
           "variable is ignored.");
-Y_ABSL_FLAG(y_absl::optional<TString>, grpc_trace, y_absl::nullopt,
+Y_ABSL_FLAG(y_absl::optional<TString>, grpcpy2_trace, y_absl::nullopt,
           "A comma separated list of tracers that provide additional insight "
           "into how gRPC C core is processing requests via debug logs.");
-Y_ABSL_FLAG(y_absl::optional<TString>, grpc_verbosity, y_absl::nullopt,
+Y_ABSL_FLAG(y_absl::optional<TString>, grpcpy2_verbosity, y_absl::nullopt,
           "Default gRPC logging verbosity");
-Y_ABSL_FLAG(y_absl::optional<TString>, grpc_stacktrace_minloglevel,
+Y_ABSL_FLAG(y_absl::optional<TString>, grpcpy2_stacktrace_minloglevel,
           y_absl::nullopt,
           "Messages logged at the same or higher level than this will print "
           "stacktrace");
-Y_ABSL_FLAG(y_absl::optional<bool>, grpc_enable_fork_support, y_absl::nullopt,
+Y_ABSL_FLAG(y_absl::optional<bool>, grpcpy2_enable_fork_support, y_absl::nullopt,
           "Enable fork support");
-Y_ABSL_FLAG(y_absl::optional<TString>, grpc_poll_strategy, y_absl::nullopt,
+Y_ABSL_FLAG(y_absl::optional<TString>, grpcpy2_poll_strategy, y_absl::nullopt,
           "Declares which polling engines to try when starting gRPC. This is a "
           "comma-separated list of engines, which are tried in priority order "
           "first -> last.");
-Y_ABSL_FLAG(y_absl::optional<bool>, grpc_abort_on_leaks, y_absl::nullopt,
+Y_ABSL_FLAG(y_absl::optional<bool>, grpcpy2_abort_on_leaks, y_absl::nullopt,
           "A debugging aid to cause a call to abort() when gRPC objects are "
-          "leaked past grpc_shutdown()");
-Y_ABSL_FLAG(y_absl::optional<TString>, grpc_system_ssl_roots_dir, y_absl::nullopt,
+          "leaked past grpcpy2_shutdown()");
+Y_ABSL_FLAG(y_absl::optional<TString>, grpcpy2_system_ssl_roots_dir, y_absl::nullopt,
           "Custom directory to SSL Roots");
-Y_ABSL_FLAG(y_absl::optional<TString>, grpc_default_ssl_roots_file_path,
+Y_ABSL_FLAG(y_absl::optional<TString>, grpcpy2_default_ssl_roots_file_path,
           y_absl::nullopt, "Path to the default SSL roots file.");
-Y_ABSL_FLAG(y_absl::optional<bool>, grpc_not_use_system_ssl_roots, y_absl::nullopt,
+Y_ABSL_FLAG(y_absl::optional<bool>, grpcpy2_not_use_system_ssl_roots, y_absl::nullopt,
           "Disable loading system root certificates.");
-Y_ABSL_FLAG(y_absl::optional<TString>, grpc_ssl_cipher_suites, y_absl::nullopt,
+Y_ABSL_FLAG(y_absl::optional<TString>, grpcpy2_ssl_cipher_suites, y_absl::nullopt,
           "A colon separated list of cipher suites to use with OpenSSL");
 
 namespace grpc_core {
 
 ConfigVars::ConfigVars(const Overrides& overrides)
     : client_channel_backup_poll_interval_ms_(
-          LoadConfig(FLAGS_grpc_client_channel_backup_poll_interval_ms,
+          LoadConfig(FLAGS_grpcpy2_client_channel_backup_poll_interval_ms,
                      "GRPC_CLIENT_CHANNEL_BACKUP_POLL_INTERVAL_MS",
                      overrides.client_channel_backup_poll_interval_ms, 5000)),
       enable_fork_support_(LoadConfig(
-          FLAGS_grpc_enable_fork_support, "GRPC_ENABLE_FORK_SUPPORT",
+          FLAGS_grpcpy2_enable_fork_support, "GRPC_ENABLE_FORK_SUPPORT",
           overrides.enable_fork_support, GRPC_ENABLE_FORK_SUPPORT_DEFAULT)),
-      abort_on_leaks_(LoadConfig(FLAGS_grpc_abort_on_leaks,
+      abort_on_leaks_(LoadConfig(FLAGS_grpcpy2_abort_on_leaks,
                                  "GRPC_ABORT_ON_LEAKS",
                                  overrides.abort_on_leaks, false)),
       not_use_system_ssl_roots_(LoadConfig(
-          FLAGS_grpc_not_use_system_ssl_roots, "GRPC_NOT_USE_SYSTEM_SSL_ROOTS",
+          FLAGS_grpcpy2_not_use_system_ssl_roots, "GRPC_NOT_USE_SYSTEM_SSL_ROOTS",
           overrides.not_use_system_ssl_roots, false)),
-      experiments_(LoadConfig(FLAGS_grpc_experiments, "GRPC_EXPERIMENTS",
+      experiments_(LoadConfig(FLAGS_grpcpy2_experiments, "GRPC_EXPERIMENTS",
                               overrides.experiments, "")),
-      dns_resolver_(LoadConfig(FLAGS_grpc_dns_resolver, "GRPC_DNS_RESOLVER",
+      dns_resolver_(LoadConfig(FLAGS_grpcpy2_dns_resolver, "GRPC_DNS_RESOLVER",
                                overrides.dns_resolver, "")),
-      trace_(LoadConfig(FLAGS_grpc_trace, "GRPC_TRACE", overrides.trace, "")),
-      verbosity_(LoadConfig(FLAGS_grpc_verbosity, "GRPC_VERBOSITY",
+      trace_(LoadConfig(FLAGS_grpcpy2_trace, "GRPC_TRACE", overrides.trace, "")),
+      verbosity_(LoadConfig(FLAGS_grpcpy2_verbosity, "GRPC_VERBOSITY",
                             overrides.verbosity,
                             GPR_DEFAULT_LOG_VERBOSITY_STRING)),
-      stacktrace_minloglevel_(LoadConfig(FLAGS_grpc_stacktrace_minloglevel,
+      stacktrace_minloglevel_(LoadConfig(FLAGS_grpcpy2_stacktrace_minloglevel,
                                          "GRPC_STACKTRACE_MINLOGLEVEL",
                                          overrides.stacktrace_minloglevel, "")),
-      poll_strategy_(LoadConfig(FLAGS_grpc_poll_strategy, "GRPC_POLL_STRATEGY",
+      poll_strategy_(LoadConfig(FLAGS_grpcpy2_poll_strategy, "GRPC_POLL_STRATEGY",
                                 overrides.poll_strategy, "all")),
       ssl_cipher_suites_(LoadConfig(
-          FLAGS_grpc_ssl_cipher_suites, "GRPC_SSL_CIPHER_SUITES",
+          FLAGS_grpcpy2_ssl_cipher_suites, "GRPC_SSL_CIPHER_SUITES",
           overrides.ssl_cipher_suites,
           "TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_"
           "SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:"
@@ -118,13 +118,13 @@ ConfigVars::ConfigVars(const Overrides& overrides)
           overrides.default_ssl_roots_file_path) {}
 
 TString ConfigVars::SystemSslRootsDir() const {
-  return LoadConfig(FLAGS_grpc_system_ssl_roots_dir,
+  return LoadConfig(FLAGS_grpcpy2_system_ssl_roots_dir,
                     "GRPC_SYSTEM_SSL_ROOTS_DIR", override_system_ssl_roots_dir_,
                     "");
 }
 
 TString ConfigVars::DefaultSslRootsFilePath() const {
-  return LoadConfig(FLAGS_grpc_default_ssl_roots_file_path,
+  return LoadConfig(FLAGS_grpcpy2_default_ssl_roots_file_path,
                     "GRPC_DEFAULT_SSL_ROOTS_FILE_PATH",
                     override_default_ssl_roots_file_path_, "");
 }
