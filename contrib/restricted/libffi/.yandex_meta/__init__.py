import os
import shutil
from collections import OrderedDict
from glob import glob
from os.path import basename, dirname

from devtools.yamaker.modules import GLOBAL, Linkable, Program, Recursable, Switch
from devtools.yamaker.project import GNUMakeNixProject


def libffi_post_build(self):
    configs_dir = self.dstdir + "/configs"
    shutil.copytree(self.nix_spec_dir + '/files/configs', configs_dir)
    os.rename(self.dstdir + "/x86_64-pc-linux-gnu", configs_dir + "/x86_64-pc-linux-gnu")

    os.unlink(self.dstdir + "/libffi.map.in")


def libffi_post_install(self):
    # How to prepare configs:
    # 1. Try build some configuration by "ya make --target-platform=...".
    #    List of possible platforms, for which configuration required, can be
    #    guiesed by contents of ya.make file of this library.
    # 2. Compilation is likely will fail. Note command line, with compiler
    #    invokation.
    # 3. In separate directory run configure of appropriate veraion of libffi,
    #    passing environment variables like
    #    CC="/home/username/.ya/tools/somepath/clang --sysroot=/home/username/.ya/tools/some_other_path"
    #    CFLAGS="--target=armv7-linux-gnueabihf"
    #    and command line flag "--host armv7-linux-gnueabihf"
    #    (replace here "armv7-linux-gnueabihf" with value, taken from the compiler
    #    invokation in previous paraghaph; take path to compiler and sysroot from
    #    the same place). On some platforms you also need
    #    export LD_LIBRARY_PATH to point to the directory in sysroot, with some
    #    shared libraries, required by the compiler.
    # 4. If configure succeeds, copy resulting headers files to appropriate location
    #    in arcadia repository.
    # 5. For Windows platforms compilation is a bit more tricky. Make sure you've added
    #    "-fuse-ld=lld -fcase-insensitive-paths" to the CFLAGS. Also add to it parameters
    #        /vctoolsdir /home/username/.ya/tools/somedir
    #        /winsdkdir /home/username/.ya/tools/anotherdir/
    #        -vfsoverlay /tmp/vfsoverlay_x86.yaml
    #    where directories can be taken from compiler invokation by ya make, and vfsoverlay_x86.yaml file
    #    should be manually copied from build directory (it is generated by ya make).
    configs_dir = self.arcdir + "/configs"

    with self.yamakes["."] as m:
        # Disable dllimport/dllexport on windows
        # We know that the library is always linked statically
        m.CFLAGS.append(GLOBAL("-DFFI_STATIC_BUILD"))

        # Provide compatibility for MFD_CLOEXEC constant.
        m.PEERDIR.add("contrib/libs/libc_compat")

        m.ADDINCL = [path for path in m.ADDINCL if "/x86_64-pc-linux-gnu" not in path] + [
            GLOBAL(self.arcdir + "/include")
        ]

        m.SRCS = [path for path in m.SRCS if "/x86/" not in path]

        # See configure.host script in libffi distribution for original host->srcs mapping
        m.after(
            "SRCS",
            Switch(
                OrderedDict(
                    sorted(
                        [
                            (
                                "ARCH_I386 AND OS_WINDOWS",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/i386-microsoft-windows",
                                        GLOBAL(configs_dir + "/i386-microsoft-windows/include"),
                                    ],
                                    SRCS=[
                                        "src/x86/ffi.c",
                                        "configs/i386-microsoft-windows/sysv_intel.masm",
                                    ],
                                    LDFLAGS=[
                                        "/safeseh:no",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_I386 AND OS_ANDROID",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/i686-pc-linux-android16",
                                        GLOBAL(configs_dir + "/i686-pc-linux-android16/include"),
                                    ],
                                    SRCS=[
                                        "src/x86/ffi.c",
                                        "src/x86/sysv.S",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_X86_64 AND OS_LINUX",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/x86_64-pc-linux-gnu",
                                        GLOBAL(configs_dir + "/x86_64-pc-linux-gnu/include"),
                                    ],
                                    SRCS=[
                                        "src/x86/ffi64.c",
                                        "src/x86/ffiw64.c",
                                        "src/x86/unix64.S",
                                        "src/x86/win64.S",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_X86_64 AND OS_ANDROID",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/x86_64-pc-linux-android21",
                                        GLOBAL(configs_dir + "/x86_64-pc-linux-android21/include"),
                                    ],
                                    SRCS=[
                                        "src/x86/ffi64.c",
                                        "src/x86/ffiw64.c",
                                        "src/x86/unix64.S",
                                        "src/x86/win64.S",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_X86_64 AND OS_DARWIN",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/x86_64-apple-macosx",
                                        GLOBAL(configs_dir + "/x86_64-apple-macosx/include"),
                                    ],
                                    SRCS=[
                                        "src/x86/ffi64.c",
                                        "src/x86/ffiw64.c",
                                        "src/x86/unix64.S",
                                        "src/x86/win64.S",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_ARM64 AND OS_DARWIN",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/aarch64-apple-macos",
                                        GLOBAL(configs_dir + "/aarch64-apple-macos/include"),
                                    ],
                                    SRCS=[
                                        "src/aarch64/ffi.c",
                                        "src/aarch64/sysv.S",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_X86_64 AND OS_IOS",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/x86_64-apple-iphonesimulator",
                                        GLOBAL(configs_dir + "/x86_64-apple-iphonesimulator/include"),
                                    ],
                                    SRCS=[
                                        "src/x86/ffi64.c",
                                        "src/x86/ffiw64.c",
                                        "src/x86/unix64.S",
                                        "src/x86/win64.S",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_X86_64 AND OS_WINDOWS",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/x86_64-microsoft-windows",
                                        GLOBAL(configs_dir + "/x86_64-microsoft-windows/include"),
                                    ],
                                    SRCS=[
                                        "src/x86/ffiw64.c",
                                        "configs/x86_64-microsoft-windows/win64_intel.masm",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_ARM7 AND OS_LINUX",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/armv7a-unknown-linux-gnueabihf",
                                        GLOBAL(configs_dir + "/armv7a-unknown-linux-gnueabihf/include"),
                                    ],
                                    SRCS=[
                                        "src/arm/ffi.c",
                                        "src/arm/sysv.S",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_ARM7 AND OS_ANDROID",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/armv7a-unknown-linux-androideabi16",
                                        GLOBAL(configs_dir + "/armv7a-unknown-linux-androideabi16/include"),
                                    ],
                                    SRCS=[
                                        "src/arm/ffi.c",
                                        "src/arm/sysv.S",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_ARM64 AND OS_LINUX",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/aarch64-unknown-linux-gnu",
                                        GLOBAL(configs_dir + "/aarch64-unknown-linux-gnu/include"),
                                    ],
                                    SRCS=[
                                        "src/aarch64/ffi.c",
                                        "src/aarch64/sysv.S",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_ARM64 AND OS_ANDROID",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/aarch64-unknown-linux-android21",
                                        GLOBAL(configs_dir + "/aarch64-unknown-linux-android21/include"),
                                    ],
                                    SRCS=[
                                        "src/aarch64/ffi.c",
                                        "src/aarch64/sysv.S",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_ARM64 AND OS_IOS",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/aarch64-apple-iphoneos",
                                        GLOBAL(configs_dir + "/aarch64-apple-iphoneos/include"),
                                    ],
                                    SRCS=[
                                        "src/aarch64/ffi.c",
                                        "src/aarch64/sysv.S",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_PPC64LE AND OS_LINUX",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/powerpc64le-unknown-linux-gnu",
                                        GLOBAL(configs_dir + "/powerpc64le-unknown-linux-gnu/include"),
                                    ],
                                    SRCS=[
                                        "src/powerpc/ffi.c",
                                        "src/powerpc/ffi_linux64.c",
                                        "src/powerpc/ffi_sysv.c",
                                        "src/powerpc/linux64.S",
                                        "src/powerpc/linux64_closure.S",
                                        "src/powerpc/ppc_closure.S",
                                        "src/powerpc/sysv.S",
                                    ],
                                ),
                            ),
                            (
                                "ARCH_WASM32 AND OS_EMSCRIPTEN",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/wasm32-emscripten",
                                        GLOBAL(configs_dir + "/wasm32-emscripten/include"),
                                    ],
                                ),
                            ),
                            (
                                "ARCH_WASM64 AND OS_EMSCRIPTEN",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/wasm64-emscripten",
                                        GLOBAL(configs_dir + "/wasm64-emscripten/include"),
                                    ],
                                ),
                            ),
                            # fix only configure-stage for OS_NONE, see YMAKE-218, DEVTOOLSSUPPORT-46190
                            (
                                "OS_NONE",
                                Linkable(
                                    ADDINCL=[
                                        configs_dir + "/x86_64-pc-linux-gnu",
                                        GLOBAL(configs_dir + "/x86_64-pc-linux-gnu/include"),
                                    ],
                                ),
                            ),
                        ]
                        + [
                            (
                                "default",
                                "MESSAGE(FATAL_ERROR Unsupported libffi platform: ${TARGET_PLATFORM} / ${HARDWARE_TYPE})",
                            ),
                        ]
                    )
                )
            ),
        )

    def _add_test(testdir, src):
        modpath = "testsuite/" + testdir + "/" + src
        self.yamakes[modpath] = Program(
            SUBSCRIBER=self.owners,
            NO_RUNTIME=True,
            NO_COMPILER_WARNINGS=True,
            PEERDIR=[self.arcdir],
            SRCDIR=[self.arcdir + "/testsuite/" + testdir],
            SRCS=[src + ".c"],
            LICENSE=["GPL-2.0-only"],  # See LICENSE-BUILDTOOLS file
        )
        self.yamakes["."].RECURSE.add(modpath)

    for testpath in glob(self.dstdir + "/testsuite/*/*.c"):
        if basename(testpath) == "testcases.c":
            continue
        _add_test(basename(dirname(testpath)), basename(testpath)[:-2])

    self.yamakes.make_recursive()

    with self.yamakes["testsuite"] as m:
        m.RECURSE -= {"libffi.go", "libffi.complex", "libffi.threads/tsan"}
        # Fails to build.
        m.after("RECURSE", Switch({"NOT OS_IOS AND NOT OS_EMSCRIPTEN": Recursable(RECURSE={"libffi.go"})}))
        # MSVC does not support 'T _Complex' C syntax
        # powerpc64le and emscripten are configured without complex types
        m.after(
            "RECURSE",
            Switch(
                {"NOT OS_WINDOWS AND NOT ARCH_PPC64LE AND NOT OS_EMSCRIPTEN": Recursable(RECURSE={"libffi.complex"})}
            ),
        )
        # Requires pthread header, absed in MSVC build
        m.after("RECURSE", Switch({"NOT OS_WINDOWS": Recursable(RECURSE={"libffi.threads/tsan"})}))
    with self.yamakes["testsuite/libffi.go"] as m:
        m.RECURSE -= {"closure1"}
        # Disabled on Android. See https://github.com/libffi/libffi/pull/877/files
        m.after("RECURSE", Switch({"NOT OS_ANDROID AND NOT OS_DARWIN": Recursable(RECURSE={"closure1"})}))
    with self.yamakes["testsuite/libffi.closures"] as m:
        recs = {
            "cls_align_longdouble_split",
            "cls_align_longdouble_split2",
            "cls_many_mixed_float_double",
        }
        m.RECURSE -= recs
        m.after("RECURSE", Switch({"NOT OS_WINDOWS": Recursable(RECURSE=recs)}))


libffi = GNUMakeNixProject(
    nixattr="libffi",
    owners=["g:cpp-contrib"],
    arcdir="contrib/restricted/libffi",
    makeflags=["libffi.la", "libffi.map"],
    copy_sources=[
        "src/aarch64/*",
        "src/arm/*",
        "src/powerpc/*",
        "src/x86/*",
        "testsuite/*/*.c",
        "testsuite/*/*.h",
        "testsuite/*/*.inc",
    ],
    disable_includes=[
        "os2.h",
        "ptrauth.h",
        "sunmedia_types.h",
        "sys/memfd.h",
        "/usr/include/malloc.h",
    ],
    post_build=libffi_post_build,
    post_install=libffi_post_install,
)
