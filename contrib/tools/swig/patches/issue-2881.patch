From 49a7d2b0c6aed00bd07a9a28569020d560c2658c Mon Sep 17 00:00:00 2001
From: William S Fulton <wsf@fultondesigns.co.uk>
Date: Sat, 10 May 2025 13:47:35 +0100
Subject: [PATCH 1/5] Python DeprecationWarning fixes

DeprecationWarning fixes when using 'python -Walways' or if using one of the types being warned about:

  DeprecationWarning: builtin type SwigPyPacked has no __module__ attribute
  DeprecationWarning: builtin type SwigPyObject has no __module__ attribute
  DeprecationWarning: builtin type swigvarlink has no __module__ attribute

The warning was present if code was generated without using -builtin in 4.3.x.
The warning was only present if using the Python limited API in 4.2.1 and earlier.

These 3 types were not in any module at all. Now they are in the swig runtime module.
Docs to follow.

Issue #2881
Issue #3061
Issue #3160
---
 CHANGES.current       | 11 +++++++++++
 Lib/python/pyhead.swg |  4 +++-
 Lib/python/pyrun.swg  | 22 +++++++++++-----------
 3 files changed, 25 insertions(+), 12 deletions(-)

--- a/Lib/python/pyhead.swg
+++ b/Lib/python/pyhead.swg
@@ -60,6 +60,8 @@ SWIG_Python_str_FromChar(const char *c)
 #endif
 }
 
+#define SWIG_RUNTIME_MODULE "swig_runtime_data" SWIG_RUNTIME_VERSION
+
 /* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
 # define SWIGPY_USE_CAPSULE
 #ifdef SWIGPYTHON_BUILTIN
@@ -67,7 +69,7 @@ SWIG_Python_str_FromChar(const char *c)
 #else
 # define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
 #endif
-# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)
+#define SWIGPY_CAPSULE_NAME SWIG_RUNTIME_MODULE "." SWIGPY_CAPSULE_ATTR_NAME
 
 #if PY_VERSION_HEX < 0x03020000
 #define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
--- a/Lib/python/pyrun.swg
+++ b/Lib/python/pyrun.swg
@@ -353,7 +353,7 @@ swig_varlink_type(void) {
       PyObject_HEAD_INIT(NULL)
       0,                                  /* ob_size */
 #endif
-      "swigvarlink",                      /* tp_name */
+      SWIG_RUNTIME_MODULE ".swigvarlink", /* tp_name */
       sizeof(swig_varlinkobject),         /* tp_basicsize */
       0,                                  /* tp_itemsize */
       (destructor) swig_varlink_dealloc,  /* tp_dealloc */
@@ -424,7 +424,7 @@ swig_varlink_type(void) {
     { 0, NULL }
   };
   PyType_Spec spec = {
-    "swigvarlink",
+    SWIG_RUNTIME_MODULE ".swigvarlink",
     sizeof(swig_varlinkobject),
     0,
     Py_TPFLAGS_DEFAULT,
@@ -750,7 +750,7 @@ SwigPyObject_Check(PyObject *op) {
 #ifdef SWIGPYTHON_BUILTIN
   if (PyType_IsSubtype(op_type, target_tp))
     return 1;
-  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
+  return (strcmp(op_type->tp_name, SWIG_RUNTIME_MODULE ".SwigPyObject") == 0);
 #else
 # ifdef Py_LIMITED_API
   int cmp;
@@ -766,7 +766,7 @@ SwigPyObject_Check(PyObject *op) {
   SWIG_Py_DECREF(tp_name);
   return cmp == 0;
 # else
-  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
+  return (strcmp(op_type->tp_name, SWIG_RUNTIME_MODULE ".SwigPyObject") == 0);
 # endif
 #endif
 }
@@ -966,7 +966,7 @@ SwigPyObject_TypeOnce(void) {
       PyObject_HEAD_INIT(NULL)
       0,                                    /* ob_size */
 #endif
-      "SwigPyObject",                       /* tp_name */
+      SWIG_RUNTIME_MODULE ".SwigPyObject",  /* tp_name */
       sizeof(SwigPyObject),                 /* tp_basicsize */
       0,                                    /* tp_itemsize */
       (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
@@ -1061,7 +1061,7 @@ SwigPyObject_TypeOnce(void) {
     { 0, NULL }
   };
   PyType_Spec spec = {
-    "SwigPyObject",
+    SWIG_RUNTIME_MODULE ".SwigPyObject",
     sizeof(SwigPyObject),
     0,
     Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
@@ -1160,7 +1160,7 @@ SwigPyPacked_Check(PyObject *op) {
   SWIG_Py_DECREF(tp_name);
   return cmp == 0;
 #else
-  return (strcmp(op_type->tp_name, "SwigPyPacked") == 0);
+  return (strcmp(op_type->tp_name, SWIG_RUNTIME_MODULE ".SwigPyPacked") == 0);
 #endif
 }
 
@@ -1188,7 +1188,7 @@ SwigPyPacked_TypeOnce(void) {
       PyObject_HEAD_INIT(NULL)
       0,                                    /* ob_size */
 #endif
-      "SwigPyPacked",                       /* tp_name */
+      SWIG_RUNTIME_MODULE ".SwigPyPacked",  /* tp_name */
       sizeof(SwigPyPacked),                 /* tp_basicsize */
       0,                                    /* tp_itemsize */
       (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
@@ -1281,7 +1281,7 @@ SwigPyPacked_TypeOnce(void) {
     { 0, NULL }
   };
   PyType_Spec spec = {
-    "SwigPyPacked",
+    SWIG_RUNTIME_MODULE ".SwigPyPacked",
     sizeof(SwigPyPacked),
     0,
     Py_TPFLAGS_DEFAULT,
@@ -1846,10 +1846,10 @@ SWIGRUNTIME void
 SWIG_Python_SetModule(swig_module_info *swig_module) {
 #if PY_VERSION_HEX >= 0x03000000
  /* Add a dummy module object into sys.modules */
-  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
+  PyObject *module = PyImport_AddModule(SWIG_RUNTIME_MODULE);
 #else
   static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
-  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
+  PyObject *module = Py_InitModule(SWIG_RUNTIME_MODULE, swig_empty_runtime_method_table);
 #endif
   PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
   if (pointer && module) {

From 7ecbb7103dec48bb316baa9ccd71ba7888de7c54 Mon Sep 17 00:00:00 2001
From: William S Fulton <wsf@fultondesigns.co.uk>
Date: Sun, 11 May 2025 16:02:43 +0100
Subject: [PATCH 2/5] Add SwigPyObject, SwigPyPacked, swigvarlink to the swig
 runtime module

Also add SWIG_REFCNT_DEBUG for debugging reference counts when the main
module is destroyed - there's some work to be done here on reference
counts!
---
 Lib/python/pyinit.swg |  1 +
 Lib/python/pyrun.swg  | 91 +++++++++++++++++++++++++++++++++----------
 2 files changed, 71 insertions(+), 21 deletions(-)

--- a/Lib/python/pyinit.swg
+++ b/Lib/python/pyinit.swg
@@ -261,6 +261,7 @@ SWIG_init(void) {
   (void)globals;
 
   /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
+  SWIG_runtime_data_module();
   SWIG_This();
   SWIG_Python_TypeCache();
   SwigPyPacked_type();
--- a/Lib/python/pyrun.swg
+++ b/Lib/python/pyrun.swg
@@ -114,8 +114,25 @@ SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {
 
 #endif
 
-/* Append a value to the result obj */
+/* SWIG runtime data Python module */
+static PyObject *Swig_runtime_data_module_global = NULL;
+
+/* Create/obtain the single swig_runtime_data module which is used across different SWIG generated modules */
+SWIGINTERN PyObject *
+SWIG_runtime_data_module() {
+  if (!Swig_runtime_data_module_global) {
+#if PY_VERSION_HEX >= 0x03000000
+    Swig_runtime_data_module_global = PyImport_AddModule(SWIG_RUNTIME_MODULE);
+#else
+    static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
+    Swig_runtime_data_module_global = Py_InitModule(SWIG_RUNTIME_MODULE, swig_empty_runtime_method_table);
+#endif
+    SWIG_Py_XINCREF(Swig_runtime_data_module_global);
+  }
+  return Swig_runtime_data_module_global;
+}
 
+/* Append a value to the result obj */
 SWIGINTERN PyObject*
 SWIG_Python_AppendOutput(PyObject* result, PyObject* obj, int is_void) {
   if (!result) {
@@ -341,7 +358,7 @@ swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
 
 SWIGINTERN PyTypeObject*
 swig_varlink_type(void) {
-  static char varlink__doc__[] = "Swig var link object";
+  static char varlink__doc__[] = "Swig variable link object";
 #ifndef SWIG_HEAPTYPES
   static PyTypeObject varlink_type;
   static int type_init = 0;
@@ -407,10 +424,13 @@ swig_varlink_type(void) {
       0                                   /* tp_next */
 #endif
     };
+    PyObject *runtime_data_module = SWIG_runtime_data_module();
     varlink_type = tmp;
     type_init = 1;
     if (PyType_Ready(&varlink_type) < 0)
       return NULL;
+    if (PyModule_AddObject(runtime_data_module, "swigvarlink", (PyObject *)&varlink_type) == 0)
+      SWIG_Py_INCREF((PyObject *)&varlink_type);
   }
   return &varlink_type;
 #else
@@ -430,7 +450,11 @@ swig_varlink_type(void) {
     Py_TPFLAGS_DEFAULT,
     slots
   };
-  return (PyTypeObject *)PyType_FromSpec(&spec);
+  PyObject *pytype = PyType_FromSpec(&spec);
+  PyObject *runtime_data_module = SWIG_runtime_data_module();
+  if (pytype && PyModule_AddObject(runtime_data_module, "swigvarlink", pytype) == 0)
+    SWIG_Py_INCREF(pytype);
+  return (PyTypeObject *)pytype;
 #endif
 }
 
@@ -910,7 +934,7 @@ swigobject_methods[] = {
 
 SWIGRUNTIME PyTypeObject*
 SwigPyObject_TypeOnce(void) {
-  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
+  static char swigobject_doc[] = "Swig object holding a C/C++ pointer";
 #ifndef SWIG_HEAPTYPES
   static PyNumberMethods SwigPyObject_as_number = {
     (binaryfunc)0, /*nb_add*/
@@ -1043,10 +1067,13 @@ SwigPyObject_TypeOnce(void) {
       0                                     /* tp_next */
 #endif
     };
+    PyObject *runtime_data_module = SWIG_runtime_data_module();
     swigpyobject_type = tmp;
     type_init = 1;
     if (PyType_Ready(&swigpyobject_type) != 0)
       return NULL;
+    if (PyModule_AddObject(runtime_data_module, "SwigPyObject", (PyObject *)&swigpyobject_type) == 0)
+      SWIG_Py_INCREF((PyObject *)&swigpyobject_type);
   }
   return &swigpyobject_type;
 #else
@@ -1067,7 +1094,11 @@ SwigPyObject_TypeOnce(void) {
     Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
     slots
   };
-  return (PyTypeObject *)PyType_FromSpec(&spec);
+  PyObject *pytype = PyType_FromSpec(&spec);
+  PyObject *runtime_data_module = SWIG_runtime_data_module();
+  if (pytype && PyModule_AddObject(runtime_data_module, "SwigPyObject", pytype) == 0)
+    SWIG_Py_INCREF(pytype);
+  return (PyTypeObject *)pytype;
 #endif
 }
 
@@ -1150,7 +1181,7 @@ SwigPyPacked_Check(PyObject *op) {
   PyObject *tp_name;
 #endif
   PyTypeObject* op_type = Py_TYPE(op);
-  if (op_type == SwigPyPacked_TypeOnce())
+  if (op_type == SwigPyPacked_type())
     return 1;
 #ifdef Py_LIMITED_API
   tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
@@ -1176,7 +1207,7 @@ SwigPyPacked_dealloc(PyObject *v)
 
 SWIGRUNTIME PyTypeObject*
 SwigPyPacked_TypeOnce(void) {
-  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
+  static char swigpacked_doc[] = "Swig object holding a C/C++ function pointer";
 #ifndef SWIG_HEAPTYPES
   static PyTypeObject swigpypacked_type;
   static int type_init = 0;
@@ -1265,10 +1296,13 @@ SwigPyPacked_TypeOnce(void) {
       0                                     /* tp_next */
 #endif
     };
+    PyObject *runtime_data_module = SWIG_runtime_data_module();
     swigpypacked_type = tmp;
     type_init = 1;
     if (PyType_Ready(&swigpypacked_type) != 0)
       return NULL;
+    if (PyModule_AddObject(runtime_data_module, "SwigPyPacked", (PyObject *)&swigpypacked_type) == 0)
+      SWIG_Py_INCREF((PyObject *)&swigpypacked_type);
   }
   return &swigpypacked_type;
 #else
@@ -1287,7 +1321,11 @@ SwigPyPacked_TypeOnce(void) {
     Py_TPFLAGS_DEFAULT,
     slots
   };
-  return (PyTypeObject *)PyType_FromSpec(&spec);
+  PyObject *pytype = PyType_FromSpec(&spec);
+  PyObject *runtime_data_module = SWIG_runtime_data_module();
+  if (pytype && PyModule_AddObject(runtime_data_module, "SwigPyPacked", pytype) == 0)
+    SWIG_Py_INCREF(pytype);
+  return (PyTypeObject *)pytype;
 #endif
 }
 
@@ -1815,6 +1853,12 @@ SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
 }
 
 
+#if defined(SWIG_REFCNT_DEBUG)
+#define SWIG_PYOBJ_REFCNT(OBJ) fprintf(stdout, "" #OBJ " count %ld\n", (OBJ ? Py_REFCNT(OBJ) : 0))
+#else
+#define SWIG_PYOBJ_REFCNT(OBJ)
+#endif
+
 static int interpreter_counter = 0; /* how many (sub-)interpreters are using swig_module's types */
 
 SWIGRUNTIME void
@@ -1825,7 +1869,7 @@ SWIG_Python_DestroyModule(PyObject *obj)
   size_t i;
   if (--interpreter_counter != 0) /* another sub-interpreter may still be using the swig_module's types */
     return;
-  for (i =0; i < swig_module->size; ++i) {
+  for (i = 0; i < swig_module->size; ++i) {
     swig_type_info *ty = types[i];
     if (ty->owndata) {
       SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
@@ -1833,27 +1877,32 @@ SWIG_Python_DestroyModule(PyObject *obj)
       if (data) SwigPyClientData_Del(data);
     }
   }
-  SWIG_Py_DECREF(SWIG_This());
+  SWIG_Py_XDECREF(Swig_This_global);
+  SWIG_PYOBJ_REFCNT(Swig_This_global);
   Swig_This_global = NULL;
-  SWIG_Py_DECREF(SWIG_globals());
+
+  SWIG_Py_XDECREF(Swig_Globals_global);
+  SWIG_PYOBJ_REFCNT(Swig_Globals_global);
   Swig_Globals_global = NULL;
-  SWIG_Py_DECREF(SWIG_Python_TypeCache());
+
+  SWIG_Py_XDECREF(Swig_TypeCache_global);
+  SWIG_PYOBJ_REFCNT(Swig_TypeCache_global);
   Swig_TypeCache_global = NULL;
+
+  SWIG_PYOBJ_REFCNT(Swig_Capsule_global);
   Swig_Capsule_global = NULL;
+
+  SWIG_Py_XDECREF(Swig_runtime_data_module_global);
+  SWIG_PYOBJ_REFCNT(Swig_runtime_data_module_global);
+  Swig_runtime_data_module_global = NULL;
 }
 
 SWIGRUNTIME void
 SWIG_Python_SetModule(swig_module_info *swig_module) {
-#if PY_VERSION_HEX >= 0x03000000
- /* Add a dummy module object into sys.modules */
-  PyObject *module = PyImport_AddModule(SWIG_RUNTIME_MODULE);
-#else
-  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
-  PyObject *module = Py_InitModule(SWIG_RUNTIME_MODULE, swig_empty_runtime_method_table);
-#endif
+  PyObject *runtime_data_module = SWIG_runtime_data_module();
   PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
-  if (pointer && module) {
-    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
+  if (pointer && runtime_data_module) {
+    if (PyModule_AddObject(runtime_data_module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
       ++interpreter_counter;
       Swig_Capsule_global = pointer;
     } else {

From 53453d51ec3ca111c5c97530d8ee4c6b5184c85e Mon Sep 17 00:00:00 2001
From: William S Fulton <wsf@fultondesigns.co.uk>
Date: Mon, 12 May 2025 07:25:35 +0100
Subject: [PATCH 3/5] Rename Python swigvarlink type to SwigVarLink

With this type having just moved into a module, let's also
make a change to use correct Python naming conventions for the
name of the type.
---
 CHANGES.current      |  8 ++++++
 Lib/python/pyrun.swg | 64 ++++++++++++++++++++++----------------------
 2 files changed, 40 insertions(+), 32 deletions(-)

--- a/Lib/python/pyrun.swg
+++ b/Lib/python/pyrun.swg
@@ -257,7 +257,7 @@ typedef struct swig_varlinkobject {
 } swig_varlinkobject;
 
 SWIGINTERN PyObject *
-swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
+SwigVarLink_repr(PyObject *SWIGUNUSEDPARM(v)) {
 #if PY_VERSION_HEX >= 0x03000000
   return PyUnicode_InternFromString("<Swig global variables>");
 #else
@@ -266,7 +266,7 @@ swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
 }
 
 SWIGINTERN PyObject *
-swig_varlink_str(PyObject *o) {
+SwigVarLink_str(PyObject *o) {
   swig_varlinkobject *v = (swig_varlinkobject *) o;
 #if PY_VERSION_HEX >= 0x03000000
   PyObject *str = PyUnicode_InternFromString("(");
@@ -305,7 +305,7 @@ swig_varlink_str(PyObject *o) {
 }
 
 SWIGINTERN void
-swig_varlink_dealloc(PyObject *o) {
+SwigVarLink_dealloc(PyObject *o) {
   swig_varlinkobject *v = (swig_varlinkobject *) o;
   swig_globalvar *var = v->vars;
   while (var) {
@@ -317,7 +317,7 @@ swig_varlink_dealloc(PyObject *o) {
 }
 
 SWIGINTERN PyObject *
-swig_varlink_getattr(PyObject *o, char *n) {
+SwigVarLink_getattr(PyObject *o, char *n) {
   swig_varlinkobject *v = (swig_varlinkobject *) o;
   PyObject *res = NULL;
   swig_globalvar *var = v->vars;
@@ -335,7 +335,7 @@ swig_varlink_getattr(PyObject *o, char *n) {
 }
 
 SWIGINTERN int
-swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
+SwigVarLink_setattr(PyObject *o, char *n, PyObject *p) {
   swig_varlinkobject *v = (swig_varlinkobject *) o;
   int res = 1;
   swig_globalvar *var = v->vars;
@@ -358,7 +358,7 @@ swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
 
 SWIGINTERN PyTypeObject*
 swig_varlink_type(void) {
-  static char varlink__doc__[] = "Swig variable link object";
+  static char SwigVarLink_doc[] = "Swig variable link object";
 #ifndef SWIG_HEAPTYPES
   static PyTypeObject varlink_type;
   static int type_init = 0;
@@ -370,30 +370,30 @@ swig_varlink_type(void) {
       PyObject_HEAD_INIT(NULL)
       0,                                  /* ob_size */
 #endif
-      SWIG_RUNTIME_MODULE ".swigvarlink", /* tp_name */
+      SWIG_RUNTIME_MODULE ".SwigVarLink", /* tp_name */
       sizeof(swig_varlinkobject),         /* tp_basicsize */
       0,                                  /* tp_itemsize */
-      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
+      (destructor) SwigVarLink_dealloc,   /* tp_dealloc */
 #if PY_VERSION_HEX < 0x030800b4
       (printfunc)0,                       /* tp_print */
 #else
       (Py_ssize_t)0,                      /* tp_vectorcall_offset */
 #endif
-      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
-      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
+      (getattrfunc) SwigVarLink_getattr,  /* tp_getattr */
+      (setattrfunc) SwigVarLink_setattr,  /* tp_setattr */
       0,                                  /* tp_compare */
-      (reprfunc) swig_varlink_repr,       /* tp_repr */
+      (reprfunc) SwigVarLink_repr,        /* tp_repr */
       0,                                  /* tp_as_number */
       0,                                  /* tp_as_sequence */
       0,                                  /* tp_as_mapping */
       0,                                  /* tp_hash */
       0,                                  /* tp_call */
-      (reprfunc) swig_varlink_str,        /* tp_str */
+      (reprfunc) SwigVarLink_str,         /* tp_str */
       0,                                  /* tp_getattro */
       0,                                  /* tp_setattro */
       0,                                  /* tp_as_buffer */
       0,                                  /* tp_flags */
-      varlink__doc__,                     /* tp_doc */
+      SwigVarLink_doc,                    /* tp_doc */
       0,                                  /* tp_traverse */
       0,                                  /* tp_clear */
       0,                                  /* tp_richcompare */
@@ -429,22 +429,22 @@ swig_varlink_type(void) {
     type_init = 1;
     if (PyType_Ready(&varlink_type) < 0)
       return NULL;
-    if (PyModule_AddObject(runtime_data_module, "swigvarlink", (PyObject *)&varlink_type) == 0)
+    if (PyModule_AddObject(runtime_data_module, "SwigVarLink", (PyObject *)&varlink_type) == 0)
       SWIG_Py_INCREF((PyObject *)&varlink_type);
   }
   return &varlink_type;
 #else
   PyType_Slot slots[] = {
-    { Py_tp_dealloc, (void *)swig_varlink_dealloc },
-    { Py_tp_repr, (void *)swig_varlink_repr },
-    { Py_tp_getattr, (void *)swig_varlink_getattr },
-    { Py_tp_setattr, (void *)swig_varlink_setattr },
-    { Py_tp_str, (void *)swig_varlink_str },
-    { Py_tp_doc, (void *)varlink__doc__ },
+    { Py_tp_dealloc, (void *)SwigVarLink_dealloc },
+    { Py_tp_repr, (void *)SwigVarLink_repr },
+    { Py_tp_getattr, (void *)SwigVarLink_getattr },
+    { Py_tp_setattr, (void *)SwigVarLink_setattr },
+    { Py_tp_str, (void *)SwigVarLink_str },
+    { Py_tp_doc, (void *)SwigVarLink_doc },
     { 0, NULL }
   };
   PyType_Spec spec = {
-    SWIG_RUNTIME_MODULE ".swigvarlink",
+    SWIG_RUNTIME_MODULE ".SwigVarLink",
     sizeof(swig_varlinkobject),
     0,
     Py_TPFLAGS_DEFAULT,
@@ -452,7 +452,7 @@ swig_varlink_type(void) {
   };
   PyObject *pytype = PyType_FromSpec(&spec);
   PyObject *runtime_data_module = SWIG_runtime_data_module();
-  if (pytype && PyModule_AddObject(runtime_data_module, "swigvarlink", pytype) == 0)
+  if (pytype && PyModule_AddObject(runtime_data_module, "SwigVarLink", pytype) == 0)
     SWIG_Py_INCREF(pytype);
   return (PyTypeObject *)pytype;
 #endif
@@ -715,7 +715,7 @@ SwigPyObject_repr(SwigPyObject *v)
 }
 
 /* We need a version taking two PyObject* parameters so it's a valid
- * PyCFunction to use in swigobject_methods[]. */
+ * PyCFunction to use in SwigPyObject_methods[]. */
 SWIGRUNTIME PyObject *
 SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
 {
@@ -922,7 +922,7 @@ SwigPyObject_own(PyObject *v, PyObject *args)
 }
 
 static PyMethodDef
-swigobject_methods[] = {
+SwigPyObject_methods[] = {
   {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
   {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
   {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
@@ -934,7 +934,7 @@ swigobject_methods[] = {
 
 SWIGRUNTIME PyTypeObject*
 SwigPyObject_TypeOnce(void) {
-  static char swigobject_doc[] = "Swig object holding a C/C++ pointer";
+  static char SwigPyObject_doc[] = "Swig object holding a C/C++ pointer";
 #ifndef SWIG_HEAPTYPES
   static PyNumberMethods SwigPyObject_as_number = {
     (binaryfunc)0, /*nb_add*/
@@ -1017,14 +1017,14 @@ SwigPyObject_TypeOnce(void) {
       0,                                    /* tp_setattro */
       0,                                    /* tp_as_buffer */
       Py_TPFLAGS_DEFAULT,                   /* tp_flags */
-      swigobject_doc,                       /* tp_doc */
+      SwigPyObject_doc,                     /* tp_doc */
       0,                                    /* tp_traverse */
       0,                                    /* tp_clear */
       (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
       0,                                    /* tp_weaklistoffset */
       0,                                    /* tp_iter */
       0,                                    /* tp_iternext */
-      swigobject_methods,                   /* tp_methods */
+      SwigPyObject_methods,                 /* tp_methods */
       0,                                    /* tp_members */
       0,                                    /* tp_getset */
       0,                                    /* tp_base */
@@ -1081,9 +1081,9 @@ SwigPyObject_TypeOnce(void) {
     { Py_tp_dealloc, (void *)SwigPyObject_dealloc },
     { Py_tp_repr, (void *)SwigPyObject_repr },
     { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
-    { Py_tp_doc, (void *)swigobject_doc },
+    { Py_tp_doc, (void *)SwigPyObject_doc },
     { Py_tp_richcompare, (void *)SwigPyObject_richcompare },
-    { Py_tp_methods, (void *)swigobject_methods },
+    { Py_tp_methods, (void *)SwigPyObject_methods },
     { Py_nb_int, (void *)SwigPyObject_long },
     { 0, NULL }
   };
@@ -1207,7 +1207,7 @@ SwigPyPacked_dealloc(PyObject *v)
 
 SWIGRUNTIME PyTypeObject*
 SwigPyPacked_TypeOnce(void) {
-  static char swigpacked_doc[] = "Swig object holding a C/C++ function pointer";
+  static char SwigPyPacked_doc[] = "Swig object holding a C/C++ function pointer";
 #ifndef SWIG_HEAPTYPES
   static PyTypeObject swigpypacked_type;
   static int type_init = 0;
@@ -1246,7 +1246,7 @@ SwigPyPacked_TypeOnce(void) {
       0,                                    /* tp_setattro */
       0,                                    /* tp_as_buffer */
       Py_TPFLAGS_DEFAULT,                   /* tp_flags */
-      swigpacked_doc,                       /* tp_doc */
+      SwigPyPacked_doc,                     /* tp_doc */
       0,                                    /* tp_traverse */
       0,                                    /* tp_clear */
       0,                                    /* tp_richcompare */
@@ -1311,7 +1311,7 @@ SwigPyPacked_TypeOnce(void) {
     { Py_tp_repr, (void *)SwigPyPacked_repr },
     { Py_tp_str, (void *)SwigPyPacked_str },
     { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
-    { Py_tp_doc, (void *)swigpacked_doc },
+    { Py_tp_doc, (void *)SwigPyPacked_doc },
     { 0, NULL }
   };
   PyType_Spec spec = {
