// Code generated by ./cmd/ch-gen-col, DO NOT EDIT.

package proto

// ColDecimal128 represents Decimal128 column.
type ColDecimal128 []Decimal128

// Compile-time assertions for ColDecimal128.
var (
	_ ColInput  = ColDecimal128{}
	_ ColResult = (*ColDecimal128)(nil)
	_ Column    = (*ColDecimal128)(nil)
)

// Rows returns count of rows in column.
func (c ColDecimal128) Rows() int {
	return len(c)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColDecimal128) Reset() {
	*c = (*c)[:0]
}

// Type returns ColumnType of Decimal128.
func (ColDecimal128) Type() ColumnType {
	return ColumnTypeDecimal128
}

// Row returns i-th row of column.
func (c ColDecimal128) Row(i int) Decimal128 {
	return c[i]
}

// Append Decimal128 to column.
func (c *ColDecimal128) Append(v Decimal128) {
	*c = append(*c, v)
}

// Append Decimal128 slice to column.
func (c *ColDecimal128) AppendArr(vs []Decimal128) {
	*c = append(*c, vs...)
}

// LowCardinality returns LowCardinality for Decimal128 .
func (c *ColDecimal128) LowCardinality() *ColLowCardinality[Decimal128] {
	return &ColLowCardinality[Decimal128]{
		index: c,
	}
}

// Array is helper that creates Array of Decimal128.
func (c *ColDecimal128) Array() *ColArr[Decimal128] {
	return &ColArr[Decimal128]{
		Data: c,
	}
}

// Nullable is helper that creates Nullable(Decimal128).
func (c *ColDecimal128) Nullable() *ColNullable[Decimal128] {
	return &ColNullable[Decimal128]{
		Values: c,
	}
}

// NewArrDecimal128 returns new Array(Decimal128).
func NewArrDecimal128() *ColArr[Decimal128] {
	return &ColArr[Decimal128]{
		Data: new(ColDecimal128),
	}
}
