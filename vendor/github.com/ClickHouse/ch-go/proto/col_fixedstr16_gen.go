// Code generated by ./cmd/ch-gen-col, DO NOT EDIT.

package proto

// ColFixedStr16 represents FixedStr16 column.
type ColFixedStr16 [][16]byte

// Compile-time assertions for ColFixedStr16.
var (
	_ ColInput  = ColFixedStr16{}
	_ ColResult = (*ColFixedStr16)(nil)
	_ Column    = (*ColFixedStr16)(nil)
)

// Rows returns count of rows in column.
func (c ColFixedStr16) Rows() int {
	return len(c)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColFixedStr16) Reset() {
	*c = (*c)[:0]
}

// Type returns ColumnType of FixedStr16.
func (ColFixedStr16) Type() ColumnType {
	return ColumnTypeFixedString.With("16")
}

// Row returns i-th row of column.
func (c ColFixedStr16) Row(i int) [16]byte {
	return c[i]
}

// Append [16]byte to column.
func (c *ColFixedStr16) Append(v [16]byte) {
	*c = append(*c, v)
}

// Append [16]byte slice to column.
func (c *ColFixedStr16) AppendArr(vs [][16]byte) {
	*c = append(*c, vs...)
}

// LowCardinality returns LowCardinality for FixedStr16 .
func (c *ColFixedStr16) LowCardinality() *ColLowCardinality[[16]byte] {
	return &ColLowCardinality[[16]byte]{
		index: c,
	}
}

// Array is helper that creates Array of [16]byte.
func (c *ColFixedStr16) Array() *ColArr[[16]byte] {
	return &ColArr[[16]byte]{
		Data: c,
	}
}

// Nullable is helper that creates Nullable([16]byte).
func (c *ColFixedStr16) Nullable() *ColNullable[[16]byte] {
	return &ColNullable[[16]byte]{
		Values: c,
	}
}

// NewArrFixedStr16 returns new Array(FixedStr16).
func NewArrFixedStr16() *ColArr[[16]byte] {
	return &ColArr[[16]byte]{
		Data: new(ColFixedStr16),
	}
}
