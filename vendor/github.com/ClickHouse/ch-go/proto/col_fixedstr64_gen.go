// Code generated by ./cmd/ch-gen-col, DO NOT EDIT.

package proto

// ColFixedStr64 represents FixedStr64 column.
type ColFixedStr64 [][64]byte

// Compile-time assertions for ColFixedStr64.
var (
	_ ColInput  = ColFixedStr64{}
	_ ColResult = (*ColFixedStr64)(nil)
	_ Column    = (*ColFixedStr64)(nil)
)

// Rows returns count of rows in column.
func (c ColFixedStr64) Rows() int {
	return len(c)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColFixedStr64) Reset() {
	*c = (*c)[:0]
}

// Type returns ColumnType of FixedStr64.
func (ColFixedStr64) Type() ColumnType {
	return ColumnTypeFixedString.With("64")
}

// Row returns i-th row of column.
func (c ColFixedStr64) Row(i int) [64]byte {
	return c[i]
}

// Append [64]byte to column.
func (c *ColFixedStr64) Append(v [64]byte) {
	*c = append(*c, v)
}

// Append [64]byte slice to column.
func (c *ColFixedStr64) AppendArr(vs [][64]byte) {
	*c = append(*c, vs...)
}

// LowCardinality returns LowCardinality for FixedStr64 .
func (c *ColFixedStr64) LowCardinality() *ColLowCardinality[[64]byte] {
	return &ColLowCardinality[[64]byte]{
		index: c,
	}
}

// Array is helper that creates Array of [64]byte.
func (c *ColFixedStr64) Array() *ColArr[[64]byte] {
	return &ColArr[[64]byte]{
		Data: c,
	}
}

// Nullable is helper that creates Nullable([64]byte).
func (c *ColFixedStr64) Nullable() *ColNullable[[64]byte] {
	return &ColNullable[[64]byte]{
		Values: c,
	}
}

// NewArrFixedStr64 returns new Array(FixedStr64).
func NewArrFixedStr64() *ColArr[[64]byte] {
	return &ColArr[[64]byte]{
		Data: new(ColFixedStr64),
	}
}
