// Code generated by ./cmd/ch-gen-col, DO NOT EDIT.

package proto

// ColFixedStr8 represents FixedStr8 column.
type ColFixedStr8 [][8]byte

// Compile-time assertions for ColFixedStr8.
var (
	_ ColInput  = ColFixedStr8{}
	_ ColResult = (*ColFixedStr8)(nil)
	_ Column    = (*ColFixedStr8)(nil)
)

// Rows returns count of rows in column.
func (c ColFixedStr8) Rows() int {
	return len(c)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColFixedStr8) Reset() {
	*c = (*c)[:0]
}

// Type returns ColumnType of FixedStr8.
func (ColFixedStr8) Type() ColumnType {
	return ColumnTypeFixedString.With("8")
}

// Row returns i-th row of column.
func (c ColFixedStr8) Row(i int) [8]byte {
	return c[i]
}

// Append [8]byte to column.
func (c *ColFixedStr8) Append(v [8]byte) {
	*c = append(*c, v)
}

// Append [8]byte slice to column.
func (c *ColFixedStr8) AppendArr(vs [][8]byte) {
	*c = append(*c, vs...)
}

// LowCardinality returns LowCardinality for FixedStr8 .
func (c *ColFixedStr8) LowCardinality() *ColLowCardinality[[8]byte] {
	return &ColLowCardinality[[8]byte]{
		index: c,
	}
}

// Array is helper that creates Array of [8]byte.
func (c *ColFixedStr8) Array() *ColArr[[8]byte] {
	return &ColArr[[8]byte]{
		Data: c,
	}
}

// Nullable is helper that creates Nullable([8]byte).
func (c *ColFixedStr8) Nullable() *ColNullable[[8]byte] {
	return &ColNullable[[8]byte]{
		Values: c,
	}
}

// NewArrFixedStr8 returns new Array(FixedStr8).
func NewArrFixedStr8() *ColArr[[8]byte] {
	return &ColArr[[8]byte]{
		Data: new(ColFixedStr8),
	}
}
