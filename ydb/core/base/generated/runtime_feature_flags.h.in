// Auto-generated by {{ generator }}, do not modify.
#pragma once
#include <util/system/types.h>
#include <atomic>
#include <tuple>

namespace NKikimrConfig {

    class TFeatureFlags;

} // namespace NKikimrConfig

namespace NKikimr {

class TRuntimeFeatureFlags {
public:
    TRuntimeFeatureFlags();

    // Tests are making copies during initialization
    TRuntimeFeatureFlags(const TRuntimeFeatureFlags& flags);
    TRuntimeFeatureFlags& operator=(const TRuntimeFeatureFlags& flags);

    // Allow implicit conversion and assignment from proto
    TRuntimeFeatureFlags(const NKikimrConfig::TFeatureFlags& flags);
    TRuntimeFeatureFlags& operator=(const NKikimrConfig::TFeatureFlags& flags);

    // Basic compatibility with proto
    void CopyFrom(const NKikimrConfig::TFeatureFlags& flags);
    void MergeFrom(const NKikimrConfig::TFeatureFlags& flags);

    // Replaces runtime flags from the specified proto
    // Flags marked (RequireRestart) = true are not updated
    void CopyRuntimeFrom(const NKikimrConfig::TFeatureFlags& flags);

    // Allow conversion to proto
    operator NKikimrConfig::TFeatureFlags() const;

{% for field in fields %}
    // Feature flag {{ field.name }}
    bool Has{{ field.name }}() const;
    bool Get{{ field.name }}() const;
    void Set{{ field.name }}(bool value);
    void Clear{{ field.name }}();
{% endfor %}

private:
{%- for slot in slots %}
    static std::tuple<ui64, ui64> BitsFromProto_{{ slot.name }}(const NKikimrConfig::TFeatureFlags& flags);
    static ui64 FromProto_{{ slot.name }}(const NKikimrConfig::TFeatureFlags& flags, ui64 value);
    void Update_{{ slot.name }}(ui64 bits, ui64 mask);
{%- endfor %}

private:
{%- for slot in slots %}
    std::atomic<ui64> {{ slot.name }}_;
{%- endfor %}
};

} // namespace NKikimr
