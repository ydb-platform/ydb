#include <map>

#include <util/system/compiler.h>
#include <util/generic/map.h>
#include <util/generic/set.h>
#include <util/generic/maybe.h>
#include <util/generic/ptr.h>
#include <util/generic/vector.h>
#include <util/string/builder.h>
#include <util/string/cast.h>
#include <util/string/subst.h>

#include <google/protobuf/compiler/code_generator.h>
#include <google/protobuf/compiler/plugin.h>
#include <google/protobuf/io/printer.h>
#include <google/protobuf/io/zero_copy_stream.h>
#include <ydb/core/config/protos/marker.pb.h>

#include <ydb/public/lib/protobuf/helpers.h>

using TVariables = std::map<TString, TString>;

using namespace google::protobuf::compiler;
using namespace google::protobuf;
using namespace NKikimr::NProtobuf;

class TPrinter {
public:
    explicit TPrinter(OutputDirectory* output, const TString& fileName, const TString& scope)
        : Output(output)
        , FileName(fileName)
        , Scope(scope)
    {
    }

    io::Printer* operator->() {
        if (!Printer) {
            Stream.Reset(Output->OpenForInsert(FileName, Scope));
            Printer.ConstructInPlace(Stream.Get(), '$');
        }

        return Printer.Get();
    }

private:
    OutputDirectory* Output;
    const TString FileName;
    const TString Scope;

    THolder<io::ZeroCopyOutputStream> Stream;
    TMaybe<io::Printer> Printer;

}; // TPrinter


class TMessageGenerator {
public:
    explicit TMessageGenerator(const Descriptor* message, OutputDirectory* output)
        : Message(message)
        , Header(output, HeaderFileName(message), ClassScope(message))
        , HeaderIncludes(output, HeaderFileName(message), IncludesScope())
        , Vars({
            {"class", ClassName(message)},
            {"fqMessageClass", FullyQualifiedClassName(Message)},
        })
    {
    }

    void Generate() {
        if (Message->options().GetExtension(NKikimrConfig::NMarkers::Root)) {
            for (auto i = 0; i < Message->field_count(); ++i) {
                const FieldDescriptor* field = Message->field(i);
                if (field->is_repeated()) {
                    continue;
                }
                if (auto* fieldMessage = field->message_type()) {
                    Vars["field"] = field->name();
                    Vars["fqFieldClass"] = FullyQualifiedClassName(fieldMessage);
                    Vars["fieldNumber"] = std::to_string(field->number());
                    Header->Print(Vars, "/* BEGIN generated by config extension */\n");
                    Header->Print(Vars, "struct T$field$FieldTag {};\n");
                    Header->Print(Vars, "constexpr inline static std::tuple<\n");
                    Header->Indent();
                    Header->Print(Vars, "bool ($fqMessageClass$::*)() const,\n");
                    Header->Print(Vars, "const $fqFieldClass$& ($fqMessageClass$::*)() const,\n");
                    Header->Print(Vars, "$fqFieldClass$* ($fqMessageClass$::*)()\n");
                    Header->Outdent();
                    Header->Print(Vars, "> GetFieldAccessorsByFieldTag($fqMessageClass$::T$field$FieldTag) {\n");
                    Header->Indent();
                    Header->Print(Vars, "return std::tuple{\n");
                    Header->Indent();
                    Header->Print(Vars, "&$fqMessageClass$::Has$field$,\n");
                    Header->Print(Vars, "&$fqMessageClass$::Get$field$,\n");
                    Header->Print(Vars, "&$fqMessageClass$::Mutable$field$\n");
                    Header->Outdent();
                    Header->Print(Vars, "};\n");
                    Header->Outdent();
                    Header->Print(Vars, "}\n");
                    Header->Print(Vars, "constexpr inline static ::NProtoBuf::uint32 GetFieldIdByFieldTag($fqMessageClass$::T$field$FieldTag) {\n");
                    Header->Indent();
                    Header->Print(Vars, "return $fieldNumber$;\n");
                    Header->Outdent();
                    Header->Print(Vars, "}\n");
                    Header->Print(Vars, "/* END generated by config extension */\n");
                }
            }
        }


        if (Message->options().GetExtension(NKikimrConfig::NMarkers::CombinedType)) {
            TMap<TString, TSet<const FieldDescriptor*>> outputs;
            for (auto i = 0; i < Message->field_count(); ++i) {
                const FieldDescriptor* field = Message->field(i);
                auto opts = field->options();
                for (int i = 0; i < opts.ExtensionSize(NKikimrConfig::NMarkers::CopyTo); ++i) {
                    outputs[opts.GetExtension(NKikimrConfig::NMarkers::CopyTo, i)].insert(field);
                }
            }

            for (const auto& [output, fields] : outputs) {
                Vars["output"] = output;
                Header->Print(Vars, "/* BEGIN generated by config extension */\n");
                Header->Print(Vars, "template <class TOut>\n");
                Header->Print(Vars, "void CopyTo$output$(TOut& out) const {\n");
                Header->Indent();
                for (const auto* field : fields) {
                    Vars["field"] = field->name();

                    if (!field->is_repeated()) {
                        if (field->message_type()) {
                            Header->Print(Vars, "if (Has$field$()) {\n");
                            Header->Indent();
                            Header->Print(Vars, "out.Mutable$field$()->CopyFrom(Get$field$());\n");
                            Header->Outdent();
                            Header->Print(Vars, "}\n");
                        } else if (field->is_optional()) {
                            Header->Print(Vars, "if (Has$field$()) {\n");
                            Header->Indent();
                            Header->Print(Vars, "out.Set$field$(Get$field$());\n");
                            Header->Outdent();
                            Header->Print(Vars, "}\n");
                        } else {
                            Header->Print(Vars, "out.Set$field$(Get$field$());\n");
                        }
                    } else {
                        if (field->message_type()) {
                            Header->Print(Vars, "for (size_t i = 0; i < $field$Size(); ++i) {\n");
                            Header->Indent();
                            Header->Print(Vars, "out.Add$field$()->CopyFrom(Get$field$(i));\n");
                            Header->Outdent();
                            Header->Print(Vars, "}\n");
                        } else {
                            Header->Print(Vars, "for (const auto& field : Get$field$()) {\n");
                            Header->Indent();
                            Header->Print(Vars, "out.Add$field$(field);\n");
                            Header->Outdent();
                            Header->Print(Vars, "}\n");
                        }
                    }
                }
                Header->Outdent();
                Header->Print(Vars, "}\n");
                Header->Print(Vars, "/* END generated by config extension */\n");
            }
        }


        if (Message->options().GetExtension(NKikimrConfig::NMarkers::WithMapType)) {
            HeaderIncludes->Print(Vars, "#include <map>\n");
            TMap<TString, TSet<const FieldDescriptor*>> outputs;
            for (auto i = 0; i < Message->field_count(); ++i) {
                const FieldDescriptor* field = Message->field(i);
                auto opts = field->options();
                for (int i = 0; i < opts.ExtensionSize(NKikimrConfig::NMarkers::AsMap); ++i) {
                    outputs[opts.GetExtension(NKikimrConfig::NMarkers::AsMap, i)].insert(field);
                }
            }

            // FIXME validate they have same type

            for (const auto& [output, fields] : outputs) {
                if (auto* fieldMessage = (*fields.begin())->message_type()) { // FIXME for other classes
                    Vars["fqFieldClass"] = FullyQualifiedClassName(fieldMessage);
                }
                Vars["output"] = output;
                Header->Print(Vars, "/* BEGIN generated by config extension */\n");
                Header->Print(Vars, "size_t $output$Size(const TProtoStringType& str) const {\n");
                Header->Indent();
                Header->Print(Vars, "static std::map<TProtoStringType, size_t ($fqMessageClass$::*)() const> sizeHandlers{\n");
                Header->Indent();
                for (const auto* field : fields) {
                    Vars["field"] = field->name();
                    Header->Print(Vars, "{\"$field$\", &$fqMessageClass$::$field$Size},\n");
                }
                Header->Outdent();
                Header->Print(Vars, "};\n");
                Header->Print(Vars, "auto it = sizeHandlers.find(str);\n");
                Header->Print(Vars, "return it == sizeHandlers.end() ? 0 : (this->*(it->second))();\n");
                Header->Outdent();
                Header->Print(Vars, "}\n");
                Header->Print(Vars, "$fqFieldClass$* Add$output$(const TProtoStringType& str) {\n");
                Header->Indent();
                Header->Print(Vars, "static std::map<TProtoStringType, $fqFieldClass$* ($fqMessageClass$::*)()> addHandlers{\n");
                Header->Indent();
                for (const auto* field : fields) {
                    Vars["field"] = field->name();
                    Header->Print(Vars, "{\"$field$\", &$fqMessageClass$::Add$field$},\n");
                }
                Header->Outdent();
                Header->Print(Vars, "};\n");
                Header->Print(Vars, "auto it = addHandlers.find(str);\n");
                Header->Print(Vars, "return it == addHandlers.end() ? nullptr : (this->*(it->second))();\n");
                Header->Outdent();
                Header->Print(Vars, "}\n");
                Header->Print(Vars, "const ::google::protobuf::RepeatedPtrField<$fqFieldClass$>& Get$output$(const TProtoStringType& str) const {\n");
                Header->Indent();
                Header->Print(Vars, "static std::map<TProtoStringType, const ::google::protobuf::RepeatedPtrField<$fqFieldClass$>& ($fqMessageClass$::*)() const> getHandlers{\n");
                Header->Indent();
                for (const auto* field : fields) {
                    Vars["field"] = field->name();
                    Header->Print(Vars, "{\"$field$\", &$fqMessageClass$::Get$field$},\n");
                }
                Header->Outdent();
                Header->Print(Vars, "};\n");
                Header->Print(Vars, "return (this->*getHandlers.at(str))();\n");
                Header->Outdent();
                Header->Print(Vars, "}\n");
                Header->Print(Vars, "::google::protobuf::RepeatedPtrField<$fqFieldClass$>* Mutable$output$(const TProtoStringType& str) {\n");
                Header->Indent();
                Header->Print(Vars, "static std::map<TProtoStringType, ::google::protobuf::RepeatedPtrField<$fqFieldClass$>* ($fqMessageClass$::*)()> mutableHandlers{\n");
                Header->Indent();
                for (const auto* field : fields) {
                    Vars["field"] = field->name();
                    Header->Print(Vars, "{\"$field$\", &$fqMessageClass$::Mutable$field$},\n");
                }
                Header->Outdent();
                Header->Print(Vars, "};\n");
                Header->Print(Vars, "return (this->*mutableHandlers.at(str))();\n");
                Header->Outdent();
                Header->Print(Vars, "}\n");
                Header->Print(Vars, "/* END generated by config extension */\n");
            }

        }
    }
private:
    const Descriptor* Message;
    TPrinter Header;
    TPrinter HeaderIncludes;
    TVariables Vars;
};

class TCodeGenerator: public CodeGenerator {
    bool Generate(
            const FileDescriptor* file,
            const TProtoStringType&,
            OutputDirectory* output,
            TProtoStringType*) const override final
    {

        for (auto i = 0; i < file->message_type_count(); ++i) {
            TMessageGenerator mg(file->message_type(i), output);
            mg.Generate();
        }

        return true;
    }

    uint64_t GetSupportedFeatures() const override
    {
        return FEATURE_PROTO3_OPTIONAL;
    }

}; // TCodeGenerator

int main(int argc, char* argv[]) {
    TCodeGenerator generator;
    return google::protobuf::compiler::PluginMain(argc, argv, &generator);
}
