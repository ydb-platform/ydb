// Auto-generated by {{ generator }}, do not modify.

#include <ydb/core/control/lib/generated/control_board_proto.h>

#include <util/generic/noncopyable.h>
#include <util/system/types.h>
#include <atomic>
#include <array>

#include <ydb/core/protos/tablet.pb.h>
#include <ydb/core/protos/config.pb.h>

namespace NKikimr {

class TControlBoardWrapper;

{% for control_class in control_classes %}
{%- if control_class.has_proto_config_class_name %}
void {{ control_class.class_name}}::UpdateControls(const {{ control_class.proto_config_class_name }}& config) {
{%- for inner_control in control_class.inner_classes %}
{%- if control_class.class_name == "TGRpcControls"%}
    RequestConfigs.UpdateControls(config);
{%- else %}
    if (config.Has{{ inner_control.name }}()) {
        {{ inner_control.name }}.UpdateControls(config.Get{{ inner_control.name }}());
    }
{%- endif %}
{%- endfor %}

{% for control in control_class.controls %}
    if (config.Has{{ control.name }}()) {
        if (auto control = {{ control.name }}.AtomicLoad()) {
            control->SetFromHtmlRequest(config.Get{{ control.name }}());
        }
    }
{% endfor %}
}
{%- elif control_class.class_name == "TRequestConfigsOuter" %}
void {{ control_class.class_name }}::UpdateControls(const NKikimrConfig::TImmediateControlsConfig_TGRpcControls& config) {
    const auto& requestConfigs = config.GetRequestConfigs();
{%- for inner_control in control_class.inner_classes %}
    if (requestConfigs.contains("{{ inner_control.name }}")) {
        {{ inner_control.name }}.UpdateControls(requestConfigs.at("{{ inner_control.name }}"));
    }
{%- endfor %}
}

{%- endif %}
{% endfor %}

void TControlBoardBase::UpdateControls(const NKikimrConfig::TImmediateControlsConfig& config) {
{%- for control_class in root_control_classes %}
{%- if control_class.has_proto_config_class_name %}
    if (config.Has{{ control_class.name }}()) {
        {{ control_class.name }}.UpdateControls(config.Get{{ control_class.name }}());
    }
{%- endif %}
{%- endfor %}
}

TVector<TControlAndName> TControlBoardBase::GetAllAvailableControls() const {
    TVector<TControlAndName> res;
{%- for control in controls %}
{%- if control.has_html_name and control.has_full_path %}
    if (auto controlPtr = {{ control.full_path }}.AtomicLoad()) {
        res.push_back(TControlAndName{ controlPtr, "{{ control.html_name }}" });
    }
{%- endif %}
{%- endfor %}
    return res;
}

} // namespace NKikimr
