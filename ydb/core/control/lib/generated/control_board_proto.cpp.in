// Auto-generated by {{ generator }}, do not modify.

#include <ydb/core/control/lib/generated/control_board_proto.h>
#include <ydb/library/yverify_stream/yverify_stream.h>

#include <util/generic/hash.h>
#include <util/generic/noncopyable.h>
#include <util/system/types.h>
#include <atomic>
#include <array>

#include <contrib/libs/protobuf/src/google/protobuf/descriptor.pb.h>

#include <ydb/core/protos/tablet.pb.h>
#include <ydb/core/protos/config.pb.h>

namespace NKikimr {

class TControlBoardWrapper;

//
// CREATE CONTROLS
//

{% for control_class in control_classes %}
{%- if control_class.has_proto_config_class_name %}
void {{ control_class.class_name}}::CreateConfigControls(bool allowExisting) {
{%- for inner_control in control_class.inner_classes %}
{%- if control_class.class_name == "TGRpcControls"%}
    RequestConfigs.CreateConfigControls(allowExisting);
{%- else %}
    {{ inner_control.name }}.CreateConfigControls(allowExisting);
{%- endif %}
{%- endfor %}
{%- for control in control_class.controls %}
    {
        if ({{control.name}}.AtomicLoad() && !allowExisting) {
{%- if control.has_full_path %}
            Y_VERIFY_S(false, " Immediate control  {{ control.full_path }}  was registered before ");
{% else %}
            Y_VERIFY_S(false, " Immediate control  {{ control.name }}  was registered before ");
{%- endif %}
        }
        TAtomicBase defaultValue = {{ control.default_value }};
        TAtomicBase minValue = {{ control.min_value }};
        TAtomicBase maxValue = {{ control.max_value }};
        {{ control.name }}.AtomicStore(MakeIntrusive<TControl>(defaultValue, minValue, maxValue));
    }
{%- endfor %}
}

{%- elif control_class.class_name == "TRequestConfigsOuter" %}
void {{ control_class.class_name }}::CreateConfigControls(bool allowExisting) {
{%- for inner_control in control_class.inner_classes %}
    {{ inner_control.name }}.CreateConfigControls(allowExisting);
{%- endfor %}
}
{%- endif %}
{% endfor %}

//
// UPDATE CONTROLS
//

{%-for control_class in control_classes %}
{%- if control_class.has_proto_config_class_name %}
void {{ control_class.class_name}}::UpdateControls(const {{ control_class.proto_config_class_name }}& config, bool createIfNotExist) {
{%- for inner_control in control_class.inner_classes %}
{%- if control_class.class_name == "TGRpcControls"%}
    RequestConfigs.UpdateControls(config, createIfNotExist);
{%- else %}
    {{ inner_control.name }}.UpdateControls(config.Get{{ inner_control.name }}(), createIfNotExist);
{%- endif %}
{%- endfor %}
{%- for control in control_class.controls %}
    if (auto control = {{ control.name }}.AtomicLoad()) {
        if (config.Has{{ control.name }}()) {
            control->SetFromHtmlRequest(config.Get{{ control.name }}());
        } else {
            control->RestoreDefault();
        }
    } else if (createIfNotExist) {
        TAtomicBase defaultValue = {{ control.default_value }};
        TAtomicBase minValue = {{ control.min_value }};
        TAtomicBase maxValue = {{ control.max_value }};
        {{ control.name }}.AtomicStore(MakeIntrusive<TControl>(defaultValue, minValue, maxValue));
    }
{%-endfor %}
}
{%- elif control_class.class_name == "TRequestConfigsOuter" %}
void {{ control_class.class_name }}::UpdateControls(const NKikimrConfig::TImmediateControlsConfig_TGRpcControls& config, bool createIfNotExist) {
    const auto& requestConfigs = config.GetRequestConfigs();
{%- for inner_control in control_class.inner_classes %}
    if (requestConfigs.contains("{{ inner_control.name }}")) {
        {{ inner_control.name }}.UpdateControls(requestConfigs.at("{{ inner_control.name }}"), createIfNotExist);
    }
{%- endfor %}
}
{%- endif %}
{% endfor %}
void TControlBoardBase::CreateConfigControls(bool allowExisting) {
{%- for control_class in root_control_classes %}
{%- if control_class.has_proto_config_class_name %}
    {{ control_class.name }}.CreateConfigControls(allowExisting);
{%- endif %}
{%- endfor %}
}
void TControlBoardBase::UpdateControls(const NKikimrConfig::TImmediateControlsConfig& config) {
{%- for control_class in root_control_classes %}
{%- if control_class.has_proto_config_class_name %}
{%- if control_class.name == "GRpcControls" %}
    {{ control_class.name }}.UpdateControls(config.Get{{ control_class.name }}(), true);
{%- else %}
    {{ control_class.name }}.UpdateControls(config.Get{{ control_class.name }}(), false);
{%- endif %}
{%- endif %}
{%- endfor %}
}
THashMap<TString, TIntrusivePtr<TControl>> TControlBoardBase::GetAllAvailableControls() const {
    THashMap<TString, TIntrusivePtr<TControl>> res;
{%- for control in controls %}
{%- if control.has_html_name and control.has_full_path %}
    if (auto controlPtr = {{ control.full_path }}.AtomicLoad()) {
        res["{{ control.html_name }}"] = controlPtr;
    }
{%- endif %}
{%- endfor %}
    return res;
}
} // namespace NKikimr
