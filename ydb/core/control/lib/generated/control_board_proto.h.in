// Auto-generated by {{ generator }}, do not modify.
#pragma once

#include <ydb/core/control/lib/base/immediate_control_board_control.h>
#include <ydb/core/protos/tablet.pb.h>

#include <library/cpp/threading/hot_swap/hot_swap.h>

#include <util/generic/noncopyable.h>
#include <util/generic/vector.h>
#include <util/system/types.h>
#include <atomic>
#include <array>

namespace NKikimrConfig {
    class TImmediateControlsConfig;
{%- for control_class in control_classes %}
{%- if control_class.has_proto_config_class_name %}
    class {{ control_class.proto_config_class_short_name }};
{%- endif %}
{%- endfor %}

};

namespace NKikimr {

    class TControl;

{%- for control_class in control_classes %}
    class {{ control_class.class_name }};
{%- endfor %}

{% for control_class in control_classes %}
class {{ control_class.class_name }}: TNonCopyable {
public:
    void CreateConfigControls(bool allowExisting);
{%- if control_class.has_proto_config_class_name %}
    void UpdateControls(const {{ control_class.proto_config_class_name }}& config, bool createIfNotExist);
{%- elif control_class.class_name == "TRequestConfigsOuter" %}
    void UpdateControls(const NKikimrConfig::TImmediateControlsConfig_TGRpcControls& config, bool createIfNotExist);
{%- endif %}
{%- for inner_control_class in control_class.inner_classes %}
    {{ inner_control_class.class_name }} {{ inner_control_class.name }};
{%- endfor %}

{%- for control in control_class.controls %}
    THotSwap<TControl> {{ control.name }};
{%- endfor %}
};

{% endfor %}

class TControlBoardBase
                        : private TNonCopyable
                        , public TThrRefBase {
public:
    void UpdateControls(const NKikimrConfig::TImmediateControlsConfig& config);
    void CreateConfigControls(bool allowExisting);
protected:
    // Should not be called in registration only in params handling
    THashMap<TString, TIntrusivePtr<TControl>> GetAllAvailableControls() const;

public:
{%- for control_class in root_control_classes %}
    {{ control_class.class_name }} {{ control_class.name }};
{%- endfor %}
    std::array<THotSwap<TControl>, NKikimrTabletBase::TTabletTypes::UserTypeStart> LogFlushDelayOverrideUsec;
};


} // namespace NKikimr
