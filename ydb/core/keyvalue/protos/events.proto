syntax = "proto3";
option cc_enable_arenas = true;

package NKikimrKeyValue;
option java_package = "ru.yandex.kikimr.proto";
option java_outer_classname = "KeyValueProtos";
option java_multiple_files = true;


message Priorities {
    enum Priority {
        PRIORITY_UNSPECIFIED = 0;

        // High priority for user-initiated operations.
        PRIORITY_REALTIME = 1;

        // Low prioroty for background system activity.
        PRIORITY_BACKGROUND = 2;
    }
}

message Statuses {
    enum ReplyStatus {
        RSTATUS_UNSPECIFIED = 0;
        RSTATUS_OK = 1;
        RSTATUS_ERROR = 2;
        RSTATUS_TIMEOUT = 3;
        RSTATUS_INTERNAL_ERROR = 4;
        RSTATUS_NOT_FOUND = 5;
        RSTATUS_OVERRUN = 6;
        RSTATUS_WRONG_LOCK_GENERATION = 7;
    }
}

message StorageStatusFlags {
}

message Flags {
    bool disk_space_cyan = 1;
    bool disk_space_light_yellow_move = 2;
    bool disk_space_yellow_stop = 3;
    bool disk_space_light_orange = 4;
    bool disk_space_orange = 5;
    bool disk_space_red = 6;
    bool disk_space_black = 7;
}

message StorageChannel {
    enum StatusFlag {
        STATUS_FLAG_UNSPECIFIED = 0;
        STATUS_FLAG_GREEN = 10;
        STATUS_FLAG_YELLOW_STOP = 20;
        STATUS_FLAG_ORANGE_OUT_SPACE = 30;
    }
    Statuses.ReplyStatus status = 1;
    uint32 storage_channel = 2;
    StatusFlag status_flag = 3;
}

message KVRange {
    oneof from_bound {
        string from_key_inclusive = 1;
        string from_key_exclusive = 2;
    }

    oneof to_bound {
        string to_key_inclusive = 3;
        string to_key_exclusive = 4;
    }
}

message ReadRequest {
    uint64 tablet_id = 1;
    optional uint64 lock_generation = 2;
    string key = 3;
    uint64 offset = 4;
    uint64 size = 5;
    uint64 cookie = 6;
    Priorities.Priority priority = 7;
    uint64 deadline_instant_ms = 8;
    uint64 limit_bytes = 9;
}

message ReadResult {
    string requested_key = 1;
    uint64 requested_offset = 2;
    uint64 requested_size = 3;
    bytes value = 4;
    string msg = 5;
    Statuses.ReplyStatus status = 6;
    uint64 cookie = 7;
    uint64 node_id = 8;
}

message ReadRangeRequest {
    uint64 tablet_id = 1;
    optional uint64 lock_generation = 2;

    KVRange range = 3;

    bool include_data = 4;
    uint64 limit_bytes = 5;
    Priorities.Priority priority = 6;
    uint64 cookie = 7;
    uint64 deadline_instant_ms = 8;
}

message ReadRangeResult {
    message KeyValuePair {
        string key = 1;
        bytes value = 2;
        uint32 value_size = 3;

        // Unix time of the creation of the key-value pair (in ms).
        uint64 creation_unix_time = 4;
        uint32 storage_channel = 5; // Returns the _actual_ storage channel
        Statuses.ReplyStatus status = 6;
    }
    Statuses.ReplyStatus status = 1;
    string msg = 2;
    repeated KeyValuePair pair = 3;
    uint64 cookie = 4;
    uint64 node_id = 5;
}

message ExecuteTransactionRequest {
    message Command {
        message Rename {
            string old_key = 1;
            string new_key = 2;
        }
        message Concat {
            repeated string input_keys = 1;
            string output_key = 2;
            bool keep_inputs = 3;
        }
        message CopyRange {
            KVRange range = 1;
            string prefix_to_remove = 2;
            string prefix_to_add = 3;
        }
        message Write {
            enum Tactic {
                TACTIC_UNSPECIFIED = 0;
                TACTIC_MAX_THROUGHPUT = 1;
                TACTIC_MIN_LATENCY = 2;
            }
            string key = 1;
            bytes value = 2;
            uint32 storage_channel = 3;
            Priorities.Priority priority = 4;
            Tactic tactic = 5;
        }
        message DeleteRange {
            KVRange range = 1;
        }

        oneof action {
            DeleteRange delete_range = 1;
            Rename rename = 2;
            CopyRange copy_range = 3;
            Concat concat = 4;
            Write write = 5;
        }
    }

    uint64 tablet_id = 1;
    optional uint64 lock_generation = 2;
    repeated Command commands = 3;
    uint64 cookie = 4;
    uint64 deadline_instant_ms = 5;
}

message ExecuteTransactionResult {
    repeated StorageChannel storage_channel = 1;
    Statuses.ReplyStatus status = 2;
    string msg = 3;
    uint64 cookie = 4;
    uint64 node_id = 5;
}

message GetStorageChannelStatusRequest {
    uint64 tablet_id = 1;
    optional uint64 lock_generation = 2;
    repeated uint32 storage_channel = 3;
    uint64 deadline_instant_ms = 4;
}

message GetStorageChannelStatusResult {
    repeated StorageChannel storage_channel = 1;
    Statuses.ReplyStatus status = 2;
    string msg = 3;
    uint64 node_id = 4;
}

message AcquireLockRequest {
    uint64 tablet_id = 1;
    uint64 cookie = 2;
}

message AcquireLockResult {
    uint64 lock_generation = 1;
    uint64 cookie = 2;
    uint64 node_id = 3;
}

message CleanUpDataRequest {
    uint64 generation = 1;
    bool reset_actual_generation = 2;
}

message CleanUpDataResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_SUCCESS = 1;
        STATUS_ALREADY_COMPLETED = 2;
        STATUS_ABORTED = 3;
        STATUS_ERROR = 4;
    }

    uint64 generation = 1;
    uint64 actual_generation = 2;
    Status status = 3;
    string error_reason = 4;
}
