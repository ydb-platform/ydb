package NKikimrBlobStorage;
option java_package = "ru.yandex.kikimr.proto";

import "ydb/core/protos/blobstorage_disk_color.proto";

message TPDiskState {
    enum E {
        Initial = 0;
        InitialFormatRead = 1;
        InitialFormatReadError = 2;
        InitialSysLogRead = 3;
        InitialSysLogReadError = 4;
        InitialSysLogParseError = 5;
        InitialCommonLogRead = 6;
        InitialCommonLogReadError = 7;
        InitialCommonLogParseError = 8;
        CommonLoggerInitError = 9;
        Normal = 10;
        OpenFileError = 11;
        ChunkQuotaError = 12;
        DeviceIoError = 13;
        Reserved14 = 14;
        Reserved15 = 15;
        Reserved16 = 16;

        Missing = 252;
        Timeout = 253;
        NodeDisconnected = 254;
        Unknown = 255;
        // end
    }
}

message TVDiskID {
    optional uint32 GroupID = 1;
    optional uint32 GroupGeneration = 2;
    optional uint32 Ring = 3;
    optional uint32 Domain = 4;
    optional uint32 VDisk = 5;
}

message TPDiskId {
    optional uint32 NodeId = 1;
    optional uint32 PDiskId = 2;
}

message TVSlotId {
    optional uint32 NodeId = 1;
    optional uint32 PDiskId = 2;
    optional uint32 VSlotId = 3;
}

message TVDiskMetrics {
    optional TVDiskID VDiskId = 1;
    optional uint32 SatisfactionRank = 2;
    optional uint64 AvailableSize = 3;
    optional uint64 AllocatedSize = 4;
    //optional uint64 ReadThroughput = 5; // bytes per second
    //optional uint64 WriteThroughput = 6; // bytes per second
    optional uint32 StatusFlags = 7;
    optional TVSlotId VSlotId = 8;
    optional double Occupancy = 9;
    optional NKikimrBlobStorage.TPDiskSpaceColor.E SpaceColor = 10;
}

message TPDiskMetrics {
    optional uint32 PDiskId = 1;
    optional uint64 AvailableSize = 2;
    optional uint64 TotalSize = 3;
    optional uint64 MaxReadThroughput = 4; // bytes per second
    optional uint64 MaxWriteThroughput = 5; // bytes per second
    optional uint64 NonRealTimeMs = 6; // ms per second of non-realtime, [0..1000]
    optional uint64 SlowDeviceMs = 7; // ms per second of slow device, [0..1000]
    optional uint32 MaxIOPS = 8; // number of IOPS this device can carry out
    
    // maximum expected slot size; if set, then it is guaranteed that EnforcedDynamicSlotSize bytes of space are
    // available for every slot over this PDisk; if not set, then no space enforcement assumed
    optional uint64 EnforcedDynamicSlotSize = 9;

    optional TPDiskState.E State = 10;

    optional uint64 UpdateTimestamp = 11; // TInstant::GetValue()
}
