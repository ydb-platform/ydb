syntax = "proto3";

import "ydb/core/protos/config.proto";
import "ydb/core/protos/blobstorage_disk.proto";
import "ydb/library/actors/protos/interconnect.proto";

package NKikimrBlobStorage;

message TNodeIdentifier {
    string Host = 1;
    uint32 Port = 2;
    uint32 NodeId = 3;
    NActorsInterconnect.TNodeLocation Location = 4;
}

message TStorageConfigMeta {
    uint64 Generation = 1;
    bytes Fingerprint = 2;
}

message TStorageConfig { // contents of storage metadata
    uint64 Generation = 1; // stored generation
    bytes Fingerprint = 2; // hash for config validation (must be the same for all nodes with the same Generation)
    NKikimrConfig.TBlobStorageConfig BlobStorageConfig = 3; // NodeWardenServiceSet for static group is inside
    NKikimrConfig.TDomainsConfig.TStateStorage StateStorageConfig = 9;
    NKikimrConfig.TDomainsConfig.TStateStorage StateStorageBoardConfig = 10;
    NKikimrConfig.TDomainsConfig.TStateStorage SchemeBoardConfig = 11;
    repeated TNodeIdentifier AllNodes = 5; // set of all known nodes
    string ClusterUUID = 6; // cluster GUID as provided in nameservice config
    string SelfAssemblyUUID = 7; // self-assembly UUID generated when config is first created
    TStorageConfig PrevConfig = 8; // previous version of StorageConfig (if any)
}

message TPDiskMetadataRecord {
    TStorageConfig CommittedStorageConfig = 1; // currently active storage config
    TStorageConfig ProposedStorageConfig = 2; // proposed storage config
}

message TStorageFileContent {
    message TRecord {
        string Path = 1;
        fixed64 PDiskGuid = 2;
        uint64 Timestamp = 3;
        fixed64 Key = 4;
        TPDiskMetadataRecord Meta = 5;
        bool Unformatted = 6;
    }

    repeated TRecord Record = 1;
}

// Attach sender node to the recipient one; if already bound, then just update configuration.
message TEvNodeConfigPush {
    message TBoundNode {
        TNodeIdentifier NodeId = 1;
        TStorageConfigMeta Meta = 2;
    }
    bool Initial = 1; // set to true if this push is initial connection establishment
    repeated TBoundNode BoundNodes = 2; // a list of bound node updates (including itself)
    repeated TNodeIdentifier DeletedBoundNodeIds = 3; // a list of detached nodes
}

// Used to reverse-propagate configuration and to confirm/reject initial TEvNodePushBinding query.
message TEvNodeConfigReversePush {
    uint32 RootNodeId = 1; // current tree root as known by the sender, always nonzero
    bool Rejected = 2; // is the request rejected due to cyclic graph?
    TStorageConfig CommittedStorageConfig = 3; // last known committed storage configuration
}

// Remove node from bound list.
message TEvNodeConfigUnbind {
}

// Propagate query to the tree bottom and collect replies.
message TEvNodeConfigScatter {
    message TCollectConfigs {
    }

    message TProposeStorageConfig {
        TStorageConfig Config = 1;
    }

    optional uint64 Cookie = 1;

    oneof Request {
        TCollectConfigs CollectConfigs = 2;
        TProposeStorageConfig ProposeStorageConfig = 3;
    }
}

// Collected replies from the bottom.
message TEvNodeConfigGather {
    message TCollectConfigs {
        message TNode {
            repeated TNodeIdentifier NodeIds = 1; // nodes with the same config
            TStorageConfig BaseConfig = 2; // config from config.yaml
        }
        message TDiskIdentifier {
            TNodeIdentifier NodeId = 1;
            string Path = 2;
            optional fixed64 Guid = 3;
        }
        message TPersistentConfig {
            repeated TDiskIdentifier Disks = 1; // disks with the same config
            TStorageConfig Config = 2;
        }
        repeated TNode Nodes = 1;
        repeated TPersistentConfig CommittedConfigs = 2;
        repeated TPersistentConfig ProposedConfigs = 3;
    }

    message TProposeStorageConfig {
        enum EStatus {
            UNKNOWN = 0;
            ACCEPTED = 1;
            HAVE_NEWER_GENERATION = 2;
            RACE = 3;
            ERROR = 4;
            NO_STORAGE = 5; // nowhere to store configuration to
        }
        message TStatus {
            TNodeIdentifier NodeId = 1;
            EStatus Status = 2;
            string Reason = 3;

            message TDrive {
                string Path = 1;
                optional fixed64 Guid = 2;
            }
            reserved 4;
            repeated TDrive SuccessfulDrives = 5;
        }
        repeated TStatus Status = 1;
    }

    optional uint64 Cookie = 1;

    oneof Response {
        TCollectConfigs CollectConfigs = 2;
        TProposeStorageConfig ProposeStorageConfig = 3;
    }
}

// Some kind of RPC -- this event can be sent to any NW, it will forward the request to root node.
message TEvNodeConfigInvokeOnRoot {
    message TUpdateConfig {
        TStorageConfig Config = 1;
    }

    message TQueryConfig
    {}

    message TReassignGroupDisk {
        NKikimrBlobStorage.TVDiskID VDiskId = 1; // which one to reassign
        optional NKikimrBlobStorage.TPDiskId PDiskId = 2; // where to put it (optional)
        bool ConvertToDonor = 3; // convert the current disk to donor?
        bool IgnoreGroupFailModelChecks = 4;
        bool IgnoreDegradedGroupsChecks = 5;
        bool IgnoreVSlotQuotaCheck = 6;
        bool IsSelfHealReasonDecommit = 7;
    }

    // Regenerate configuration so the slain VDisk is no more reported as DESTROY one in the list.
    message TStaticVDiskSlain {
        NKikimrBlobStorage.TVDiskID VDiskId = 1;
        NKikimrBlobStorage.TVSlotId VSlotId = 2;
    }

    message TDropDonor {
        NKikimrBlobStorage.TVDiskID VDiskId = 1;
        NKikimrBlobStorage.TVSlotId VSlotId = 2;
    }

    message TReassignStateStorageNode {
        uint32 From = 1;
        uint32 To = 2; // or zero to pick up automatically
        bool StateStorage = 3;
        bool StateStorageBoard = 4;
        bool SchemeBoard = 5;
    }

    oneof Request {
        TUpdateConfig UpdateConfig = 1;
        TQueryConfig QueryConfig = 2;
        TReassignGroupDisk ReassignGroupDisk = 3;
        TStaticVDiskSlain StaticVDiskSlain = 4;
        TDropDonor DropDonor = 5;
        TReassignStateStorageNode ReassignStateStorageNode = 6;
    }
}

// Result of RPC invocation.
message TEvNodeConfigInvokeOnRootResult {
    enum EStatus {
        OK = 0; // request fulfilled successfully
        NO_QUORUM = 1; // root node did not have quorum of following nodes
        ERROR = 2; // failure during request execution
        RACE = 3; // race in requests with other entities
    }

    message TScepter {
        uint64 Id = 1;
        uint32 NodeId = 2;
    }

    message TUpdateConfig {
    }

    message TQueryConfig {
        TStorageConfig Config = 1;
        TStorageConfig CurrentProposedStorageConfig = 2;
    }

    message TReassignGroupDisk {
    }

    message TStaticVDiskSlain {
    }

    message TDropDonor {
    }

    message TReassignStateStorageNode {
    }

    EStatus Status = 1;
    optional string ErrorReason = 2;
    TScepter Scepter = 3;

    oneof Response {
        TUpdateConfig UpdateConfig = 4;
        TQueryConfig QueryConfig = 5;
        TReassignGroupDisk ReassignGroupDisk = 6;
        TStaticVDiskSlain StaticVDiskSlain = 7;
        TDropDonor DropDonor = 8;
        TReassignStateStorageNode ReassignStateStorageNode = 9;
    }
}

message TEvNodeWardenDynamicConfigPush {
    TStorageConfig Config = 1;
}
