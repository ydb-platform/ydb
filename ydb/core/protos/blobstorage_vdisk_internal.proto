import "ydb/core/protos/base.proto";
import "ydb/core/protos/blobstorage.proto";
import "ydb/core/protos/blobstorage_disk.proto";
import "ydb/core/protos/config.proto";

package NKikimrVDiskData;

////////////////////////////////////////////////////////////////////////////////
// On-disk structures
////////////////////////////////////////////////////////////////////////////////

message TDiskPart {
    optional uint32 ChunkIdx = 1;
    optional uint32 Offset = 2;
    optional uint32 Size = 3;
};

message TDiskPartVec {
    repeated TDiskPart DiskParts = 1;
}

message TPhantomLogoBlobs {
    repeated NKikimrProto.TLogoBlobID LogoBlobs = 1;
};

////////////////////////////////////////////////////////////////////////////////
// Bulk formed sst info
////////////////////////////////////////////////////////////////////////////////
message TBulkFormedSstInfo {
    optional uint64 FirstBlobLsn = 1;
    optional uint64 LastBlobLsn = 2;
    optional TDiskPart EntryPoint = 3;
    repeated uint32 ChunkIds = 4;
    optional bool RemovedFromIndex = 5 [default = false];
};

message TBulkFormedSstInfoSet {
    repeated TBulkFormedSstInfo Segments = 1;
};

////////////////////////////////////////////////////////////////////////////////
// TLevelIndex -- record for hull db index
////////////////////////////////////////////////////////////////////////////////
message TLevel0 {
    repeated TDiskPart Ssts = 1;
};

message TLevelX {
    repeated TDiskPart Ssts = 1;
    optional bytes LastCompacted = 2;
};

message TLevelIndex {
    optional TLevel0 Level0 = 1;
    repeated TLevelX OtherLevels = 2;
    repeated uint32 DeletedChunks = 3;
    optional TBulkFormedSstInfoSet BulkFormedSstInfoSet = 4;

    optional uint64 NextSstId = 11;
    optional uint64 CompactedLsn = 12;
};


////////////////////////////////////////////////////////////////////////////////
// THullDbEntryPoint -- entry point for the whole db
////////////////////////////////////////////////////////////////////////////////
message THullDbEntryPoint {
    message TUncommittedRemovedHugeBlob {
        optional uint64 RecordLsn = 1;
        optional TDiskPartVec RemovedHugeBlobs = 2;
    };

    optional TLevelIndex LevelIndex = 1;
    optional TDiskPartVec RemovedHugeBlobs = 2;

    // obsolete field
    repeated TUncommittedRemovedHugeBlob UncommittedRemovedHugeBlobs = 3;

    optional TDiskPartVec AddedHugeBlobs = 4;
};

////////////////////////////////////////////////////////////////////////////////
// TSyncerVDiskEntry -- what Syncer saves about each VDisk in the BlobStorage
// group
////////////////////////////////////////////////////////////////////////////////
message TSyncerVDiskEntry {
    ////////////////////////////////////////////////////////////////////////////
    // ESyncStatus -- job lefts this status after work
    ////////////////////////////////////////////////////////////////////////////
    enum ESyncStatus {
        Running = 0;
        ProtocolError = 1;
        Race = 2;
        Error = 3;
        FullRecover = 4;
        DisksSynced = 5;
        NotReady = 6;
        Locked = 7;
        SyncDone = 8;
        Timeout = 9;
        RedirLoop = 10;
        Unknown = 11;
        DroppedConnection = 12;
        OutOfSpace = 13;
    };

    optional NKikimrBlobStorage.TVDiskID VDiskID = 1;

    // respective VDisk saves here its own information as a part of
    // Guid recovery algorithm
    optional NKikimrBlobStorage.TSyncGuidInfo SyncGuidInfo = 5;

    // info about syncing with with VDisk
    optional ESyncStatus LastSyncStatus = 11;
    optional NKikimrBlobStorage.TSyncState SyncState = 12;
    optional uint64 SchTime = 13;
    optional uint64 LastTry = 14;
    optional uint64 LastGood = 15;
};

////////////////////////////////////////////////////////////////////////////////
// TSyncerEntryPoint -- entry point for syncer
////////////////////////////////////////////////////////////////////////////////
message TSyncerEntryPoint {
    optional NKikimrBlobStorage.TLocalGuidInfo LocalGuidInfo = 5;
    repeated TSyncerVDiskEntry Entries = 10;
    // Info about YDB version of VDisk which made this record
    optional NKikimrConfig.TStoredCompatibilityInfo CompatibilityInfo = 15;
};

message TIncrHugeChunks {
    enum EChunkState {
        Complete = 1;
        WriteIntent = 2;
    };
    message TChunkInfo {
        optional uint32      ChunkIdx = 1;    // chunk index
        optional uint64      ChunkSerNum = 2; // unique id of allocated chunk
        optional EChunkState State = 3;       // chunk state (whether it is complete and has index or write intent only)
    };
    repeated TChunkInfo Chunks = 1;    // list of all consumed chunks
    repeated uint32 DeletedChunks = 2; // list of deleted chunks; incremental field only
    optional uint64 CurrentSerNum = 3; // current version of this state
};

////////////////////////////////////////////////////////////////////////////////
// IncrHuge
////////////////////////////////////////////////////////////////////////////////
message TIncrHugeDelete {
    message TChunkInfo {
        message TItemRange {
            optional uint32 First = 1;
            optional uint32 Count = 2;
        };
        message TDeletedItems {
            repeated uint32 Indexes = 1; // indexes of deleted items
            repeated TItemRange Ranges = 2; // ranges of deleted items
        };
        message TDeletedBits {
            optional bytes Bits = 1; // bitmap of deleted items
        };

        // unique id of this chunk
        optional uint64 ChunkSerNum = 1;

        // one of encodins of deletion
        oneof DeletedData {
            TDeletedItems DeletedItems = 2;
            bytes Bits = 3;
        };
    };
    message TOwnerInfo {
        optional uint32 Owner = 1; // owner of the record
        optional uint64 SeqNo = 2; // last sequence number of executed delete query from this owner
    };
    repeated TChunkInfo Chunks = 1; // deletes in active chunks
    repeated TOwnerInfo Owners = 2; // per-owner sequence numbers
};


////////////////////////////////////////////////////////////////////////////////
// Recovery log record for Anubis/Osiris
////////////////////////////////////////////////////////////////////////////////
message TAnubisOsirisPutRecoveryLogRec {
    optional NKikimrProto.TLogoBlobID LogoBlobId = 2;
};

////////////////////////////////////////////////////////////////////////////////
// Recovery log record for AddBulkSst
////////////////////////////////////////////////////////////////////////////////
message TAddBulkSstRecoveryLogRec {
    message TSstAndRecsNum {
        optional TDiskPart Sst = 1;
        optional uint32 RecsNum = 2;
    };

    repeated TSstAndRecsNum LogoBlobsAdditions = 1;
    repeated TSstAndRecsNum BlocksAdditions = 2;
    repeated TSstAndRecsNum BarriersAdditions = 3;
};

////////////////////////////////////////////////////////////////////////////////
// TSyncLogEntryPoint -- entry point for SyncLog
////////////////////////////////////////////////////////////////////////////////
message TSyncLogEntryPoint {
    // HEADER
    // PDisk guid for additional check
    optional fixed64 PDiskGuid = 1;
    // VDisk Incarnation Guid (immutable until next format)
    optional fixed64 VDiskIncarnationGuid = 2;
    // Id of VDisk which made this record (used for additional check)
    optional NKikimrBlobStorage.TVDiskID VDiskID = 3;

    // ENTRY POINT DATA
    // SyncLog contains records starting from this lsn
    optional uint64 LogStartLsn = 10;
    // Confirmed lsn for recovery log at the moment of writing this entry point
    optional uint64 RecoveryLogConfirmedLsn = 11;

    // chunks subject to deletion
    repeated uint32 ChunksToDeleteDelayed = 20;
    // opaque DiskRecLog serialized bytes
    optional bytes DiskRecLogSerialized = 21;
};

message TScrubState {
    optional uint64 NextSstIdToScrub = 1;
    optional NKikimrProto.TLogoBlobID BlobId = 2;
    optional bool Success = 3;
    optional fixed64 IncarnationGuid = 4;
};

message TScrubEntrypoint {
    message TUnreadableBlobState {
        optional NKikimrProto.TLogoBlobID BlobId = 1;
        optional uint32 UnreadableParts = 2;
        optional TDiskPart CorruptedPart = 3;
    }
    repeated TUnreadableBlobState UnreadableBlobs = 1;
    optional TScrubState ScrubState = 2;
}
