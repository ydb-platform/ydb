package NKikimrBlockStore;
option java_package = "ru.yandex.kikimr.proto";

message TChannelProfile {
    // storage settings
    optional string PoolKind = 1;
    optional uint64 Size = 2; // size in bytes
    optional double ReadIops = 3; // required iops for read requests
    optional double ReadBandwidth = 4; // required bandwidth (in bytes/sec) for read requests
    optional double WriteIops = 5; // required iops for write requests
    optional double WriteBandwidth = 6; // required bandwidth (in bytes/sec) for write requests

    // nbs settings
    optional uint32 DataKind = 101; // the kind of data that is supposed to be stored in this channel (mixed/merged/etc.)
}

enum EPartitionType {
    Default = 0; // default kikimr-based partitions
    NonReplicated = 1; // directly mapped network partitions
}

message TEncryptionDesc {
    optional uint32 Mode = 1;
    optional bytes KeyHash = 2;
}

message TVolumeConfig {
    optional uint32 BlockSize = 1; // block size in bytes
    optional uint32 StripeSize = 2; // stripe chunk size in blocks, default 0 (linear addressing)

    message TPartition {
        optional uint64 BlockCount = 2; // size of partition in blocks
        optional EPartitionType Type = 3; // partition type
    }

    repeated TPartition Partitions = 3;

    optional uint32 NumChannels = 4; // FIXME: tablet creation only?
    optional uint32 ChannelProfileId = 5; // FIXME: tablet creation only?
    optional uint32 Version = 6;

    // Volume private data
    optional string DiskId = 7;
    optional string ProjectId = 8;
    optional string FolderId = 9;
    optional string CloudId = 10;
    optional uint32 TabletVersion = 11;

    // Binary data for private use by BlockStore implementation (legacy, unused)
    optional bytes Opaque = 12;

    // Volume disk type
    optional uint32 StorageMediaKind = 13;

    // Performance profile fields, used for correct bs group allocation and iops/bandwidth throttling
    optional uint32 PerformanceProfileMaxReadBandwidth = 14;
    /* optional uint32 PerformanceProfileMaxBurstBandwidth = 15; obsolete */
    optional uint32 PerformanceProfileMaxPostponedWeight = 16;
    optional bool PerformanceProfileThrottlingEnabled = 17;
    optional uint32 PerformanceProfileMaxReadIops = 18;
    /* optional uint32 PerformanceProfileMaxBurstIops = 19; obsolete */
    optional uint32 PerformanceProfileBoostTime = 20;
    optional uint32 PerformanceProfileBoostRefillTime = 21;
    optional uint32 PerformanceProfileBoostPercentage = 22;
    optional uint32 PerformanceProfileMaxWriteBandwidth = 23;
    optional uint32 PerformanceProfileMaxWriteIops = 24;
    optional uint32 PerformanceProfileBurstPercentage = 25;

    // Label of base volume.
    // If set then current volume is called "overlay volume".
    optional string BaseDiskId = 26;

    // "base volume checkpoint" overlay volume sits on.
    // Should not be empty when BaseDiskId is not empty.
    optional string BaseDiskCheckpointId = 27;

    optional bool SizeDecreaseAllowed = 28;

    // Replaces legacy NumChannels and ChannelProfileId params
    repeated TChannelProfile ExplicitChannelProfiles = 29;

    optional bool PoolKindChangeAllowed = 30;

    // Max block count in blob. Affects only v1 volumes.
    optional uint32 MaxBlocksInBlob = 31;

    // Creation and last alter timestamps.
    optional uint64 CreationTs = 32;
    optional uint64 AlterTs = 33;

    // Placement group id.
    optional string PlacementGroupId = 34;

    // Tags. Use TagsStr, because we need capability to pass empty set of tags.
    optional string TagsStr = 35;   // ,-delimited string
    repeated string Tags = 36;      // array of strings, do not use

    // Block count per stripe. Affects multipartition volumes.
    optional uint32 BlocksPerStripe = 37;

    // Determines index geometry for v2 partitions.
    optional uint32 ZoneBlockCount = 38;

    // Indicates that volume does not belong to user directly, but used for system needs
    optional bool IsSystem = 40;

    // Channel descriptions for volume tablets
    repeated TChannelProfile VolumeExplicitChannelProfiles = 41;

    // Storage pool name (e.g. local:ssd), allowed only for nonreplicated volumes.
    optional string StoragePoolName = 42;

    // List of agents to allocate disk, allowed only for nonreplicated volumes.
    repeated string AgentIds = 43;

    // Encryption description.
    optional TEncryptionDesc EncryptionDesc = 44;

    // Placement partition id. Deprecated.
    optional string PlacementPartitionId = 45;

    // Tablet id of base disk.
    optional uint64 BaseDiskTabletId = 46;

    // Placement partition index.
    optional uint32 PlacementPartitionIndex = 47;

    // Is partitions PoolKind set manually or by config.
    optional bool IsPartitionsPoolKindSetManually = 48;
}

message TUpdateVolumeConfig {
    optional uint64 TxId = 1;
    optional TVolumeConfig VolumeConfig = 2;

    message TPartition {
        // Index in VolumeConfig.Partitions
        optional uint32 PartitionId = 1;
        optional uint64 TabletId = 2;
    }

    // Associates volume with its partition tablets
    repeated TPartition Partitions = 3;
}

enum EStatus {
    OK = 0;
    ERROR = 1;
    ERROR_BAD_VERSION = 2;
    ERROR_UPDATE_IN_PROGRESS = 3;
}

message TUpdateVolumeConfigResponse {
    optional uint64 TxId = 1;
    optional uint64 Origin = 2;
    optional EStatus Status = 3;
}
