import "ydb/core/protos/blobstorage_config.proto";
import "ydb/core/protos/blobstorage_disk.proto";
import "ydb/library/actors/protos/interconnect.proto";

package NKikimrCms;
option java_package = "ru.yandex.kikimr.proto";

message TStatus {
    enum ECode {
        UNKNOWN = 0;
        OK = 1;
        ALLOW = 2;
        ALLOW_PARTIAL = 3;
        DISALLOW = 4;
        DISALLOW_TEMP = 5;
        WRONG_REQUEST = 6;
        ERROR = 7;
        ERROR_TEMP = 8;
        UNAUTHORIZED = 9;
        NO_SUCH_HOST = 10;
        NO_SUCH_DEVICE = 11;
        NO_SUCH_SERVICE = 12;
    }

    optional ECode   Code = 1;
    optional string  Reason = 2;
}

enum EState {
  // Service/host state couldn't be identified.
  UNKNOWN = 0;
  // Service/host is up.
  UP = 1;
  // Service/host is down due to planned restart.
  RESTART = 2;
  // Service/host is down off-schedule.
  DOWN = 3;
}

enum EMarker {
    MARKER_UNKNOWN = 0;
    // Can be applied to hosts, nodes and PDisks to mark
    // specific disk or all disks on the host/node as broken.
    MARKER_DISK_BROKEN = 1;
    // Can be applied to hosts, nodes and PDisks to mark
    // specific disk or all disks on the host/node as faulty.
    MARKER_DISK_FAULTY = 2;
    // Can be applied to hosts, nodes and PDisks to mark
    // specific disk or all disks on the host/node as active.
    MARKER_DISK_ACTIVE = 3;
    // Can be applied to hosts, nodes and PDisks to mark
    // specific disk or all disks on the host/node as inactive.
    MARKER_DISK_INACTIVE = 4;
}

message TServiceState {
  optional string   Name = 1;
  optional EState   State = 2;
  optional string   Version = 3;
  optional uint64   Timestamp = 4;
}

message TDeviceState {
  optional string   Name = 1;
  optional EState   State = 2;
  optional uint64   Timestamp = 3;
  repeated EMarker  Markers = 4;
}

message THostState {
  optional string        Name = 1;
  optional EState        State = 2;
  repeated TServiceState Services = 3;
  repeated TDeviceState  Devices = 4;
  optional uint64        Timestamp = 5;
  optional uint32        NodeId = 6;
  optional uint32        InterconnectPort = 7;
  repeated EMarker       Markers = 8;
  optional NActorsInterconnect.TNodeLocation Location = 9;
  optional uint32        StartTimeSeconds = 10;
}

message TClusterState {
  optional string     Name = 1;
  repeated THostState Hosts = 2;
  optional uint64     Timestamp = 3;
}

message TClusterStateRequest {
    repeated string Hosts = 1;
}

message TClusterStateResponse {
    optional TStatus       Status = 1;
    optional TClusterState State = 2;
}

message TAction {
  enum EType {
    UNKNOWN = 0;
    START_SERVICES = 1;
    RESTART_SERVICES = 2;
    STOP_SERVICES = 3;
    ADD_HOST = 4;
    SHUTDOWN_HOST = 5;
    DECOMMISSION_HOST = 6;
    ADD_DEVICES = 7;
    REPLACE_DEVICES = 8;
    REMOVE_DEVICES = 9;
    REBOOT_HOST = 10; // Same as SHUTDOWN_HOST, but forcibly allowed if host is down
  }

  optional EType     Type = 1;
  optional string    Host = 2;
  repeated string    Services = 3;
  repeated string    Devices = 4;
  optional uint64    Duration = 5;
  // If specified will be expanded to list of hosts.
  optional string    Tenant = 6;
}

enum ETenantPolicy {
    // No limits for computational nodes restarts.
    NONE = 0;
    // Follow TenantLimits specified in CMS config.
    DEFAULT = 1;
}

enum EAvailabilityMode {
    // By default CMS tries to guarantee cluster availability
    // by allowing at most 1 disabled disk in each storage group.
    // For compute nodes tenant and cluster policies are followed.
    MODE_MAX_AVAILABILITY = 0;
    // This mode allows to move cluster restart/update forward
    // in case some nodes are permanently down. In this mode
    // CMS allows at most 1 locked (by permission to restart
    // node or replace device) disk in a group. But total number
    // of disabled disks for a group shouldn't exceed number
    // of parity parts in that group.
    // Compute nodes are handled as in default mode.
    MODE_KEEP_AVAILABLE = 1;
    // In this mode CMS allows at most 1 locked disk in a group
    // ignoring its parity parts count. Allows to restart nodes
    // even if multiple disks of some group are down. Using
    // this mode might cause data unavailability.
    // For compute nodes CMS follows tenant and cluster policies
    // but allows to restart at least one node for tenant or
    // cluster.
    MODE_FORCE_RESTART = 2;
}

message TPermissionRequest {
  optional string  User = 1;
  repeated TAction Actions = 2;
  optional bool    PartialPermissionAllowed = 3 [default = false];
  optional bool    Schedule = 4;
  optional bool    DryRun = 5;
  optional string  Reason = 6;
  // If not specified then default duration from CMS config is used.
  optional uint64  Duration = 7;
  optional ETenantPolicy TenantPolicy = 8 [default = DEFAULT];
  // Availability mode is not preserved for scheduled events.
  optional EAvailabilityMode AvailabilityMode = 9 [default = MODE_MAX_AVAILABILITY];
  optional string MaintenanceTaskId = 10;
  // Evit vdisks before granting permission
  optional bool EvictVDisks = 11 [default = false];
  optional int32 Priority = 12;
}

enum EExtensionType {
    HostInfo = 1;
}

message TPermissionExtension {
    optional EExtensionType Type = 1;
    repeated THostState Hosts = 2;
}

message TPermission {
  optional string   Id = 1;
  optional TAction  Action = 2;
  optional uint64   Deadline = 3;
  repeated TPermissionExtension Extentions = 4;
}

message TPermissionResponse {
  optional TStatus     Status = 1;
  optional string      RequestId = 2;
  repeated TPermission Permissions = 3;
  optional uint64      Deadline = 4;
}

message TManageRequestRequest {
  enum ECommand {
    UNKNOWN = 0;
    LIST = 1;
    GET = 2;
    REJECT = 3;
  }

  optional string   User = 1;
  optional ECommand Command = 2;
  optional string   RequestId = 3;
  optional bool     DryRun = 4;
}

message TManageRequestResponse {
  message TScheduledRequest {
    optional string  RequestId = 1;
    optional string  Owner = 2;
    repeated TAction Actions = 3;
    optional bool    PartialPermissionAllowed = 4;
    optional string  Reason = 5;
    optional EAvailabilityMode AvailabilityMode = 6;
    optional int32 Priority = 7;
  }

  optional TStatus           Status = 1;
  repeated TScheduledRequest Requests = 2;
}

message TCheckRequest {
  optional string   User = 1;
  optional string   RequestId = 2;
  optional bool     DryRun = 3;
  optional EAvailabilityMode AvailabilityMode = 4 [default = MODE_MAX_AVAILABILITY];
}

message TManagePermissionRequest {
  enum ECommand {
    UNKNOWN = 0;
    LIST = 1;
    GET = 2;
    DONE = 3;
    EXTEND = 4;
    REJECT = 5;
  }

  optional string   User = 1;
  optional ECommand Command = 2;
  repeated string   Permissions = 3;
  optional uint64   Deadline = 4;
  optional bool     DryRun = 5;
}

message TManagePermissionResponse {
  optional TStatus     Status = 1;
  repeated TPermission Permissions = 2;
}

message TVersionFilter {
  enum EType {
    UNKNOWN = 0;
    MATCH = 1;
    MISMATCH = 2;
    LOWER = 3;
    GREATER = 4;
  }
  optional EType  Type = 1;
  optional string Version = 2;
}

message TNameFilter {
  enum EType {
    UNKNOWN = 0;
    ONE_OF = 1;
    NOT_IN = 2;
  }

  optional EType  Type = 1;
  repeated string Names = 2;
}

message TServiceFilter {
  optional TNameFilter    NameFilter = 1;
  optional TVersionFilter VersionFilter = 2;
}

message THostFilter {
  optional TNameFilter NameFilter = 1;
}

message TConditionalPermissionRequest {
  optional string         User = 1;
  optional TAction        Action = 2;
  optional TServiceFilter ServiceFilter = 3;
  optional THostFilter    HostFilter = 4;
  optional bool           PartialPermissionAllowed = 5;
  optional bool           Schedule = 6;
  optional bool           DryRun = 7;
  optional string         Reason = 8;
  // If not specified then default duration from CMS config is used.
  optional uint64         Duration = 9;
}

message TNotification {
  optional string   User = 1;
  repeated TAction  Actions = 2;
  optional uint64   Time = 3;
  optional string   Reason = 4;
}

message TNotificationResponse {
  optional TStatus Status = 1;
  optional string NotificationId = 2;
}

message TManageNotificationRequest {
  enum ECommand {
    UNKNOWN = 0;
    LIST = 1;
    GET = 2;
    REJECT = 3;
  }

  optional string   User = 1;
  optional ECommand Command = 2;
  optional string   NotificationId = 3;
  optional bool     DryRun = 4;
}

message TManageNotificationResponse {
  message TStoredNotification {
    optional string  NotificationId = 1;
    optional string  Owner = 2;
    repeated TAction Actions = 3;
    optional uint64  Time = 4;
    optional string  Reason = 5;
  }

  optional TStatus             Status = 1;
  repeated TStoredNotification Notifications = 2;
}

message TWalleCreateTaskRequest {
  optional string TaskId = 1;
  optional string Type = 2;
  optional string Issuer = 3;
  optional string Action = 4;
  repeated string Hosts = 5;
  optional bool   DryRun = 6;
}

message TWalleCreateTaskResponse {
  optional TStatus Status = 1;
  optional string  TaskId = 2;
  repeated string  Hosts = 3;
}

message TWalleListTasksRequest {
}

message TWalleTaskInfo {
  optional string TaskId = 1;
  repeated string Hosts = 2;
  optional string Status = 3;
}

message TWalleListTasksResponse {
  repeated TWalleTaskInfo Tasks = 1;
}

message TWalleCheckTaskRequest {
  optional string TaskId = 1;
}

message TWalleCheckTaskResponse {
  optional TStatus        Status = 1;
  optional TWalleTaskInfo Task = 2;
}

message TWalleRemoveTaskRequest {
  optional string TaskId = 1;
}

message TWalleRemoveTaskResponse {
  optional TStatus Status = 1;
}

message TLimits {
    // Max number of nodes which may be disabled at once.
    // It includes down/locked nodes and nodes with
    // down/locked disks.
    optional uint32 DisabledNodesLimit = 1;
    // Works similarly to DisabledNodesLimit but specify
    // limit in percents of cluster/tenant nodes count.
    optional uint32 DisabledNodesRatioLimit = 2 [default = 10];
}

message TCmsConfig {
    message TMonitorConfig {
        // Enable monitor creation.
        optional bool EnableAutoUpdates = 1;
        // State update interval.
        optional uint64 UpdateInterval = 2 [default = 60000000];
        // Gaps between downtime periods of smaller size are
        // ignored.
        optional uint64 IgnoredDowntimeGap = 3 [default = 600000000];
        // Device gets broken status after specified timeout or in
        // advance if specified downtime is planned soon enough
        // (see BrokenPrepTimeout).
        optional uint64 BrokenTimeout = 4 [default = 7200000000];
        // Device become broken if big enough (>= BrokenTimeout)
        // downtime is planned within specified period.
        optional uint64 BrokenPrepTimeout = 5 [default = 600000000];
        // Device become faulty if big enough (>= BrokenTimeout)
        // downtime is planned within specified period.
        optional uint64 FaultyPrepTimeout = 6 [default = 3600000000];
    }

    message TSentinelConfig {
        message TStateLimit {
            optional uint32 State = 1; // EPDiskState
            optional uint32 Limit = 2;
        }

        optional bool Enable = 1 [default = true];
        // Updater's config
        optional uint64 UpdateConfigInterval = 2 [default = 3600000000];
        optional uint64 RetryUpdateConfig = 3 [default = 60000000];
        optional uint64 UpdateStateInterval = 4 [default = 60000000];
        optional uint64 UpdateStateTimeout = 5 [default = 45000000];
        // Status changer's config
        optional uint64 RetryChangeStatus = 6 [default = 10000000];
        optional uint32 ChangeStatusRetries = 7 [default = 5];
        // Status computer's config
        optional uint32 DefaultStateLimit = 8 [default = 60];
        optional uint32 BrokenLimit = 9 [default = 60]; // unused
        // Guardian's config
        optional uint32 DataCenterRatio = 10 [default = 50];
        optional uint32 RoomRatio = 11 [default = 70];
        optional uint32 RackRatio = 12 [default = 90];

        optional bool DryRun = 13;
        repeated TStateLimit StateLimits = 14;

        optional uint32 GoodStateLimit = 16 [default = 5];
    }

    message TLogConfig {
        enum ELevel {
            ENABLED = 0;
            DISABLED = 1;
        }

        message TComponent {
            optional uint32 RecordType = 1;
            optional ELevel Level = 2;
        }

        optional ELevel DefaultLevel = 1 [default = ENABLED];
        repeated TComponent ComponentLevels = 2;
        optional uint64 TTL = 3 [default = 1209600000000]; // 14 days
    }

    optional uint64 DefaultRetryTime = 1 [default = 300000000];
    optional uint64 DefaultPermissionDuration = 2 [default = 300000000];
    optional TMonitorConfig MonitorConfig = 3;
    optional TLimits TenantLimits = 4;
    optional TLimits ClusterLimits = 5;
    optional uint64 InfoCollectionTimeout = 6 [default = 15000000];
    optional TLogConfig LogConfig = 7;
    optional TSentinelConfig SentinelConfig = 8;
}

message TPDiskID {
    optional uint32 NodeId = 1;
    optional uint32 DiskId = 2;
}

message TItems {
    repeated string Hosts = 1;
    repeated uint32 Nodes = 2;
    repeated TPDiskID PDisks = 3;
    repeated NKikimrBlobStorage.TVDiskID VDisks = 4;
}

message TSetMarkerRequest {
    optional EMarker Marker = 1;
    optional TItems Items = 2;
    optional string UserToken = 10;
}

message TSetMarkerResponse {
    optional TStatus Status = 1;
}

message TResetMarkerRequest {
    optional EMarker Marker = 1;
    optional TItems Items = 2;
    optional string UserToken = 10;
}

message TResetMarkerResponse {
    optional TStatus Status = 1;
}

message TGetConfigRequest {
}

message TGetConfigResponse {
    optional TStatus    Status = 1;
    optional TCmsConfig Config = 2;
}

message TSetConfigRequest {
    optional TCmsConfig Config = 1;
}

message TSetConfigResponse {
    optional TStatus Status = 1;
}

message TAvailabilityStats {
    message TDowntime {
        optional uint64 Start = 1;
        optional uint64 End = 2;
        optional string Explanation = 3;
    }

    repeated TDowntime Downtimes = 1;
    optional uint64 IgnoredDowntimeGap = 2;
}

message TLogRecordData {
    enum EType {
        UNKNOWN = 0;
        CMS_LOADED = 1;
        PDISK_MONITOR_ACTION = 2;
        MARKERS_MODIFICATION = 3;
    }

    message TCmsLoaded {
        optional string Host = 1;
        optional uint32 NodeId = 2;
        optional string Version = 3;
    }

    message TPDiskMonitorAction {
        optional TPDiskID PDiskId = 1;
        optional NKikimrBlobStorage.EDriveStatus CurrentStatus = 2;
        optional NKikimrBlobStorage.EDriveStatus RequiredStatus = 3;
        repeated EMarker PDiskMarkers = 4;
        repeated EMarker NodeMarkers = 5;
        optional TAvailabilityStats DiskAvailabilityStats = 6;
        optional TAvailabilityStats NodeAvailabilityStats = 7;
        optional string Host = 8;
        optional string Reason = 9;
    }

    message TMarkersModification {
        oneof Item  {
            string Host = 1;
            uint32 Node = 2;
            TPDiskID PDisk = 3;
            NKikimrBlobStorage.TVDiskID VDisk = 4;
        }
        repeated EMarker OldMarkers = 5;
        repeated EMarker NewMarkers = 6;
        optional string UserToken = 7;
    }

    optional uint32 RecordType = 1;
    oneof Data {
        TCmsLoaded CmsLoaded = 11;
        TPDiskMonitorAction PDiskMonitorAction = 12;
        TMarkersModification MarkersModification = 13;
    }
}

message TLogRecord {
    optional uint64 Timestamp = 1;
    optional uint32 RecordType = 2;
    optional TLogRecordData Data = 3;
    optional string Message = 4;
}

message TLogFilter {
    optional uint32 RecordType = 1;
    optional uint64 MinTimestamp = 2;
    optional uint64 MaxTimestamp = 3;
    optional uint32 Limit = 4 [default = 100];
    optional uint32 Offset = 5;
}

enum ETextFormat {
    TEXT_FORMAT_NONE = 0;
    TEXT_FORMAT_SHORT = 1;
    TEXT_FORMAT_DETAILED = 2;
}

message TGetLogTailRequest {
    optional TLogFilter LogFilter = 1;
    optional bool IncludeData = 2 [default = false];
    optional ETextFormat TextFormat = 3 [default = TEXT_FORMAT_SHORT];
}

message TGetLogTailResponse {
    optional TStatus Status = 1;
    repeated TLogRecord LogRecords = 2;
}

message TFilterRange {
    optional uint32 Begin = 1;
    optional uint32 End = 2;
}

message TGetSentinelStateRequest {
    enum EShow {
        UNHEALTHY = 1;
        SUSPICIOUS = 2;
        ALL = 3;
    }

    optional EShow Show = 1;
    repeated TFilterRange Ranges = 2;
}

message TPDiskInfo {
    enum EIgnoreReason {
        NOT_IGNORED = 1;
        MISSING_NODE = 2;
        RATIO_BY_DATACENTER = 3;
        RATIO_BY_ROOM = 4;
        RATIO_BY_RACK = 5;
    }

    optional uint32 State = 1; // EPDiskState
    optional uint32 PrevState = 2; // EPDiskState
    optional uint64 StateCounter = 3;
    optional uint32 Status = 4; // EPDiskStatus
    optional bool ChangingAllowed = 5;
    optional bool Touched = 6;
    optional uint32 DesiredStatus = 7;
    optional uint32 StatusChangeAttempts = 8;
    optional uint32 PrevDesiredStatus = 9;
    optional uint32 PrevStatusChangeAttempts = 10;
    optional string LastStatusChange = 11;
    optional EIgnoreReason IgnoreReason = 12;
    optional bool StatusChangeFailed = 13;
}

message TPDisk {
    optional TPDiskID Id = 1;
    optional TPDiskInfo Info = 2;
}

message TUpdaterInfo {
    optional string ActorId = 1;
    optional string StartedAt = 2;
    optional bool Delayed = 3;
}

message TStateUpdaterState {
    optional TUpdaterInfo UpdaterInfo = 1;
    optional TUpdaterInfo PrevUpdaterInfo = 2;
    repeated uint32 WaitNodes = 3;
}

message TConfigUpdaterState {
    optional TUpdaterInfo UpdaterInfo = 1;
    optional TUpdaterInfo PrevUpdaterInfo = 2;
    optional uint32 BSCAttempt = 3;
    optional uint32 PrevBSCAttempt = 4;
    optional uint32 CMSAttempt = 5;
    optional uint32 PrevCMSAttempt = 6;
}

message TGetSentinelStateResponse {
    optional TStatus Status = 1;
    optional TCmsConfig.TSentinelConfig SentinelConfig = 2;
    repeated TPDisk PDisks = 3;
    optional TStateUpdaterState StateUpdater = 4;
    optional TConfigUpdaterState ConfigUpdater = 5;
}
