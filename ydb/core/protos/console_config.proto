import "ydb/library/actors/protos/actors.proto";
import "ydb/core/protos/config.proto";
import "ydb/core/protos/console_base.proto";
import "ydb/public/api/protos/ydb_status_codes.proto";
import "ydb/public/api/protos/draft/ydb_dynamic_config.proto";
import "ydb/public/api/protos/ydb_issue_message.proto";

package NKikimrConsole;
option java_package = "ru.yandex.kikimr.proto";

message TConfigItemId {
    optional uint64 Id = 1;
    optional uint64 Generation = 2;
}

message TItemIds {
    repeated uint64 Ids = 1;
}

message TNodeIds {
    repeated uint32 Nodes = 1;
}

message THosts {
    repeated string Hosts = 1;
}

message TTenants {
    repeated string Tenants = 1;
}

message TNodeTypes {
    repeated string NodeTypes = 1;
}

message TTenantAndNodeType {
    optional string Tenant = 1;
    optional string NodeType = 2;
}

message TTenantAndNodeTypes {
    repeated TTenantAndNodeType TenantAndNodeTypes = 1;
}

message TCookies {
    repeated string Cookies = 1;
}

message TUsageScope {
    oneof Filter {
        TNodeIds NodeFilter = 1;
        THosts HostFilter = 2;
        TTenantAndNodeType TenantAndNodeTypeFilter = 3;
    }
}

message TNodeAttributes {
    optional uint32 NodeId = 1;
    optional string Host = 2;
    optional string Tenant = 3;
    optional string NodeType = 4;
}

message TConfigItem {
    // Single item refers to a single field in NKikimrConfig::TAppConfig message.
    // Enum value is a field's number. Zero value (Auto) is used to automatically
    // detect kind for added items by checking set fields.
    enum EKind {
        Auto = 0;
        ActorSystemConfigItem = 1;
        LogConfigItem = 2;
        NameserviceConfigItem = 3;
        InterconnectConfigItem = 4;
        DomainsConfigItem = 5;
        BlobStorageConfigItem = 6;
        ChannelProfileConfigItem = 7;
        BootstrapConfigItem = 8;
        MonitoringConfigItem = 10;
        RestartsCountConfigItem = 11;
        MessageBusConfigItem = 12;
        TabletsConfigItem = 13;
        VDiskConfigItem = 14;
        DriveModelConfigItem = 31;
        IncrHugeConfigItem = 18;
        UDFsDirItem = 15;
        UDFsPathsItem = 16;
        KQPConfigItem = 17;
        MemoryLogConfigItem = 19;
        GRpcConfigItem = 20;
        DynamicNameserviceConfigItem = 22;

        DynamicNodeConfigItem = 24;
        CmsConfigItem = 25;
        FeatureFlagsItem = 26;
        SqsConfigItem = 27;
        PQConfigItem = 28;
        TenantPoolConfigItem = 29;
        AuthConfigItem = 30;
        TenantSlotBrokerConfigItem = 32;
        ConfigsDispatcherConfigItem = 33;
        TableProfilesConfigItem = 34;
        KeyConfigItem = 35;
        PDiskKeyConfigItem = 51;
        NodeBrokerConfigItem = 36;
        TableServiceConfigItem = 37;
        SharedCacheConfigItem = 38;
        ImmediateControlsConfigItem = 39;
        AllocatorConfigItem = 40;
        PQClusterDiscoveryConfigItem = 41;
        NetClassifierConfigItem = 42;
        NetClassifierDistributableConfigItem = 43;
        ResourceBrokerConfigItem = 44;
        MeteringConfigItem = 45;
        HiveConfigItem = 46;
        DataShardConfigItem = 49;
        GraphConfigItem = 50;
        FederatedQueryConfigItem = 58;
        CompactionConfigItem = 52;
        HttpProxyConfigItem = 53;
        SchemeShardConfigItem = 54;
        TracingConfigItem = 55;
        FailureInjectionConfigItem = 56;
        PublicHttpConfigItem = 57;
        MetadataProviderConfigItem = 59;
        BackgroundTasksConfigItem = 60;
        AuditConfigItem = 61;
        ClientCertificateAuthorizationItem = 62;
        ExternalIndexConfigItem = 63;
        YamlConfigEnabledItem = 64;
        ScanConveyorConfigItem = 65;
        ColumnShardConfigItem = 66;
        LocalPgWireConfigItem = 69;
        AwsCompatibilityConfigItem = 70;
        KafkaProxyConfigItem = 71;
        CompConveyorConfigItem = 72;
        QueryServiceConfigItem = 73;
        InsertConveyorConfigItem = 74;
        AllowEditYamlInUiItem = 75;
        S3ProxyResolverConfigItem = 76;
        BackgroundCleaningConfigItem = 77;

        NamedConfigsItem = 100;
        ClusterYamlConfigItem = 101;
    }

    enum EMergeStrategy {
        // More prioritized config fully overwrites less prioritized.
        OVERWRITE = 1;
        // More prioritized config is merged into less prioritized.
        // All defined singular fields are taken from more prioritized
        // config (embedded messages are merged), repeated fields are
        // concatenated.
        MERGE = 2;
        // Similar to MergeStrategyMerge but non-empty repeated fields
        // of more prioritized config overwrite less prioritized values.
        MERGE_OVERWRITE_REPEATED = 3;
    }

    optional TConfigItemId Id = 1;
    optional uint32 Kind = 2;
    optional NKikimrConfig.TAppConfig Config = 3;
    // UsageScope also defines config priority.
    //  1 - NodeIds - the most prioritized
    //  2 - Hosts
    //  3 - TenantAndNodeType with both Tenant and NodeType defined.
    //  4 - TenantAndNodeType with Tenant defined
    //  5 - TenantAndNodeType with NodeType defined
    //  6 - No filter - the least prioritized
    optional TUsageScope UsageScope = 4;
    // Config items with the same priority are applied according to Order value.
    // Greater Order value means more prioritized config.
    // There should be no two configs items with the same kind, priority and order
    // which can be applied to the same node (in other words order of config items
    // should always be deterministic for all nodes). Zero value may be used for
    // added and modified items to give an item the highest order among items with
    // the same priority and kind.
    optional uint32 Order = 5;
    // Merge strategy determines how multiple config items are merged
    // to get resulting config for a node.
    // To get final config for a node we choose all items with proper
    // filter and sort them according to priority and order. Initial
    // config value is the default protobuf. We go then through all
    // found items starting from the least prioritized and merge them
    // into current result using merge strategy of the merged item.
    optional uint32 MergeStrategy = 6 [default = 2]; // MERGE by default
    // User defined cookie value. Used to easily find or remove own configs.
    optional string Cookie = 7;
}

message TAddConfigItem {
    optional TConfigItem ConfigItem = 1;
    // If this flag is enabled then config items with Auto kind
    // may have multiple config fields defined. This will cause
    // its split into several config items (returned item ids are
    // ordered by numbers of fields used to make those items)
    optional bool EnableAutoSplit = 2;
}

message TRemoveConfigItem {
    optional TConfigItemId ConfigItemId = 1;
}

message TRemoveConfigItems {
    oneof Filter {
        TCookies CookieFilter = 1;
    }
}

message TModifyConfigItem {
    optional TConfigItem ConfigItem = 1;
}

message TConfigureAction {
    oneof Action {
        TAddConfigItem AddConfigItem = 1;
        TRemoveConfigItem RemoveConfigItem = 2;
        TModifyConfigItem ModifyConfigItem = 3;
        TRemoveConfigItems RemoveConfigItems = 4;
    }
}

message TConfigureRequest {
    repeated TConfigureAction Actions = 1;
    optional bool DryRun = 2;
    // This option allows to return all affected configs
    // (old and new version) in response. By default
    // (option is false) affected configs in response
    // have only Tenant and NodeType fields filled.
    optional bool FillAffectedConfigs = 3;
    // For internal use only.
    // Used for logging user requests
    optional bytes UserToken = 4;
}

message TConfigureResponse {
    message TAffectedConfig {
        optional string Tenant = 1;
        optional string NodeType = 2;
        // Config fields are filled only when FillAffectedConfigs
        // is set in request.
        optional NKikimrConfig.TAppConfig OldConfig = 3;
        optional NKikimrConfig.TAppConfig NewConfig = 4;
    }

    optional TStatus Status = 1;
    // IDs of added item in the same order as for AddConfigItem actions
    // in related configure request.
    repeated uint64 AddedItemIds = 2;
    // List all tenant and node type pairs affected by configure
    // request. Optionally old and new configs are included.
    repeated TAffectedConfig AffectedConfigs = 3;
}

message TSetYamlConfigRequest {
    optional Ydb.DynamicConfig.SetConfigRequest Request = 1;
    optional bytes UserToken = 2;
}

message TSetYamlConfigResponse {
    repeated Ydb.Issue.IssueMessage Issues = 1;
}

message TReplaceYamlConfigRequest {
    optional Ydb.DynamicConfig.ReplaceConfigRequest Request = 1;
    optional bytes UserToken = 2;
}

message TReplaceYamlConfigResponse {
    repeated Ydb.Issue.IssueMessage Issues = 1;
}

message TDropConfigRequest {
    optional Ydb.DynamicConfig.DropConfigRequest Request = 1;
    optional bytes UserToken = 2;
}

message TDropConfigResponse {
}

message TAddVolatileConfigRequest {
    optional Ydb.DynamicConfig.AddVolatileConfigRequest Request = 1;
    optional bytes UserToken = 2;
}

message TAddVolatileConfigResponse {
}

message TGetAllConfigsRequest {
    optional Ydb.DynamicConfig.GetConfigRequest Request = 1;
    optional bytes UserToken = 2;
}

message TGetAllConfigsResponse {
    reserved 1;
    optional Ydb.DynamicConfig.GetConfigResult Response = 2;
}

message TIsYamlReadOnlyRequest {
    optional bytes UserToken = 1;
}

message TIsYamlReadOnlyResponse {
    optional bool ReadOnly = 1;
}

message TGetNodeLabelsRequest {
    optional Ydb.DynamicConfig.GetNodeLabelsRequest Request = 1;
    optional bytes UserToken = 2;
}

message TGetNodeLabelsResponse {
    optional Ydb.DynamicConfig.GetNodeLabelsResult Response = 1;
}

message TGetAllMetadataRequest {
    optional Ydb.DynamicConfig.GetMetadataRequest Request = 1;
    optional bytes UserToken = 2;
}

message TGetAllMetadataResponse {
    optional Ydb.DynamicConfig.GetMetadataResult Response = 1;
}

message TRemoveVolatileConfigRequest {
    optional Ydb.DynamicConfig.RemoveVolatileConfigRequest Request = 1;
    optional bytes UserToken = 2;
}

message TRemoveVolatileConfigResponse {
}

message TResolveConfigRequest {
    optional Ydb.DynamicConfig.ResolveConfigRequest Request = 1;
    optional bytes UserToken = 2;
}

message TResolveConfigResponse {
    optional Ydb.DynamicConfig.ResolveConfigResult Response = 1;
}

message TResolveAllConfigRequest {
    optional Ydb.DynamicConfig.ResolveAllConfigRequest Request = 1;
    optional bytes UserToken = 2;
}

message TResolveAllConfigResponse {
    optional Ydb.DynamicConfig.ResolveAllConfigResult Response = 1;
}

message TGetYamlConfigRequest {
}

message TUnauthorized {
}

message TDisabled {
}

message TGenericError {
    repeated Ydb.Issue.IssueMessage Issues = 1;
    optional Ydb.StatusIds.StatusCode YdbStatus = 2;
}

message TVolatileYamlConfig {
    optional uint64 Id = 1;
    optional string Config = 2;
    optional bool NotChanged = 3;
}

// Get items of specified kinds with specified attributes.
// If multiple filters are specified then items complying
// with at least one of them are returned (except kinds filter
// which is applied to all returned items).
// If none of filters is specified then return all items.
message TGetConfigItemsRequest {
    // Get items with specified IDs.
    repeated uint64 ItemIds = 1;
    // Get items with node usage scope covering at least one of specified nodes.
    // If list of nodes is empty then return all items with a node usage scope.
    optional TNodeIds NodeFilter= 2;
    // Get items with host usage scope covers at least one of specified hosts.
    // If list of hosts is empty then return all items with a host usage scope.
    optional THosts HostFilter = 3;
    // Get items with tenant usage scope covering one of specified tenants.
    // If list of tenants is empty then return all items with a usage scope
    // bound to some tenant.
    optional TTenants TenantFilter = 4;
    // Get items with node type usage scope covering one of specified node types.
    // If list of node types is empty then return all items with a usage scope
    // bound to some node type.
    optional TNodeTypes NodeTypeFilter = 5;
    // Get items with usage scope matching one of specified tenant and node type
    // pair. If filter has an empty list then return all items with a usage scope
    // bound to some tenant and node type.
    optional TTenantAndNodeTypes TenantAndNodeTypeFilter = 6;
    // Get items with usage scope matching one of specified usage scopes.
    repeated TUsageScope UsageScopes = 7;
    // Get items with cookie matching one of cpecified values.
    optional TCookies CookieFilter = 8;
    // Filter items by specified kinds (return all kinds by default).
    repeated uint32 ItemKinds = 10;
}

message TGetConfigItemsResponse {
    optional TStatus Status = 1;
    repeated TConfigItem ConfigItems = 2;
}

message TGetNodeConfigItemsRequest {
    optional TNodeAttributes Node = 1;
    // Filter items by specified kinds (return all items by default).
    repeated uint32 ItemKinds = 2;
}

message TGetNodeConfigItemsResponse {
    optional TStatus Status = 1;
    repeated TConfigItem ConfigItems = 2;
}

message TGetNodeConfigRequest {
    optional TNodeAttributes Node = 1;
    // Filter items by specified kinds (return full config by default).
    repeated uint32 ItemKinds = 2;
    optional bool ServeYaml = 3;
    optional uint32 YamlApiVersion = 4;
}

message TGetNodeConfigResponse {
    optional TStatus Status = 1;
    optional NKikimrConfig.TAppConfig Config = 2;
    optional string YamlConfig = 3;
    repeated TVolatileYamlConfig VolatileConfigs = 4;
}

message TSubscriber {
    oneof Subscriber {
        // Subscriber is a tablet.
        uint64 TabletId = 1;
        // Subscriber is an actor, it should be registered as
        // a service and use its service id.
        NActorsProto.TActorId ServiceId = 2;
    }
}

message TConfigId {
    repeated TConfigItemId ItemIds = 1;
}

message TVolatileYamlConfigVersion {
    optional uint64 Id = 1;
    optional uint64 Hash = 2;
}

message TConfigSubscriptionRequest {
    optional uint64 Generation = 1;
    optional TNodeAttributes Options = 2;
    repeated uint32 ConfigItemKinds = 3;
    optional NKikimrConfig.TConfigVersion KnownVersion = 4;
    optional bool ServeYaml = 5;
    optional uint64 YamlVersion = 6;
    repeated TVolatileYamlConfigVersion VolatileYamlVersion = 7;
    optional uint32 YamlApiVersion = 8;
}

message TConfigSubscriptionResponse {
    optional uint64 Generation = 1;
    optional TStatus Status = 2;
}

message TConfigSubscriptionError {
    optional Ydb.StatusIds.StatusCode Code = 2;
    optional string Reason = 3;
}

message TConfigSubscriptionCanceled {
    optional uint64 Generation = 1;
}

message TConfigSubscriptionNotification {
    optional uint64 Order = 1;
    optional uint64 Generation = 2;
    optional NKikimrConfig.TAppConfig Config = 3;
    repeated uint32 AffectedKinds = 4;
    optional string YamlConfig = 5;
    optional bool YamlConfigNotChanged = 6;
    repeated TVolatileYamlConfig VolatileConfigs = 7;
}

message TSubscription {
    // Subscription id.
    optional uint64 Id = 1;
    // Subscriber id.
    optional TSubscriber Subscriber = 2;
    // Subscription options
    optional TNodeAttributes Options = 3;
    // Config item kinds client is subscribed for.
    repeated uint32 ConfigItemKinds = 4;
}

message TAddConfigSubscriptionRequest {
    // Subscription to add. Should have zero id,
    // valid subscriber and at least one item kind.
    // If subscriber already has similar subscription
    // then no new subscription will be created and
    // ID of existing subscription will be returned.
    optional TSubscription Subscription = 1;
}

message TAddConfigSubscriptionResponse {
    optional TStatus Status = 1;
    optional uint64 SubscriptionId = 2;
}

message TGetConfigSubscriptionRequest {
    // Required. Subscription id.
    optional uint64 SubscriptionId = 1;
}

message TGetConfigSubscriptionResponse {
    optional TStatus Status = 1;
    optional TSubscription Subscription = 2;
}

message TListConfigSubscriptionsRequest {
    optional TSubscriber Subscriber = 1;
}

message TListConfigSubscriptionsResponse {
    optional TStatus Status = 1;
    repeated TSubscription Subscriptions = 2;
}

message TRemoveConfigSubscriptionRequest {
    optional uint64 SubscriptionId = 1;
}

message TRemoveConfigSubscriptionResponse {
    optional TStatus Status = 1;
}

message TRemoveConfigSubscriptionsRequest {
    optional TSubscriber Subscriber = 1;
}

message TRemoveConfigSubscriptionsResponse {
    optional TStatus Status = 1;
}

message TReplaceConfigSubscriptionsRequest {
    optional TSubscription Subscription = 1;
}

message TReplaceConfigSubscriptionsResponse {
    optional TStatus Status = 1;
    optional uint64 SubscriptionId = 2;
}

message TConfigNotificationRequest {
    // Subscription notification is generated for.
    optional uint64 SubscriptionId = 1;
    // Id of passed config. In some cases client may get multiple
    // notifications with the same config. Config id may be used to
    // check if this config has already been applied.
    optional TConfigId ConfigId = 2;
    // Updated config.
    optional NKikimrConfig.TAppConfig Config = 3;
    repeated uint32 ItemKinds = 4;
    // Used to show that message are sent from ConfigsDispatcher
    optional bool Local = 5;
}

message TConfigNotificationResponse {
    optional uint64 SubscriptionId = 1;
    // Id of processed config.
    optional TConfigId ConfigId = 2;
}

message TCheckConfigUpdatesRequest {
    repeated TConfigItemId BaseItemIds = 1;
}

message TCheckConfigUpdatesResponse {
    optional TStatus Status = 1;
    repeated TConfigItemId AddedItems = 2;
    repeated TConfigItemId RemovedItems = 3;
    repeated TConfigItemId UpdatedItems = 4;
}

message TListConfigValidatorsRequest {
}

message TConfigValidatorInfo {
    optional string Name = 1;
    optional string Description = 2;
    repeated uint32 CheckedItemKinds = 3;
    optional bool Enabled = 4;
}

message TListConfigValidatorsResponse {
    optional TStatus Status = 1;
    repeated TConfigValidatorInfo Validators = 2;
}

message TToggleConfigValidatorRequest {
    optional string Name = 1;
    optional bool Disable = 2;
}

message TToggleConfigValidatorResponse {
    optional TStatus Status = 1;
}

enum EValidationLevel {
    // Validation is disabled.
    VALIDATE_NONE = 0;
    // Only domain config is validated. It's config for node
    // with unspecified tenant, type, host and node ID.
    VALIDATE_DOMAIN = 1;
    // Configs for nodes with specified tenant are checked.
    VALIDATE_TENANTS = 2;
    // Configs for nodes with specified tenant and/or type
    // are checked.
    VALIDATE_TENANTS_AND_NODE_TYPES = 3;
}

message TConfigsConfig {
    message TUsageScopeRestrictions {
        repeated uint32 AllowedNodeIdUsageScopeKinds = 1;
        repeated uint32 AllowedHostUsageScopeKinds = 2;
        repeated uint32 AllowedTenantUsageScopeKinds = 3;
        repeated uint32 AllowedNodeTypeUsageScopeKinds = 4;
        repeated uint32 DisallowedDomainUsageScopeKinds = 5;
    }

    message TValidationOptions {
        optional EValidationLevel ValidationLevel = 1 [default = VALIDATE_TENANTS_AND_NODE_TYPES];
        // How many configs is allowed to validate per
        // single configure command execution. Order of
        // checks corresponds to validation levels.
        // Firstly VALIDATE_DOMAIN checks are done,
        // then VALIDATE_TENANTS checks etc.
        optional uint32 MaxConfigChecksPerModification = 2 [default = 10000];
        // If True then respond with error for configure
        // commands which caused exceeded limit on config
        // checks. Otherwise respond with SUCCESS and
        // an info message.
        optional bool FailOnExceededConfigChecksLimit = 3 [default = true];
        // If True then resulting config for each node
        // config request is validated. If validation
        // fails then response with error status is sent.
        optional bool EnableValidationOnNodeConfigRequest = 4 [default = true];
        // If True then warning issues result in failed validation.
        optional bool TreatWarningAsError = 5 [default = true];
    }

    optional TUsageScopeRestrictions UsageScopeRestrictions = 1;
    optional TValidationOptions ValidationOptions = 2;
}
