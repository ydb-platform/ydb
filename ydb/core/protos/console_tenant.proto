import "ydb/core/protos/blobstorage_config.proto";

import "ydb/public/api/protos/ydb_cms.proto";
import "ydb/public/api/protos/ydb_operation.proto";

package NKikimrConsole;
option java_package = "ru.yandex.kikimr.proto";


message TCreateTenantRequest {
    optional Ydb.Cms.CreateDatabaseRequest Request = 1;
    optional bytes UserToken = 2;
    optional string PeerName = 3;
}

message TCreateTenantResponse {
    optional Ydb.Cms.CreateDatabaseResponse Response = 1;
}

message TGetTenantStatusRequest {
    optional Ydb.Cms.GetDatabaseStatusRequest Request = 1;
    optional bytes UserToken = 2;
    optional string PeerName = 3;
}

message TGetTenantStatusResponse {
    optional Ydb.Cms.GetDatabaseStatusResponse Response = 1;
}

message TAlterTenantRequest {
    optional Ydb.Cms.AlterDatabaseRequest Request = 1;
    optional bytes UserToken = 2;
    optional string PeerName = 3;
}

message TAlterTenantResponse {
    optional Ydb.Cms.AlterDatabaseResponse Response = 1;
}

message TListTenantsRequest {
    optional Ydb.Cms.ListDatabasesRequest Request = 1;
    optional bytes UserToken = 2;
    optional string PeerName = 3;
}

message TListTenantsResponse {
    optional Ydb.Cms.ListDatabasesResponse Response = 1;
}

message TRemoveTenantRequest {
    optional Ydb.Cms.RemoveDatabaseRequest Request = 1;
    optional bytes UserToken = 2;
    optional string PeerName = 3;
}

message TRemoveTenantResponse {
    optional Ydb.Cms.RemoveDatabaseResponse Response = 1;
}

message TGetOperationRequest {
    optional Ydb.Operations.GetOperationRequest Request = 1;
    optional bytes UserToken = 2;
    optional string PeerName = 3;
}

message TGetOperationResponse {
    optional Ydb.Operations.GetOperationResponse Response = 1;
}

message TDescribeTenantOptionsRequest {
    optional Ydb.Cms.DescribeDatabaseOptionsRequest Request = 1;
    optional bytes UserToken = 2;
    optional string PeerName = 3;
}

message TDescribeTenantOptionsResponse {
    optional Ydb.Cms.DescribeDatabaseOptionsResponse Response = 1;
}

// For internal use only. Commonly used for borrowed storage pools
message TUpdateTenantPoolConfig {
    optional string Tenant = 1;
    optional string PoolType = 2;
    optional NKikimrBlobStorage.TDefineStoragePool Config = 3;
    optional bytes UserToken = 4;
}

message TSlotLocation {
    optional string DataCenter = 1;
    optional bool ForceLocation = 2 [default = true];
    optional uint32 CollocationGroup = 3;
    optional bool ForceCollocation = 4;
}

message TAvailabilityZoneKind {
    optional string Kind = 1;
    oneof Zone {
        string DataCenterName = 2;
        TSlotLocation SlotLocation = 3;
    }
}

message TAvailabilityZoneSet {
    optional string Name = 1;
    repeated string ZoneKinds = 2;
}

message TComputationalUnitKind {
    optional string Kind = 1;
    oneof Resource {
        string TenantSlotType = 2;
    }
    optional string AvailabilityZoneSet = 10;
}

message TClusterQuota {
    // How many computational units in percents of totally
    // available for cluster can be allocated for tenants.
    // Used to keep reserve for host/dc downtime.
    optional uint64 ComputationalUnitsLoadQuota = 1;
    // Maximum number of computational units available for
    // allocation for tenants.
    optional uint64 ComputationalUnitsQuota = 2;
    // Maximum number of tenants we can create in cluster.
    optional uint64 TenantsQuota = 3;
}

message TTenantsConfig {
    optional uint64 DefaultStorageUnitsQuota = 1;
    optional uint64 DefaultComputationalUnitsQuota = 2;
    repeated TAvailabilityZoneKind AvailabilityZoneKinds = 3;
    repeated TAvailabilityZoneSet AvailabilityZoneSets = 4;
    repeated TComputationalUnitKind ComputationalUnitKinds = 5;
    optional TClusterQuota ClusterQuota = 6;
}
