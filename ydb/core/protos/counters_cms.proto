import "ydb/core/protos/counters.proto";

package NKikimr.NCms;

option java_package = "ru.yandex.kikimr.proto";

option (TabletTypeName) = "Cms";

enum ESimpleCounters {
    COUNTER_SIMPLE_IGNORE = 0;
 
    // 1 when local config differs from console
    COUNTER_BOOTSTRAP_DIFFERS = 1                        [(CounterOpts) = {Name: "BootstrapConfigDiffersFromConsole"}];
    COUNTER_REQUESTS_QUEUE_SIZE = 2                      [(CounterOpts) = {Name: "RequestsQueueSize"}];
}

enum ECumulativeCounters {
    COUNTER_CUMULATIVE_IGNORE = 0;

    COUNTER_PARTIAL_PERMISSIONS_OPTIMIZED = 1 [(CounterOpts) = {Name: "PartialPermissionsOptimized"}];
}

enum EPercentileCounters {
    option (GlobalCounterOpts) = {
        Ranges { Value: 100    Name: "100 ms" }
        Ranges { Value: 500    Name: "500 ms" }
        Ranges { Value: 1000   Name: "1 s" }
        Ranges { Value: 2000   Name: "2 s" }
        Ranges { Value: 5000   Name: "5 s" }
        Ranges { Value: 10000  Name: "10 s" }
        Ranges { Value: 15000  Name: "15 s" }
        Ranges { Value: 30000  Name: "30 s" }
        Ranges { Value: 45000  Name: "45 s" }
        Ranges { Value: 60000  Name: "60 s"  }
        Ranges { Value: 120000 Name: "120 s" }
        Ranges { Value: 150000 Name: "150 s" }
        Ranges { Value: 180000 Name: "180 s" }
        Ranges { Value: 200000 Name: "200 s" }
    };

    COUNTER_PERCENTILE_IGNORE = 0;

    COUNTER_LATENCY_INFO_COLLECTOR = 1                [(CounterOpts) = {Name: "LatencyInfoCollector"}];
    COUNTER_LATENCY_REQUEST_QUEUING = 2               [(CounterOpts) = {Name: "LatencyRequestQueuing"}];

    COUNTER_LATENCY_PERMISSION_REQUEST = 3            [(CounterOpts) = {Name: "LatencyPermissionRequest"}];
    COUNTER_LATENCY_CHECK_REQUEST = 4                 [(CounterOpts) = {Name: "LatencyCheckRequest"}];
}

enum ETxTypes {
    TXTYPE_INIT_SCHEMA = 0                                [(TxTypeOpts) = {Name: "TxInitSchema"}];
    TXTYPE_INIT = 1                                       [(TxTypeOpts) = {Name: "TxInit"}];
    TXTYPE_GET_LOG_TAIL = 2                               [(TxTypeOpts) = {Name: "TxGetLogTail"}];
    TXTYPE_LOAD_STATE = 3                                 [(TxTypeOpts) = {Name: "TxLoadState"}];
    TXTYPE_LOG_AND_SEND = 4                               [(TxTypeOpts) = {Name: "TxLogAndSend"}];
    TXTYPE_LOG_CLEANUP = 5                                [(TxTypeOpts) = {Name: "TxLogCleanup"}];
    TXTYPE_PROCESS_NOTIFICATION = 6                       [(TxTypeOpts) = {Name: "TxProcessNotification"}];  
    TXTYPE_REJECT_NOTIFICATION = 7                        [(TxTypeOpts) = {Name: "TxRejectNotification"}];
    TXTYPE_REMOVE_EXPIRED_NOTIFICATION = 8                [(TxTypeOpts) = {Name: "TxRemoveExpiredNotification"}];
    TXTYPE_STORE_PERMISSIONS = 9                          [(TxTypeOpts) = {Name: "TxStorePermissions"}];
    TXTYPE_REMOVE_PERMISSIONS = 10                        [(TxTypeOpts) = {Name: "TxRemovePermissions"}];
    TXTYPE_REMOVE_REQUEST = 11                            [(TxTypeOpts) = {Name: "TxRemoveRequest"}];
    TXTYPE_REMOVE_TASK = 12                               [(TxTypeOpts) = {Name: "TxRemoveTask"}];
    TXTYPE_STORE_WALLE_TASK = 13                          [(TxTypeOpts) = {Name: "TxStoreWalleTask"}];
    TXTYPE_UPDATE_CONFIG = 14                             [(TxTypeOpts) = {Name: "TxUpdateConfig"}];
    TXTYPE_UPDATE_DOWNTIMES = 15                          [(TxTypeOpts) = {Name: "TxUpdateDowntimes"}];
}
