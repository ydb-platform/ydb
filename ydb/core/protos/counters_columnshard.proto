import "ydb/core/protos/counters.proto";

package NKikimr.NColumnShard;
option java_package = "ru.yandex.kikimr.proto";

option (TabletTypeName) = "ColumnShard"; // Used as prefix for all counters

// Trailing "RawBytes" replaced with "BytesRaw" in names to remove "*RawBytes" from "*Bytes" filter
enum ESimpleCounters {
    COUNTER_TABLES = 0                                      [(CounterOpts) = {Name: "Tables"}];
    COUNTER_TABLE_PRESETS = 1                               [(CounterOpts) = {Name: "TablePresets"}];
    COUNTER_TTL_PRESETS = 2                                 [(CounterOpts) = {Name: "TtlPresets"}];
    COUNTER_TABLE_TTLS = 3                                  [(CounterOpts) = {Name: "TableTtls"}];
    COUNTER_INDEXES = 4                                     [(CounterOpts) = {Name: "Indexes"}];
    COUNTER_PREPARED_RECORDS = 5                            [(CounterOpts) = {Name: "PreparedRecords"}];
    COUNTER_PREPARED_BYTES = 6                              [(CounterOpts) = {Name: "PreparedBytes"}];
    COUNTER_COMMITTED_RECORDS = 7                           [(CounterOpts) = {Name: "CommittedRecords"}];
    COUNTER_COMMITTED_BYTES = 8                             [(CounterOpts) = {Name: "CommittedBytes"}];
    COUNTER_INDEX_TABLES = 9                                [(CounterOpts) = {Name: "Index/Tables"}];
    COUNTER_INDEX_GRANULES = 10                             [(CounterOpts) = {Name: "Index/Granules"}];
    COUNTER_INDEX_EMPTY_GRANULES = 11                       [(CounterOpts) = {Name: "Index/EmptyGranules"}];
    COUNTER_INDEX_OVERLOADED_GRANULES = 12                  [(CounterOpts) = {Name: "Index/OverloadedGranules"}];
    COUNTER_INDEX_COLUMN_RECORDS = 13                       [(CounterOpts) = {Name: "Index/ColumnRecords"}];
    COUNTER_INDEX_COLUMN_METADATA_BYTES = 14                [(CounterOpts) = {Name: "Index/ColumnMetadataBytes"}];
    COUNTER_INSERTED_PORTIONS = 15                          [(CounterOpts) = {Name: "Index/InsertedPortions"}];
    COUNTER_INSERTED_BLOBS = 16                             [(CounterOpts) = {Name: "Index/InsertedBlobs"}];
    COUNTER_INSERTED_ROWS = 17                              [(CounterOpts) = {Name: "Index/InsertedRows"}];
    COUNTER_INSERTED_BYTES = 18                             [(CounterOpts) = {Name: "Index/InsertedBytes"}];
    COUNTER_INSERTED_RAW_BYTES = 19                         [(CounterOpts) = {Name: "Index/InsertedBytesRaw"}];
    COUNTER_COMPACTED_PORTIONS = 20                         [(CounterOpts) = {Name: "Index/CompactedPortions"}];
    COUNTER_COMPACTED_BLOBS = 21                            [(CounterOpts) = {Name: "Index/CompactedBlobs"}];
    COUNTER_COMPACTED_ROWS = 22                             [(CounterOpts) = {Name: "Index/CompactedRows"}];
    COUNTER_COMPACTED_BYTES = 23                            [(CounterOpts) = {Name: "Index/CompactedBytes"}];
    COUNTER_COMPACTED_RAW_BYTES = 24                        [(CounterOpts) = {Name: "Index/CompactedBytesRaw"}];
    COUNTER_SPLIT_COMPACTED_PORTIONS = 25                   [(CounterOpts) = {Name: "Index/SplitCompactedPortions"}];
    COUNTER_SPLIT_COMPACTED_BLOBS = 26                      [(CounterOpts) = {Name: "Index/SplitCompactedBlobs"}];
    COUNTER_SPLIT_COMPACTED_ROWS = 27                       [(CounterOpts) = {Name: "Index/SplitCompactedRows"}];
    COUNTER_SPLIT_COMPACTED_BYTES = 28                      [(CounterOpts) = {Name: "Index/SplitCompactedBytes"}];
    COUNTER_SPLIT_COMPACTED_RAW_BYTES = 29                  [(CounterOpts) = {Name: "Index/SplitCompactedBytesRaw"}];
    COUNTER_INACTIVE_PORTIONS = 30                          [(CounterOpts) = {Name: "Index/InactivePortions"}];
    COUNTER_INACTIVE_BLOBS = 31                             [(CounterOpts) = {Name: "Index/InactiveBlobs"}];
    COUNTER_INACTIVE_ROWS = 32                              [(CounterOpts) = {Name: "Index/InactiveRows"}];
    COUNTER_INACTIVE_BYTES = 33                             [(CounterOpts) = {Name: "Index/InactiveBytes"}];
    COUNTER_INACTIVE_RAW_BYTES = 34                         [(CounterOpts) = {Name: "Index/InactiveBytesRaw"}];
    COUNTER_SCAN_IN_FLY = 35                                [(CounterOpts) = {Name: "ScanTxInFly"}];
    COUNTER_EVICTED_PORTIONS = 36                           [(CounterOpts) = {Name: "Index/EvictedPortions"}];
    COUNTER_EVICTED_BLOBS = 37                              [(CounterOpts) = {Name: "Index/EvictedBlobs"}];
    COUNTER_EVICTED_ROWS = 38                               [(CounterOpts) = {Name: "Index/EvictedRows"}];
    COUNTER_EVICTED_BYTES = 39                              [(CounterOpts) = {Name: "Index/EvictedBytes"}];
    COUNTER_EVICTED_RAW_BYTES = 40                          [(CounterOpts) = {Name: "Index/EvictedBytesRaw"}];
    COUNTER_WRITES_IN_FLY = 41                              [(CounterOpts) = {Name: "WritesInFly"}];
    COUNTER_TX_COMPLETE_LAG = 42                            [(CounterOpts) = {Name: "TxCompleteLag"}];
}

enum ECumulativeCounters {
    COUNTER_CUMULATIVE_IGNORE = 0;
    COUNTER_WRITE_SUCCESS = 1                               [(CounterOpts) = {Name: "WriteSuccess"}];
    COUNTER_WRITE_FAIL = 2                                  [(CounterOpts) = {Name: "WriteFail"}];
    COUNTER_READ_SUCCESS = 3                                [(CounterOpts) = {Name: "ReadSuccess"}];
    COUNTER_READ_FAIL = 4                                   [(CounterOpts) = {Name: "ReadFail"}];
    COUNTER_PREPARE_REQUEST = 5                             [(CounterOpts) = {Name: "PrepareRequest"}];
    COUNTER_PREPARE_ERROR = 6                               [(CounterOpts) = {Name: "PrepareError"}];
    COUNTER_PREPARE_SUCCESS = 7                             [(CounterOpts) = {Name: "PrepareSuccess"}];
    COUNTER_PLAN_STEP_IGNORED = 8                           [(CounterOpts) = {Name: "PlanStepIgnored"}];
    COUNTER_PLAN_STEP_ACCEPTED = 9                          [(CounterOpts) = {Name: "PlanStepAccepted"}];
    COUNTER_SCANNED_ROWS = 10                               [(CounterOpts) = {Name: "ScannedRows"}];
    COUNTER_SCANNED_BYTES = 11                              [(CounterOpts) = {Name: "ScannedBytes"}];
    COUNTER_UPSERT_BLOBS_WRITTEN = 12                       [(CounterOpts) = {Name: "UpsertBlobsWritten"}];
    COUNTER_UPSERT_BYTES_WRITTEN = 13                       [(CounterOpts) = {Name: "UpsertBytesWritten"}];
    COUNTER_INDEXING_BLOBS_WRITTEN = 14                     [(CounterOpts) = {Name: "IndexingBlobsWritten"}];
    COUNTER_INDEXING_BYTES_WRITTEN = 15                     [(CounterOpts) = {Name: "IndexingBytesWritten"}];
    COUNTER_COMPACTION_BLOBS_WRITTEN = 16                   [(CounterOpts) = {Name: "CompactionBlobsWritten"}];
    COUNTER_COMPACTION_BYTES_WRITTEN = 17                   [(CounterOpts) = {Name: "CompactionBytesWritten"}];
    COUNTER_BLOB_MANAGER_GC_REQUESTS = 18                   [(CounterOpts) = {Name: "BlobManager/GcRequests"}];
    COUNTER_BLOB_MANAGER_KEEP_BLOBS = 19                    [(CounterOpts) = {Name: "BlobManager/KeepBlobs"}];
    COUNTER_BLOB_MANAGER_DONT_KEEP_BLOBS = 20               [(CounterOpts) = {Name: "BlobManager/DontKeepBlobs"}];
    COUNTER_BLOB_MANAGER_SKIPPED_BLOBS = 21                 [(CounterOpts) = {Name: "BlobManager/SkippedBlobs"}];
    COUNTER_RAW_BYTES_UPSERTED = 22                         [(CounterOpts) = {Name: "RawBytesUpserted"}];
    COUNTER_BLOBS_COMMITTED = 23                            [(CounterOpts) = {Name: "BlobsCommitted"}];
    COUNTER_BYTES_COMMITTED = 24                            [(CounterOpts) = {Name: "BytesCommitted"}];
    COUNTER_RAW_BYTES_COMMITTED = 25                        [(CounterOpts) = {Name: "RawBytesCommitted"}];
    COUNTER_INDEXING_PORTIONS_WRITTEN = 26                  [(CounterOpts) = {Name: "IndexingPortionsWritten"}];
    COUNTER_COMPACTION_PORTIONS_WRITTEN = 27                [(CounterOpts) = {Name: "CompactionPortionsWritten"}];
    COUNTER_SPLIT_COMPACTION_PORTIONS_WRITTEN = 28          [(CounterOpts) = {Name: "SplitCompactionPortionsWritten"}];
    COUNTER_SPLIT_COMPACTION_BLOBS_WRITTEN = 29             [(CounterOpts) = {Name: "SplitCompactionBlobsWritten"}];
    COUNTER_SPLIT_COMPACTION_BYTES_WRITTEN = 30             [(CounterOpts) = {Name: "SplitCompactionBytesWritten"}];
    COUNTER_PORTIONS_DEACTIVATED = 31                       [(CounterOpts) = {Name: "PortionsDeactivated"}];
    COUNTER_BLOBS_DEACTIVATED = 32                          [(CounterOpts) = {Name: "BlobsDeactivated"}];
    COUNTER_BYTES_DEACTIVATED = 33                          [(CounterOpts) = {Name: "BytesDeactivated"}];
    COUNTER_RAW_BYTES_DEACTIVATED = 34                      [(CounterOpts) = {Name: "RawBytesDeactivated"}];
    COUNTER_PORTIONS_ERASED = 35                            [(CounterOpts) = {Name: "PortionsErased"}];
    COUNTER_BLOBS_ERASED = 36                               [(CounterOpts) = {Name: "BlobsErased"}];
    COUNTER_BYTES_ERASED = 37                               [(CounterOpts) = {Name: "BytesErased"}];
    COUNTER_RAW_BYTES_ERASED = 38                           [(CounterOpts) = {Name: "RawBytesErased"}];
    COUNTER_INDEXING_SUCCESS = 39                           [(CounterOpts) = {Name: "IndexingSuccess"}];
    COUNTER_INDEXING_FAIL = 40                              [(CounterOpts) = {Name: "IndexingFail"}];
    COUNTER_COMPACTION_SUCCESS = 41                         [(CounterOpts) = {Name: "CompactionSuccess"}];
    COUNTER_COMPACTION_FAIL = 42                            [(CounterOpts) = {Name: "CompactionFail"}];
    COUNTER_SPLIT_COMPACTION_SUCCESS = 43                   [(CounterOpts) = {Name: "SplitCompactionSuccess"}];
    COUNTER_SPLIT_COMPACTION_FAIL = 44                      [(CounterOpts) = {Name: "SplitCompactionFail"}];
    COUNTER_CLEANUP_SUCCESS = 45                            [(CounterOpts) = {Name: "CleanupSuccess"}];
    COUNTER_CLEANUP_FAIL = 46                               [(CounterOpts) = {Name: "CleanupFail"}];
    COUNTER_TTL_SUCCESS = 47                                [(CounterOpts) = {Name: "TtlSuccess"}];
    COUNTER_TTL_FAIL = 48                                   [(CounterOpts) = {Name: "TtlFail"}];
    COUNTER_OUT_OF_SPACE = 49                               [(CounterOpts) = {Name: "OutOfSpace"}];
    COUNTER_SCAN_RESTARTED = 50                             [(CounterOpts) = {Name: "ScanRestarted"}];
    COUNTER_READ_INDEX_GRANULES = 51                        [(CounterOpts) = {Name: "ReadIndexGranules"}];
    COUNTER_READ_INDEX_PORTIONS = 52                        [(CounterOpts) = {Name: "ReadIndexPortions"}];
    COUNTER_READ_INDEX_BLOBS = 53                           [(CounterOpts) = {Name: "ReadIndexBlobs"}];
    COUNTER_READ_INDEX_ROWS = 54                            [(CounterOpts) = {Name: "ReadIndexRows"}];
    COUNTER_READ_INDEX_BYTES = 55                           [(CounterOpts) = {Name: "ReadIndexBytes"}];
    COUNTER_WRITE_DUPLICATE = 56                            [(CounterOpts) = {Name: "WriteDuplicate"}];
    COUNTER_SMALL_BLOB_WRITE_COUNT = 57                     [(CounterOpts) = {Name: "SmallBlobWriteCount"}];
    COUNTER_SMALL_BLOB_WRITE_BYTES = 58                     [(CounterOpts) = {Name: "SmallBlobWriteBytes"}];
    COUNTER_SMALL_BLOB_READ_SUCCESS = 59                    [(CounterOpts) = {Name: "SmallBlobReadSuccess"}];
    COUNTER_SMALL_BLOB_READ_ERROR = 60                      [(CounterOpts) = {Name: "SmallBlobReadError"}];
    COUNTER_SMALL_BLOB_READ_BYTES = 61                      [(CounterOpts) = {Name: "SmallBlobReadBytes"}];
    COUNTER_SMALL_BLOB_DELETE_COUNT = 62                    [(CounterOpts) = {Name: "SmallBlobDeleteCount"}];
    COUNTER_SMALL_BLOB_DELETE_BYTES = 63                    [(CounterOpts) = {Name: "SmallBlobDeleteBytes"}];
    COUNTER_EVICTION_PORTIONS_WRITTEN = 64                  [(CounterOpts) = {Name: "EvictionPortionsWritten"}];
    COUNTER_EVICTION_BLOBS_WRITTEN = 65                     [(CounterOpts) = {Name: "EvictionBlobsWritten"}];
    COUNTER_EVICTION_BYTES_WRITTEN = 66                     [(CounterOpts) = {Name: "EvictionBytesWritten"}];
    COUNTER_EXPORT_SUCCESS = 67                             [(CounterOpts) = {Name: "ExportSuccess"}];
    COUNTER_EXPORT_FAIL = 68                                [(CounterOpts) = {Name: "ExportFail"}];
    COUNTER_FORGET_SUCCESS = 69                             [(CounterOpts) = {Name: "ForgetSuccess"}];
    COUNTER_FORGET_FAIL = 70                                [(CounterOpts) = {Name: "ForgetFail"}];
    COUNTER_WRITE_OVERLOAD = 71                             [(CounterOpts) = {Name: "WriteOverload"}];
    COUNTER_WRITE_OVERLOAD_SHARD = 72                       [(CounterOpts) = {Name: "WriteOverloadShard"}];
    COUNTER_INDEXING_TIME = 73                              [(CounterOpts) = {Name: "IndexingTime"}];
    COUNTER_COMPACTION_TIME = 74                            [(CounterOpts) = {Name: "CompactionTime"}];
    COUNTER_EXPORTING_BLOBS = 75                            [(CounterOpts) = {Name: "ExportingBlobs"}];
    COUNTER_EXPORTING_BYTES = 76                            [(CounterOpts) = {Name: "ExportingBytes"}];
    COUNTER_FORGETTING_BLOBS = 77                           [(CounterOpts) = {Name: "ForgettingBlobs"}];
    COUNTER_FORGETTING_BYTES = 78                           [(CounterOpts) = {Name: "ForgettingBytes"}];
    COUNTER_READING_EXPORTED_BLOBS = 79                     [(CounterOpts) = {Name: "ReadingExportedBlobs"}];
    COUNTER_READING_EXPORTED_BYTES = 80                     [(CounterOpts) = {Name: "ReadingExportedBytes"}];
    COUNTER_READING_EXPORTED_RANGES = 81                    [(CounterOpts) = {Name: "ReadingExportedRanges"}];
}

enum EPercentileCounters {
    option (GlobalCounterOpts) = {
        Ranges { Value: 10000       Name: "10"      }
        Ranges { Value: 20000       Name: "20"      }
        Ranges { Value: 50000       Name: "50"      }
        Ranges { Value: 100000      Name: "100"     }
        Ranges { Value: 200000      Name: "200"     }
        Ranges { Value: 500000      Name: "500"     }
        Ranges { Value: 1000000     Name: "1000"    }
        Ranges { Value: 2000000     Name: "2000"    }
        Ranges { Value: 5000000     Name: "5000"    }
        Ranges { Value: 10000000    Name: "10000"   }
        Ranges { Value: 20000000    Name: "20000"   }
        Ranges { Value: 60000000    Name: "60000"   }
        Ranges { Value: 120000000   Name: "120000"  }
        Ranges { Value: 300000000   Name: "300000"  }
        Ranges { Value: 600000000   Name: "600000"  }
    };

    COUNTER_SCAN_LATENCY = 0                                [(CounterOpts) = {Name: "ScanLatency"}];
}

enum ETxTypes {
    TXTYPE_INIT = 0                                         [(TxTypeOpts) = {Name: "TxInit"}];
    TXTYPE_INIT_SCHEMA = 1                                  [(TxTypeOpts) = {Name: "TxInitSchema"}];
    TXTYPE_UPDATE_SCHEMA = 2                                [(TxTypeOpts) = {Name: "TxUpdateSchema"}];
    TXTYPE_WRITE = 3                                        [(TxTypeOpts) = {Name: "TxWrite"}];
    TXTYPE_READ = 4                                         [(TxTypeOpts) = {Name: "TxRead"}];
    TXTYPE_PROPOSE = 5                                      [(TxTypeOpts) = {Name: "TxPropose"}];
    TXTYPE_WRITE_INDEX = 6                                  [(TxTypeOpts) = {Name: "TxWriteIndex"}];
    TXTYPE_PLANSTEP = 7                                     [(TxTypeOpts) = {Name: "TxPlanStep"}];
    TXTYPE_NOTIFY_TX_COMPLETION = 8                         [(TxTypeOpts) = {Name: "TxNotifyTxCompletion"}];
    TXTYPE_PROPOSE_CANCEL = 9                               [(TxTypeOpts) = {Name: "TxProposeCancel"}];
    TXTYPE_PROGRESS = 10                                    [(TxTypeOpts) = {Name: "TxProgress"}];
    TXTYPE_START_SCAN = 11                                  [(TxTypeOpts) = {Name: "TxStartScan"}];
    TXTYPE_READ_BLOB_RANGES = 12                            [(TxTypeOpts) = {Name: "TxReadBlobRanges"}];
    TXTYPE_EXPORT = 13                                      [(TxTypeOpts) = {Name: "TxExport"}];
    TXTYPE_FORGET = 14                                      [(TxTypeOpts) = {Name: "TxForget"}];
    TXTYPE_WRITE_DRAFT = 15                                 [(TxTypeOpts) = {Name: "TxWriteDraft"}];
    TXTYPE_CLEANUP_INSERT_TABLE = 16                        [(TxTypeOpts) = {Name: "TxInsertTableCleanup"}];
    TXTYPE_GC_FINISHED = 17                                 [(TxTypeOpts) = {Name: "TxGarbageCollectionFinished"}];
    TXTYPE_DELETE_SHARED_BLOBS = 18                         [(TxTypeOpts) = {Name: "TxDeleteSharedBlobs"}];
    TXTYPE_DATA_SHARING_FINISH_ACK_TO_SOURCE = 19           [(TxTypeOpts) = {Name: "TxDataSharingFinishAckToSource"}];
    TXTYPE_DATA_SHARING_START_TO_SOURCE = 20                [(TxTypeOpts) = {Name: "TxDataSharingStartToSource"}];
    TXTYPE_DATA_SHARING_DATA_ACK_TO_SOURCE = 21             [(TxTypeOpts) = {Name: "TxDataSharingDataAckToSource"}];
    TXTYPE_DATA_SHARING_DATA_FROM_SOURCE = 22               [(TxTypeOpts) = {Name: "TxDataSharingDataFromSource"}];
    TXTYPE_DATA_SHARING_FINISH_ACK_FROM_INITIATOR = 23      [(TxTypeOpts) = {Name: "TxDataSharingFinishAckFromInitiator"}];
    TXTYPE_DATA_SHARING_FINISH_FROM_SOURCE = 24             [(TxTypeOpts) = {Name: "TxDataSharingFinishFromSource"}];
    TXTYPE_DATA_SHARING_PROPOSE_FROM_INITIATOR = 25         [(TxTypeOpts) = {Name: "TxDataSharingProposeFromInitiator"}];
    TXTYPE_DATA_SHARING_CONFIRM_FROM_INITIATOR = 26         [(TxTypeOpts) = {Name: "TxDataSharingConfirmFromInitiator"}];
    TXTYPE_DATA_SHARING_APPLY_LINKS_MODIFICATION = 27       [(TxTypeOpts) = {Name: "TxDataSharingApplyLinksModification"}];
    TXTYPE_DATA_SHARING_WRITE_SOURCE_CURSOR = 28            [(TxTypeOpts) = {Name: "TxDataSharingWriteSourceCursor"}];
    TXTYPE_EXPORT_SAVE_CURSOR = 29                          [(TxTypeOpts) = {Name: "TxExportSaveCursor"}];
}
