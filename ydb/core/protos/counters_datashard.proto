import "ydb/core/protos/counters.proto";

package NKikimr.NDataShard;

option java_package = "ru.yandex.kikimr.proto";

option (TabletTypeName) = "DataShard"; // Used as prefix for all counters

enum ESimpleCounters {
    COUNTER_TX_IN_FLY = 0                                          [(CounterOpts) = {Name: "TxInFly"}];
    COUNTER_STATE_WORK = 1                                         [(CounterOpts) = {Name: "StateWork"}];
    COUNTER_TX_COMPLETE_LAG = 2                                    [(CounterOpts) = {Name: "TxCompleteLag"}];
    COUNTER_OUT_READSETS_IN_FLIGHT = 3                             [(CounterOpts) = {Name: "OutReadSetsInFlight"}];
    COUNTER_IMMEDIATE_TX_IN_FLY = 4                                [(CounterOpts) = {Name: "ImmediateTxInFly"}];
    COUNTER_IMMEDIATE_TX_DELAYED = 5                               [(CounterOpts) = {Name: "ImmediateTxDelayed"}];
    COUNTER_SCAN_TX_COMPLETE_LAG = 6                               [(CounterOpts) = {Name: "ScanTxCompleteLag"}];
    COUNTER_PROPOSE_QUEUE_SIZE = 7                                 [(CounterOpts) = {Name: "ProposeQueueSize"}];
    COUNTER_SPLIT_SRC_WAIT_TX_IN_FLY = 8                           [(CounterOpts) = {Name: "SplitSrcWaitTxInFly"}];
    COUNTER_SPLIT_SRC_WAIT_IMMEDIATE_TX_IN_FLY = 9                 [(CounterOpts) = {Name: "SplitSrcWaitImmediateTxInFly"}];
    COUNTER_MVCC_STATE_CHANGE_WAIT_TX_IN_FLY = 10                  [(CounterOpts) = {Name: "MvccStateChangeWaitTxInFly"}];
    COUNTER_MVCC_STATE_CHANGE_WAIT_IMMEDIATE_TX_IN_FLY = 11        [(CounterOpts) = {Name: "MvccStateChangeWaitImmediateTxInFly"}];
    COUNTER_MVCC_ENABLED = 12                                      [(CounterOpts) = {Name: "MvccEnabled"}];
    COUNTER_CHANGE_QUEUE_SIZE  = 13                                [(CounterOpts) = {Name: "ChangeQueueSize"}];
    COUNTER_READ_ITERATORS_WAITING = 14                            [(CounterOpts) = {Name: "ReadIteratorsWaiting"}];
    COUNTER_READ_ITERATORS_COUNT = 15                              [(CounterOpts) = {Name: "ReadIteratorsCount"}];
    COUNTER_READ_ITERATORS_EXHAUSTED_COUNT = 16                    [(CounterOpts) = {Name: "ReadIteratorsExhaustedCount"}];
    COUNTER_CHANGE_RECORDS_REQUESTED = 17                          [(CounterOpts) = {Name: "ChangeRecordsRequested"}];
    COUNTER_CHANGE_DELIVERY_LAG = 18                               [(CounterOpts) = {Name: "ChangeDeliveryLag"}];
    COUNTER_CHANGE_DATA_LAG = 19                                   [(CounterOpts) = {Name: "ChangeDataLag"}];
    COUNTER_CHANGE_QUEUE_RESERVED_CAPACITY = 20                    [(CounterOpts) = {Name: "ChangeQueueReservedCapacity"}];
}

enum ECumulativeCounters {
    COUNTER_REQ_RO = 0                                    [(CounterOpts) = {Name: "ReqRo"}];
    COUNTER_PREPARE_REQUEST = 1                           [(CounterOpts) = {Name: "PrepareRequests"}];
    COUNTER_PREPARE_ERROR =  2                            [(CounterOpts) = {Name: "PrepareErrors"}];
    COUNTER_PREPARE_IMMEDIATE = 3                         [(CounterOpts) = {Name: "PrepareImmediate"}];
    COUNTER_PREPARE_SUCCESS = 4                           [(CounterOpts) = {Name: "PrepareSuccess"}];
    COUNTER_PREPARE_COMPLETE = 5                          [(CounterOpts) = {Name: "PrepareComplete"}];
    COUNTER_PREPARE_DIRTY = 6                             [(CounterOpts) = {Name: "PrepareDirty"}];
    COUNTER_PREPARE_OVERLOADED = 7                        [(CounterOpts) = {Name: "PrepareOverloaded"}];
    COUNTER_PLAN_STEP_IGNORED = 8                         [(CounterOpts) = {Name: "PlanStepIgnored"}];
    COUNTER_PLAN_STEP_ACCEPTED = 9                        [(CounterOpts) = {Name: "PlanStepAccepted"}];
    COUNTER_TX_PROGRESS_SHARD_INACTIVE = 10               [(CounterOpts) = {Name: "TxProgressShardInactive"}];
    COUNTER_TX_PROGRESS_QUEUE_EMPTY = 11                  [(CounterOpts) = {Name: "TxProgressQueueEmpty"}];
    COUNTER_TX_PROGRESS_CLEANUP = 12                      [(CounterOpts) = {Name: "TxProgressCleanup"}];
    COUNTER_TX_PROGRESS_OUTDATED = 13                     [(CounterOpts) = {Name: "TxProgressOutdated"}];
    COUNTER_TX_PROGRESS_DUPLICATE = 14                    [(CounterOpts) = {Name: "TxProgressDuplicate"}];
    COUNTER_TX_PROGRESS_DIRTY = 15                        [(CounterOpts) = {Name: "TxProgressDirty"}];
    COUNTER_TX_PROGRESS_EV = 16                           [(CounterOpts) = {Name: "TxProgressEvents"}];
    COUNTER_TX_CLEANUP_SCHEDULED = 17                     [(CounterOpts) = {Name: "TxCleanupScheduled"}];
    COUNTER_TX_PROGRESS_IDLE = 18                         [(CounterOpts) = {Name: "TxProgressIdle"}];
    COUNTER_ACK_SENT = 19                                 [(CounterOpts) = {Name: "AckSent"}];
    COUNTER_ACK_SENT_DELAYED = 20                         [(CounterOpts) = {Name: "AckSentDelayed"}];
    COUNTER_CANCEL_TX_NOTFOUND = 21                       [(CounterOpts) = {Name: "CancelTxNotFound"}];
    COUNTER_MINIKQL_PROGRAM_SIZE = 22                     [(CounterOpts) = {Name: "MiniKQLProgramSize"}];
    COUNTER_ENGINE_HOST_SELECT_ROW = 23                   [(CounterOpts) = {Name: "EngineHostRowReads"}];
    COUNTER_ENGINE_HOST_SELECT_RANGE = 24                 [(CounterOpts) = {Name: "EngineHostRangeReads"}];
    COUNTER_ENGINE_HOST_UPDATE_ROW = 25                   [(CounterOpts) = {Name: "EngineHostRowUpdates"}];
    COUNTER_ENGINE_HOST_ERASE_ROW = 26                    [(CounterOpts) = {Name: "EngineHostRowErases"}];
    COUNTER_PREPARE_CANCELLED = 27                        [(CounterOpts) = {Name: "PrepareCancelled"}];
    COUNTER_READSET_SENT_COUNT = 28                       [(CounterOpts) = {Name: "ReadsetSentCount"}];
    COUNTER_READSET_SENT_SIZE = 29                        [(CounterOpts) = {Name: "ReadsetSentSize"}];
    COUNTER_READSET_RECEIVED_COUNT = 30                   [(CounterOpts) = {Name: "ReadsetReceivedCount"}];
    COUNTER_READSET_RECEIVED_SIZE = 31                    [(CounterOpts) = {Name: "ReadsetReceivedSize"}];
    COUNTER_TX_RESULT_SIZE = 32                           [(CounterOpts) = {Name: "TxResultSize"}];
    COUNTER_LOCKS_REJECTED = 33                           [(CounterOpts) = {Name: "LocksRejected"}];
    COUNTER_LOCKS_ACQUIRED = 34                           [(CounterOpts) = {Name: "LocksAcquired"}];
    COUNTER_LOCKS_EVICTED = 35                            [(CounterOpts) = {Name: "LocksEvicted"}];
    COUNTER_LOCKS_BROKEN = 36                             [(CounterOpts) = {Name: "LocksBroken"}];
    COUNTER_LOCKS_ERASED = 37                             [(CounterOpts) = {Name: "LocksErased"}];
    COUNTER_LOCKS_REMOVED = 38                            [(CounterOpts) = {Name: "LocksRemoved"}];
    COUNTER_LOCKS_REJECT_BROKEN = 39                      [(CounterOpts) = {Name: "LocksRejectBroken"}];
    COUNTER_LOCKS_LOST = 40                               [(CounterOpts) = {Name: "LocksLost"}];
    COUNTER_INACTIVE_TX_DATA_RELEASES = 41                [(CounterOpts) = {Name: "InactiveTxDataReleases"}];
    COUNTER_PIPELINE_OVERLOADED = 42                      [(CounterOpts) = {Name: "PipelineOverloaded"}];
    COUNTER_TX_PROGRESS_DELAYED = 43                      [(CounterOpts) = {Name: "TxProgressDelayed"}];
    COUNTER_TX_REORDERED = 44                             [(CounterOpts) = {Name: "TxReordered"}];
    COUNTER_TX_WAIT_ORDER = 45                            [(CounterOpts) = {Name: "TxCannotReorder"}];
    COUNTER_TX_WAIT_DATA = 46                             [(CounterOpts) = {Name: "TxWaitData"}];
    COUNTER_TX_WAIT_READ_SETS = 47                        [(CounterOpts) = {Name: "TxWaitReadSets"}];
    COUNTER_TX_WAIT_RESOURCE = 48                         [(CounterOpts) = {Name: "TxWaitResource"}];
    COUNTER_LOCKS_WHOLE_SHARD = 49                        [(CounterOpts) = {Name: "LocksWholeShard"}];
    COUNTER_ENGINE_HOST_SELECT_ROW_BYTES = 50             [(CounterOpts) = {Name: "EngineHostRowReadBytes"}];
    COUNTER_ENGINE_HOST_SELECT_RANGE_ROWS = 51            [(CounterOpts) = {Name: "EngineHostRangeReadRows"}];
    COUNTER_ENGINE_HOST_SELECT_RANGE_BYTES = 52           [(CounterOpts) = {Name: "EngineHostRangeReadBytes"}];
    COUNTER_ENGINE_HOST_UPDATE_ROW_BYTES = 53             [(CounterOpts) = {Name: "EngineHostRowUpdateBytes"}];
    COUNTER_ENGINE_HOST_ERASE_ROW_BYTES = 54              [(CounterOpts) = {Name: "EngineHostRowEraseBytes"}];
    COUNTER_PLANNED_TX_COMPLETE = 55                      [(CounterOpts) = {Name: "PlannedTxComplete"}];
    COUNTER_PREPARE_OUT_OF_SPACE = 56                     [(CounterOpts) = {Name: "PrepareOutOfSpace"}];
    COUNTER_IMMEDIATE_TX_CANCELLED = 57                   [(CounterOpts) = {Name: "ImmediateTxCancelled"}];
    COUNTER_PLANNED_TX_CANCELLED = 58                     [(CounterOpts) = {Name: "PlannedTxCancelled"}];
    COUNTER_UPLOAD_ROWS = 59                              [(CounterOpts) = {Name: "UploadRows"}];
    COUNTER_UPLOAD_ROWS_BYTES = 60                        [(CounterOpts) = {Name: "UploadRowsBytes"}];
    COUNTER_ENGINE_HOST_SELECT_RANGE_ROW_SKIPS = 61       [(CounterOpts) = {Name: "EngineHostRangeReadDeletedRowSkips"}];
    COUNTER_READ_COLUMNS_ROWS = 62                        [(CounterOpts) = {Name: "ReadColumnsRows"}];
    COUNTER_READ_COLUMNS_BYTES = 63                       [(CounterOpts) = {Name: "ReadColumnsBytes"}];
    COUNTER_SCANNED_ROWS = 64                             [(CounterOpts) = {Name: "ScannedRows"}];
    COUNTER_SCANNED_BYTES = 65                            [(CounterOpts) = {Name: "ScannedBytes"}];
    COUNTER_PROPOSE_QUEUE_EV = 66                         [(CounterOpts) = {Name: "TxProposeQueueEvents"}];
    COUNTER_BULK_UPSERT_SUCCESS = 67                      [(CounterOpts) = {Name: "BulkUpsertSuccess"}];
    COUNTER_BULK_UPSERT_ERROR = 68                        [(CounterOpts) = {Name: "BulkUpsertError"}];
    COUNTER_BULK_UPSERT_OVERLOADED = 69                   [(CounterOpts) = {Name: "BulkUpsertOverloaded"}];
    COUNTER_ERASE_ROWS_SUCCESS = 70                       [(CounterOpts) = {Name: "EraseRowsSuccess"}];
    COUNTER_ERASE_ROWS_ERROR = 71                         [(CounterOpts) = {Name: "EraseRowsError"}];
    COUNTER_ERASE_ROWS_OVERLOADED = 72                    [(CounterOpts) = {Name: "EraseRowsOverloaded"}];
    COUNTER_ERASE_ROWS = 73                               [(CounterOpts) = {Name: "EraseRows"}];
    COUNTER_BUILD_DEPENDENCIES_USEC = 74                  [(CounterOpts) = {Name: "BuildDependenciesMicrosec"}];
    COUNTER_APPLY_LOCKS_USEC = 75                         [(CounterOpts) = {Name: "ApplyLocksMicrosec"}];
    COUNTER_TX_NOT_ENOUGH_MEMORY_1 = 76                   [(CounterOpts) = {Name: "TxNotEnoughMemory1"}];
    COUNTER_TX_NOT_ENOUGH_MEMORY_2 = 77                   [(CounterOpts) = {Name: "TxNotEnoughMemory2"}];
    COUNTER_TX_NOT_ENOUGH_MEMORY_3 = 78                   [(CounterOpts) = {Name: "TxNotEnoughMemory3"}];
    COUNTER_TX_NOT_ENOUGH_MEMORY_4 = 79                   [(CounterOpts) = {Name: "TxNotEnoughMemory4"}];
    COUNTER_TX_TABLET_NOT_READY = 80                      [(CounterOpts) = {Name: "TxTabletNotReady"}];
    COUNTER_TX_BACKGROUND_COMPACTION = 81                 [(CounterOpts) = {Name: "TxCompactTable"}];
    COUNTER_TX_BACKGROUND_COMPACTION_NOT_NEEDED = 82      [(CounterOpts) = {Name: "TxCompactTableNotNeeded"}];
    COUNTER_TX_BACKGROUND_COMPACTION_FAILED_BORROWED = 83 [(CounterOpts) = {Name: "TxCompactTableFailedBorrowed"}];
    COUNTER_TX_BACKGROUND_COMPACTION_FAILED_START = 84    [(CounterOpts) = {Name: "TxCompactTableFailedStart"}];
    COUNTER_FULL_COMPACTION_DONE = 85                     [(CounterOpts) = {Name: "FullCompactionCount"}];
    COUNTER_TX_BACKGROUND_COMPACTION_FAILED_LOANED = 86   [(CounterOpts) = {Name: "TxCompactTableFailedLoaned"}];
    COUNTER_TX_COMPACT_BORROWED = 87                      [(CounterOpts) = {Name: "TxCompactBorrowed"}];
    COUNTER_CHANGE_RECORDS_ENQUEUED = 88                  [(CounterOpts) = {Name: "ChangeRecordsEnqueued"}];
    COUNTER_CHANGE_RECORDS_REMOVED = 89                   [(CounterOpts) = {Name: "ChangeRecordsRemoved"}];
    COUNTER_READ_ITERATOR_NO_QUOTA = 90                   [(CounterOpts) = {Name: "ReadIteratorNoQuota"}];
    COUNTER_READ_ITERATOR_MAX_ROWS_REACHED = 91           [(CounterOpts) = {Name: "ReadIteratorMaxRowsReached"}];
    COUNTER_READ_ITERATOR_MAX_TIME_REACHED = 92           [(CounterOpts) = {Name: "ReadIteratorMaxTimeReached"}];
    COUNTER_READ_ITERATOR_ROWS_READ = 93                  [(CounterOpts) = {Name: "ReadIteratorRowsRead"}];
    COUNTER_READ_ITERATOR_BYTES_READ = 94                 [(CounterOpts) = {Name: "ReadIteratorBytesRead"}];
    COUNTER_READ_ITERATOR_CANCEL = 95                     [(CounterOpts) = {Name: "ReadIteratorCancel"}];
    COUNTER_CHANGE_EXCHANGE_SUCCESSFUL_HANDSHAKES = 96    [(CounterOpts) = {Name: "ChangeExchangeSuccessfulHandshakes"}];
    COUNTER_CHANGE_EXCHANGE_REJECTED_HANDSHAKES = 97      [(CounterOpts) = {Name: "ChangeExchangeRejectedHandshakes"}];
    COUNTER_CHANGE_EXCHANGE_SUCCESSFUL_APPLY = 98         [(CounterOpts) = {Name: "ChangeExchangeSuccessfulApply"}];
    COUNTER_CHANGE_EXCHANGE_REJECTED_APPLY = 99           [(CounterOpts) = {Name: "ChangeExchangeRejectedApply"}];
    COUNTER_CHANGE_RECORDS_SENT = 100                     [(CounterOpts) = {Name: "ChangeRecordsSent"}];
    COUNTER_CHANGE_RECORDS_FORGOTTEN = 101                [(CounterOpts) = {Name: "ChangeRecordsForgotten"}];
    COUNTER_WRITE_REQUEST = 102                           [(CounterOpts) = {Name: "WriteRequests"}];
    COUNTER_WRITE_IMMEDIATE = 103                         [(CounterOpts) = {Name: "WriteImmediate"}];
    COUNTER_WRITE_COMPLETE = 104                          [(CounterOpts) = {Name: "WriteComplete"}];
    COUNTER_WRITE_SUCCESS = 105                           [(CounterOpts) = {Name: "WriteSuccess"}];
    COUNTER_WRITE_ERROR = 106                             [(CounterOpts) = {Name: "WriteError"}];   
    COUNTER_WRITE_OVERLOADED = 107                        [(CounterOpts) = {Name: "WriteOverloaded"}];   
    COUNTER_WRITE_OUT_OF_SPACE = 108                      [(CounterOpts) = {Name: "WriteOutOfSpace"}];
    COUNTER_WRITE_CANCELLED = 109                         [(CounterOpts) = {Name: "WriteCancelled"}];
    COUNTER_WRITE_ROWS = 110                              [(CounterOpts) = {Name: "WriteRows"}];
    COUNTER_WRITE_BYTES = 111                             [(CounterOpts) = {Name: "WriteBytes"}];
}

enum EPercentileCounters {
    option (GlobalCounterOpts) = {
        Ranges: { Value: 500         Name: "(1) < 500 us"      }
        Ranges: { Value: 1000        Name: "(2) 0.5-1 ms"      }
        Ranges: { Value: 2000        Name: "(3) 1-2 ms"        }
        Ranges: { Value: 4000        Name: "(4) 2-4 ms"        }
        Ranges: { Value: 8000        Name: "(5) 4-8 ms"        }
        Ranges: { Value: 16000       Name: "(6) 8-16 ms"       }
        Ranges: { Value: 32000       Name: "(7) 16-32 ms"      }
        Ranges: { Value: 64000       Name: "(8) 32-64 ms"      }
        Ranges: { Value: 128000      Name: "(9) 64-128 ms"     }
        Ranges: { Value: 256000      Name: "(10) 128-256 ms"   }
        Ranges: { Value: 512000      Name: "(11) 256-512 ms"   }
        Ranges: { Value: 1024000     Name: "(12) 512-1024 ms"  }
        Ranges: { Value: 2000000     Name: "(13) 1024-2000 ms" }
        Ranges: { Value: 4000000     Name: "(14) 2-4 s"        }
        Ranges: { Value: 8000000     Name: "(15) 4-8 s"        }
        Ranges: { Value: 16000000    Name: "(16) 8-16 s"       }
        Ranges: { Value: 32000000    Name: "(17) 16-32 s"      }
    };

    COUNTER_PREPARE_SUCCESS_COMPLETE_LATENCY = 0 [(CounterOpts) = {
        Name: "PrepareSuccessCompleteLatency"
    }];

    COUNTER_ACCEPTED_PLAN_STEP_COMPLETE_LATENCY = 1 [(CounterOpts) = {
        Name: "AcceptedPlanStepCompleteLatency"
    }];

    COUNTER_TX_PROGRESS_COMPLETE_LATENCY = 2 [(CounterOpts) = {
        Name: "TxProgressCompleteLatency"
    }];

    COUNTER_PLAN_TO_EXECUTE_LATENCY = 3 [(CounterOpts) = {
        Name: "PlanToExecuteLatency"
    }];

    COUNTER_PREPARE_EXEC_LATENCY = 4 [(CounterOpts) = {
        Name: "PrepareExecLatency"
    }];

    COUNTER_TX_PROGRESS_EXEC_LATENCY = 5 [(CounterOpts) = {
        Name: "TxProgressExecLatency"
    }];

    COUNTER_LOCKS_ACTIVE_PER_SHARD = 6 [(CounterOpts) = {
        Name: "LocksActivePerShard",
        Ranges: { Value: 0        Name: "0"           }
        Ranges: { Value: 10       Name: "1-10"        }
        Ranges: { Value: 100      Name: "10-100"      }
        Ranges: { Value: 500      Name: "100-500"     }
        Ranges: { Value: 1000     Name: "500-1000"    }
        Ranges: { Value: 4000     Name: "1000-4000"   }
        Ranges: { Value: 8000     Name: "4000-8000"   }
        Ranges: { Value: 12000    Name: "8000-12000"  }
        Ranges: { Value: 16000    Name: "12000-16000" }
    }];

    COUNTER_LOCKS_BROKEN_PER_SHARD = 7 [(CounterOpts) = {
        Name: "LocksBrokenPerShard",
        Ranges: { Value: 0        Name: "0"           }
        Ranges: { Value: 10       Name: "1-10"        }
        Ranges: { Value: 100      Name: "10-100"      }
        Ranges: { Value: 500      Name: "100-500"     }
        Ranges: { Value: 1000     Name: "500-1000"    }
        Ranges: { Value: 4000     Name: "1000-4000"   }
        Ranges: { Value: 8000     Name: "4000-8000"   }
        Ranges: { Value: 12000    Name: "8000-12000"  }
        Ranges: { Value: 16000    Name: "12000-16000" }
    }];

    COUNTER_LOCKS_LIFETIME = 8 [(CounterOpts) = {
        Name: "LocksLifetime"
    }];

    COUNTER_PROPOSE_QUEUE_LATENCY = 9 [(CounterOpts) = {
        Name: "ProposeQueueLatency"
    }];

    COUNTER_HIST_RANGE_READ_BYTES = 10 [(CounterOpts) = {
        Name: "HIST(DataShard/EngineHostRangeReadBytes)",
        Ranges: { Value: 0            Name: "0"           }
        Ranges: { Value: 1024         Name: "1024"        }
        Ranges: { Value: 2048         Name: "2048"        }
        Ranges: { Value: 4096         Name: "4096"        }
        Ranges: { Value: 8192         Name: "8192"        }
        Ranges: { Value: 16384        Name: "16384"       }
        Ranges: { Value: 32768        Name: "32768"       }
        Ranges: { Value: 65536        Name: "65536"       }
        Ranges: { Value: 131072       Name: "131072"      }
        Ranges: { Value: 262144       Name: "262144"      }
        Ranges: { Value: 524288       Name: "524288"      }
        Ranges: { Value: 1048576      Name: "1048576"     }
        Ranges: { Value: 2097152      Name: "2097152"     }
        Ranges: { Value: 4194304      Name: "4194304"     }
        Ranges: { Value: 8388608      Name: "8388608"     }
        Ranges: { Value: 16777216     Name: "16777216"    }
        Ranges: { Value: 33554432     Name: "33554432"    }
        Ranges: { Value: 67108864     Name: "67108864"    }
        Ranges: { Value: 134217728    Name: "134217728"   }
    }];

    COUNTER_SELECT_ROWS_PER_REQUEST = 11 [(CounterOpts) = {
        Name: "SelectRowsPerRequest",
        Ranges: { Value: 0         Name: "0"      }
        Ranges: { Value: 1         Name: "1"      }
        Ranges: { Value: 10        Name: "10"     }
        Ranges: { Value: 100       Name: "100"    }
        Ranges: { Value: 1000      Name: "1000"   }
        Ranges: { Value: 10000     Name: "10000"  }
        Ranges: { Value: 100000    Name: "100000" }
    }];

    COUNTER_RANGE_READ_ROWS_PER_REQUEST = 12 [(CounterOpts) = {
        Name: "RangeReadRowsPerRequest",
        Ranges: { Value: 0         Name: "0"      }
        Ranges: { Value: 1         Name: "1"      }
        Ranges: { Value: 10        Name: "10"     }
        Ranges: { Value: 100       Name: "100"    }
        Ranges: { Value: 1000      Name: "1000"   }
        Ranges: { Value: 10000     Name: "10000"  }
        Ranges: { Value: 100000    Name: "100000" }
    }];

    COUNTER_PLAN_QUEUE_LATENCY_MS = 13 [(CounterOpts) = {
        Name: "PlanQueueLatencyMs",
        Ranges: { Value: 0        Name: "0"},
        Ranges: { Value: 1        Name: "1"},
        Ranges: { Value: 2        Name: "2"},
        Ranges: { Value: 5        Name: "5"},
        Ranges: { Value: 10       Name: "10"},
        Ranges: { Value: 25       Name: "25"},
        Ranges: { Value: 50       Name: "50"},
        Ranges: { Value: 125      Name: "125"},
        Ranges: { Value: 250      Name: "250"},
        Ranges: { Value: 500      Name: "500"},
        Ranges: { Value: 1000     Name: "1000"},
        Ranges: { Value: 2000     Name: "2000"},
        Ranges: { Value: 5000     Name: "5000"},
        Ranges: { Value: 10000    Name: "10000"},
        Ranges: { Value: 15000    Name: "15000"},
        Ranges: { Value: 30000    Name: "30000"}
    }];

    COUNTER_WAIT_DEPENDENCIES_LATENCY_MS = 14 [(CounterOpts) = {
        Name: "WaitDependenciesLatencyMs",
        Ranges: { Value: 0        Name: "0"},
        Ranges: { Value: 1        Name: "1"},
        Ranges: { Value: 2        Name: "2"},
        Ranges: { Value: 5        Name: "5"},
        Ranges: { Value: 10       Name: "10"},
        Ranges: { Value: 25       Name: "25"},
        Ranges: { Value: 50       Name: "50"},
        Ranges: { Value: 125      Name: "125"},
        Ranges: { Value: 250      Name: "250"},
        Ranges: { Value: 500      Name: "500"},
        Ranges: { Value: 1000     Name: "1000"},
        Ranges: { Value: 2000     Name: "2000"},
        Ranges: { Value: 5000     Name: "5000"},
        Ranges: { Value: 10000    Name: "10000"},
        Ranges: { Value: 15000    Name: "15000"},
        Ranges: { Value: 30000    Name: "30000"}
    }];

    COUNTER_WAIT_READSETS_LATENCY_MS = 15 [(CounterOpts) = {
        Name: "WaitReadSetsLatencyMs",
        Ranges: { Value: 0        Name: "0"},
        Ranges: { Value: 1        Name: "1"},
        Ranges: { Value: 2        Name: "2"},
        Ranges: { Value: 5        Name: "5"},
        Ranges: { Value: 10       Name: "10"},
        Ranges: { Value: 25       Name: "25"},
        Ranges: { Value: 50       Name: "50"},
        Ranges: { Value: 125      Name: "125"},
        Ranges: { Value: 250      Name: "250"},
        Ranges: { Value: 500      Name: "500"},
        Ranges: { Value: 1000     Name: "1000"},
        Ranges: { Value: 2000     Name: "2000"},
        Ranges: { Value: 5000     Name: "5000"},
        Ranges: { Value: 10000    Name: "10000"},
        Ranges: { Value: 15000    Name: "15000"},
        Ranges: { Value: 30000    Name: "30000"}
    }];

    COUNTER_WAIT_EXECUTE_LATENCY_MS = 16 [(CounterOpts) = {
        Name: "WaitExecuteLatencyMs",
        Ranges: { Value: 0        Name: "0"},
        Ranges: { Value: 1        Name: "1"},
        Ranges: { Value: 2        Name: "2"},
        Ranges: { Value: 5        Name: "5"},
        Ranges: { Value: 10       Name: "10"},
        Ranges: { Value: 25       Name: "25"},
        Ranges: { Value: 50       Name: "50"},
        Ranges: { Value: 125      Name: "125"},
        Ranges: { Value: 250      Name: "250"},
        Ranges: { Value: 500      Name: "500"},
        Ranges: { Value: 1000     Name: "1000"},
        Ranges: { Value: 2000     Name: "2000"},
        Ranges: { Value: 5000     Name: "5000"},
        Ranges: { Value: 10000    Name: "10000"},
        Ranges: { Value: 15000    Name: "15000"},
        Ranges: { Value: 30000    Name: "30000"}
    }];

    COUNTER_WAIT_TOTAL_LATENCY_MS = 17 [(CounterOpts) = {
        Name: "WaitTotalLatencyMs",
        Ranges: { Value: 0        Name: "0"},
        Ranges: { Value: 1        Name: "1"},
        Ranges: { Value: 2        Name: "2"},
        Ranges: { Value: 5        Name: "5"},
        Ranges: { Value: 10       Name: "10"},
        Ranges: { Value: 25       Name: "25"},
        Ranges: { Value: 50       Name: "50"},
        Ranges: { Value: 125      Name: "125"},
        Ranges: { Value: 250      Name: "250"},
        Ranges: { Value: 500      Name: "500"},
        Ranges: { Value: 1000     Name: "1000"},
        Ranges: { Value: 2000     Name: "2000"},
        Ranges: { Value: 5000     Name: "5000"},
        Ranges: { Value: 10000    Name: "10000"},
        Ranges: { Value: 15000    Name: "15000"},
        Ranges: { Value: 30000    Name: "30000"}
    }];

    COUNTER_READ_ITERATOR_LIFETIME_MS = 18 [(CounterOpts) = {
        Name: "ReadIteratorLifetimeMs",
        Ranges: { Value: 0        Name: "0"},
        Ranges: { Value: 1        Name: "1"},
        Ranges: { Value: 2        Name: "2"},
        Ranges: { Value: 5        Name: "5"},
        Ranges: { Value: 10       Name: "10"},
        Ranges: { Value: 25       Name: "25"},
        Ranges: { Value: 50       Name: "50"},
        Ranges: { Value: 125      Name: "125"},
        Ranges: { Value: 250      Name: "250"},
        Ranges: { Value: 500      Name: "500"},
        Ranges: { Value: 1000     Name: "1000"},
    }];

    COUNTER_READ_ITERATOR_ITERATION_LATENCY_MS = 19 [(CounterOpts) = {
        Name: "ReadIteratorIterationLatencyMs",
        Ranges: { Value: 0        Name: "0"},
        Ranges: { Value: 1        Name: "1"},
        Ranges: { Value: 2        Name: "2"},
        Ranges: { Value: 5        Name: "5"},
        Ranges: { Value: 10       Name: "10"},
    }];

    COUNTER_WRITE_SUCCESS_COMPLETE_LATENCY = 20 [(CounterOpts) = {
        Name: "WriteSuccessCompleteLatency"
    }];

    COUNTER_WRITE_EXEC_LATENCY = 21 [(CounterOpts) = {
        Name: "WriteExecLatency"
    }];    
}

enum ETxTypes {
    TXTYPE_INIT = 0                                       [(TxTypeOpts) = {Name: "TxInit"}];
    TXTYPE_READSET = 1                                    [(TxTypeOpts) = {Name: "TxReadSet"}];
    TXTYPE_PLAN_STEP = 2                                  [(TxTypeOpts) = {Name: "TxPlanStep"}];
    TXTYPE_PROPOSE_DATA = 3                               [(TxTypeOpts) = {Name: "TxProposeData"}];
    TXTYPE_PROPOSE_SCHEME = 4                             [(TxTypeOpts) = {Name: "TxProposeScheme"}];
    TXTYPE_PROGRESS_START = 5                             [(TxTypeOpts) = {Name: "TxProgressStart"}];
    TXTYPE_PROGRESS_WAIT = 6                              [(TxTypeOpts) = {Name: "TxProgressWait"}];
    TXTYPE_PROGRESS_COMPLETE = 7                          [(TxTypeOpts) = {Name: "TxProgressComplete"}];
    TXTYPE_GET_STARD_STATE = 8                            [(TxTypeOpts) = {Name: "TxGetShardState"}];
    TXTYPE_PROGRESS_RESEND_RS = 9                         [(TxTypeOpts) = {Name: "TxProgressResendRS"}];
    TXTYPE_CANCEL_TX_PROPOSAL = 10                        [(TxTypeOpts) = {Name: "TxCancelTxProposal"}];
    TXTYPE_CANCEL_BACKUP = 11                             [(TxTypeOpts) = {Name: "TxCancelBackup"}];
    TXTYPE_MONITORING = 12                                [(TxTypeOpts) = {Name: "TxMonitoring"}];
    TXTYPE_SCHEMA_CHANGED = 13                            [(TxTypeOpts) = {Name: "TxSchemaChanged"}];
    TXTYPE_INIT_SPLIT_MERGE_DESTINATION = 14              [(TxTypeOpts) = {Name: "TxInitSplitMergeDestination"}];
    TXTYPE_SPLIT_TRANSFER_SNAPSHOT = 15                   [(TxTypeOpts) = {Name: "TxSplitTransferSnapshot"}];
    TXTYPE_GET_TABLE_STATS = 16                           [(TxTypeOpts) = {Name: "TxGetTableStats"}];
    TXTYPE_INITIATE_BORROWED_PARTS_RETURN = 17            [(TxTypeOpts) = {Name: "TxInitiateBorrowedPartsReturn"}];
    TXTYPE_RETURN_BORROWED_PART = 18                      [(TxTypeOpts) = {Name: "TxReturnBorrowedPart"}];
    TXTYPE_RETURN_BORROWED_PART_ACK = 19                  [(TxTypeOpts) = {Name: "TxReturnBorrowedPartAck"}];
    TXTYPE_GO_OFFLINE = 20                                [(TxTypeOpts) = {Name: "TxGoOffline"}];
    TXTYPE_SPLIT = 21                                     [(TxTypeOpts) = {Name: "TxSplit"}];
    TXTYPE_START_SPLIT = 22                               [(TxTypeOpts) = {Name: "TxStartSplit"}];
    TXTYPE_SPLIT_SNASHOT_COMPLETE = 23                    [(TxTypeOpts) = {Name: "TxSplitSnapshotComplete"}];
    TXTYPE_SPLIT_TRANSFER_SNAPSHOT_ACK = 24               [(TxTypeOpts) = {Name: "TxTransferSnapshotAck"}];
    TXTYPE_SPLIT_PARTITIONING_CHANGED = 25                [(TxTypeOpts) = {Name: "TxSplitPartitioningChanged"}];
    TXTYPE_INIT_SCHEMA = 26                               [(TxTypeOpts) = {Name: "TxInitSchema"}];
    TXTYPE_COPY_TABLE_SNAPSHOT_COMPLETE = 27              [(TxTypeOpts) = {Name: "TxCopyTableSnapshotComplete"}];
    TXTYPE_FULL_SCAN_COMPLETE = 28                        [(TxTypeOpts) = {Name: "TxFullScanComplete"}];
    TXTYPE_STREAM_RESPONSE_QUOTA = 29                     [(TxTypeOpts) = {Name: "TxStreamResponseQuota"}];
    TXTYPE_UNDELIVERED = 30                               [(TxTypeOpts) = {Name: "TxUndelivered"}];
    TXTYPE_DISCONNECTED = 31                              [(TxTypeOpts) = {Name: "TxDisconnected"}];
    TXTYPE_S3_LISTING = 32                                [(TxTypeOpts) = {Name: "TxS3Listing"}];
    TXTYPE_INITIATE_STATS_UPDATE = 33                     [(TxTypeOpts) = {Name: "TTxInitiateStatsUpdate"}];
    TXTYPE_CHECK_IN_READ_SETS = 34                        [(TxTypeOpts) = {Name: "TTxCheckInReadSets"}];
    TXTYPE_REMOVE_OLD_IN_READ_SETS = 35                   [(TxTypeOpts) = {Name: "TTxRemoveOldInReadSets"}];
    TXTYPE_UPLOAD_ROWS = 36                               [(TxTypeOpts) = {Name: "TTxUploadRows"}];
    TXTYPE_STORE_TABLE_PATH = 37                          [(TxTypeOpts) = {Name: "TTxStoreTablePath"}];
    TXTYPE_READ_COLUMNS = 38                              [(TxTypeOpts) = {Name: "TTxReadColumns"}];
    TXTYPE_PROPOSE = 39                                   [(TxTypeOpts) = {Name: "TxPropose"}];
    TXTYPE_STORE_SCAN_STATE = 40                          [(TxTypeOpts) = {Name: "TxStoreScanState"}];
    TXTYPE_INIT_SCHEMA_DEFAULTS = 41                      [(TxTypeOpts) = {Name: "TxInitSchemaDefaults"}];
    TXTYPE_REFRESH_VOLATILE_SNAPSHOT = 42                 [(TxTypeOpts) = {Name: "TxRefreshVolatileSnapshot"}];
    TXTYPE_DISCARD_VOLATILE_SNAPSHOT = 43                 [(TxTypeOpts) = {Name: "TxDiscardVolatileSnapshot"}];
    TXTYPE_CLEANUP_REMOVED_SNAPSHOTS = 44                 [(TxTypeOpts) = {Name: "TxCleanupRemovedSnapshots"}];
    TXTYPE_MIGRATE_SCHEMESHARD = 45                       [(TxTypeOpts) = {Name: "TxMigrateSchemeShard"}];
    TXTYPE_GET_S3_UPLOAD_ID = 46                          [(TxTypeOpts) = {Name: "TxGetS3UploadId"}];
    TXTYPE_STORE_S3_UPLOAD_ID = 47                        [(TxTypeOpts) = {Name: "TxStoreS3UploadId"}];
    TXTYPE_ERASE_ROWS = 48                                [(TxTypeOpts) = {Name: "TxEraseRows"}];
    TXTYPE_RELEASE_SNAPSHOT_REFERENCE = 49                [(TxTypeOpts) = {Name: "TxReleaseSnaphotReference"}];
    TXTYPE_STOP_GUARD = 50                                [(TxTypeOpts) = {Name: "TxStopGuard"}];
    TXTYPE_GET_S3_DOWNLOAD_INFO = 51                      [(TxTypeOpts) = {Name: "TxGetS3DownloadInfo"}];
    TXTYPE_STORE_S3_DOWNLOAD_INFO = 52                    [(TxTypeOpts) = {Name: "TxStoreS3DownloadInfo"}];
    TXTYPE_S3_UPLOAD_ROWS = 53                            [(TxTypeOpts) = {Name: "TxS3UploadRows"}];
    TXTYPE_PERSIST_SUBDOMAIN_PATH_ID = 54                 [(TxTypeOpts) = {Name: "TxPersistSubDomainPathId"}];
    TXTYPE_PERSIST_SUBDOMAIN_OUT_OF_SPACE = 55            [(TxTypeOpts) = {Name: "TxPersistSubDomainOutOfSpace"}];
    TXTYPE_REQUEST_CHANGE_RECORDS = 56                    [(TxTypeOpts) = {Name: "TxRequestChangeRecords"}];
    TXTYPE_REMOVE_CHANGE_RECORDS = 57                     [(TxTypeOpts) = {Name: "TxRemoveChangeRecords"}];
    TXTYPE_CHANGE_EXCHANGE_HANDSHAKE = 58                 [(TxTypeOpts) = {Name: "TxChangeExchangeHandshake"}];
    TXTYPE_APPLY_CHANGE_RECORDS = 59                      [(TxTypeOpts) = {Name: "TxApplyChangeRecords"}];
    TXTYPE_EXECUTE_MVCC_STATE_CHANGE = 60                 [(TxTypeOpts) = {Name: "TxExecuteMvccStateChange"}];
    TXTYPE_CHANGE_S3_UPLOAD_STATUS = 61                   [(TxTypeOpts) = {Name: "TxChangeS3UploadStatus"}];
    TXTYPE_ACTIVATE_CHANGE_SENDER = 62                    [(TxTypeOpts) = {Name: "TxActivateChangeSender"}];
    TXTYPE_ACTIVATE_CHANGE_SENDER_ACK = 63                [(TxTypeOpts) = {Name: "TxActivateChangeSenderAck"}];
    TXTYPE_CLEANUP = 64                                   [(TxTypeOpts) = {Name: "TxCleanup"}];
    TXTYPE_COMPACT_BORROWED = 65                          [(TxTypeOpts) = {Name: "TxCompactBorrowed"}];
    TXTYPE_COMPACT_TABLE = 66                             [(TxTypeOpts) = {Name: "TxCompactTable"}];
    TXTYPE_CHANGE_EXCHANGE_SPLIT_ACK = 67                 [(TxTypeOpts) = {Name: "TxChangeExchangeSplitAck"}];
    TXTYPE_APPLY_REPLICATION_CHANGES = 68                 [(TxTypeOpts) = {Name: "TxApplyReplicationChanges"}];
    TXTYPE_READ = 69                                      [(TxTypeOpts) = {Name: "TxRead"}];
    TXTYPE_SPLIT_REPLICATION_SOURCE_OFFSETS = 70          [(TxTypeOpts) = {Name: "TxSplitReplicationSourceOffsets"}];
    TXTYPE_REMOVE_LOCK = 71                               [(TxTypeOpts) = {Name: "TxRemoveLock"}];
    TXTYPE_REMOVE_LOCK_CHANGE_RECORDS = 72                [(TxTypeOpts) = {Name: "TxRemoveLockChangeRecords"}];
    TXTYPE_VOLATILE_TX_COMMIT = 73                        [(TxTypeOpts) = {Name: "TxVolatileTxCommit"}];
    TXTYPE_VOLATILE_TX_ABORT = 74                         [(TxTypeOpts) = {Name: "TxVolatileTxAbort"}];
    TXTYPE_CDC_STREAM_SCAN_RUN  = 75                      [(TxTypeOpts) = {Name: "TTxCdcStreamScanRun"}];
    TXTYPE_CDC_STREAM_SCAN_PROGRESS = 76                  [(TxTypeOpts) = {Name: "TTxCdcStreamScanProgress"}];
    TXTYPE_FIND_WRITE_CONFLICTS = 77                      [(TxTypeOpts) = {Name: "TTxFindWriteConflicts"}];
    TXTYPE_UPDATE_FOLLOWER_READ_EDGE = 78                 [(TxTypeOpts) = {Name: "TxUpdateFollowerReadEdge"}];
    TXTYPE_CDC_STREAM_EMIT_HEARTBEATS = 79                [(TxTypeOpts) = {Name: "TTxCdcStreamEmitHeartbeats"}];
    TXTYPE_CLEANUP_VOLATILE = 80                          [(TxTypeOpts) = {Name: "TxCleanupVolatile"}];
    TXTYPE_PLAN_PREDICTED_TXS = 81                        [(TxTypeOpts) = {Name: "TxPlanPredictedTxs"}];
    TXTYPE_WRITE = 82                                     [(TxTypeOpts) = {Name: "TxWrite"}];
}
