import "ydb/core/protos/counters.proto";

package NKikimr.NPQ;

option java_package = "ru.yandex.kikimr.proto";

option (TabletTypeName) = "PQ"; // Used as prefix for all counters

enum ECumulativeCounters {
    COUNTER_PQ_BAD_REQUEST = 0                                       [(CounterOpts) = {Name: "BadRequest"}];
    COUNTER_PQ_INITIALIZING = 1                                      [(CounterOpts) = {Name: "Initializing"}];

    COUNTER_PQ_CREATE_SESSION_OK = 2                                 [(CounterOpts) = {Name: "CreateSessionOk"}];
    COUNTER_PQ_CREATE_SESSION_ERROR = 3                              [(CounterOpts) = {Name: "CreateSessionError"}];

    COUNTER_PQ_DELETE_SESSION_OK = 4                                 [(CounterOpts) = {Name: "DeleteSessionOk"}];
    COUNTER_PQ_DELETE_SESSION_ERROR = 5                              [(CounterOpts) = {Name: "DeleteSessionError"}];

    COUNTER_PQ_SET_CLIENT_OFFSET_OK = 6                              [(CounterOpts) = {Name: "SetClientOffsetOk"}];
    COUNTER_PQ_SET_CLIENT_OFFSET_ERROR = 7                           [(CounterOpts) = {Name: "SetClientOffsetError"}];

    COUNTER_PQ_GET_CLIENT_OFFSET_OK = 8                              [(CounterOpts) = {Name: "GetClientOffsetOk"}];
    COUNTER_PQ_GET_CLIENT_OFFSET_ERROR = 9                           [(CounterOpts) = {Name: "GetClientOffsetError"}];

    COUNTER_PQ_READ_OK = 10                                          [(CounterOpts) = {Name: "ReadOk"}];
    COUNTER_PQ_READ_ERROR = 11                                       [(CounterOpts) = {Name: "ReadError"}];
    COUNTER_PQ_READ_ERROR_NO_SESSION = 12                            [(CounterOpts) = {Name: "ReadErrorNoSession"}];
    COUNTER_PQ_READ_ERROR_SMALL_OFFSET = 13                          [(CounterOpts) = {Name: "ReadErrorSmallOffset"}];
    COUNTER_PQ_READ_ERROR_BIG_OFFSET = 14                            [(CounterOpts) = {Name: "ReadErrorBigOffset"}];
    COUNTER_PQ_READ_ERROR_IN_PROGRESS = 15                           [(CounterOpts) = {Name: "ReadErrorInProgress"}];
    COUNTER_PQ_READ_HEAD_ONLY_OK = 16                                [(CounterOpts) = {Name: "ReadHeadOnlyOk"}];
    COUNTER_PQ_READ_SUBSCRIPTION_OK = 17                             [(CounterOpts) = {Name: "ReadSubscriptionOk"}];
    COUNTER_PQ_READ_SUBSCRIPTION_ERROR = 18                          [(CounterOpts) = {Name: "ReadSubscriptionError"}];
    COUNTER_PQ_READ_SUBSCRIPTION_TIMEOUT = 19                        [(CounterOpts) = {Name: "ReadSubscriptionTimeout"}];
    COUNTER_PQ_READ_BYTES = 20                                       [(CounterOpts) = {Name: "BytesRead"}];

    COUNTER_PQ_WRITE_BYTES_OK = 21                                   [(CounterOpts) = {Name: "BytesWriteOk"}];
    COUNTER_PQ_WRITE_BYTES_ALREADY = 22                              [(CounterOpts) = {Name: "BytesWriteAlready"}];
    COUNTER_PQ_WRITE_BYTES_ERROR = 23                                [(CounterOpts) = {Name: "BytesWriteError"}];

    COUNTER_PQ_WRITE_OK = 24                                         [(CounterOpts) = {Name: "WriteOk"}];
    COUNTER_PQ_WRITE_ALREADY = 25                                    [(CounterOpts) = {Name: "WriteAlready"}];
    COUNTER_PQ_WRITE_ERROR = 26                                      [(CounterOpts) = {Name: "WriteError"}];

    COUNTER_PQ_WRITE_CYCLE_BYTES_TOTAL = 27                          [(CounterOpts) = {Name: "BytesWriteCycleTotal"}];

    COUNTER_PQ_WRITE_TIMESTAMP_CACHE_HIT = 28                        [(CounterOpts) = {Name: "TimestampWriteCacheHit"}];
    COUNTER_PQ_WRITE_TIMESTAMP_CACHE_MISS = 29                       [(CounterOpts) = {Name: "TimestampWriteCacheMiss"}];
    COUNTER_PQ_WRITE_TIMESTAMP_ERROR = 30                            [(CounterOpts) = {Name: "TimestampWriteReadError"}];
    COUNTER_PQ_WRITE_TIMESTAMP_OFFSET_IS_LOST = 31                   [(CounterOpts) = {Name: "TimestampWriteOffsetIsLost"}];

    COUNTER_PQ_SID_CREATED = 32                                      [(CounterOpts) = {Name: "SourceIdCreated"}];

    COUNTER_PQ_WRITE_BYTES_SMALL_OFFSET = 33                         [(CounterOpts) = {Name: "BytesWriteSmallOffset"}];
    COUNTER_PQ_WRITE_SMALL_OFFSET = 34                               [(CounterOpts) = {Name: "WriteSmallOffset"}];

    COUNTER_PQ_TABLET_CPU_USAGE = 35                                 [(CounterOpts) = {Name: "CPUUsage"}];
    COUNTER_PQ_TABLET_NETWORK_BYTES_USAGE = 36                       [(CounterOpts) = {Name: "NetworkUsage"}];
}

enum ESimpleCounters {
    COUNTER_PQ_TABLET_CACHE_SIZE = 0                                 [(CounterOpts) = {Name: "TabletCacheSizeBytes"}];
    COUNTER_PQ_TABLET_CACHE_COUNT = 1                                [(CounterOpts) = {Name: "TabletCacheSizeBlobs"}];
    COUNTER_PQ_TABLET_CACHED_ON_READ = 2                             [(CounterOpts) = {Name: "TabletCachedOnRead"}];
    COUNTER_PQ_TABLET_CACHED_ON_WRATE = 3                            [(CounterOpts) = {Name: "TabletCachedOnWrite"}];
    COUNTER_PQ_TABLET_RESERVED_BYTES_SIZE = 4                        [(CounterOpts) = {Name: "ReservedBytesSize"}];

    COUNTER_PQ_TABLET_OPENED_PIPES = 5                               [(CounterOpts) = {Name: "OpenedPipes"}];
    COUNTER_PQ_TABLET_INFLIGHT = 6                                   [(CounterOpts) = {Name: "RequestsInflight"}];

}

enum EPercentileCounters {
    option (GlobalCounterOpts) = {
        Ranges { Value: 0      Name: "0 ms"      }
        Ranges { Value: 50     Name: "50 ms"     }
        Ranges { Value: 100    Name: "100 ms"    }
        Ranges { Value: 200    Name: "200 ms"    }
        Ranges { Value: 300    Name: "300 ms"    }
        Ranges { Value: 400    Name: "400 ms"    }
        Ranges { Value: 500    Name: "500 ms"    }
        Ranges { Value: 750    Name: "750 ms"    }
        Ranges { Value: 1000   Name: "1000 ms"   }
        Ranges { Value: 1500   Name: "1500 ms"   }
        Ranges { Value: 2000   Name: "2000 ms"   }
        Ranges { Value: 5000   Name: "5000 ms"   }
        Ranges { Value: 10000  Name: "10000 ms"  }
        Ranges { Value: 20000  Name: "20000 ms"  }
        Ranges { Value: 30000  Name: "30000 ms"  }
        Ranges { Value: 60000  Name: "60000 ms"  }
        Ranges { Value: 120000 Name: "120000 ms" }
    };

    COUNTER_LATENCY_PQ_GET_MAX_SEQ_NO = 0                            [(CounterOpts) = {Name: "LatencyGetMaxSeqNo"}];
    COUNTER_LATENCY_PQ_DELETE_SESSION = 1                            [(CounterOpts) = {Name: "LatencyDeleteSession"}];
    COUNTER_LATENCY_PQ_CREATE_SESSION = 2                            [(CounterOpts) = {Name: "LatencyCreateSession"}];
    COUNTER_LATENCY_PQ_SET_OFFSET = 3                                [(CounterOpts) = {Name: "LatencySetOffset"}];
    COUNTER_LATENCY_PQ_GET_OFFSET = 4                                [(CounterOpts) = {Name: "LatencyGetOffset"}];
    COUNTER_LATENCY_PQ_WRITE = 5                                     [(CounterOpts) = {Name: "LatencyWrite"}];
    COUNTER_LATENCY_PQ_READ = 6                                      [(CounterOpts) = {Name: "LatencyRead"}];
    COUNTER_LATENCY_PQ_READ_OK = 7                                   [(CounterOpts) = {Name: "LatencyReadOk"}];
    COUNTER_LATENCY_PQ_READ_ERROR = 8                                [(CounterOpts) = {Name: "LatencyReadError"}];
    COUNTER_LATENCY_PQ_READ_HEAD_ONLY = 9                            [(CounterOpts) = {Name: "LatencyReadHeadOnly"}];
    COUNTER_LATENCY_PQ_GET_OWNERSHIP = 10                            [(CounterOpts) = {Name: "LatencyGetOwnership"}];

    COUNTER_LATENCY_PQ_WRITE_CYCLE = 11                              [(CounterOpts) = {Name: "LatencyWriteCycle"}];
    COUNTER_LATENCY_PQ_INIT = 12                                     [(CounterOpts) = {Name: "LatencyInit"}];

    COUNTER_PQ_WRITE_CYCLE_BYTES = 13                                [(CounterOpts) = {Name: "WriteCycleBytes"
                                                                                            Ranges { Value: 0      Name: "0 Kb"      }
                                                                                            Ranges { Value: 102400      Name: "100 Kb"      }
                                                                                            Ranges { Value: 204800      Name: "200 Kb"      }
                                                                                            Ranges { Value: 524288      Name: "512 Kb"      }
                                                                                            Ranges { Value: 1048576     Name: "1 Mb"        }
                                                                                            Ranges { Value: 2097152     Name: "2 Mb"        }
                                                                                            Ranges { Value: 4194304     Name: "4 Mb"        }
                                                                                            Ranges { Value: 6291456     Name: "6 Mb"        }
                                                                                            Ranges { Value: 8388608     Name: "8 Mb"        }
                                                                                      }
                                                                     ];

    COUNTER_PQ_WRITE_NEW_BYTES = 14                                [(CounterOpts) = {Name: "WriteNewBytes"
                                                                                            Ranges { Value: 0      Name: "0 Kb"      }
                                                                                            Ranges { Value: 102400      Name: "100 Kb"      }
                                                                                            Ranges { Value: 204800      Name: "200 Kb"      }
                                                                                            Ranges { Value: 524288      Name: "512 Kb"      }
                                                                                            Ranges { Value: 1048576     Name: "1 Mb"        }
                                                                                            Ranges { Value: 2097152     Name: "2 Mb"        }
                                                                                            Ranges { Value: 4194304     Name: "4 Mb"        }
                                                                                            Ranges { Value: 6291456     Name: "6 Mb"        }
                                                                                            Ranges { Value: 8388608     Name: "8 Mb"        }
                                                                                      }
                                                                     ];

    COUNTER_LATENCY_PQ_RECEIVE_QUEUE = 15                       [(CounterOpts) = {Name: "LatencyReciveQueue"}];
    COUNTER_LATENCY_PQ_RESERVE_BYTES = 16                       [(CounterOpts) = {Name: "LatencyReserveBytes"}];
    COUNTER_LATENCY_PQ_REGISTER_MESSAGE_GROUP = 17              [(CounterOpts) = {Name: "LatencyRegisterMessageGroup"}];
    COUNTER_LATENCY_PQ_DEREGISTER_MESSAGE_GROUP = 18            [(CounterOpts) = {Name: "LatencyDeregisterMessageGroup"}];
    COUNTER_LATENCY_PQ_SPLIT_MESSAGE_GROUP = 19                 [(CounterOpts) = {Name: "LatencySplitMessageGroup"}];
}


enum EClientLabeledCounters {
    option (GlobalGroupNamesOpts) = {
        Names: "client"
        Names: "important"
        Names: "topic"
    };

    METRIC_COMMIT_WRITE_TIME = 0                                     [(LabeledCounterOpts) = {Name: "WriteTimeLagMsByCommitted" AggrFunc : EAF_MIN Type : CT_TIMELAG SVName: "topic.partition.committed_read_lag_milliseconds_max"}];
    METRIC_COMMIT_CREATE_TIME = 1                                    [(LabeledCounterOpts) = {Name: "CreateTimeLagMsByCommitted" AggrFunc : EAF_MIN Type : CT_TIMELAG SVName: "topic.partition.committed_end_to_end_lag_milliseconds_max"}];
    METRIC_COMMIT_MESSAGE_LAG = 2                                    [(LabeledCounterOpts) = {Name: "MessageLagByCommitted" AggrFunc : EAF_MAX SVName: "topic.partition.committed_lag_messages_max"}];
    METRIC_COMMIT_SIZE_LAG = 3                                       [(LabeledCounterOpts) = {Name: "SizeLagByCommitted" AggrFunc : EAF_MAX SVName: ""}];
    METRIC_READ_WRITE_TIME = 4                                       [(LabeledCounterOpts) = {Name: "WriteTimeLagMsByLastReadOld" AggrFunc : EAF_MIN Type : CT_TIMELAG SVName: ""}];
    METRIC_READ_TOTAL_TIME = 5                                       [(LabeledCounterOpts) = {Name: "TotalTimeLagMsByLastRead" AggrFunc : EAF_MAX SVName: "topic.partition.end_to_end_lag_milliseconds_max"}];
    METRIC_READ_MESSAGE_LAG = 6                                      [(LabeledCounterOpts) = {Name: "MessageLagByLastRead" AggrFunc : EAF_MAX SVName: "topic.partition.read.lag_messages_max"}];
    METRIC_READ_SIZE_LAG = 7                                         [(LabeledCounterOpts) = {Name: "SizeLagByLastRead" AggrFunc : EAF_MAX SVName: ""}];
    METRIC_USER_PARTITIONS = 8                                       [(LabeledCounterOpts) = {Name: "UserPartitionsAnswered" AggrFunc : EAF_SUM SVName: "topic.partition.alive_count"}];
    METRIC_READ_TOTAL_MESSAGE_LAG = 9                                [(LabeledCounterOpts) = {Name: "TotalMessageLagByLastRead" AggrFunc : EAF_SUM SVName: "topic.read.lag_messages"}];
    METRIC_READ_TOTAL_SIZE_LAG = 10                                  [(LabeledCounterOpts) = {Name: "TotalSizeLagByLastRead" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MIN_READ_QUOTA_BYTES_AVAIL_SEC = 11                       [(LabeledCounterOpts) = {Name: "ReadBytesAvailAvgSec" AggrFunc : EAF_MIN SVName: ""}];
    METRIC_MIN_READ_QUOTA_BYTES_AVAIL_MIN = 12                       [(LabeledCounterOpts) = {Name: "ReadBytesAvailAvgMin" AggrFunc : EAF_MIN SVName: ""}];

    METRIC_READ_OFFSET_REWIND_SUM = 13                               [(LabeledCounterOpts) = {Name: "ReadOffsetRewindSum" AggrFunc : EAF_SUM Type : CT_DERIV SVName: ""}];

    METRIC_TOTAL_READ_SPEED_1 = 14                                   [(LabeledCounterOpts) = {Name: "ReadBytesPerSec" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_READ_SPEED_1 = 15                                     [(LabeledCounterOpts) = {Name: "ReadBytesMaxPerSec" AggrFunc : EAF_MAX SVName: ""}];
    METRIC_TOTAL_READ_SPEED_2 = 16                                   [(LabeledCounterOpts) = {Name: "ReadBytesPerMin" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_READ_SPEED_2 = 17                                     [(LabeledCounterOpts) = {Name: "ReadBytesMaxPerMin" AggrFunc : EAF_MAX SVName: ""}];
    METRIC_TOTAL_READ_SPEED_3 = 18                                   [(LabeledCounterOpts) = {Name: "ReadBytesPerHour" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_READ_SPEED_3 = 19                                     [(LabeledCounterOpts) = {Name: "ReadBytesMaxPerHour" AggrFunc : EAF_MAX SVName: ""}];
    METRIC_TOTAL_READ_SPEED_4 = 20                                   [(LabeledCounterOpts) = {Name: "ReadBytesPerDay" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_READ_SPEED_4 = 21                                     [(LabeledCounterOpts) = {Name: "ReadBytesMaxPerDay" AggrFunc : EAF_MAX SVName: ""}];

    METRIC_READ_QUOTA_BYTES = 22                                     [(LabeledCounterOpts) = {Name: "ReadBytesQuota" AggrFunc : EAF_MIN SVName: ""}];

    METRIC_READ_TIME_LAG = 23                                        [(LabeledCounterOpts) = {Name: "ReadTimeLagMs" AggrFunc : EAF_MAX SVName: "topic.partition.read.lag_milliseconds_max"}];
    METRIC_WRITE_TIME_LAG = 24                                       [(LabeledCounterOpts) = {Name: "WriteTimeLagMsByLastRead" AggrFunc : EAF_MAX SVName: "topic.partition.write.lag_milliseconds_max"}];
    METRIC_LAST_READ_TIME = 25                                       [(LabeledCounterOpts) = {Name: "TimeSinceLastReadMs" AggrFunc : EAF_MIN Type : CT_TIMELAG SVName: "topic.partition.read.idle_milliseconds_max"}];

    METRIC_READ_QUOTA_USAGE = 26                                     [(LabeledCounterOpts) = {Name: "PartitionMaxReadQuotaUsage" AggrFunc : EAF_MAX SVName: ""}];
}



enum EPartitionLabeledCounters {
    option (GlobalGroupNamesOpts) = {
        Names: "topic"
    };

    METRIC_LIFE_TIME = 0                                          [(LabeledCounterOpts) = {Name: "PartitionLifeTimeMs" AggrFunc : EAF_MAX Type : CT_TIMELAG SVName: "topic.partition.uptime_milliseconds_min"}];
    METRIC_INIT_TIME = 1                                          [(LabeledCounterOpts) = {Name: "PartitionInitTimeMs" AggrFunc : EAF_MAX SVName: "topic.partition.init_duration_milliseconds_max"}];
    METRIC_PARTITIONS = 2                                         [(LabeledCounterOpts) = {Name: "PartitionsAnswered" AggrFunc : EAF_SUM SVName: "topic.partition.alive_count"}];
    METRIC_NUM_SIDS = 3                                           [(LabeledCounterOpts) = {Name: "SourceIdCount" AggrFunc : EAF_SUM SVName: "topic.producers_count"}];
    METRIC_MAX_NUM_SIDS = 4                                       [(LabeledCounterOpts) = {Name: "SourceIdMaxCount" AggrFunc : EAF_MAX SVName: "topic.partition.producers_count_max"}];
    METRIC_GAPS_COUNT = 5                                         [(LabeledCounterOpts) = {Name: "GapsCount" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_GAPS_COUNT = 6                                     [(LabeledCounterOpts) = {Name: "GapsMaxCount" AggrFunc : EAF_MAX SVName: ""}];
    METRIC_GAPS_SIZE = 7                                          [(LabeledCounterOpts) = {Name: "GapsSize" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_GAPS_SIZE = 8                                      [(LabeledCounterOpts) = {Name: "GapsMaxSize" AggrFunc : EAF_MAX SVName: ""}];
    METRIC_MIN_WRITE_QUOTA_BYTES_AVAIL_SEC = 9                    [(LabeledCounterOpts) = {Name: "WriteBytesAvailAvgSec" AggrFunc : EAF_MIN SVName: ""}];
    METRIC_MIN_WRITE_QUOTA_BYTES_AVAIL_MIN = 10                   [(LabeledCounterOpts) = {Name: "WriteBytesAvailAvgMin" AggrFunc : EAF_MIN SVName: ""}];
    METRIC_TOTAL_WRITE_SPEED_1 = 11                               [(LabeledCounterOpts) = {Name: "WriteBytesPerSec" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_WRITE_SPEED_1 = 12                                 [(LabeledCounterOpts) = {Name: "WriteBytesMaxPerSec" AggrFunc : EAF_MAX SVName: ""}];
    METRIC_TOTAL_WRITE_SPEED_2 = 13                               [(LabeledCounterOpts) = {Name: "WriteBytesPerMin" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_WRITE_SPEED_2 = 14                                 [(LabeledCounterOpts) = {Name: "WriteBytesMaxPerMin" AggrFunc : EAF_MAX SVName: ""}];
    METRIC_TOTAL_WRITE_SPEED_3 = 15                               [(LabeledCounterOpts) = {Name: "WriteBytesPerHour" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_WRITE_SPEED_3 = 16                                 [(LabeledCounterOpts) = {Name: "WriteBytesMaxPerHour" AggrFunc : EAF_MAX SVName: ""}];
    METRIC_TOTAL_WRITE_SPEED_4 = 17                               [(LabeledCounterOpts) = {Name: "WriteBytesPerDay" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_WRITE_SPEED_4 = 18                                 [(LabeledCounterOpts) = {Name: "WriteBytesMaxPerDay" AggrFunc : EAF_MAX SVName: ""}];

    METRIC_TOTAL_PART_SIZE = 19                                   [(LabeledCounterOpts) = {Name: "TotalPartSize" AggrFunc : EAF_SUM SVName: "topic.storage_bytes"}];
    METRIC_MAX_PART_SIZE = 20                                     [(LabeledCounterOpts) = {Name: "MaxPartSize" AggrFunc : EAF_MAX SVName: "topic.partition.storage_bytes_max"}];

    METRIC_WRITE_QUOTA_BYTES = 21                                 [(LabeledCounterOpts) = {Name: "WriteBytesQuota" AggrFunc : EAF_MIN SVName: "topic.partition.write.speed_limit_bytes_per_second"}];

    METRIC_WRITE_TIME_LAG_MS = 22                                 [(LabeledCounterOpts) = {Name: "WriteTimeLagMsByLastWrite" AggrFunc : EAF_MAX SVName: "topic.partition.write.lag_milliseconds_max"}];
    METRIC_LAST_WRITE_TIME = 23                                   [(LabeledCounterOpts) = {Name: "TimeSinceLastWriteMs" AggrFunc : EAF_MIN Type : CT_TIMELAG SVName: "topic.partition.write.idle_milliseconds_max"}];

    METRIC_TOTAL_QUOTA_SPEED_1 = 24                               [(LabeledCounterOpts) = {Name: "QuotaBytesPerSec" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_QUOTA_SPEED_1 = 25                                 [(LabeledCounterOpts) = {Name: "QuotaBytesMaxPerSec" AggrFunc : EAF_MAX SVName: ""}];
    METRIC_TOTAL_QUOTA_SPEED_2 = 26                               [(LabeledCounterOpts) = {Name: "QuotaBytesPerMin" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_QUOTA_SPEED_2 = 27                                 [(LabeledCounterOpts) = {Name: "QuotaBytesMaxPerMin" AggrFunc : EAF_MAX SVName: "topic.partition.write.bytes_per_minute_max"}];
    METRIC_TOTAL_QUOTA_SPEED_3 = 28                               [(LabeledCounterOpts) = {Name: "QuotaBytesPerHour" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_QUOTA_SPEED_3 = 29                                 [(LabeledCounterOpts) = {Name: "QuotaBytesMaxPerHour" AggrFunc : EAF_MAX SVName: "topic.partition.write.bytes_per_hour_max"}];
    METRIC_TOTAL_QUOTA_SPEED_4 = 30                               [(LabeledCounterOpts) = {Name: "QuotaBytesPerDay" AggrFunc : EAF_SUM SVName: ""}];
    METRIC_MAX_QUOTA_SPEED_4 = 31                                 [(LabeledCounterOpts) = {Name: "QuotaBytesMaxPerDay" AggrFunc : EAF_MAX SVName: "topic.partition.write.bytes_per_day_max"}];
    METRIC_WRITE_QUOTA_USAGE = 32                                 [(LabeledCounterOpts) = {Name: "PartitionMaxWriteQuotaUsage" AggrFunc : EAF_MAX SVName: "topic.partition.write.throttled_nanoseconds_max"}];
    METRIC_MIN_SID_LIFETIME = 33                                  [(LabeledCounterOpts) = {Name: "SourceIdMinLifetimeMs" AggrFunc : EAF_MIN SVName: ""}];

    METRIC_PARTITIONS_TOTAL = 34                                  [(LabeledCounterOpts) = {Name: "PartitionsTotal" AggrFunc : EAF_MAX SVName: "topic.partition.total_count"}];

    METRIC_RESERVE_LIMIT_BYTES = 35                               [(LabeledCounterOpts) = {Name: "ReserveLimitBytes" AggrFunc : EAF_SUM SVName: "topic.reserve.limit_bytes"}];
    METRIC_RESERVE_USED_BYTES = 36                                [(LabeledCounterOpts) = {Name: "ReserveUsedBytes" AggrFunc : EAF_SUM SVName: "topic.reserve.used_bytes"}];
}
