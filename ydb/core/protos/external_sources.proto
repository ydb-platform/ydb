package NKikimrExternalSources;
option java_package = "ru.yandex.kikimr.proto";

import "ydb/public/api/protos/ydb_value.proto";

import "ydb/public/api/protos/annotations/validation.proto";

message TSchema {
    repeated Ydb.Column column = 1 [(Ydb.size).le = 100];
}

message TGeneral {
    map<string, string> attributes = 1 [(Ydb.size).le = 100];
    optional string location = 2;
}

message TObjectStorage {
    optional string format = 1 [(Ydb.length).le = 1024];
    map<string, string> format_setting = 2 [(Ydb.size).le = 100];
    optional string compression = 3 [(Ydb.length).le = 1024];

    /*
    Partition projection is used to speed up the processing of highly partitioned
    storages and automate the management of partitions. In partition projection, partition values and
    locations are calculated from configuration rather than read from an object storage. Depending on the
    specific characteristics of the query and underlying data, partition projection can significantly
    reduce query execution time if it uses partitioning constraints on partition metadata retrieval. Similar
    functionality is implemented in Athena: https://docs.aws.amazon.com/athena/latest/ug/partition-projection.html
    Only enum, integer and date types are supported for path generation. When using projection, there must
    be at least one element in partitioned_by. This behavior is introduced for symmetric query usage and
    compatibility with Athena behavior.

    Example:
    projection = {
        "projection.enabled" : "true", // used to enable and disable partitioning
        "projection.city.type" : "enum", // to generate the city column, the enum type will be used (enumeration of objects separated by commas)
        "projection.city.values" : "Washington,Roma", // column values city Washington or Roma
        "projection.code.type" : "enum", // to generate the code column, the enum type will be used (enumeration of objects separated by commas)
        "projection.code.values" : "0,1", // column values code 0 or 1
        "storage.location.template" : "/${city}/${code}/${device_id}" // the template to which the generated values will be substituted
    }
    partitioned_by = [ "city", "device_id" ] // a subset of columns that are included in partitioning
    - If storage.location.template and partitioned_by are specified together, then the rule from storage.location.template will be used.
    - If only partitioned_by is specified, then the Hive Metastore format will be used for storage.location.template: "/city=${city}/device_id=${device_id}"
    The list of paths that correspond to described projection and partitioned_by values are:
    "/Washington/0/${device_id}", "/Washington/1/${device_id}", "/Roma/0/${device_id}", "/Roma/1/${device_id}"
    */
    map<string, string> projection = 4;

    /*
    By separating the data, it is possible to limit the amount of data scanned by each query, thereby improving
    performance and reducing costs. Therefore, user data is partition by key (in practice, this is a partition by time).
    The partitioned_by defines the keys on which to partition data. The columns described in partitioned_by
    must be specified in the schema. If projection is not specified, the template will be generated according to
    partitioned_by. Similar functionality is implemented in Athena: https://docs.aws.amazon.com/athena/latest/ug/partitions.html

    Example:
    partitioned_by = [ "city", "code", "device_id" ]
    The corresponding storage.location.template will be as follows:
    "/city=${city}/code=${code}/device_id=${device_id}"
    */
    repeated string partitioned_by = 5;
}
