import "ydb/library/actors/protos/actors.proto";
import "ydb/core/protos/base.proto";
import "ydb/core/scheme/protos/pathid.proto";
import "ydb/core/scheme/protos/type_info.proto";
import "ydb/core/protos/subdomains.proto";
import "ydb/core/protos/bind_channel_storage_pool.proto";
import "ydb/core/protos/flat_scheme_op.proto";
import "ydb/public/api/protos/ydb_cms.proto";
import "ydb/public/api/protos/ydb_issue_message.proto";

package NKikimrScheme;
option java_package = "ru.yandex.kikimr.proto";

message TSchemeConfig {
    optional uint64 PipeClientCachePoolLimit = 1;
}

message TConfig {
    optional TSchemeConfig Current = 1;
    //optional NKikimrTxDataShard.TConfig DefaultDataShardConfig = 2;
    optional TSchemeConfig DefaultSchemeShardConfig = 3;
}

enum EStatus  {
    StatusSuccess = 0;
    StatusAccepted = 1;
    StatusPathDoesNotExist = 2;
    StatusPathIsNotDirectory = 3;
    StatusAlreadyExists = 4;
    StatusSchemeError = 5;
    StatusNameConflict = 6;
    StatusInvalidParameter = 7;
    StatusMultipleModifications = 8;
    StatusReadOnly = 9;
    StatusTxIdNotExists = 10;
    StatusTxIsNotCancellable = 11;
    StatusAccessDenied = 12;
    StatusNotAvailable = 13;
    StatusPreconditionFailed = 14;
    StatusRedirectDomain = 15;
    StatusQuotaExceeded = 16;
    StatusResourceExhausted = 17;
    StatusReserved18 = 18;
    StatusReserved19 = 19;
    // when adding a new status and keeping parse compatibility with the old version
    // rename existing reserved status to desired one, and add new reserved status to
    // the end of reserved statuses
}

message TEvModifySchemeTransaction {
    repeated NKikimrSchemeOp.TModifyScheme Transaction = 1;
    optional uint64 TxId = 2;
    optional uint64 TabletId = 3;
    optional string Owner = 5;
    optional bool FailOnExist = 6; // depricated, TModifyScheme.FailOnExist is recomended
    optional string UserToken = 7; // serialized NACLib::TUserToken
    optional string PeerName = 8;
}

message TFetcherCheckUserTieringPermissionsResult {
    optional bool OperationAllow = 1;
    optional string DenyReason = 2;
}

message TFetcherCheckUserTieringPermissions {
    optional bytes UserToken = 1;
    repeated string TieringRuleIds = 2;
    optional string ActivityType = 3;
}

message TEvProcessingRequest {
    optional string ClassName = 1;
    // Fetcher is string serializable object that deserialized after factory constructed object from ClassName
    optional bytes Data = 2;
}

message TEvProcessingResponse {
    message TContent {
        // Fetched content is string serializable object that determined by general content fetcher by mthod UnpackContent
        optional bytes Data = 2;
    }

    message TError {
        optional string ErrorMessage = 1;
    }

    oneof Result {
        TContent Content = 1;
        TError Error = 2;
    }
}

message TEvModifySchemeTransactionResult {
    optional EStatus Status = 1;
    optional string Reason = 2;
    optional uint64 TxId = 3;
    optional uint64 SchemeshardId = 4;
    optional uint64 PathId = 5;
    optional uint64 PathCreateTxId = 6;
    optional uint64 PathDropTxId = 7;
    repeated Ydb.Issue.IssueMessage Issues = 8;
}

message TEvDescribeSchemeResult {
    optional EStatus Status = 1;
    optional string Reason = 2;
    optional string Path = 3;
    optional NKikimrSchemeOp.TPathDescription PathDescription = 4;
    optional fixed64 PathOwner = 5;
    optional fixed64 PathId = 6;

    optional string LastExistedPrefixPath = 7;
    optional fixed64 LastExistedPrefixPathId = 8;
    optional NKikimrSchemeOp.TPathDescription LastExistedPrefixDescription = 9;
    optional fixed64 PathOwnerId = 10;
}

message TEvCancelTx {
    optional uint64 TargetTxId = 1;
    optional string Path = 2;
    optional string SecurityToken = 3;
    optional uint64 TxId = 4;
}

message TEvCancelTxResult {
    optional EStatus Status = 1;
    optional string Result = 2;
    optional uint64 TargetTxId = 3;
    optional uint64 TxId = 4;
}

message TEvUpdateConfig {
    optional NActorsProto.TActorId Source = 1;
    optional TConfig Config = 2;
}

message TEvUpdateConfigResult {
    optional uint64 Origin = 1;
    optional NKikimrProto.EReplyStatus Status = 2;
    optional string Reason = 3;
}

message TEvLogin {
    optional string User = 1;
    optional string Password = 2;
    optional string ExternalAuth = 3;
}

message TEvLoginResult {
    optional string Error = 1;
    optional string Token = 2;
}

// Sending actor registers itself to be notified when tx completes
message TEvNotifyTxCompletion {
    optional uint64 TxId = 1;
}

message TEvNotifyTxCompletionRegistered {
    optional uint64 TxId = 1;
}

message TEvNotifyTxCompletionResult {
    optional uint64 TxId = 1;
}

message TSchemeLimits {
    optional uint64 MaxDepth = 1;
    optional uint64 MaxPaths = 2;
    optional uint64 MaxChildrenInDir = 3;
    optional uint64 MaxAclBytesSize = 4;

    optional uint64 MaxTableColumns = 5;
    optional uint64 MaxTableColumnNameLength = 6;
    optional uint64 MaxTableKeyColumns = 7;
    optional uint64 MaxTableIndices = 8;
    optional uint64 MaxShards = 9;
    optional uint64 MaxShardsInPath = 10;
    optional uint64 MaxConsistentCopyTargets = 11;

    optional uint64 MaxPathElementLength = 12;
    optional string ExtraPathSymbolsAllowed = 13;

    optional uint64 MaxPQPartitions = 14;
    optional uint64 MaxTableCdcStreams = 15;

    optional uint64 MaxExports = 16;
    optional uint64 MaxImports = 17;
}

message TEvInitTenantSchemeShard {
    optional fixed64 DomainSchemeShard = 1;
    optional fixed64 DomainPathId = 2;
    optional string RootPath = 3;
    optional string Owner = 4;

    optional bytes EffectiveACL = 5;
    optional uint64 EffectiveACLVersion = 6;

    optional NKikimrSubDomains.TProcessingParams ProcessingParams = 7;
    repeated NKikimrStoragePool.TStoragePool StoragePools = 8;

    repeated NKikimrSchemeOp.TUserAttribute UserAttributes = 9;
    optional uint64 UserAttributesVersion = 10;

    optional TSchemeLimits SchemeLimits = 11;

    optional bool InitiateMigration = 12;

    optional fixed64 ResourcesDomainOwnerId = 13;
    optional fixed64 ResourcesDomainPathId = 14;
    optional fixed64 SharedHive = 15;

    optional NKikimrSubDomains.TSchemeQuotas DeclaredSchemeQuotas = 16;
    optional Ydb.Cms.DatabaseQuotas DatabaseQuotas = 17;
    optional NKikimrSubDomains.TAuditSettings AuditSettings = 18;
    optional NKikimrSubDomains.EServerlessComputeResourcesMode ServerlessComputeResourcesMode = 19;
}

message TEvInitTenantSchemeShardResult {
    optional uint64 TenantSchemeShard = 1;
    optional EStatus Status = 2;
}

message TShardID {
    optional fixed64 OwnerId = 1;
    optional uint64 LocalId = 2;
}

message TMigrateShard {
    optional TShardID ShardIdx = 1;
    optional uint32 Type = 2;
    optional fixed64 TabletId = 3;

    //repeated uint32 Channel = 4; // it should be equal to array index in StoragePoolName
    repeated NKikimrStoragePool.TChannelBind BindedStoragePool = 4;
}

message TMigratePath {
    optional NKikimrProto.TPathID PathId = 1;
    optional NKikimrProto.TPathID ParentPathId = 2;
    optional string Name = 3;
    optional uint32 PathType = 4;
    optional uint64 StepCreated= 5;
    optional fixed64 CreateTxId =6;
    optional string Owner = 7;
    optional string ACL = 8;
    optional uint64 DirAlterVersion = 9;
    optional uint64 UserAttrsAlterVersion = 10;
    optional uint64 ACLVersion = 11;
    repeated NKikimrSchemeOp.TUserAttribute UserAttributes = 12;
}

message TMigrateColumn {
    optional uint32 Id = 1;
    optional string Name = 2;
    optional uint32 ColType = 3;
    optional NKikimrProto.TTypeInfo ColTypeInfo = 11;
    optional uint32 ColKeyOrder = 4;
    optional uint64 CreateVersion = 5;
    optional uint64 DeleteVersion = 6;
    optional uint32 Family = 7;
    optional uint32 DefaultKind = 8;
    optional bytes DefaultValue = 9;
    optional bool NotNull = 10;
    optional bool IsBuildInProgress = 12;
}

message TMigratePartition {
    optional uint32 Id = 1;
    optional string RangeEnd = 2;
    optional TShardID ShardIdx = 3;
    optional string PartitionConfig = 4;
}

message TMigrateTable {
    optional NKikimrProto.TPathID PathId = 1;
    optional uint32 NextColId = 2;
    optional string PartitionConfig = 3;
    optional uint32 AlterVersion = 4;
    optional uint32 PartitioningVersion = 5;

    repeated TMigrateColumn Columns = 6;
    repeated TMigratePartition Partitions = 7;
}

message TMigrateTableIndex {
    optional NKikimrProto.TPathID PathId = 1;
    optional uint64 AlterVersion = 2;
    optional uint32 Type = 3;
    optional uint32 State = 4;
    repeated string Keys = 5;
}

message TMigrateKesus {
    optional NKikimrProto.TPathID PathId = 1;
    optional uint64 Version = 2;
    optional string Config = 3;
}

message TEvMigrate {
    optional uint64 SchemeShardGeneration = 1;
    optional TMigratePath Path = 2;
    optional NKikimrSchemeOp.TPathVersion PathVersion = 3;

    repeated TMigrateShard Shards = 4;

    optional TMigrateTable Table = 5;
    optional TMigrateTableIndex TableIndex = 6;
    optional TMigrateKesus Kesus = 7;
}

message TEvMigrateResult {
    optional fixed64 TenantSchemeShard = 1;
    optional uint64 SchemeShardGeneration = 2;
    optional NKikimrProto.TPathID PathId = 3;
    repeated TShardID ShardIds = 4;
}

message TEvPublishTenantAsReadOnly {
    optional fixed64 DomainSchemeShard = 1;
}

message TEvPublishTenantAsReadOnlyResult {
    optional fixed64 TenantSchemeShard = 1;
    optional EStatus Status = 2;
}

message TEvRewriteOwner {
    optional fixed64 PrevOwner = 1;
    optional fixed64 NewOwner = 2;

    optional uint64 Generation = 3;
    optional uint64 Round = 4;
}

message TEvRewriteOwnerResult {
    optional EStatus Status = 1;
}

message TEvPublishTenant {
    optional fixed64 DomainSchemeShard = 1;
}

message TEvPublishTenantResult {
    optional fixed64 TenantSchemeShard = 1;
}

message TEvSyncTenantSchemeShard {
    optional fixed64 DomainSchemeShard = 1;
    optional fixed64 DomainPathId = 2;
    optional fixed64 TabletID = 3;
    optional uint64 Generation = 4;

    optional uint64 EffectiveACLVersion = 5;
    optional uint64 SubdomainVersion = 6;
    optional uint64 UserAttributesVersion = 7;

    optional uint64 TenantHive = 8;
    optional uint64 TenantSysViewProcessor = 9;
    optional uint64 TenantStatisticsAggregator = 11;
    optional fixed64 TenantGraphShard = 12;

    optional string TenantRootACL = 10;
}

message TEvUpdateTenantSchemeShard {
    optional fixed64 TabletId = 1;
    optional uint64 Generation = 2;

    optional string Owner = 3;
    optional bytes EffectiveACL = 4;
    optional uint64 EffectiveACLVersion = 5;

    repeated NKikimrStoragePool.TStoragePool StoragePools = 6;
    optional uint64 SubdomainVersion = 7;

    repeated NKikimrSchemeOp.TUserAttribute UserAttributes = 8;
    optional uint64 UserAttributesVersion = 9;

    optional uint64 TenantHive = 10;
    optional uint64 TenantSysViewProcessor = 11;
    optional uint64 TenantStatisticsAggregator = 16;
    optional fixed64 TenantGraphShard = 18;

    optional NKikimrSubDomains.TSchemeQuotas DeclaredSchemeQuotas = 12;
    optional Ydb.Cms.DatabaseQuotas DatabaseQuotas = 14;

    optional string UpdateTenantRootACL = 13;

    optional NKikimrSubDomains.TAuditSettings AuditSettings = 15;
    optional NKikimrSubDomains.EServerlessComputeResourcesMode ServerlessComputeResourcesMode = 17;
}

message TEvFindTabletSubDomainPathId {
    optional uint64 TabletId = 1; // DataShard tablet id
}

message TEvFindTabletSubDomainPathIdResult {
    enum EStatus {
        UNSPECIFIED = 0;
        SUCCESS = 1;
        SHARD_NOT_FOUND = 2;
        PATH_NOT_FOUND = 3;
    }

    optional EStatus Status = 1;
    optional uint64 TabletId = 2; // DataShard tablet id
    optional uint64 SchemeShardId = 3; // OwnerId of the subdomain
    optional uint64 SubDomainPathId = 4; // LocalPathId of the subdomain
}

message TEvOwnerActorAck {
}
