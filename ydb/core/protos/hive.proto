import "ydb/library/actors/protos/actors.proto";
import "ydb/core/protos/base.proto";
import "ydb/core/protos/tablet.proto";
import "ydb/core/protos/subdomains.proto";
import "ydb/core/protos/bind_channel_storage_pool.proto";
import "ydb/core/protos/follower_group.proto";

package NKikimrHive;
option java_package = "ru.yandex.kikimr.proto";

enum ETabletBootMode {
    // Default boot mode, hive tries to keep leader tablet running
    TABLET_BOOT_MODE_DEFAULT = 0;

    // External boot mode, hive will assume it starts outside of any local service
    TABLET_BOOT_MODE_EXTERNAL = 1;
}

enum EBalancerPolicy {
    POLICY_BALANCE = 0;
    POLICY_IGNORE = 1;
}

enum EErrorReason {
    // Default unspecified error reason
    ERROR_REASON_UNKNOWN = 0;

    // CreateTablet request provided a smaller number of channels than previous requests
    ERROR_REASON_CHANNELS_CANNOT_SHRINK = 1;

    ERROR_REASON_INVALID_ARGUMENTS = 2;
}

enum ETabletVolatileState {
    TABLET_VOLATILE_STATE_UNKNOWN = 0;
    TABLET_VOLATILE_STATE_STOPPED = 1;
    TABLET_VOLATILE_STATE_BOOTING = 2;
    TABLET_VOLATILE_STATE_STARTING = 3;
    TABLET_VOLATILE_STATE_RUNNING = 4;
    _TABLET_VOLATILE_STATE_BLOCKED = 5; // deprecated
}

enum EMigrationState {
    MIGRATION_UNKNOWN = 0;
    MIGRATION_READY = 1;
    MIGRATION_ACTIVE = 2;
    MIGRATION_COMPLETE = 3;
}

enum EDrainDownPolicy {
    DRAIN_POLICY_NO_DOWN = 0;
    DRAIN_POLICY_KEEP_DOWN_UNTIL_RESTART = 1;
    DRAIN_POLICY_KEEP_DOWN = 2;
}

message TChannelInfo {
    message THistorySlot {
        optional uint32 FromGeneration = 1;
        optional uint32 GroupID = 2;
        optional uint64 Timestamp = 3; // ms
    }

    optional uint32 Id = 1;
    optional uint32 Type = 2; // erasure
    repeated THistorySlot History = 3;
}

message TEvBootTablet {
    optional fixed64 TabletID = 1;
}

message TEvBootTabletReply {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional string StatusMsg = 2;
}

message TTabletCategory {
    optional uint64 TabletCategoryID = 1; // it's required, actually
    optional uint64 MaxDisconnectTimeout = 2; // ms
    optional bool StickTogetherInDC = 3;
}

message TDataCentersGroup {
    repeated uint64 DataCenterNum = 1 [deprecated=true];  // array of DC IDs preffered to run the tablet; obsolete
    repeated string DataCenter = 2;
}

message TDataCentersPreference {
    repeated TDataCentersGroup DataCentersGroups = 1;
}

message TEvCreateTablet {
    optional fixed64 Owner = 1;
    optional uint64 OwnerIdx = 2;
    optional NKikimrTabletBase.TTabletTypes.EType TabletType = 3;
    optional uint32 AssignStateStorage = 4;
    repeated uint32 AllowedNodeIDs = 7;
    repeated uint64 AllowedDataCenterNumIDs = 14 [deprecated=true]; // array of DC IDs allowed to run the tablet; obsolete; use AllowedDataCenters instead
    optional TTabletCategory TabletCategory = 16;
    repeated TFollowerGroup FollowerGroups = 17;
    optional NKikimrSubDomains.TDomainKey ObjectDomain = 18;
    optional ETabletBootMode TabletBootMode = 19;
    optional uint64 ObjectId = 20;
    repeated NKikimrStoragePool.TChannelBind BindedChannels = 21;
    optional fixed64 TabletID = 22;
    repeated NKikimrSubDomains.TDomainKey AllowedDomains = 23;
    optional TDataCentersPreference DataCentersPreference = 24;
    repeated string AllowedDataCenters = 25;
    optional EBalancerPolicy BalancerPolicy = 26;

    optional uint32 ChannelsProfile = 5 [deprecated = true]; // DEPRECATED
    optional uint32 Flags = 6 [deprecated = true]; // DEPRECATED
    optional uint32 BootTimeoutMilliSeconds = 8 [deprecated = true]; // DEPRECATED
    optional uint32 BootAttemptLimit = 9 [deprecated = true]; // DEPRECATED
    optional uint64 Weight = 10 [default = 1000, deprecated = true]; // DEPRECATED
    optional uint32 FollowerCount = 11 [default = 0]; // DEPRECATED
    optional bool AllowFollowerPromotion = 12 [default = false]; // DEPRECATED
    optional bool CrossDataCenterFollowers = 13 [default = false]; // enable to make followers automatically in every DC (one follower per one datacenter) - DEPRECATED
    optional uint32 CrossDataCenterFollowerCount = 15; // follower count per one datacenter - DEPRECATED
}

message TEvLookupTablet {
    optional fixed64 Owner = 1;
    optional uint64 OwnerIdx = 2;
}

message TEvCreateTabletReply {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional fixed64 Owner = 2;
    optional uint64 OwnerIdx = 3;
    optional fixed64 TabletID = 4;
    optional fixed64 Origin = 5;
    optional EErrorReason ErrorReason = 6;
    optional TForwardRequest ForwardRequest = 7;
}

message TEvTabletCreationResult {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional fixed64 TabletID = 2;
}

message TEvStopTablet {
    optional fixed64 TabletID = 1;
    optional NActorsProto.TActorId ActorToNotify = 2;
}

message TEvStopTabletResult {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional fixed64 TabletID = 2;
}

message TEvResumeTabletResult {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional fixed64 TabletID = 2;
}

message TChannelRequest {
    optional uint32 Id = 1;
    optional uint32 Type = 2;
    optional uint32 Locality = 3;
}

message TEvReconfigureTablet {
    optional fixed64 TabletID = 1;
    optional bool Autoboot = 2;

    optional uint32 ChannelReconfigureGeneration = 3;
    repeated TChannelRequest Channels = 4;
}

message TEvAdoptTablet {
    optional fixed64 TabletID = 1;

    optional fixed64 PrevOwner = 2;
    optional uint64 PrevOwnerIdx = 3;
    optional NKikimrTabletBase.TTabletTypes.EType TabletType = 4;

    optional fixed64 Owner = 5;
    optional uint64 OwnerIdx = 6;
}

message TEvAdoptTabletReply {
    optional fixed64 TabletID = 1;
    optional fixed64 Origin = 2;
    optional fixed64 Owner = 3;
    optional uint64 OwnerIdx = 4;
    optional NKikimrProto.EReplyStatus Status = 5;
    optional string Explain = 6;
}

message TEvReconfigureTabletReply {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional fixed64 TabletID = 2;
    optional bool Autoboot = 3;
    repeated TChannelInfo Channels = 4;
}

message TEvDeleteTablet {
    optional fixed64 ShardOwnerId = 1;
    repeated uint64 ShardLocalIdx = 2;
    optional uint64 TxId_Deprecated = 3;
    repeated fixed64 TabletID = 4;
}

message TEvDeleteTabletReply {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional fixed64 Origin = 2;
    optional uint64 TxId_Deprecated = 3;
    optional uint64 ShardOwnerId = 4;
    repeated uint64 ShardLocalIdx = 5;
    optional TForwardRequest ForwardRequest = 6;
}

message TEvDeleteOwnerTablets {
    optional fixed64 Owner = 1;
    optional uint64 TxId = 2;
}

message TEvDeleteOwnerTabletsReply {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional fixed64 Owner = 2;
    optional uint64 TxId = 3;
    optional fixed64 Origin = 4;
}


message TEvLookupChannelInfo {
    optional fixed64 TabletID = 1;
    repeated uint32 Channels = 2;
    repeated uint32 ForGeneration = 3;
}

message TEvChannelInfo {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional fixed64 TabletID = 2;
    repeated TChannelInfo ChannelInfo = 3;
}

message TTabletMetrics {
    optional fixed64 TabletID = 1;
    optional NKikimrTabletBase.TMetrics ResourceUsage = 4;
    optional uint32 FollowerID = 3;
}

message TEvTabletMetrics {
    repeated TTabletMetrics TabletMetrics = 1;
    optional NKikimrTabletBase.TMetrics TotalResourceUsage = 2;
    optional double TotalNodeUsage = 3;
}

message TEvReassignTablet {
    enum EHiveReassignReason {
        HIVE_REASSIGN_REASON_NO = 0;
        HIVE_REASSIGN_REASON_SPACE = 1;
        HIVE_REASSIGN_REASON_BALANCE = 2; // internal to Hive
    }

    optional fixed64 TabletID = 1;
    repeated uint32 Channels = 2;
    repeated uint32 ForcedGroupIDs = 3;
    optional EHiveReassignReason ReassignReason = 4;
}

message TForwardRequest {
    optional fixed64 HiveTabletId = 1;
}

message TEvRequestHiveInfo {
    optional fixed64 TabletID = 1;
    optional NKikimrTabletBase.TTabletTypes.EType TabletType = 2;
    optional bool ReturnFollowers = 3;
    optional uint32 FollowerID = 4;
    optional bool ReturnMetrics = 5;
    optional bool ReturnChannelHistory = 6;
}

message TEvResponseHiveInfo {
    repeated TTabletInfo Tablets = 1;
    optional TForwardRequest ForwardRequest = 2;
    optional uint64 StartTimeTimestamp = 3;
    optional uint64 ResponseTimestamp = 4;
}

message TEvRequestHiveDomainStats {
    optional bool ReturnFollowers = 3;
    optional bool ReturnMetrics = 5;
}

message THiveDomainStatsStateCount {
    optional ETabletVolatileState VolatileState = 1;
    optional uint32 Count = 2;
    optional NKikimrTabletBase.TTabletTypes.EType TabletType = 3; // only for extended tablet info
}

message THiveDomainStats {
    optional fixed64 ShardId = 1;
    optional uint64 PathId = 2;
    repeated THiveDomainStatsStateCount StateStats = 3;
    optional NKikimrTabletBase.TMetrics Metrics = 4;
    repeated uint32 NodeIds = 5;
    optional uint32 AliveNodes = 6;
}

message TEvResponseHiveDomainStats {
    repeated THiveDomainStats DomainStats = 1;
}

message TEvRequestHiveNodeStats {
    optional bool ReturnMetrics = 5;
    optional bool ReturnExtendedTabletInfo = 6;
    // The next 2 fields should always be used together
    optional uint64 FilterTabletsByPathId = 7;
    optional uint64 FilterTabletsBySchemeShardId = 8;
}

message THiveNodeStats {
    optional uint32 NodeId = 1;
    repeated THiveDomainStatsStateCount StateStats = 3;
    optional NKikimrTabletBase.TMetrics Metrics = 4;
    optional uint32 RestartsPerPeriod = 6;
    optional uint64 LastAliveTimestamp = 7;
    optional NKikimrSubDomains.TDomainKey NodeDomain = 8;
    optional string NodeName = 9;
}

message TEvResponseHiveNodeStats {
    repeated THiveNodeStats NodeStats = 1;
    optional bool ExtendedTabletInfo = 2;
}

message TEvRequestHiveStorageStats {
}

message THiveStorageGroupStats {
    optional uint32 GroupID = 1;
    optional uint64 AcquiredUnits = 2;
    optional float AcquiredIOPS = 3;
    optional uint64 AcquiredThroughput = 4;
    optional uint64 AcquiredSize = 5;
    optional float MaximumIOPS = 7;
    optional uint64 MaximumThroughput = 8;
    optional uint64 MaximumSize = 9;
    optional uint64 AllocatedSize = 10;
    optional uint64 AvailableSize = 11;
}

message THiveStoragePoolStats {
    optional string Name = 1;
    repeated THiveStorageGroupStats Groups = 2;
}

message TEvResponseHiveStorageStats {
    repeated THiveStoragePoolStats Pools = 1;
}

message TTabletOwner {
    optional fixed64 Owner = 1;
    optional uint64 OwnerIdx = 2;
}

message TEvDrainNode {
    optional uint32 NodeID = 1;
    optional bool Persist = 3 [default = true];
    optional bool KeepDown = 4 [default = false]; // deprecated in favor of DownPolicy
    optional uint32 DrainInFlight = 5;
    optional EDrainDownPolicy DownPolicy = 6 [default = DRAIN_POLICY_KEEP_DOWN_UNTIL_RESTART];
}

message TEvDrainNodeResult {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional uint32 Movements = 2;
}

message TEvFillNode {
    optional uint32 NodeID = 1;
}

message TEvFillNodeResult {
    optional NKikimrProto.EReplyStatus Status = 1;
}

message TEvGetTabletStorageInfo {
    optional fixed64 TabletID = 1;
}

message TEvGetTabletStorageInfoResult {
    optional fixed64 TabletID = 1;
    optional NKikimrProto.EReplyStatus Status = 2;
    optional NKikimrTabletBase.TTabletStorageInfo Info = 3;
    optional string StatusMessage = 4;
}

message TEvGetTabletStorageInfoRegistered {
    optional fixed64 TabletID = 1;
}

message TEvLockTabletExecution {
    optional fixed64 TabletID = 1;
    optional NActorsProto.TActorId OwnerActor = 2;
    optional bool Reconnect = 3;
    optional uint64 MaxReconnectTimeout = 4; // ms
}

message TEvLockTabletExecutionLost {
    optional fixed64 TabletID = 1;
}

message TEvLockTabletExecutionResult {
    optional fixed64 TabletID = 1;
    optional NKikimrProto.EReplyStatus Status = 2;
    optional string StatusMessage = 3;
}

message TEvUnlockTabletExecution {
    optional fixed64 TabletID = 1;
    optional NActorsProto.TActorId OwnerActor = 2;
}

message TEvUnlockTabletExecutionResult {
    optional fixed64 TabletID = 1;
    optional NKikimrProto.EReplyStatus Status = 2;
    optional string StatusMessage = 3;
}

message TEvInvalidateStoragePools {
    repeated string StoragePoolName = 1; // if none given, invalidate all pools
}

message TEvInvalidateStoragePoolsReply {
}

message TEvReassignOnDecommitGroup {
    optional uint32 GroupId = 1;
}

message TEvReassignOnDecommitGroupReply {
}

message TEvRequestTabletIdSequence {
    optional TTabletOwner Owner = 1;
    optional uint64 Size = 2;
}

message TEvResponseTabletIdSequence {
    optional TTabletOwner Owner = 1;
    optional uint64 BeginId = 2;
    optional uint64 EndId = 3;
}

message TEvSeizeTablets {
    optional fixed64 NewOwnerID = 1;
    optional NKikimrSubDomains.TDomainKey FilterDomain = 2;
    optional uint32 MaxTabletsToSeize = 3 [default = 1];
    optional bool WaitForTabletsToRise = 4 [default = true];
}

message TTabletChannelGenInfo {
    optional uint64 Generation = 1;
    optional uint64 Group = 2;
    optional uint64 Version = 3;
    optional uint64 Timestamp = 4;
}

message TTabletChannelInfo {
    optional string StoragePool = 1;
    optional NKikimrStoragePool.TChannelBind Binding = 2;
    repeated TTabletChannelGenInfo History = 3;
    optional bool NeedNewGroup = 4;
}

message TTabletInfo {
    optional fixed64 TabletID = 1;
    optional NKikimrTabletBase.TTabletTypes.EType TabletType = 2;
    optional ETabletVolatileState VolatileState = 3;
    optional uint32 NodeID = 4;
    repeated uint64 ExecutorCounters = 5;
    repeated uint64 ApplicationCounters = 6;
    optional TTabletOwner TabletOwner = 7;
    optional uint32 FollowerID = 8;
    optional uint32 State = 9;                  // THive::ETabletState
    optional NKikimrTabletBase.TMetrics Metrics = 10;
    optional uint32 Generation = 11;
    optional ETabletBootMode TabletBootMode = 12;
    optional NKikimrSubDomains.TDomainKey ObjectDomain = 13;
    optional uint64 ObjectId = 14;
    repeated NKikimrSubDomains.TDomainKey AllowedDomains = 15;
    repeated TFollowerGroup FollowerGroups = 16;
    repeated TTabletChannelInfo TabletChannels = 17;
    optional NActorsProto.TActorId LockedToActor = 18;
    optional uint64 LockedReconnectTimeout = 19;
    optional uint64 TabletStorageVersion = 20;
    optional NKikimrTabletBase.TMetrics ResourceUsage = 21;
    optional uint32 RestartsPerPeriod = 22;
    optional uint64 LastAliveTimestamp = 23;
    optional EBalancerPolicy BalancerPolicy = 24;
}

message TEvSeizeTabletsReply {
    repeated TTabletInfo Tablets = 1;
}

message TEvReleaseTablets {
    optional fixed64 NewOwnerID = 1;
    repeated fixed64 TabletIDs = 2;
}

message TEvReleaseTabletsReply {
    repeated fixed64 TabletIDs = 1;
}

message TEvConfigureHive {
    optional NKikimrSubDomains.TDomainKey Domain = 1;
}

message TEvInitMigration {
    optional TEvSeizeTablets MigrationFilter = 1;
}

message TEvInitMigrationReply {
    optional NKikimrProto.EReplyStatus Status = 1;
}

message TEvQueryMigration {
}

message TEvQueryMigrationReply {
    optional EMigrationState MigrationState = 1;
    optional int32 MigrationProgress = 2;
}

message TTabletStatistics {
    repeated uint64 RestartTimestamp = 1;
    optional uint64 LastAliveTimestamp = 2;
}

message TNodeStatistics {
    repeated uint64 RestartTimestamp = 1;
    optional uint64 LastAliveTimestamp = 2;
}

message TEvRequestTabletOwners {
    optional fixed64 OwnerID = 1;
}

message TTabletOwnerRecord {
    optional fixed64 OwnerID = 1;
    optional uint64 Begin = 2;
    optional uint64 End = 3;
}

message TEvTabletOwnersReply {
    repeated TTabletOwnerRecord TabletOwners = 1;
}

message TEvUpdateTabletsObject {
    optional uint64 ObjectId = 1;
    repeated fixed64 TabletIds = 2;
    optional uint64 TxId = 3;
    optional uint64 TxPartId = 4;
}

message TEvUpdateTabletsObjectReply {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional uint64 TxId = 2;
    optional uint64 TxPartId = 3;
}

message TEvUpdateDomain {
    optional NKikimrSubDomains.TDomainKey DomainKey = 1;
    optional NKikimrSubDomains.EServerlessComputeResourcesMode ServerlessComputeResourcesMode = 2;
    optional uint64 TxId = 3;
}

message TEvUpdateDomainReply {
    optional fixed64 Origin = 1;
    optional uint64 TxId = 2;
}

message TEvRequestTabletDistribution {
    repeated fixed64 TabletIds = 1;
}

message TEvResponseTabletDistribution {
    message TNode {
        optional uint32 NodeId = 1;
        repeated fixed64 TabletIds = 2;
    }
    repeated TNode Nodes = 1;
}
