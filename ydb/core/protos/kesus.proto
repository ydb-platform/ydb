syntax = "proto3";

package NKikimrKesus;

option java_package = "ru.yandex.kikimr.proto";
option cc_enable_arenas = true;

import "ydb/library/actors/protos/actors.proto";
import "ydb/public/api/protos/ydb_coordination.proto";
import "ydb/public/api/protos/ydb_status_codes.proto";
import "ydb/public/api/protos/ydb_issue_message.proto";

message TKesusError {
    Ydb.StatusIds.StatusCode Status = 1;
    repeated Ydb.Issue.IssueMessage Issues = 2;
}

message TEvDummyRequest {
    bool UseTransactions = 1;
}

message TEvDummyResponse {
    // nothing
}

message TEvSetConfig {
    uint64 TxId = 1;
    Ydb.Coordination.Config Config = 2;
    uint64 Version = 3;
    string Path = 4;
}

message TEvSetConfigResult {
    TKesusError Error = 1;
    uint64 TxId = 2;
    uint64 TabletId = 3;
}

message TEvGetConfig {
    // nothing
}

message TEvGetConfigResult {
    Ydb.Coordination.Config Config = 1;
    uint64 Version = 2;
    string Path = 3;
}

message TEvDescribeProxies {
    string KesusPath = 1;
}

message TEvDescribeProxiesResult {
    message TProxyDescription {
        NActorsProto.TActorId ActorID = 1;
        uint64 Generation = 2;
        repeated uint64 AttachedSessions = 3;
    }

    repeated TProxyDescription Proxies = 1;
}

message TEvDescribeSessions {
    string KesusPath = 1;
}

message TEvDescribeSessionsResult {
    message TSessionDescription {
        uint64 SessionId = 1;
        uint64 TimeoutMillis = 2;
        string Description = 3;
        NActorsProto.TActorId OwnerProxy = 4;
    }

    repeated TSessionDescription Sessions = 1;
}

message TEvDescribeSemaphore {
    string KesusPath = 1;
    uint64 ProxyGeneration = 2;
    uint64 SessionId = 3;
    string Name = 4;
    bool IncludeOwners = 5;
    bool IncludeWaiters = 6;
    bool WatchData = 7;
    bool WatchOwners = 8;
}

message TEvDescribeSemaphoreResult {
    uint64 ProxyGeneration = 1;
    TKesusError Error = 2;
    Ydb.Coordination.SemaphoreDescription SemaphoreDescription = 3;
    bool WatchAdded = 4;
}

message TEvDescribeSemaphoreChanged {
    uint64 ProxyGeneration = 1;
    bool DataChanged = 2;
    bool OwnersChanged = 3;
}

message TEvCreateSemaphore {
    string KesusPath = 1;
    uint64 ProxyGeneration = 2;
    uint64 SessionId = 3;
    string Name = 4;
    uint64 Limit = 5;
    bytes Data = 6;
}

message TEvCreateSemaphoreResult {
    uint64 ProxyGeneration = 1;
    TKesusError Error = 2;
}

message TEvUpdateSemaphore {
    string KesusPath = 1;
    uint64 ProxyGeneration = 2;
    uint64 SessionId = 3;
    string Name = 4;
    bytes Data = 5;
}

message TEvUpdateSemaphoreResult {
    uint64 ProxyGeneration = 1;
    TKesusError Error = 2;
}

message TEvDeleteSemaphore {
    string KesusPath = 1;
    uint64 ProxyGeneration = 2;
    uint64 SessionId = 3;
    string Name = 4;
    bool Force = 5;
}

message TEvDeleteSemaphoreResult {
    uint64 ProxyGeneration = 1;
    TKesusError Error = 2;
}

message TEvRegisterProxy {
    string KesusPath = 1;
    uint64 ProxyGeneration = 2;
}

message TEvRegisterProxyResult {
    uint64 ProxyGeneration = 1;
    TKesusError Error = 2;
}

message TEvUnregisterProxy {
    string KesusPath = 1;
    uint64 ProxyGeneration = 2;
}

message TEvUnregisterProxyResult {
    uint64 ProxyGeneration = 1;
    TKesusError Error = 2;
}

message TEvAttachSession {
    string KesusPath = 1;
    uint64 ProxyGeneration = 2;
    uint64 SessionId = 3;
    uint64 TimeoutMillis = 4;
    string Description = 5;
    uint64 SeqNo = 6;
    bytes ProtectionKey = 7;
}

message TEvAttachSessionResult {
    uint64 ProxyGeneration = 1;
    TKesusError Error = 2;
    uint64 SessionId = 3;
}

message TEvDetachSession {
    string KesusPath = 1;
    uint64 ProxyGeneration = 2;
    uint64 SessionId = 3;
}

message TEvDetachSessionResult {
    uint64 ProxyGeneration = 1;
    TKesusError Error = 2;
}

message TEvDestroySession {
    string KesusPath = 1;
    uint64 ProxyGeneration = 2;
    uint64 SessionId = 3;
}

message TEvDestroySessionResult {
    uint64 ProxyGeneration = 1;
    TKesusError Error = 2;
}

message TEvAcquireSemaphore {
    string KesusPath = 1;
    uint64 ProxyGeneration = 2;
    uint64 SessionId = 3;
    string Name = 4;
    uint64 TimeoutMillis = 5;
    uint64 Count = 6;
    bytes Data = 7;
    bool Ephemeral = 8;
}

message TEvAcquireSemaphorePending {
    uint64 ProxyGeneration = 1;
}

message TEvAcquireSemaphoreResult {
    uint64 ProxyGeneration = 1;
    TKesusError Error = 2;
    bool Acquired = 3;
}

message TEvReleaseSemaphore {
    string KesusPath = 1;
    uint64 ProxyGeneration = 2;
    uint64 SessionId = 3;
    string Name = 4;
}

message TEvReleaseSemaphoreResult {
    uint64 ProxyGeneration = 1;
    TKesusError Error = 2;
    bool Released = 3;
}

message TEvProxyExpired {
    uint64 ProxyGeneration = 1;
}

message TEvSessionExpired {
    uint64 SessionId = 1;
}

message TEvSessionStolen {
    uint64 ProxyGeneration = 1;
    uint64 SessionId = 2;
}

//
// Quoter control API.
//
message TAccountingConfig {
    // Account consumed resources and send billing metrics.
    // Default value is false (not inherited).
    bool Enabled = 1;

    // Period to report consumption history from clients to kesus
    // Default value is inherited from parent or equals 5000 ms for root.
    uint64 ReportPeriodMs = 2;

    // Consumption history period that is sent in one message to accounting actor.
    // Default value is inherited from parent or equals 1000 ms for root.
    uint64 AccountPeriodMs = 3;

    // Time window to collect data from every client.
    // Any client account message that is `CollectPeriod` late is discarded (not accounted or billed).
    // Default value is inherited from parent or equals 30 seconds for root.
    uint64 CollectPeriodSec = 4;

    // Provisioned consumption limit in units per second.
    // Effective value is limited by corresponding MaxUnitsPerSecond.
    // Default value is 0 (not inherited).
    double ProvisionedUnitsPerSecond = 5;

    // Provisioned allowed burst equals ProvisionedCoefficient*ProvisionedUnitsPerSecond units.
    // Effective value is limited by corresponding PrefetchCoefficient.
    // Default value is inherited from parent or equals 60 for root.
    double ProvisionedCoefficient = 6;

    // On-demand allowed burst equals OvershootCoefficient*PrefetchCoefficient*MaxUnitsPerSecond units.
    // Should be greater or equal to 1.0
    // Default value is inherited from parent or equals 1.1 for root
    double OvershootCoefficient = 7;

    // Billing metric description.
    message TMetric {
        // Send this metric to billing.
        // Default value is false (not inherited).
        bool Enabled = 1;

        // Billing metric period (aligned to hour boundary).
        // Default value is inherited from parent or equals 60 seconds for root.
        uint64 BillingPeriodSec = 2;

        // Billing metric JSON fields (inherited from parent if not set)
        string Version = 3;
        string Schema = 5;
        string CloudId = 6;
        string FolderId = 7;
        string ResourceId = 8;
        string SourceId = 9;
        map<string, string> Tags = 10;
    }

    // Consumption within provisioned limit.
    // Informative metric that should be sent to billing (not billed).
    TMetric Provisioned = 8;

    // Consumption that exceeds provisioned limit is billed as on-demand.
    TMetric OnDemand = 9;

    // Consumption that exceeds even on-demand limit.
    // Normally it is free and should not be billed.
    TMetric Overshoot = 10;
}

message TReplicatedBucketSettings {
    // Interval between syncs from kesus and between consumption reports in Ms
    // Default value is inherited from parent or equals 5000 ms for root.
    optional uint64 ReportIntervalMs = 1;
}

message THierarchicalDRRResourceConfig {
    // Resource consumption speed limit.
    // Value is required for root resource.
    // 0 is equivalent to not set (inherit value from parent).
    // Must be nonnegative.
    double MaxUnitsPerSecond = 3;

    // Maximum burst size of resource consumption across the whole cluster
    // divided by max_units_per_second.
    // Default value is 1.
    // This means that maximum burst size might be equal to max_units_per_second.
    // 0 is equivalent to not set.
    // Must be nonnegative.
    double MaxBurstSizeCoefficient = 4;

    // Weight of this resource among resource siblings in current resource tree branch.
    // This weight is applied during starvation to share resource among all resource siblings.
    // Default value is 1.
    uint32 Weight = 5;

    // Prefetch in local bucket up to PrefetchCoefficient*MaxUnitsPerSecond units (full size).
    // Default value is inherited from parent or equals 0.2 for root.
    // Disables prefetching if any negative value is set
    // (It is useful to avoid bursts in case of large number of local buckets).
    double PrefetchCoefficient = 6;

    // Prefetching starts if there is less than PrefetchWatermark fraction of full local bucket left.
    // Default value is inherited from parent or equals 0.75 for root.
    // Must be nonnegative and less than or equal to 1.
    double PrefetchWatermark = 7;

    // Prevents bucket from going too deep in negative values. If somebody reports value that will exceed
    // this limit the final amount in bucket will be equal to this limit
    // Should be negative value
    // Zero means no limit
    optional double ImmediatelyFillUpTo = 8;

    oneof LeafBehavior {
        TReplicatedBucketSettings ReplicatedBucket = 9;
    }

    // deprecated settings {
    message TSpeedSettings {
        double MaxUnitsPerSecond = 1; // Max resource consuming speed (== quota).
    }
    TSpeedSettings SpeedSettings = 1; // If not set, value is inherited from parent's limit. Must be set in root node of the tree.
    // deprecated settings }
}

message TStreamingQuoterResource {
    uint64 ResourceId = 1; // For describe request.

    // Resource path. Elements are separated by slash.
    // The first symbol is not slash.
    // The first element is root resource name.
    // Resource path is the path of resource inside coordination node.
    string ResourcePath = 2;

    oneof AlgorithmSpecificConfig {
        // For Hierarchical DRR algorithm.
        THierarchicalDRRResourceConfig HierarchicalDRRResourceConfig = 3;
    }

    TAccountingConfig AccountingConfig = 4;
}

message TEvDescribeQuoterResources {
    // Specify ResourceId or ResourcePath to describe resources.
    repeated uint64 ResourceIds = 1;
    repeated string ResourcePaths = 2;
    bool Recursive = 3;
}

message TEvDescribeQuoterResourcesResult {
    repeated TStreamingQuoterResource Resources = 2;
    TKesusError Error = 3;
}

message TEvAddQuoterResource {
    TStreamingQuoterResource Resource = 3;
}

message TEvAddQuoterResourceResult {
    uint64 ResourceId = 1;
    TKesusError Error = 2;
}

message TEvUpdateQuoterResource {
    TStreamingQuoterResource Resource = 3;
}

message TEvUpdateQuoterResourceResult {
    uint64 ResourceId = 1;
    TKesusError Error = 2;
}

message TEvDeleteQuoterResource {
    // Specify ResourceId or ResourcePath.
    uint64 ResourceId = 3;
    string ResourcePath = 4;
}

message TEvDeleteQuoterResourceResult {
    TKesusError Error = 1;
}

//
// Quoter runtime API.
//

// The first event that is sent to Kesus for given resource.
// This creates session for specified resource if it is not created.
// Kesus will start allocating resource for this client (if Amount > 0).
message TEvSubscribeOnResources {
    message TResourceSubscribeInfo {
        string ResourcePath = 1;
        bool StartConsuming = 2; // In case of StartConsuming == false this will create session, but doesn't start consuming of resource.
        double InitialAmount = 3;
    }
    repeated TResourceSubscribeInfo Resources = 1;
    NActorsProto.TActorId ActorID = 2;
    uint32 ProtocolVersion = 3;
}

message TEvSubscribeOnResourcesResult {
    message TResourceSubscribeResult {
        uint64 ResourceId = 1;
        TKesusError Error = 2;
        TStreamingQuoterResource EffectiveProps = 3;
        double InitialAvailable = 4;
    }
    repeated TResourceSubscribeResult Results = 1; // Resources are in the same order that they were specified in request.
    uint32 ProtocolVersion = 2;
}

// Notification about resources consumption state update.
// Event is sent from client to Kesus.
// Has no result message.
message TEvUpdateConsumptionState {
    message TResourceInfo {
        uint64 ResourceId = 1;
        bool ConsumeResource = 2;
        double Amount = 3;
    }
    repeated TResourceInfo ResourcesInfo = 1;
    NActorsProto.TActorId ActorID = 2;
}

// Ack for TEvUpdateConsumptionState event.
message TEvUpdateConsumptionStateAck {
}

// Notification about new resource allocation.
// Event is sent from Kesus to client.
// Has no result message.
message TEvResourcesAllocated {
    message TResourceInfo {
        uint64 ResourceId = 1;
        double Amount = 2;
        TStreamingQuoterResource EffectiveProps = 3; // Props for resource if they has been changed
        TKesusError StateNotification = 4; // Resource can be deleted during consuming. In this case Kesus will send an error for resource.
    }
    repeated TResourceInfo ResourcesInfo = 1;
}

// Ack for TEvResourcesAllocated event.
message TEvResourcesAllocatedAck {
}

message TEvGetQuoterResourceCounters {
}

message TEvGetQuoterResourceCountersResult {
    message TResourceCounters {
        string ResourcePath = 1;
        uint64 Allocated = 2; // Allocated amount from tablet start/resource creation for this resource and all its children.
    }

    repeated TResourceCounters ResourceCounters = 1;
}

// Account consumed resources into metering.
// Event is sent from client to Kesus.
message TEvAccountResources {
    message TResourceInfo {
        uint64 ResourceId = 1;
        uint64 StartUs = 2; // The first interval start time in microseconds since epoch
        uint64 IntervalUs = 3; // Intervals duration in microseconds
        repeated double Amount = 4; // Amounts of resources consumed during intervals
    }
    repeated TResourceInfo ResourcesInfo = 1;
    NActorsProto.TActorId ActorID = 2;
}

// Ack for TEvAccountResources event.
message TEvAccountResourcesAck {
    message TResourceInfo {
        uint64 ResourceId = 1;
        uint64 AcceptedUs = 2; // Timestamp to drop client's data before (i.e. StartUs for the next request)
        TKesusError StateNotification = 4; // Resource can be deleted before accounting. In this case Kesus will send an error for resource.
    }
    repeated TResourceInfo ResourcesInfo = 1;
}

// Account consumed resources into metering.
// Event is sent from client to Kesus.
message TEvReportResources {
    message TResourceInfo {
        uint64 ResourceId = 1;
        double TotalConsumed = 2;
        uint32 ReportId = 3;
    }
    repeated TResourceInfo ResourcesInfo = 1;
    NActorsProto.TActorId ActorID = 2;
}

// Ack for TEvAccountResources event.
message TEvReportResourcesAck {
    message TResourceInfo {
        uint64 ResourceId = 1;
        TKesusError StateNotification = 4; // Resource can be deleted before accounting. In this case Kesus will send an error for resource.
    }
    repeated TResourceInfo ResourcesInfo = 1;
}

message TEvSyncResources {
    message TResourceInfo {
        uint64 ResourceId = 1;
        double Available = 2;
        uint32 LastReportId = 3; // Last ack report id for this session
    }
    repeated TResourceInfo ResourcesInfo = 1;
}

// Ack for TEvResourcesSync event.
message TEvSyncResourcesAck {
}
