package NKikimrKqp;
option java_package = "ru.yandex.kikimr.proto";
option cc_enable_arenas = true;

import "google/protobuf/duration.proto";
import "ydb/library/actors/protos/actors.proto";
import "ydb/core/scheme/protos/type_info.proto";
import "ydb/core/protos/kqp_physical.proto";
import "ydb/core/protos/kqp_stats.proto";
import "ydb/core/protos/query_stats.proto";
import "ydb/core/protos/data_events.proto";
import "ydb/public/api/protos/ydb_status_codes.proto";
import "ydb/public/api/protos/ydb_table.proto";
import "ydb/public/api/protos/ydb_value.proto";
import "ydb/public/api/protos/ydb_issue_message.proto";
import "ydb/public/api/protos/ydb_topic.proto";
import "ydb/public/api/protos/ydb_query.proto";
import "ydb/library/mkql_proto/protos/minikql.proto";
import "ydb/library/yql/dq/actors/protos/dq_events.proto";
import "ydb/library/yql/dq/actors/protos/dq_stats.proto";
import "ydb/library/yql/dq/proto/dq_tasks.proto";

enum ERequestType {
    REQUEST_TYPE_PROCESS_QUERY = 1;
    REQUEST_TYPE_CLOSE_SESSION = 2;
    REQUEST_TYPE_CREATE_SESSION = 3;
};

enum EQueryType {
    QUERY_TYPE_UNDEFINED = 0;

    reserved 1, 2, 3;

    QUERY_TYPE_SQL_DML = 4;
    QUERY_TYPE_SQL_DDL = 5;
    QUERY_TYPE_PREPARED_DML = 6;
    QUERY_TYPE_AST_DML = 7;
    QUERY_TYPE_SQL_SCRIPT = 8;
    QUERY_TYPE_SQL_SCAN = 9;
    QUERY_TYPE_AST_SCAN = 10;
    QUERY_TYPE_SQL_SCRIPT_STREAMING = 11;

    QUERY_TYPE_SQL_GENERIC_QUERY = 12;
    QUERY_TYPE_SQL_GENERIC_SCRIPT = 13;
    QUERY_TYPE_SQL_GENERIC_CONCURRENT_QUERY = 14;
};

enum EQueryAction {
    QUERY_ACTION_EXECUTE = 1;
    QUERY_ACTION_EXPLAIN = 2;
    QUERY_ACTION_VALIDATE = 3;
    QUERY_ACTION_PREPARE = 4;
    QUERY_ACTION_EXECUTE_PREPARED = 5;
    QUERY_ACTION_BEGIN_TX = 6;
    QUERY_ACTION_COMMIT_TX = 7;
    QUERY_ACTION_ROLLBACK_TX = 8;
    QUERY_ACTION_PARSE = 9;
    QUERY_ACTION_TOPIC = 10;
};

enum EIsolationLevel {
    ISOLATION_LEVEL_UNDEFINED = 0;
    ISOLATION_LEVEL_SERIALIZABLE = 1;
    ISOLATION_LEVEL_READ_COMMITTED = 2;
    ISOLATION_LEVEL_READ_UNCOMMITTED = 3;
    ISOLATION_LEVEL_READ_STALE = 4;
};

enum EQueryReplyFlags {
    QUERY_REPLY_FLAG_RESULTS = 1;
    QUERY_REPLY_FLAG_PLAN = 2;
    QUERY_REPLY_FLAG_AST = 4;
};

message TTopicOperationsRequest {
    optional string Consumer = 1;
    repeated Ydb.Topic.UpdateOffsetsInTransactionRequest.TopicOffsets Topics = 2;
    optional uint32 SupportivePartition = 3;
}

message TTopicOperationsResponse {
    optional int64 WriteId = 1;
};

message TQueryRequest {
    optional bytes SessionId = 1;
    optional string Query = 2;
    optional EQueryType Type = 3;
    reserved 4; // (deprecated) KqlSettings
    optional bool KeepSession = 5;
    reserved 6; // (deprecated) Cluster
    reserved 7; // (deprecated) Parameters
    reserved 8; // (deprecated) SqlAutoCommit
    optional EQueryAction Action = 9;
    reserved 10; // (deprecated) Profile
    optional bytes PreparedQuery = 11;
    optional uint32 ReplyFlags = 12 [default = 1];
    optional Ydb.Table.TransactionControl TxControl = 13;
    optional string Database = 14;
    optional Ydb.Table.QueryCachePolicy QueryCachePolicy = 15;
    optional uint64 CancelAfterMs = 16;
    optional uint64 TimeoutMs = 17;
    reserved 18; // (deprecated) QuerySettings
    reserved 19; // (deprecated) StatsMode
    optional NYql.NDqProto.EDqStatsMode StatsMode = 20; // deprecated
    optional Ydb.Table.QueryStatsCollection.Mode CollectStats = 21;
    optional TTopicOperationsRequest TopicOperations = 22;
    optional bool UsePublicResponseDataFormat = 23;
    map<string, Ydb.TypedValue> YdbParameters = 24;
    optional bool IsInternalCall = 25;
    optional Ydb.Query.Syntax Syntax = 26;
    optional bool CollectDiagnostics = 27;
    optional string ClientAddress = 28;
    optional string ClientPID = 29;
    optional string ClientUserAgent = 30;
    optional string ClientSdkBuildInfo = 31;
    optional string ApplicationName = 32;
    optional string UserSID = 33;
    optional uint64 OutputChunkMaxSize = 34;
}

message TKqpPathIdProto {
    optional uint32 OwnerId = 1;
    optional uint32 TableId = 2;
}

message TIndexDescriptionProto {
    optional string Name = 1;
    optional uint32 Type = 2;
    optional uint32 State = 3;
    optional uint32 SchemaVersion = 4;
    optional uint32 LocalPathId = 5;
    optional uint32 PathOwnerId = 6;
    repeated string KeyColumns = 7;
    repeated string DataColumns = 8;
};

message TKqpColumnMetadataProto {
    enum EDefaultKind {
        DEFAULT_KIND_UNSPECIFIED = 0;
        DEFAULT_KIND_NULL = 1;
        DEFAULT_KIND_SEQUENCE = 2;
        DEFAULT_KIND_LITERAL = 3;
    };

    optional string Name = 1;
    optional uint32 Id = 2;
    optional string Type = 3;
    optional uint32 TypeId = 4;
    optional NKikimrProto.TTypeInfo TypeInfo = 7;
    repeated string Family = 5;
    optional bool NotNull = 6 [default = false];
    optional string DefaultFromSequence = 8;
    optional EDefaultKind DefaultKind = 9;
    optional Ydb.TypedValue DefaultFromLiteral = 10;
    // flag that indicates that column is currently under the build
    // operation.
    optional bool IsBuildInProgress = 11 [default = false];
};

message TKqpTableMetadataProto {
    message TAttributeProto {
        optional string Key = 1;
        optional string Value = 2;
    }

    optional bool DoesExist = 1;
    optional string Cluster  = 2;
    optional string Name = 3;
    optional string SysView = 4;
    optional TKqpPathIdProto PathId = 5;
    optional uint32 SchemaVersion = 6;
    optional uint32 Kind = 7;
    repeated TAttributeProto Attributes = 8;
    repeated TKqpColumnMetadataProto Columns = 9;
    repeated string KeyColunmNames = 10;
    repeated TIndexDescriptionProto Indexes = 11;
    repeated TKqpTableMetadataProto SecondaryGlobalIndexMetadata = 12;
    optional uint64 RecordsCount = 13;
    optional uint64 DataSize = 14;
}

message TRlPath {
    optional string CoordinationNode = 1;
    optional string ResourcePath = 2;
}

message TEvQueryRequest {
    optional TQueryRequest Request = 1;
    optional string TraceId = 2;
    optional string UserToken = 3;
    optional NActorsProto.TActorId RequestActorId = 4;
    optional string RequestType = 5;
    optional TRlPath RlPath = 6;

    repeated Ydb.Issue.IssueMessage QueryIssues = 7;
    optional Ydb.StatusIds.StatusCode YdbStatus = 8;
    optional NActorsProto.TActorId CancelationActor = 9;
}

message TMkqlProfile {
    optional string Query = 1;
    optional NKikimrQueryStats.TTxStats TxStats = 2;
};

message TTransformProfile {
    optional string Name = 1;
    optional uint64 TransformDurationUs = 2;
    optional uint64 WaitDurationUs = 3;
    optional int32 NewExprNodes = 4;
    optional int32 NewTypeNodes = 5;
    optional uint32 Repeats = 6;
    optional uint32 Restarts = 7;

    repeated TTransformProfile Stages = 100;
}

message TKqlProfile {
    optional string Query = 1;
    repeated TMkqlProfile MkqlProfiles = 2;
    optional EIsolationLevel EffectiveIsolationLevel = 3;
    optional TTransformProfile TransformStats = 4;
}

message TQueryProfile {
    repeated TKqlProfile KqlProfiles = 1;
    optional TTransformProfile TransformStats = 2;
};

message TParameterBinding {
    optional string Name = 1;
    optional uint32 MkqlIndex = 2;
    optional uint32 ResultIndex = 3;
}

message TPreparedResult {
    optional uint32 KqlIndex = 1;
    optional uint32 ResultIndex = 2;
    repeated string ColumnHints = 3;
    optional uint64 RowsLimit = 4;
};

message TParameterDescription {
    optional string Name = 1;
    optional NKikimrMiniKQL.TType Type = 2;
}

message TPreparedQuery {
    enum EVersion {
        VERSION_UNSPECIFIED = 0;
        VERSION_V1_DEPRECATED = 1;
        VERSION_PHYSICAL_V1 = 11;
    };

    optional uint32 Version = 1;
    reserved 2; // (deprecated) Kqls
    repeated TPreparedResult Results = 3;
    repeated TParameterDescription Parameters = 4;
    optional string Text = 5;
    optional NKqpProto.TKqpPhyQuery PhysicalQuery = 6;
};

message TQueryResponsePgInfo {
    optional string CommandTag = 1;
}

message TQueryResponseExtraInfo {
    optional TQueryResponsePgInfo PgInfo = 1;
}

message TQueryResponse {
    optional bytes SessionId = 1;
    reserved 2; // (deprecated) QueryErrors
    repeated NKikimrMiniKQL.TResult Results = 3;
    // optional TQueryProfile Profile = 4; // TODO: Deprecate, use QueryStats
    reserved 4;
    optional bytes PreparedQuery = 5;
    optional string QueryAst = 6;
    reserved 7;
    repeated Ydb.Issue.IssueMessage QueryIssues = 8;
    optional bytes QueryPlan = 9;
    repeated TParameterDescription QueryParameters = 10;
    optional Ydb.Table.TransactionMeta TxMeta = 11;
    optional NKqpProto.TKqpStatsQuery QueryStats = 12;
    repeated Ydb.ResultSet YdbResults = 13;
    optional TTopicOperationsResponse TopicOperations = 14;
    optional string QueryDiagnostics = 15;
    optional TQueryResponseExtraInfo ExtraInfo = 16;
}

message TEvQueryResponse {
    reserved 1; // (deprecated) KqpStatus
    reserved 2; // (deprecated) KqpError
    optional TQueryResponse Response = 3;
    optional Ydb.StatusIds.StatusCode YdbStatus = 4;
    reserved 5; // (deprecated) ForcedNewEngine
    optional uint64 ConsumedRu = 6;
    optional bool WorkerIsClosing = 7 [default = false];
}

message TCloseSessionRequest {
    optional bytes SessionId = 1;
}

message TEvCloseSessionRequest {
    optional TCloseSessionRequest Request = 1;
    optional string TraceId = 2;
}

message TCloseSessionResponse {
    optional bytes SessionId = 1;
    optional bool Closed = 2;
}

message TEvCloseSessionResponse {
    optional Ydb.StatusIds.StatusCode Status = 1;
    repeated Ydb.Issue.IssueMessage Issues = 2;
    optional TCloseSessionResponse Response = 3;
}

message TEvProcessResponse {
    reserved 1; // (deprecated) KqpStatus
    optional bytes Error = 2;
    optional Ydb.StatusIds.StatusCode YdbStatus = 3;
    optional bool WorkerIsClosing = 4 [default = false];
}

message TSessionInfo {
    optional string SessionId = 1;
    /// optional ui32 NodeId = 2;
    optional string ClientAddress = 3;
    optional string ClientPID = 4;
    optional string ClientUserAgent = 5;
    optional string ClientSdkBuildInfo = 6;
    optional string ApplicationName = 7;
    optional string Query = 8;
    optional int64 QueryCount = 9;
    optional string State = 10;
    optional int64 SessionStartAt = 11;
    optional int64 QueryStartAt = 12;
    optional int64 StateChangeAt = 13;
    optional string UserSID = 14;
    optional bool PgWire = 15 [default = false];
    optional string UserName = 16;
}

message TEvListSessionsRequest {
    optional string SessionIdStart = 1;
    optional bool SessionIdStartInclusive = 2;
    optional string SessionIdEnd = 3;
    optional bool SessionIdEndInclusive = 4;
    repeated uint32 Columns = 5;
    optional int64 FreeSpace = 6;
    optional int64 Limit = 7;
}

message TEvListSessionsResponse {
    optional int64 NodeId = 1;
    repeated TSessionInfo Sessions = 2;
    optional bool Finished = 3;
    optional string ContinuationToken = 4;
}

message TKqpSetting {
    required string Name = 1;
    required string Value = 2;
}

message TKqpDefaultSettings {
    repeated TKqpSetting DefaultSettings = 1;
}

message TCreateSessionRequest {
    optional string Database = 1;
}

message TEvCreateSessionRequest {
    optional TCreateSessionRequest Request = 1;
    optional string TraceId = 2;
    optional uint64 DeadlineUs = 3;
    // the flag that indicates that session can be created on the different
    // node in the cluster.
    // If flag is true, kqp proxy will create session  on the different node,
    // if flag is false, in this case proxy will create session locally.
    optional bool CanCreateRemoteSession = 4 [default = false];
    optional bool SupportsBalancing = 5 [default = false];
    optional bool PgWire = 6 [default = false];

    optional string ClientAddress = 7;
    optional string ClientPID = 8;
    optional string ClientUserAgent = 9;
    optional string ClientSdkBuildInfo = 10;
    optional string ApplicationName = 11;
    optional string UserSID = 12;
    optional string UserName = 13;
}

message TCreateSessionResponse {
    optional bytes SessionId = 1;
    optional int64 NodeId = 2;
}

message TEvCreateSessionResponse {
    reserved 1; // (deprecated) KqpStatus
    optional bytes Error = 2;
    optional TCreateSessionResponse Response = 3;
    optional Ydb.StatusIds.StatusCode YdbStatus = 4;
    optional bool ResourceExhausted = 5 [default = false];
}

message TPingSessionRequest {
    optional bytes SessionId = 1;
    optional uint32 TimeoutMs = 2 [default = 5000];
    optional bool deprecated = 3;
    optional NActorsProto.TActorId ExtSessionCtrlActorId = 4;
}

message TEvPingSessionRequest {
    optional TPingSessionRequest Request = 1;
    optional string TraceId = 2;
}

message TPingSessionResponse {
    optional Ydb.Table.KeepAliveResult.SessionStatus SessionStatus = 1;
}

message TEvPingSessionResponse {
    optional Ydb.StatusIds.StatusCode Status = 1;
    repeated Ydb.Issue.IssueMessage Issues = 2;
    optional TPingSessionResponse Response = 3;
    optional bool WorkerIsClosing = 4 [default = false];
}

message TEvDataQueryStreamPart {
    optional NActorsProto.TActorId GatewayActorId = 1;
    repeated NKikimrMiniKQL.TResult Results = 2;
};

message TCancelQueryRequest {
    optional bytes SessionId = 1;
};

message TEvCancelQueryRequest {
    optional TCancelQueryRequest Request = 1;
    optional string TraceId = 2;
};

message TEvCancelQueryResponse {
    optional Ydb.StatusIds.StatusCode Status = 1;
    repeated Ydb.Issue.IssueMessage Issues = 2;
}

// Executer

message TExecuterTxRequest {
    optional uint64 TxId = 1;
};

message TEvExecuterTxRequest {
    optional TExecuterTxRequest Request = 1;
    optional NActorsProto.TActorId Target = 2;
    optional string TraceId = 3;
    optional string UserToken = 4;
};

message TExecuterTxResult {
    reserved 3;
    optional NKikimrMiniKQL.TResult Locks = 4;
    reserved 5; // (deprecated) Stats
    optional NYql.NDqProto.TDqExecutionStats Stats = 6;
    reserved 7;
};

message TExecuterTxResponse {
    optional Ydb.StatusIds.StatusCode Status = 1;
    repeated Ydb.Issue.IssueMessage Issues = 2;
    optional TExecuterTxResult Result = 3;
};

message TEvExecuterTxResponse {
    optional TExecuterTxResponse Response = 1;
};

message TEvExecuterStreamData {
    optional Ydb.ResultSet ResultSet = 1;
    optional uint64 SeqNo = 2;
    optional uint32 QueryResultIndex = 3;
    optional uint32 ChannelId = 4;
    optional NActorsProto.TActorId ChannelActorId = 5;
};

message TEvExecuterStreamDataAck {
    optional uint64 SeqNo = 1;
    optional int64 FreeSpace = 2;
    optional bool Enough = 3 [default = false];
    optional uint32 ChannelId = 4;
    optional NActorsProto.TActorId ChannelActorId = 5;
};

message TEvExecuterStreamProfile {
    reserved 1; // (deprecated) Profile
    optional NYql.NDqProto.TDqExecutionStats Profile = 2;
};

// 1. Executer fills progress stats from it's own execution
// 2. Session adds stats from early finished executions and builds complete plan
message TEvExecuterProgress {
    optional NActorsProto.TActorId ExecuterActorId = 1;
    optional string QueryPlan = 2;
    optional NKqpProto.TKqpStatsQuery QueryStats = 3;
};

message TKqpProxyNodeResources {
    optional uint32 NodeId = 1;
    optional uint64 DataCenterNumId = 2;
    optional uint32 ActiveWorkersCount = 3;
    optional string DataCenterId = 4;
    optional double CpuUsage = 5;
    optional uint32 Threads = 6;
}

message TKqpSnapshot {
    optional uint64 Step = 1;
    optional uint64 TxId = 2;
}

/// Legacy ResourceManager events //////////////////////////////////////////////////////////////////////////////////////
message TEvStartComputeTasks {
    optional uint64 TxId = 1;
    repeated NYql.NDqProto.TDqTask Tasks = 2;
    reserved 3; // (deprecated) WaitResourcesTimeoutMs
    optional NYql.NDqProto.TComputeRuntimeSettings RuntimeSettings = 4;
    optional NActorsProto.TActorId ExecuterActorId = 5; // overwrite for ev->Sender

    optional TKqpSnapshot Snapshot = 8;
}

message TEvStartComputeTasksFailure {
    optional uint64 TxId = 1;

    enum EReason {
        MEMORY_LIMIT_EXCEEDED = 1;         // total memory limit per query and per node
        NOT_ENOUGH_MEMORY = 2;             // not enough memory at moment
        COMPUTE_ACTORS_LIMIT_EXCEEDED = 3; // -//-
        NOT_ENOUGH_COMPUTE_ACTORS = 4;     // -//-
        REQUEST_ALREADY_EXISTS = 5;
        NOT_READY = 6;                     // ResourceManager not ready yet
    }
    optional EReason Reason = 2;
    optional string Message = 3;
}

message TEvStartedComputeTasks {
    optional uint64 TxId = 1;

    message TStartedTask {
        optional uint64 TaskId = 1;
        optional NActorsProto.TActorId ActorId = 2;
    }
    repeated TStartedTask StartedTasks = 2;
}

message TEvCancelComputeTasks {
    optional uint64 TxId = 1;
    repeated Ydb.Issue.IssueMessage Issues = 2;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// KQP Node Events ////////////////////////////////////////////////////////////////////////////////////////////////////
message TEvStartKqpTasksRequest {
    optional uint64 TxId = 1;
    repeated NYql.NDqProto.TDqTask Tasks = 2;
    optional NYql.NDqProto.TComputeRuntimeSettings RuntimeSettings = 3;
    optional NActorsProto.TActorId ExecuterActorId = 4;
    optional TKqpSnapshot Snapshot = 5;
    optional bool StartAllOrFail = 6 [default = true];
    optional uint64 OutputChunkMaxSize = 7 [default = 0]; // 0 - use some default value 
    optional string SerializedGUCSettings = 8;
}

message TEvStartKqpTasksResponse {
    message TStartedTask {
        optional uint64 TaskId = 1;
        optional NActorsProto.TActorId ActorId = 2;
    }

    enum ENotStartedTaskReason {
        // node limits
        NOT_ENOUGH_MEMORY = 1;
        NOT_ENOUGH_EXECUTION_UNITS = 2;
        // query limits
        QUERY_MEMORY_LIMIT_EXCEEDED = 3;
        QUERY_EXECUTION_UNITS_LIMIT_EXCEEDED = 4;
        // any other error
        INTERNAL_ERROR = 5;
    }

    message TNotStartedTask {
        optional uint64 TaskId = 1;
        optional ENotStartedTaskReason Reason = 2;
        optional string Message = 3;
    }

    optional uint64 TxId = 1;
    repeated TStartedTask StartedTasks = 2;
    repeated TNotStartedTask NotStartedTasks = 3;
}

message TEvCancelKqpTasksRequest {
    optional uint64 TxId = 1;
    optional string Reason = 2;
}

message TEvCancelKqpTasksResponse {
}

message TResourceExchangeBoardData {
    optional NActorsProto.TActorId Owner = 1;
    optional bytes Ulid = 2;
    optional NActorsProto.TActorId Publisher = 3;
}

message TKqpNodeResources {
    optional NActorsProto.TActorId ResourceManagerActorId = 2; // legacy
    optional uint32 AvailableComputeActors = 4; // legacy
    optional uint64 UsedMemory = 5; // legacy
    optional uint64 TotalMemory = 7; // legacy
    message TTxResources {
        optional uint64 TxId = 1;
        optional uint32 ComputeActors = 2;
        optional uint64 Memory = 3;
        optional uint32 StartTimestamp = 4;
    }
    repeated TTxResources Transactions = 6; // legacy

    ////////////////////////////////////////////////////

    optional uint32 NodeId = 1;
    optional uint32 Timestamp = 3;

    message TMemory {
        optional uint32 Pool = 1;
        optional uint64 Available = 2;
    }
    repeated TMemory Memory = 8;
    optional uint32 ExecutionUnits = 9;

    optional TKqpProxyNodeResources KqpProxyNodeResources = 10;
}

/// Scans
message TEvScanInitActor {
    optional uint64 ScanId = 1;
    optional NActorsProto.TActorId ScanActorId = 2;
    optional uint32 Generation = 3;
    optional uint64 TabletId = 4;
};

message TEvScanError {
    optional Ydb.StatusIds.StatusCode Status = 1;
    repeated Ydb.Issue.IssueMessage Issues = 2;
    optional uint32 Generation = 3;
    optional uint64 TabletId = 4;
}

message TEvRemoteScanData {
    optional uint32 ScanId = 1;
    optional uint64 CpuTimeUs = 2;
    optional uint64 WaitTimeMs = 3;
    optional uint32 PageFaults = 4;
    optional bool PageFault = 5;
    optional bool Finished = 6;
    optional bytes LastKey = 7;
    optional uint32 Generation = 9;

    message TArrowBatch {
        optional bytes Schema = 1;
        optional bytes Batch = 2;
    }

    // Only one of the fields Rows and ArrowBatch must be filled. However, we can not use oneof feature because Rows
    // field is repeated. Moving it into oneof is impossible. We may wrap it into a message but this would break
    // backwards comparability.
    repeated bytes Rows = 8;
    optional TArrowBatch ArrowBatch = 10;

    optional bool RequestedBytesLimitReached = 11 [default = false];
    optional uint32 AvailablePacks = 12;
}

message TEvRemoteScanDataAck {
    optional uint64 FreeSpace = 1;
    optional uint32 Generation = 2;
    optional uint32 MaxChunksCount = 3;
}

message TEvRemoteCostData {
    message TIntervalMeta {
        optional bool IntervalSkipped = 1[default = false];
        optional bool MarkIncluded = 2[default = true];
    }

    message TCostInfo {
        repeated TIntervalMeta IntervalMeta = 1;
        optional bool LeftBorderOpened = 2;
        // ColumnsData contains RecordBatch with schema that serialized in ColumnsSchema
        optional bytes ColumnsData = 3;
        optional bytes ColumnsSchema = 4;
    }

    optional uint32 ScanId = 1;
    optional TCostInfo CostInfo = 2;
}

message TEvKillScanTablet {
}

message TEvKqpOutputActorResultInfo {
    repeated NKikimrDataEvents.TLock Locks = 1;
}

message TKqpTableSinkLocks {
    repeated NKikimrDataEvents.TLock Locks = 1;
    repeated uint64 SendingShards = 2;
    repeated uint64 ReceivingShards = 3;
}

message TKqpTableSinkSettings {
    optional NKqpProto.TKqpPhyTableId Table = 3;
    repeated TKqpColumnMetadataProto KeyColumns = 4;
    repeated TKqpColumnMetadataProto Columns = 5;
    optional uint64 LockTxId = 6;
    optional uint64 LockNodeId = 7;
    optional bool FinalTx = 8; // If tx is immediate then commit, otherwise send prepare
    optional bool ImmediateTx = 9; // Try to be immediate tx
    optional bool InconsistentTx = 10; // Write each batch in it's own single immediate tx
    optional TKqpTableSinkLocks Locks = 11;
}

message TKqpStreamLookupSettings {
     optional NKqpProto.TKqpPhyTableId Table = 1;
     repeated TKqpColumnMetadataProto KeyColumns = 2;
     repeated TKqpColumnMetadataProto Columns = 3;
     optional TKqpSnapshot Snapshot = 4;
     optional uint64 LockTxId = 5;
     optional bool ImmediateTx = 6;
     repeated string LookupKeyColumns = 7;
     optional NKqpProto.EStreamLookupStrategy LookupStrategy = 8;
     optional bool AllowInconsistentReads = 9 [default = false];
}

message TKqpSequencerSettings {
    optional NKqpProto.TKqpPhyTableId Table = 1;
    repeated TKqpColumnMetadataProto Columns = 2;
    optional string Database = 3;
}

message TResourceExchangeNodeData {
    optional TKqpNodeResources Resources = 1;
    optional TResourceExchangeBoardData ResourceExchangeBoardData = 2;
    optional uint64 Round = 3;
}

message TResourceExchangeSnapshot {
    optional bool NeedResending = 1;
    repeated TResourceExchangeNodeData Snapshot = 2;
}

// Request that is sent to run script actor to cancel execution and write finish status to database.
message TEvCancelScriptExecutionRequest {
}

message TEvCancelScriptExecutionResponse {
    optional Ydb.StatusIds.StatusCode Status = 1;
    repeated Ydb.Issue.IssueMessage Issues = 2;
}

// Request that is sent to run script actor to check his existence.
message TEvCheckAliveRequest {
}

message TEvCheckAliveResponse {
}

// stored in column "meta" of .metadata/script_executions table
message TScriptExecutionOperationMeta {
    optional google.protobuf.Duration OperationTtl = 1;
    optional google.protobuf.Duration ResultsTtl = 2;
}
