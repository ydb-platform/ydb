syntax = "proto3";
option cc_enable_arenas = true;

package NKqpProto;
option java_package = "ru.yandex.kikimr.proto";

import "google/protobuf/any.proto";
import "ydb/core/protos/flat_scheme_op.proto";
import "ydb/library/mkql_proto/protos/minikql.proto";
import "ydb/library/yql/dq/proto/dq_tasks.proto";
import "ydb/public/api/protos/ydb_value.proto";
import "ydb/core/protos/index_builder.proto";

message TKqpPhyExternalBinding {
}

message TKqpPhyInternalBinding {
    enum EType {
        PARAM_UNSPECIFIED = 0;
        PARAM_NOW = 1;
        PARAM_CURRENT_DATE = 2;
        PARAM_CURRENT_DATETIME = 3;
        PARAM_CURRENT_TIMESTAMP = 4;
        PARAM_RANDOM_NUMBER = 5;
        PARAM_RANDOM = 6;
        PARAM_RANDOM_UUID = 7;
    };

    EType Type = 1;
}

message TKqpPhyTxResultBinding {
    uint32 TxIndex = 1;
    uint32 ResultIndex = 2;
}

message TKqpPhyParamBinding {
    string Name = 1;

    oneof Type {
        TKqpPhyExternalBinding ExternalBinding = 2;
        TKqpPhyTxResultBinding TxResultBinding = 3;
        TKqpPhyInternalBinding InternalBinding = 4;
    }
}

message TResultSetMeta {
    repeated Ydb.Column columns = 1;
};

message TKqpPhyResultBinding {
    oneof Type {
        TKqpPhyTxResultBinding TxResultBinding = 1;
    }
    TResultSetMeta ResultSetMeta = 2;
}

message TKqpPhyColumnId {
    uint32 Id = 1;
    string Name = 2;
}

message TKqpPhyColumn {
    TKqpPhyColumnId Id = 1;
    uint32 TypeId = 2;
    string PgTypeName = 3;
    oneof DefaultKind {
        string DefaultFromSequence = 4;
        Ydb.TypedValue DefaultFromLiteral = 5;
    }
    bool NotNull = 6;
    // flag that indicates that column is currently under the build
    // operation.
    optional bool IsBuildInProgress = 7;
}

enum EKqpPhyTableKind {
    TABLE_KIND_UNSPECIFIED = 0;
    TABLE_KIND_DS = 1;
    TABLE_KIND_OLAP = 2;
    TABLE_KIND_SYS_VIEW = 3;
    TABLE_KIND_EXTERNAL = 4;
}

message TKqpPhyTableId {
    string Path = 1;
    uint64 OwnerId = 2;
    uint64 TableId = 3;
    string SysView = 4;
    uint64 Version = 5;
}

message TKqpPhyTable {
    TKqpPhyTableId Id = 1;
    EKqpPhyTableKind Kind = 2;
    map<uint32, TKqpPhyColumn> Columns = 3;
    repeated TKqpPhyColumnId KeyColumns = 4;
}

message TKqpPhyParamValue {
    string ParamName = 1;
}

message TKqpPhyParamElementValue {
    string ParamName = 1;
    uint32 ElementIndex = 2;
}

message TKqpPhyLiteralValue {
    NKikimrMiniKQL.TType Type = 1;
    NKikimrMiniKQL.TValue Value = 2;
}

message TKqpPhyRowsList {
    message TValue {
        oneof Kind {
            TKqpPhyParamValue ParamValue = 1;
            TKqpPhyLiteralValue LiteralValue = 2;
        }
    }

    message TRow {
        map<string, TValue> Columns = 1;
    }

    repeated TRow Rows = 1;
}

message TKqpPhyValue {
    oneof Kind {
        TKqpPhyParamValue ParamValue = 1;               // any type here (value, list of structs, ...)
        TKqpPhyParamElementValue ParamElementValue = 2; // any type here (value, list of structs, ...)
        TKqpPhyRowsList RowsList = 3;                   // list of structs
        TKqpPhyLiteralValue LiteralValue = 4;          // value
    }
}

message TKqpPhyKeyBound {
    repeated TKqpPhyValue Values = 1;
    bool IsInclusive = 2;
}

message TKqpPhyKeyRange {
    TKqpPhyKeyBound From = 1;
    TKqpPhyKeyBound To = 2;
    bool RangeIsPoint = 3;
}

message TKqpPhyOpReadRange {
    TKqpPhyKeyRange KeyRange = 1;
    TKqpPhyValue ItemsLimit = 2;
    bool Reverse = 3;
    repeated bool SkipNullKeys = 4;
}

message TKqpPhyOpUpsertRows {
    TKqpPhyValue RowsValue = 1;
}

message TKqpPhyOpDeleteRows {
    TKqpPhyValue RowsValue = 1;
}

message TKqpPhyOpLookup {
    TKqpPhyValue KeysValue = 1;
}

message TKqpPhyOpReadOlapRanges {
    enum EReadType {
        ROWS = 0;
        BLOCKS = 1;
    }
    // Parameter come here from computation stage. It has type Tuple(List(Tuple(RangeBegin, RangeEnd))))
    // Where RangeBegin and RangeEnd are Tuple(KeyColumns, Inclusive)
    // Where KeyColumns is values of start/end of range for corresponding key column in table
    TKqpPhyParamValue KeyRanges = 1;
    // Limit value, shard may stop after reading limit rows
    TKqpPhyValue ItemsLimit = 2;
    // Reverse sign, i.e. if user ask ORDER BY ... DESC we need to read table in reverse direction
    bool Reverse = 3;
    // Program in NKikimrSSA.TProgram format
    bytes OlapProgram = 4;
    /*
     * Serialized parameters names for current program, this used for extract parameters used by
     * program only from all parameters. Unfortunately we can not fill schema when compile OLAP program,
     * it is done a bit later in executor, so we need separate field for parameter names.
     */
    repeated string OlapProgramParameterNames = 5;
    // Sorted sign which indicates that read operation should return a sorted data out of the
    // dedicated actors or we can relax constraints here and return unsorted data.
    bool Sorted = 6;

    // Stores type of read result from Column Shard
    Ydb.Type ResultType = 7;

    // Type of read result: unboxed values or Arrow blocks of data
    EReadType ReadType = 13;

    repeated string GroupByColumnNames = 14;
}

message TKqpPhyOpReadRanges {
    // Parameter come here from computation stage. It has type Tuple(List(Tuple(RangeBegin, RangeEnd))))
    // Where RangeBegin and RangeEnd are Tuple(KeyColumns, Inclusive)
    // Where KeyColumns is values of start/end of range for corresponding key column in table
    // Also it has special case - empty name. This means full scan.
    TKqpPhyParamValue KeyRanges = 1;
    // Limit value, shard may stop after reading limit rows
    TKqpPhyValue ItemsLimit = 2;
    // Reverse sign, i.e. if user ask ORDER BY ... DESC we need to read table in reverse direction
    bool Reverse = 3;
}

message TKqpPhyTableOperation {
    TKqpPhyTableId Table = 1;
    repeated TKqpPhyColumnId Columns = 2;

    oneof Type {
        TKqpPhyOpReadRange ReadRange = 3;
        TKqpPhyOpUpsertRows UpsertRows = 4;
        TKqpPhyOpDeleteRows DeleteRows = 5;
        TKqpPhyOpLookup Lookup = 6;
        TKqpPhyOpReadOlapRanges ReadOlapRange = 7;
        TKqpPhyOpReadRanges ReadRanges = 8;
    }
}

message TKqpPhyCnUnionAll {
}

message TKqpPhyCnMap {
}

message TKqpPhyCnHashShuffle {
    repeated string KeyColumns = 1;
}

message TKqpPhyCnBroadcast {
}

message TKqpPhyCnMapShard {
}

message TKqpPhyCnShuffleShard {
}

message TKqpPhyCnResult {
}

message TKqpPhyCnValue {
}

message TKqpPhySortColumn {
    string Column = 1;
    bool Ascending = 2;
}

message TKqpPhyCnMerge {
    repeated TKqpPhySortColumn SortColumns = 1;
}

enum EStreamLookupStrategy {
    UNSPECIFIED = 0;
    LOOKUP = 1;
    JOIN = 2;
};

message TKqpPhyCnStreamLookup {
    TKqpPhyTableId Table = 1;
    repeated string KeyColumns = 2;
    repeated string Columns = 3;
    bytes LookupKeysType = 4;
    bytes ResultType = 5;
    EStreamLookupStrategy LookupStrategy = 6;
}

message TKqpPhyCnSequencer {
    TKqpPhyTableId Table = 1;
    repeated string Columns = 2;
    repeated string AutoIncrementColumns = 3;
    bytes InputType = 4;
    bytes OutputType = 5;
}

message TKqpPhyConnection {
    uint32 StageIndex = 1;
    uint32 OutputIndex = 2;
    uint32 InputIndex = 13;

    oneof Type {
        TKqpPhyCnUnionAll UnionAll = 3;
        TKqpPhyCnMap Map = 4;
        TKqpPhyCnHashShuffle HashShuffle = 5;
        TKqpPhyCnBroadcast Broadcast = 6;
        TKqpPhyCnMapShard MapShard = 7;
        TKqpPhyCnShuffleShard ShuffleShard = 8;
        TKqpPhyCnResult Result = 9;
        TKqpPhyCnValue Value = 10;
        TKqpPhyCnMerge Merge = 11;
        TKqpPhyCnStreamLookup StreamLookup = 12;
        TKqpPhyCnSequencer Sequencer = 14;
    };
}

message TKqpReadRangesSource {
    TKqpPhyTableId Table = 1;
    repeated TKqpPhyColumnId Columns = 2;
    TKqpPhyValue ItemsLimit = 3;
    bool Reverse = 4;
    bool Sorted = 5;

    oneof RangesExpr {
        TKqpPhyParamValue Ranges = 6;
        TKqpPhyKeyRange KeyRange = 7;
    }

    repeated string SkipNullKeys = 8;
    uint64 SequentialInFlightShards = 9;
}

message TKqpExternalSource {
    string Type = 1;
    google.protobuf.Any Settings = 2;

    // Partitioning
    string TaskParamKey = 3;
    repeated string PartitionedTaskParams = 4;

    string SourceName = 5;
    string AuthInfo = 6;
}

message TKqpSource {
    uint32 InputIndex = 1;

    oneof Type {
        TKqpReadRangesSource ReadRangesSource = 3;
        TKqpExternalSource ExternalSource = 4;
    }
}

message TKqpExternalSink {
    string Type = 1;
    google.protobuf.Any Settings = 2;

    string SinkName = 3;
    string AuthInfo = 4;
}

message TKqpInternalSink {
    string Type = 1;
    google.protobuf.Any Settings = 2;
}

message TKqpSink {
    uint32 OutputIndex = 1;

    oneof Type {
        TKqpExternalSink ExternalSink = 2;
        TKqpInternalSink InternalSink = 3;
    }
}

message TKqpPhyStage {
    NYql.NDqProto.TProgram Program = 1;
    repeated string ProgramParameters = 2;
    string ProgramAst = 3;
    repeated TKqpPhyConnection Inputs = 4;
    uint32 OutputsCount = 5;
    repeated TKqpPhyTableOperation TableOps = 6;
    bool IsEffectsStage = 7;
    string StageGuid = 8;
    repeated TKqpSource Sources = 9;
    bool IsSinglePartition = 10;
    repeated TKqpSink Sinks = 11;
    map<string, string> SecureParams = 12;
    bool AllowWithSpilling = 13;
}

message TKqpPhyResult {
    TKqpPhyConnection Connection = 1;
    NKikimrMiniKQL.TType ItemType = 2;
    bool IsStream = 3;
    repeated string ColumnHints = 4;
    optional uint32 QueryResultIndex = 5;
}

message TKqpPhyMetadataOperation {
    message TColumnValue {
        string Column = 1;
        Ydb.Value Value = 2;
    }
    repeated TColumnValue ColumnValues = 1;

    optional bool SuccessOnNotExist = 2;
    optional bool SuccessOnAlreadyExists = 3;
}

message TKqpSchemeOperation {
    enum EFlags {
        FLAG_UNSPECIFIED = 0;
        FLAG_PG_MODE = 1; // set if pg compatible mode
        FLAG_IF_NOT_EXISTS = 2; // set if IF_NOT_EXISTS modificator present
    };

    // If the object is modified, this field is not empty
    // and in that case modification will be through
    // NMetadata::IClassBehaviour way
    string ObjectType = 100;

    oneof Operation {
        NKikimrSchemeOp.TModifyScheme CreateTable = 1;
        NKikimrSchemeOp.TModifyScheme DropTable = 2;
        NKikimrSchemeOp.TModifyScheme AlterTable = 3;
        NKikimrIndexBuilder.TIndexBuildSettings BuildOperation = 4;
        NKikimrSchemeOp.TModifyScheme CreateUser = 5;
        NKikimrSchemeOp.TModifyScheme AlterUser = 6;
        NKikimrSchemeOp.TModifyScheme DropUser = 7;
        NKikimrSchemeOp.TModifyScheme CreateGroup = 8;
        NKikimrSchemeOp.TModifyScheme AddGroupMembership = 9;
        NKikimrSchemeOp.TModifyScheme RemoveGroupMembership = 10;
        NKikimrSchemeOp.TModifyScheme DropGroup = 11;
        NKikimrSchemeOp.TModifyScheme RenameGroup = 12;
        NKikimrSchemeOp.TModifyScheme CreateExternalDataSource = 13;
        NKikimrSchemeOp.TModifyScheme AlterExternalDataSource = 14;
        NKikimrSchemeOp.TModifyScheme DropExternalDataSource = 15;
        NKikimrSchemeOp.TModifyScheme CreateExternalTable = 16;
        NKikimrSchemeOp.TModifyScheme AlterExternalTable = 17;
        NKikimrSchemeOp.TModifyScheme DropExternalTable = 18;
        NKikimrSchemeOp.TModifyScheme ModifyPermissions = 19;
        NKikimrSchemeOp.TModifyScheme CreateView = 20;
        NKikimrSchemeOp.TModifyScheme AlterView = 21;
        NKikimrSchemeOp.TModifyScheme DropView = 22;
        TKqpPhyMetadataOperation CreateObject = 23;
        TKqpPhyMetadataOperation UpsertObject = 24;
        TKqpPhyMetadataOperation AlterObject = 25;
        TKqpPhyMetadataOperation DropObject = 26;
        NKikimrSchemeOp.TModifyScheme CreateColumnTable = 27;
        NKikimrSchemeOp.TModifyScheme AlterColumnTable = 28;
        NKikimrSchemeOp.TModifyScheme CreateTableStore = 29;
        NKikimrSchemeOp.TModifyScheme DropTableStore = 30;
        NKikimrSchemeOp.TModifyScheme AlterTableStore = 31;
        NKikimrSchemeOp.TModifyScheme CreateSequence = 32;
        NKikimrSchemeOp.TModifyScheme DropSequence = 33;
        NKikimrSchemeOp.TModifyScheme CreateReplication = 34;
        NKikimrSchemeOp.TModifyScheme AlterReplication = 35;
        NKikimrSchemeOp.TModifyScheme DropReplication = 36;
        NKikimrSchemeOp.TModifyScheme AlterSequence = 37;
        NKikimrSchemeOp.TModifyScheme CreateResourcePool = 38;
        NKikimrSchemeOp.TModifyScheme AlterResourcePool = 39;
        NKikimrSchemeOp.TModifyScheme DropResourcePool = 40;
    }
}

message TKqpPhyTx {
    enum EType {
        TYPE_UNSPECIFIED = 0;
        TYPE_COMPUTE = 1;
        TYPE_DATA = 2;
        TYPE_SCAN = 3;
        TYPE_GENERIC = 4;
        TYPE_SCHEME = 5;
    };

    EType Type = 1;
    repeated TKqpPhyStage Stages = 2;
    repeated TKqpPhyResult Results = 3;
    repeated TKqpPhyParamBinding ParamBindings = 4;
    string Plan = 5;
    bool HasEffects = 6; // at least one stage has flag TKqpPhyStage::IsEffectStage set
    repeated TKqpPhyTable Tables = 7;
    TKqpSchemeOperation SchemeOperation = 8;
    repeated string SecretNames = 9;
}

message TKqpTableInfo {
    message TId {
        uint64 OwnerId = 1;
        uint64 TableId = 2;
    }

    TId TableId = 1;
    string TableName = 2;
    uint64 SchemaVersion = 3;
    bool HasIndexTables = 4;
}

message TKqpTableOp {
    message TPosition {
        uint32 Row = 1;
        uint32 Column = 2;
    }

    TPosition Position = 1;
    string Table = 2;
    uint32 Operation = 3;
};

message TKqpPhyQuery {
    enum EType {
        TYPE_UNSPECIFIED = 0;
        TYPE_DATA = 1;
        TYPE_SCAN = 2;
        TYPE_QUERY = 3;
        TYPE_SCRIPT = 4;
    };

    EType Type = 1;
    repeated TKqpPhyTx Transactions = 2;
    reserved 3; // Deprecated, (repeated TKqpPhyTx Effects = 3);
    repeated TKqpPhyResultBinding ResultBindings = 4;
    string QueryPlan = 5;
    string QueryAst = 6;

    // StrictDml constraints info
    repeated TKqpTableOp TableOps = 7;
    repeated TKqpTableInfo TableInfos = 8;
    bool HasUncommittedChangesRead = 9;

    string QueryDiagnostics = 10;

    repeated TKqpTableInfo ViewInfos = 11;
}
