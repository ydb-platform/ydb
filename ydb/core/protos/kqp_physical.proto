syntax = "proto3";
option cc_enable_arenas = true;

package NKqpProto;
option java_package = "ru.yandex.kikimr.proto";

import "ydb/library/mkql_proto/protos/minikql.proto";
import "ydb/library/yql/dq/proto/dq_tasks.proto";

message TKqpPhyExternalBinding {
}

message TKqpPhyInternalBinding {
    enum EType {
        PARAM_UNSPECIFIED = 0;
        PARAM_NOW = 1;
        PARAM_CURRENT_DATE = 2;
        PARAM_CURRENT_DATETIME = 3;
        PARAM_CURRENT_TIMESTAMP = 4;
        PARAM_RANDOM_NUMBER = 5;
        PARAM_RANDOM = 6;
        PARAM_RANDOM_UUID = 7;
    };

    EType Type = 1;
}

message TKqpPhyTxResultBinding {
    uint32 TxIndex = 1;
    uint32 ResultIndex = 2;
}

message TKqpPhyParamBinding {
    string Name = 1;

    oneof Type {
        TKqpPhyExternalBinding ExternalBinding = 2;
        TKqpPhyTxResultBinding TxResultBinding = 3;
        TKqpPhyInternalBinding InternalBinding = 4;
    }
}

message TKqpPhyResultBinding {
    oneof Type {
        TKqpPhyTxResultBinding TxResultBinding = 1;
    }
}

message TKqpPhyColumn {
    uint32 Id = 1;
    string Name = 2;
}

message TKqpPhyTable {
    string Path = 1;
    uint64 OwnerId = 2;
    uint64 TableId = 3;
    string SysView = 4;
    uint64 Version = 5;
}

message TKqpPhyParamValue {
    string ParamName = 1;
}

message TKqpPhyParamElementValue {
    string ParamName = 1;
    uint32 ElementIndex = 2;
}

message TKqpPhyLiteralValue {
    NKikimrMiniKQL.TType Type = 1;
    NKikimrMiniKQL.TValue Value = 2;
}

message TKqpPhyRowsList {
    message TValue {
        oneof Kind {
            TKqpPhyParamValue ParamValue = 1;
            TKqpPhyLiteralValue LiteralValue = 2;
        }
    }

    message TRow {
        map<string, TValue> Columns = 1;
    }

    repeated TRow Rows = 1;
}

message TKqpPhyValue {
    oneof Kind {
        TKqpPhyParamValue ParamValue = 1;               // any type here (value, list of structs, ...)
        TKqpPhyParamElementValue ParamElementValue = 2; // any type here (value, list of structs, ...)
        TKqpPhyRowsList RowsList = 3;                   // list of structs
        TKqpPhyLiteralValue LiteralValue = 4;          // value
    }
}

message TKqpPhyKeyBound {
    repeated TKqpPhyValue Values = 1;
    bool IsInclusive = 2;
}

message TKqpPhyKeyRange {
    TKqpPhyKeyBound From = 1;
    TKqpPhyKeyBound To = 2;
}

message TKqpPhyOpReadRange {
    TKqpPhyKeyRange KeyRange = 1;
    TKqpPhyValue ItemsLimit = 2;
    bool Reverse = 3;
    repeated bool SkipNullKeys = 4;
}

message TKqpPhyOpUpsertRows {
    TKqpPhyValue RowsValue = 1;
}

message TKqpPhyOpDeleteRows {
    TKqpPhyValue RowsValue = 1;
}

message TKqpPhyOpLookup {
    TKqpPhyValue KeysValue = 1;
}

message TKqpPhyOpReadOlapRanges {
    // Parameter come here from computation stage. It has type Tuple(List(Tuple(RangeBegin, RangeEnd))))
    // Where RangeBegin and RangeEnd are Tuple(KeyColumns, Inclusive)
    // Where KeyColumns is values of start/end of range for corresponding key column in table
    TKqpPhyParamValue KeyRanges = 1;
    // Limit value, shard may stop after reading limit rows
    TKqpPhyValue ItemsLimit = 2;
    // Reverse sign, i.e. if user ask ORDER BY ... DESC we need to read table in reverse direction
    bool Reverse = 3;
    // Program in NKikimrSSA.TProgram format
    bytes OlapProgram = 4;
    /*
     * Serialized parameters names for current program, this used for extract parameters used by
     * program only from all parameters. Unfortunately we can not fill schema when compile OLAP program,
     * it is done a bit later in executor, so we need separate field for parameter names.
     */
    repeated string OlapProgramParameterNames = 5;
    // Sorted sign which indicates that read operation should return a sorted data out of the
    // dedicated actors or we can relax constraints here and return unsorted data.
    bool Sorted = 6;
}

message TKqpPhyOpReadRanges {
    // Parameter come here from computation stage. It has type Tuple(List(Tuple(RangeBegin, RangeEnd))))
    // Where RangeBegin and RangeEnd are Tuple(KeyColumns, Inclusive)
    // Where KeyColumns is values of start/end of range for corresponding key column in table
    // Also it has special case - empty name. This means full scan.
    TKqpPhyParamValue KeyRanges = 1;
    // Limit value, shard may stop after reading limit rows
    TKqpPhyValue ItemsLimit = 2;
    // Reverse sign, i.e. if user ask ORDER BY ... DESC we need to read table in reverse direction
    bool Reverse = 3;
}

message TKqpPhyTableOperation {
    TKqpPhyTable Table = 1;
    repeated TKqpPhyColumn Columns = 2;

    oneof Type {
        TKqpPhyOpReadRange ReadRange = 3;
        TKqpPhyOpUpsertRows UpsertRows = 4;
        TKqpPhyOpDeleteRows DeleteRows = 5;
        TKqpPhyOpLookup Lookup = 6;
        TKqpPhyOpReadOlapRanges ReadOlapRange = 7;
        TKqpPhyOpReadRanges ReadRanges = 8;
    }
}

message TKqpPhyCnUnionAll {
}

message TKqpPhyCnMap {
}

message TKqpPhyCnHashShuffle {
    repeated string KeyColumns = 1;
}

message TKqpPhyCnBroadcast {
}

message TKqpPhyCnMapShard {
}

message TKqpPhyCnShuffleShard {
}

message TKqpPhyCnResult {
}

message TKqpPhyCnValue {
}

message TKqpPhySortColumn {
    string Column = 1;
    bool Ascending = 2;
}

message TKqpPhyCnMerge {
    repeated TKqpPhySortColumn SortColumns = 1;
}

message TKqpPhyCnStreamLookup {
    TKqpPhyTable Table = 1;
    repeated TKqpPhyColumn Columns = 2;
    bytes LookupKeysType = 3;
    bytes ResultType = 4;
}

message TKqpPhyConnection {
    uint32 StageIndex = 1;
    uint32 OutputIndex = 2;

    oneof Type {
        TKqpPhyCnUnionAll UnionAll = 3;
        TKqpPhyCnMap Map = 4;
        TKqpPhyCnHashShuffle HashShuffle = 5;
        TKqpPhyCnBroadcast Broadcast = 6;
        TKqpPhyCnMapShard MapShard = 7;
        TKqpPhyCnShuffleShard ShuffleShard = 8;
        TKqpPhyCnResult Result = 9;
        TKqpPhyCnValue Value = 10;
        TKqpPhyCnMerge Merge = 11;
        TKqpPhyCnStreamLookup StreamLookup = 12;
    };
}

message TKqpPhyStage {
    NYql.NDqProto.TProgram Program = 1;
    repeated string ProgramParameters = 2;
    string ProgramAst = 3;
    repeated TKqpPhyConnection Inputs = 4;
    uint32 OutputsCount = 5;
    repeated TKqpPhyTableOperation TableOps = 6;
    bool IsEffectsStage = 7;
    string StageGuid = 8;
}

message TKqpPhyResult {
    TKqpPhyConnection Connection = 1;
    NKikimrMiniKQL.TType ItemType = 2;
    bool IsStream = 3;
    repeated string ColumnHints = 4;
}

message TKqpPhyTx {
    enum EType {
        TYPE_UNSPECIFIED = 0;
        TYPE_COMPUTE = 1;
        TYPE_DATA = 2;
        TYPE_SCAN = 3;
    };

    EType Type = 1;
    repeated TKqpPhyStage Stages = 2;
    repeated TKqpPhyResult Results = 3;
    repeated TKqpPhyParamBinding ParamBindings = 4;
    string Plan = 5;
    bool HasEffects = 6; // at least one stage has flag TKqpPhyStage::IsEffectStage set
}

message TKqpTableInfo {
    message TId {
        uint64 OwnerId = 1;
        uint64 TableId = 2;
    }

    TId TableId = 1;
    string TableName = 2;
    uint64 SchemaVersion = 3;
    bool HasIndexTables = 4;
}

message TKqpTableOp {
    message TPosition {
        uint32 Row = 1;
        uint32 Column = 2;
    }

    TPosition Position = 1;
    string Table = 2;
    uint32 Operation = 3;
};

message TKqpPhyQuery {
    enum EType {
        TYPE_UNSPECIFIED = 0;
        TYPE_DATA = 1;
        TYPE_SCAN = 2;
    };

    EType Type = 1;
    repeated TKqpPhyTx Transactions = 2;
    reserved 3; // Deprecated, (repeated TKqpPhyTx Effects = 3);
    repeated TKqpPhyResultBinding ResultBindings = 4;
    string QueryPlan = 5;
    string QueryAst = 6;

    // StrictDml constraints info
    repeated TKqpTableOp TableOps = 7;
    repeated TKqpTableInfo TableInfos = 8;
}
