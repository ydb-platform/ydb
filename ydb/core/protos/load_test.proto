import "ydb/core/protos/blobstorage.proto";
import "ydb/core/protos/blobstorage_base.proto";
import "ydb/core/protos/blobstorage_disk.proto";
import "ydb/core/protos/datashard_load.proto";

package NKikimr;
option java_package = "ru.yandex.kikimr.proto";

message TEvLoadTestRequest {
    // an item for interval distribution setting
    message TIntervalInfo {
        message TIntervalUniform {
            optional uint32 MinMs = 1;
            optional uint32 MaxMs = 2;
            optional uint32 MinUs = 3;
            optional uint32 MaxUs = 4;
        }
        message TIntervalPoisson {
            optional double Frequency = 1; // Hz
            optional uint32 MaxIntervalMs = 2;
        }
        optional double Weight = 1;
        oneof Distribution {
            TIntervalUniform Uniform = 2;
            TIntervalPoisson Poisson = 3;
        }
    }
    // an item for size distribution setting
    message TSizeInfo {
        optional uint32 Min = 1;
        optional uint32 Max = 2;
        optional double Weight = 3;
    }
    message TStorageLoad {
        message TInitialBlobAllocation {
            oneof DataSize {
                uint64 TotalSize = 1;
                uint64 BlobsNumber = 2;
            }
            repeated TSizeInfo BlobSizes = 3;
            optional uint32 MaxWritesInFlight = 4;
            optional uint32 MaxWriteBytesInFlight = 5;
            optional NKikimrBlobStorage.EPutHandleClass PutHandleClass = 6;
            optional uint32 DelayAfterCompletionSec = 7;
        }

        message TRequestInfo {
            optional float SendTime = 1;
            optional uint64 Type = 2;
            optional uint32 Size = 3;
            optional NKikimrBlobStorage.EPutHandleClass PutHandleClass = 4;
        }
        message TTabletInfo {
            oneof Id {
                uint64 TabletId = 8;
                string TabletName = 7;  // only used to distinguish different tablets, will be reassigned
            }
            optional uint32 Channel = 2;
            optional uint32 GroupId = 3;
            optional uint32 Generation = 4;
            repeated TRequestInfo Requests = 5;
            optional float ScriptedCycleDurationSec = 6;
        }
        message THardRateDispatcherInfo {
            optional double RequestsPerSecondAtStart = 1;
            optional double RequestsPerSecondOnFinish = 2;
        }
        message TPerTabletProfile {
            repeated TTabletInfo Tablets = 1;
            repeated TSizeInfo WriteSizes = 2;
            repeated TIntervalInfo WriteIntervals = 3;
            optional uint32 MaxInFlightWriteRequests = 4;
            optional uint32 MaxInFlightWriteBytes = 5;
            repeated TIntervalInfo FlushIntervals = 6;
            optional NKikimrBlobStorage.EPutHandleClass PutHandleClass = 7;

            reserved 8; // (deprecated) optional bool Soft = 8;
            optional uint32 MaxInFlightReadRequests = 9;
            optional uint32 MaxInFlightReadBytes = 10;
            repeated TIntervalInfo ReadIntervals = 11;
            repeated TSizeInfo ReadSizes = 12;
            optional uint64 MaxTotalBytesWritten = 13;
            optional NKikimrBlobStorage.EGetHandleClass GetHandleClass = 14;

            optional THardRateDispatcherInfo WriteHardRateDispatcher = 15;
            optional THardRateDispatcherInfo ReadHardRateDispatcher = 16;

            optional TInitialBlobAllocation InitialAllocation = 17;

            optional uint32 TracingThrottlerRate = 18 [default = 0];
            optional uint32 TracingThrottlerBurst = 19 [default = 0];
        };
        optional uint64 Tag = 1;
        optional uint32 DurationSeconds = 2;
        optional bool RequestTracking = 3 [default = false];
        repeated TPerTabletProfile Tablets = 4;
        reserved 5; // (deprecated) optional uint64 ScheduleThresholdUs = 5;
        reserved 6; // (deprecated) optional uint64 ScheduleRoundingUs = 6;
    }
    message TStop {
        optional uint64 Tag = 1;
        optional bool RemoveAllTags = 2;
    }
    enum ELogMode {
        LOG_PARALLEL = 1;
        LOG_SEQUENTIAL = 2;
        LOG_NONE = 3;
    }
    message TPDiskWriteLoad {
        message TChunkInfo {
            optional uint32 Slots = 1; // number of slots per chunk
            optional uint32 Weight = 2; // probability weight
        }
        optional uint64 Tag = 1;
        optional uint32 PDiskId = 2;
        optional uint64 PDiskGuid = 3;
        optional NKikimrBlobStorage.TVDiskID VDiskId = 4;
        repeated TChunkInfo Chunks = 5;
        optional uint32 DurationSeconds = 6;
        optional uint32 InFlightWrites = 7;
        optional ELogMode LogMode = 8;
        optional bool Sequential = 9 [default = true];
        optional uint32 IntervalMsMin = 10;
        optional uint32 IntervalMsMax = 11;
        optional bool Reuse = 12 [default = false];
        optional bool IsWardenlessTest = 13 [default = false];
    }
    message TVDiskLoad {
        optional uint64 Tag = 1;

        // full VDisk identifier
        optional NKikimrBlobStorage.TVDiskID VDiskId = 2;

        reserved 3; // obsolete field
        reserved 4; // obsolete field
        optional NKikimrBlobStorage.TGroupInfo GroupInfo = 16;

        // tablet id, channel and generation used in blob ids and barriers
        optional uint64 TabletId = 5;
        optional uint32 Channel = 6;
        optional uint32 Generation = 7;

        // duration of the test in seconds
        optional uint32 DurationSeconds = 8;

        // a distribution of intervals between adjacent writes
        repeated TIntervalInfo WriteIntervals = 9;

        // a distribution of write block sizes (expressed in bytes of BlobSize; i.e. PartSize bytes are actually written)
        repeated TSizeInfo WriteSizes = 10;

        // maximum number of unconfirmed parallel writes
        optional uint32 InFlightPutsMax = 11;

        // soft maximum of total in flight put bytes
        optional uint64 InFlightPutBytesMax = 12;

        // put handle class
        optional NKikimrBlobStorage.EPutHandleClass PutHandleClass = 13;

        // a distribution of intervals between barrier advances
        repeated TIntervalInfo BarrierAdvanceIntervals = 14;

        // minimum distance kept between current Step of written blobs and CollectStep of barriers
        optional uint32 StepDistance = 15;
    }
    message TPDiskReadLoad {
        message TChunkInfo {
            optional uint32 Slots = 1; // number of slots per chunk
            optional uint32 Weight = 2; // probability weight
        }
        optional uint64 Tag = 1;
        optional uint32 PDiskId = 2;
        optional uint64 PDiskGuid = 3;
        optional NKikimrBlobStorage.TVDiskID VDiskId = 4;
        repeated TChunkInfo Chunks = 5;
        optional uint32 DurationSeconds = 6;
        optional uint32 InFlightReads = 7;
        optional bool Sequential = 9 [default = false];

        optional uint32 IntervalMsMin = 10;
        optional uint32 IntervalMsMax = 11;

        optional bool IsWardenlessTest = 13 [default = false];
    }
    message TPDiskLogLoad {
        message TWorkerConfig {
            optional NKikimrBlobStorage.TVDiskID VDiskId = 1;
            optional uint32 MaxInFlight = 2;

            // Measurement units of all parameters is bytes
            optional uint32 SizeIntervalMin = 3;
            optional uint32 SizeIntervalMax = 4;
            optional uint64 BurstInterval = 5;
            optional uint64 BurstSize = 6;
            optional uint64 StorageDuration = 7;

            optional uint64 MaxTotalBytesWritten = 8;
        }

        optional uint64 Tag = 1;
        optional uint32 PDiskId = 2;
        optional uint64 PDiskGuid = 3;

        optional uint32 DurationSeconds = 5;
        repeated TWorkerConfig Workers = 7;

        optional bool IsWardenlessTest = 8 [default = false];
    }
    message TKeyValueLoad {
        message TWorkerConfig {
            optional string KeyPrefix = 1;
            optional uint32 MaxInFlight = 2;
            optional uint32 Size = 11; // data size, bytes
            optional bool IsInline = 9 [default = false];
            optional uint32 LoopAtKeyCount = 10 [default = 0]; // 0 means "do not loop"
        }
        optional uint64 Tag = 1;
        optional uint64 TargetTabletId = 2;
        optional uint32 DurationSeconds = 5;
        repeated TWorkerConfig Workers = 7;
    }

    message TKqpLoad {
        message TStockWorkload {
            optional uint64 ProductCount = 1 [default = 100];
            optional uint64 Quantity = 2 [default = 1000];
            optional uint64 OrderCount = 3 [default = 100];
            optional uint64 Limit = 4 [default = 10];
            optional bool PartitionsByLoad = 5 [default = true];
        }
        message TKvWorkload {
            optional uint64 InitRowCount = 1 [default = 1000];
            optional bool PartitionsByLoad = 2 [default = true];
            optional uint64 MaxFirstKey = 3 [default = 18446744073709551615];
            optional uint64 StringLen = 4 [default = 8];
            optional uint64 ColumnsCnt = 5 [default = 2];
            optional uint64 RowsCnt = 6 [default = 1];
        }
        optional uint64 Tag = 1;
        optional uint32 DurationSeconds = 2;
        optional uint32 WindowDuration = 3;
        optional string WorkingDir = 4;
        optional uint32 NumOfSessions = 5;
        optional bool IncreaseSessions = 11;
        optional bool DeleteTableOnFinish = 6;
        optional uint32 UniformPartitionsCount = 7;
        optional uint32 WorkloadType = 8;
        optional string QueryType = 12;
        oneof Workload {
            TStockWorkload Stock = 9;
            TKvWorkload Kv = 10;
        }
    }

    message TMemoryLoad {
        optional uint64 Tag = 1;
        optional uint32 DurationSeconds = 2;
        optional uint64 BlockSize = 3;
        optional uint64 IntervalUs = 4;
    }

    optional uint64 Cookie = 1;
    oneof Command {
        TStop Stop = 3;
        TStorageLoad StorageLoad = 2;
        TPDiskWriteLoad PDiskWriteLoad = 4;
        TVDiskLoad VDiskLoad = 5;
        TPDiskReadLoad PDiskReadLoad = 6;
        TPDiskLogLoad PDiskLogLoad = 7;
        TKeyValueLoad KeyValueLoad = 8;
        TKqpLoad KqpLoad = 9;
        TMemoryLoad MemoryLoad = 10;
        NKikimrDataShardLoad.TEvYCSBTestLoadRequest YCSBLoad = 11;
    }
    optional uint64 Tag = 12;
    optional string Uuid = 13;
    optional uint64 Timestamp = 14;
}

message TEvLoadTestResponse {
    optional uint32 Status = 1; // EResponseStatus from ydb/core/client/base/msgbus.h
    optional string ErrorReason = 2;
    optional uint64 Cookie = 3;
    optional uint64 Tag = 4;
}

message TEvNodeFinishResponse {
    message TNodeStats {
        optional uint64 Transactions = 1;
        optional float TransactionsPerSecond = 2;
        optional float ErrorsPerSecond = 3;
        repeated float Percentiles = 4;
    }

    optional string Uuid = 1;
    optional uint32 NodeId = 2;
    optional bool Success = 3;
    optional uint64 FinishTimestamp = 4;
    optional string ErrorReason = 5;
    optional TNodeStats Stats = 6;
    optional string LastHtmlPage = 7;
    optional string JsonResult = 8;
}
