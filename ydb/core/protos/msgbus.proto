import "ydb/core/protos/console.proto";
import "ydb/library/actors/protos/interconnect.proto";
import "ydb/core/protos/console_base.proto";
import "ydb/core/protos/console_config.proto";
import "ydb/core/protos/console_tenant.proto";
import "ydb/core/protos/datashard_load.proto";
import "ydb/core/protos/tablet_counters.proto";
import "ydb/core/protos/flat_scheme_op.proto";
import "ydb/core/protos/tx_proxy.proto";
import "ydb/core/protos/tx_scheme.proto";
import "ydb/core/protos/node_whiteboard.proto";
import "ydb/core/protos/bind_channel_storage_pool.proto";
import "ydb/core/protos/msgbus_kv.proto";
import "ydb/core/protos/msgbus_pq.proto";
import "ydb/core/protos/scheme_log.proto";
import "ydb/core/protos/base.proto";
import "ydb/core/protos/tablet.proto";
import "ydb/core/protos/blobstorage_config.proto";
import "ydb/core/protos/node_broker.proto";
import "ydb/core/protos/cms.proto";
import "ydb/core/protos/sqs.proto";
import "ydb/core/protos/query_stats.proto";
import "ydb/core/protos/subdomains.proto";
import "ydb/core/protos/load_test.proto";
import "ydb/public/api/protos/ydb_operation.proto";
import "ydb/public/api/protos/draft/persqueue_error_codes.proto";
import "ydb/public/api/protos/ydb_issue_message.proto";
import "ydb/library/mkql_proto/protos/minikql.proto";
import "ydb/library/ydb_issue/proto/issue_id.proto";

import "google/protobuf/descriptor.proto";

package NKikimrClient;
option java_package = "ru.yandex.kikimr.proto";

message TEnumValueHint {
    message TEntry {
        optional uint64 Value = 1;
        optional string Name = 2;
        optional string Man  = 3;
    }

    repeated TEntry Hints = 1;
}

extend google.protobuf.FieldOptions {
    optional TEnumValueHint EnumValueHint = 70001;
    optional string CommonDescription = 70002;
}

message TMsgBusRequestBase {
    optional uint32 ServerTimeoutMs = 1;
}

message TRequest {
    optional NKikimrTxUserProxy.TTransaction Transaction = 1;
    optional uint64 ProxyFlags = 2;
    optional uint64 ExecTimeoutPeriod = 4;
    optional string SecurityToken = 5;
}

message TFlatTxId {
    optional fixed64 TxId = 1;
    optional fixed64 SchemeShardTabletId = 2;
    optional uint64 PathId = 3;
};

message TResolveNodeResponse {
    optional string Host = 1;
    optional uint32 NodeId = 2;
};

// must start from TResponseBase
message TResponse {
    optional uint32 Status = 1 [
        (CommonDescription) = "Generic msgbus status",
        (EnumValueHint) = { Hints : [
            {Value: 0 Name: "MSTATUS_UNKNOWN" Man: "Status unknown, must not be seen" },
            {Value: 1 Name: "MSTATUS_OK" Man: "Request complete with full success" },
            {Value: 128 Name: "MSTATUS_ERROR" Man: "Request failed because of client-side error" },
            {Value: 129 Name: "MSTATUS_INPROGRESS" Man: "Request accepted and in progress" },
            {Value: 130 Name: "MSTATUS_TIMEOUT" Man: "Request failed due to timeout, exact status unknown" },
            {Value: 131 Name: "MSTATUS_NOTREADY" Man: "Not yet ready to process requests, try later" },
            {Value: 132 Name: "MSTATUS_ABORTED" Man: "Request aborted, particular meaning depends on context" },
            {Value: 133 Name: "MSTATUS_INTERNALERROR" Man: "Something unexpected happend on server-side" },
            {Value: 134 Name: "MSTATUS_REJECTED" Man: "Request rejected for now, try later" }
        ]}
    ]; // EResponseStatus from ydb/core/client/base/msgbus.h

    optional string ErrorReason = 400; // When present contains human-readable error description  (aka ProtobufError)

    optional fixed64 TxId = 2;
    optional fixed64 Step = 3;
    optional fixed64 TabletId = 4;

    optional uint32 ProxyErrorCode = 5 [
        (CommonDescription) = "Transaction proxy processing status",
        (EnumValueHint) = { Hints : [
            {Value: 0 Name: "Unknown" Man: "Status unknown, must not be seen" },
            {Value: 1 Name: "WrongRequest" Man: "Not recognized or erroneous request, see error description fields for possible details" },
            {Value: 2 Name: "EmptyAffectedSet" Man: "Program must touch at least one shard but touches none" },
            {Value: 3 Name: "NotImplemented" Man: "Not yet implemented feature requested" },
            {Value: 4 Name: "ResolveError" Man: "Some keys not resolved, see UnresolvedKeys for details" },
            {Value: 5 Name: "AccessDenied" Man: "Access denied for request" },
            {Value: 6 Name: "DomainLocalityError" Man: "Cross database transactions not allowed"},
            {Value: 16 Name: "ProxyNotReady" Man: "Transaction proxy not ready for handling requests, try later. Most known case is temporary lack of txid-s" },
            {Value: 17 Name: "ProxyAccepted" Man: "Request accepted by proxy. Transitional status" },
            {Value: 18 Name: "ProxyResolved" Man: "Request keys resolved to datashards. Transitional status" },
            {Value: 19 Name: "ProxyPrepared" Man: "Request fragmets prepared on datashards. Transitional status" },
            {Value: 20 Name: "ProxyShardNotAvailable" Man: "One or more of affected datashards not available, request execution cancelled" },
            {Value: 21 Name: "ProxyShardTryLater" Man: "One or more of affected datashards are starting, try again" },
            {Value: 22 Name: "ProxyShardOverloaded" Man: "One or more of affected datashards are overloaded, try again" },
            {Value: 23 Name: "ProxyShardUnknown" Man: "State of transaction on one or more datashards is unknown" },
            {Value: 32 Name: "CoordinatorDeclined" Man: "Coordinator declines to plan transaction, try again" },
            {Value: 33 Name: "CoordinatorOutdated" Man: "Coordinator was not able to plan transaction due to timing restrictions, try again" },
            {Value: 34 Name: "CoordinatorAborted" Man: "Transaction aborted by coordinator" },
            {Value: 35 Name: "CoordinatorPlanned" Man: "Transaction planned for execution by coordinator. Transitional status" },
            {Value: 36 Name: "CoordinatorUnknown" Man: "Could not reach coordinator or coordinator pipe dropped before confirmation. Transaction status unknown" },
            {Value: 48 Name: "ExecComplete" Man: "Success" },
            {Value: 49 Name: "ExecAlready" Man: "Requested operation already applied" },
            {Value: 50 Name: "ExecAborted" Man: "Request aborted, particular meaning depends on context" },
            {Value: 51 Name: "ExecTimeout" Man: "Proxy got no execution reply in timeout period" },
            {Value: 52 Name: "ExecError" Man: "Execution failed" },
            {Value: 53 Name: "ExecInProgress" Man: "Request accepted and now runs" },
            {Value: 55 Name: "ExecResultUnavailable" Man: "Execution results unavailable" },
            {Value: 56 Name: "ExecCancelled" Man: "Execution was cancelled" }
        ]}
    ]; // see tx_proxy.h - TResultStatus::EStatus

    optional bytes ProxyErrors = 6;

    optional NKikimrIssues.TStatusIds.EStatusCode StatusCode = 7;
    repeated Ydb.Issue.IssueMessage Issues = 8;

    optional uint32 ExecutionEngineStatus = 100 [
        (CommonDescription) = "MiniKQL engine processing status, if OK - see ExecutionEngineResponseStatus",
        (EnumValueHint) = { Hints : [
            {Value: 0 Name: "Unknown" Man: "Status unknown, not filled probably" },
            {Value: 1 Name: "Ok" Man: "Success" },
            {Value: 2 Name: "SchemeChanged" Man: "Scheme or partitioning was changed b/w compilation and preparation" },
            {Value: 3 Name: "IsReadonly" Man: "Update requested in read-only operation" },
            {Value: 4 Name: "KeyError" Man: "Something wrong in data keys" },
            {Value: 5 Name: "ProgramError" Man: "Malformed program" },
            {Value: 6 Name: "TooManyShards" Man: "Too much datashards affected program" },
            {Value: 7 Name: "TooManyData" Man: "Too much data affected by program" },
            {Value: 8 Name: "SnapshotNotExist" Man: "Requested snapshot not exist" },
            {Value: 9 Name: "SnapshotNotReady" Man: "Snapshot not online" }
        ]}
    ]; // Last operation status: see NMiniKql::IEngine::EResult.

    optional uint32 ExecutionEngineResponseStatus = 101 [
        (CommonDescription) = "MiniKQL engine execution status",
        (EnumValueHint) = { Hints : [
            {Value: 0 Name: "Unknown" Man: "Status unknown, not filled probably" },
            {Value: 1 Name: "Error" Man: "Error" },
            {Value: 2 Name: "Complete" Man: "Complete with success" },
            {Value: 3 Name: "Abort" Man: "Complete with abort" }
        ]}
    ];  // Program "exit code": see NMiniKQL::IEngine::EStatus.

    optional NKikimrMiniKQL.TResult ExecutionEngineEvaluatedResponse = 103;

    optional bytes MiniKQLErrors = 104;
    optional bytes DataShardErrors = 105;
    repeated fixed64 ComplainingDataShards = 106;
    repeated bytes UnresolvedKeys = 107; // text for each key
    optional NKikimrQueryStats.TTxStats TxStats = 111;

    optional NKikimrTxUserProxy.TMiniKQLCompileResults MiniKQLCompileResults = 108;
    optional bool HadFollowerReads = 109;
    optional bytes SerializedReadTableResponse = 110; // Serialized Ydb.Db.TResultSet

    optional uint32 BSAssignedID = 40;

    optional NKikimrTxUserProxy.TTxProxyTimings ProxyTimings = 50;

    optional int32 SchemeStatus = 300; // for enum definition see flat_tx_scheme.proto - enum EStatus
    optional uint32 SchemeTagId = 301;
    optional bytes SchemePrefix = 302;

    // TTabletStateRequest
    repeated NKikimrWhiteboard.TTabletStateInfo TabletStateInfo = 500;

    // TSchemeDescribe
    optional NKikimrSchemeOp.TPathDescription PathDescription = 600;
    optional string Path = 601;

    // TSchemeOperation
    optional TFlatTxId FlatTxId = 700;

    // TPersQueueRequest
    optional NPersQueue.NErrorCode.EErrorCode ErrorCode = 800; // TODO: rename to something more PQ-specific
    optional TPersQueuePartitionResponse PartitionResponse = 801;
    optional TPersQueueMetaResponse MetaResponse = 802;
    optional TPersQueueFetchResponse FetchResponse = 803;

    // TKeyValueRequest
    optional uint64 Cookie = 900;
    repeated TKeyValueResponse.TDeleteRangeResult DeleteRangeResult = 901;
    optional TKeyValueResponse.TIncrementGenerationResult IncrementGenerationResult = 902;
    repeated TKeyValueResponse.TReadResult ReadResult = 903;
    repeated TKeyValueResponse.TReadRangeResult ReadRangeResult = 904;
    repeated TKeyValueResponse.TWriteResult WriteResult = 905;
    repeated TKeyValueResponse.TRenameResult RenameResult = 906;
    repeated TKeyValueResponse.TCopyRangeResult CopyRangeResult = 907;
    repeated TKeyValueResponse.TConcatResult ConcatResult = 908;
    repeated TKeyValueResponse.TGetStatusResult GetStatusResult = 909;
    optional TKeyValueResponse.TTrimLeakedBlobsResult TrimLeakedBlobsResult = 910;
    optional TKeyValueResponse.TSetExecutorFastLogPolicyResult SetExecutorFastLogPolicyResult = 911;
    repeated TKeyValueResponse.TPatchResult PatchResult = 912;

    // THiveCreateTablet
    message TCreateTabletResult {
        // Should be NKikimrProto::OK or NKikimrProto::ALREADY in case of success or repeated call
        optional uint32 Status = 1; // EReplyStatus from ydb/core/protos/base.proto
        optional uint64 TabletId = 2;
    }
    message TLookupTabletResult {
        // Should be NKikimrProto::OK or NKikimrProto::NODATA in case of non existing tablet
        optional uint32 Status = 1; // EReplyStatus from ydb/core/protos/base.proto
        optional uint64 TabletId = 2;
    }
    repeated TCreateTabletResult CreateTabletResult = 1000;
    repeated TLookupTabletResult LookupTabletResult = 1002;

    // TLocalEnumerateTablets
    message TTabletInfo {
        optional uint64 TabletId = 1;
        optional NKikimrTabletBase.TTabletTypes.EType TabletType = 2;
    }
    repeated TTabletInfo TabletInfo = 1001;

    // TTabletLocalSchemeTx
    optional NTabletFlatScheme.TSchemeChanges LocalDbScheme = 1010;

    // TTabletCountersRequest
    optional NKikimrTabletBase.TTabletCounters TabletCounters = 1020;

    // TBlobStorageConfigRequest
    optional NKikimrBlobStorage.TConfigResponse BlobStorageConfigResponse = 1030;

    optional TResolveNodeResponse ResolveNodeResponse = 1040;

    // TChooseProxyRequest
    optional string ProxyName = 1050;
    optional uint64 ProxyCookie = 1051;

    // TWhoAmI
    optional string UserName = 1100;
    repeated string Groups = 1101;

    // Login
    optional string UserToken = 1102;
}

message TFakeConfigDummy {
    optional uint64 DataShardID = 1;
}

message TTabletCountersRequest {
    optional uint64 TabletID = 1;
    optional bool ConnectToFollower = 2;

    optional bool WithRetry = 10;
    optional uint64 Timeout = 11;
}

message TLocalMKQL {
    message TProgram {
        optional bytes Bin = 1;
        optional string Text = 2;
    };

    message TParams {
        optional bytes Bin = 1;
        optional string Text = 2;
    }

    optional uint64 TabletID = 1;
    optional NKikimrTxUserProxy.TMiniKQLTransaction Program = 2;
    optional bool ConnectToFollower = 3;

    optional string SecurityToken = 5;

    optional bool WithRetry = 10;
    optional uint64 Timeout = 11;
}

message TLocalSchemeTx {
    optional uint64 TabletID = 1;
    optional bool ConnectToFollower = 2;
    optional NTabletFlatScheme.TSchemeChanges SchemeChanges = 3;
    optional bool DryRun = 4;
    optional string SecurityToken = 5;

    optional bool WithRetry = 10;
    optional uint64 Timeout = 11;
}

message TSchemeNavigate {
    optional bytes Path = 1;
    optional uint32 ReadMaterializedFamily = 2;
    optional bytes TextPath = 3;
    optional uint64 SchemeShardHint = 4;
}

message TSchemeInitRoot {
    optional uint64 ShardId = 1;
    optional uint32 TagId = 2;
    optional bytes TagName = 3;
    optional NKikimrTxScheme.TConfig GlobalConfig = 4;
    optional string SecurityToken = 5;
    repeated NKikimrStoragePool.TStoragePool StoragePools = 6;
}

message THiveCreateTablet {
    message TCmdCreateTablet {
        optional uint64 OwnerId = 1; // mandatory, senders TabletId (use 0 for human/external system)
        optional uint64 OwnerIdx = 2; // mandatory, per-sender unique request id for duplicate request detection
        optional NKikimrTabletBase.TTabletTypes.EType TabletType = 3; // mandatory, tablet type, see ydb/core/base/tablet_types.h
        optional uint32 ChannelsProfile = 4; // mandatory, channels profile index (use 0 for default profile)
        repeated uint32 AllowedNodeIDs = 5;
        repeated NKikimrSubDomains.TDomainKey AllowedDomains = 6;
        repeated NKikimrStoragePool.TChannelBind BindedChannels = 7;
    }

    message TCmdLookupTablet {
        optional uint64 OwnerId = 1; // mandatory, senders TabletId (use 0 for human/external system)
        optional uint64 OwnerIdx = 2; // mandatory, per-sender unique request id for duplicate request detection
    }

    repeated TCmdCreateTablet CmdCreateTablet = 1;
    repeated TCmdLookupTablet CmdLookupTablet = 3;
    optional uint32 DomainUid = 2; // mandatory, Domain unique id, in most cases 1
}

message THiveCreateTabletResult {
    optional uint32 Status = 1; // EResponseStatus from ydb/core/client/base/msgbus.h
    optional bytes ProtobufError = 400;

    message TCreateTabletResult {
        // Should be NKikimrProto::OK or NKikimrProto::ALREADY in case of success or repeated call
        optional uint32 Status = 1; // EReplyStatus from ydb/core/protos/base.proto
        optional uint64 TabletId = 2;
    }

    message TLookupTabletResult {
        // Should be NKikimrProto::OK or NKikimrProto::NODATA in case of non existing tablet
        optional uint32 Status = 1; // EReplyStatus from ydb/core/protos/base.proto
        optional uint64 TabletId = 2;
    }

    repeated TCreateTabletResult CreateTabletResult = 2;
    repeated TLookupTabletResult LookupTabletResult = 4;
    optional string ErrorReason = 3; // When present contains human-readable error description
}

message TLocalEnumerateTablets {
    optional uint64 DomainUid = 1; // mandatory
    optional uint32 NodeId = 2; // optional, msgbus proxy will contact it's own node if not set
    optional NKikimrTabletBase.TTabletTypes.EType TabletType = 3; // optional, local will enumerate all tablets if not set
}

message TLocalEnumerateTabletsResult {
    optional uint32 Status = 1; // EResponseStatus from ydb/core/client/base/msgbus.h
    optional bytes ProtobufError = 400;

    message TTabletInfo {
        optional uint64 TabletId = 1;
        optional NKikimrTabletBase.TTabletTypes.EType TabletType = 2;
    }

    repeated TTabletInfo TabletInfo = 2;
    optional string ErrorReason = 3; // When present contains human-readable error description
}

message TTypeMetadataRequest {
    optional uint64 ETag = 1;
}

// must start from TResponseBase
message TTypeMetadataResponse {
    optional uint32 Status = 1; // EResponseStatus from ydb/core/client/base/msgbus.h
    optional bytes ProtobufError = 400;

    optional uint64 ETag = 2;
    optional bytes TypeMetadata = 3;
    optional bytes FunctionMetadata = 4;
}

message TMessageBusTraceRequest {
    enum ECommand {
        START = 0;
        STOP = 1;
    };
    optional ECommand Command = 1;
    optional bytes Path = 2;
};

message TMessageBusTraceStatus {
    optional bool TraceActive = 1;
    optional bytes Path = 2;
};

message TTabletKillRequest {
    optional uint64 TabletID = 1;
};

message TTabletStateRequest {
    optional NKikimrTabletBase.TTabletTypes.EType TabletType = 1;
    optional bool Alive = 2;
    repeated fixed64 TabletIDs = 3;
};

message TFlatTxPollOptions {
    optional uint32 Timeout = 1 [default = 1000]; // ms
};

message TSchemeOperation {
    optional NKikimrTxUserProxy.TTransaction Transaction = 1;
    optional TFlatTxPollOptions PollOptions = 10;
    optional string SecurityToken = 5;
};


message TSchemeDescribe {
    optional string Path = 1;
    optional uint64 PathId = 2;
    optional uint64 SchemeshardId = 3;
    optional string SecurityToken = 5;
    optional NKikimrSchemeOp.TDescribeOptions Options = 6;
};

message TFlatDescribeResponse {
    option deprecated = true;
    optional uint32 Status = 1;

    optional string Path = 9;
    optional NKikimrSchemeOp.TPathDescription PathDescription = 2;
    optional string ErrorReason = 3; // When present contains human-readable error description
    optional int32 SchemeStatus = 4;

    optional NKikimrIssues.TStatusIds.EStatusCode StatusCode = 7;
    repeated Ydb.Issue.IssueMessage Issues = 8;
};

message TSchemeOperationStatus {
    optional TFlatTxId FlatTxId = 1;
    optional TFlatTxPollOptions PollOptions = 10;
};

message TJsonSettings {
    optional bool UI64AsString = 1 [default = false];
};

message TJSON {
    optional string JSON = 1;
    optional string SecurityToken = 2;
    optional TJsonSettings JsonSettings = 3;
};

message TChooseProxyRequest {
    optional uint32 DataCenterNum = 1;
    optional string DataCenter = 3;
    optional bool PreferLocalProxy = 2 [default = false];
}

message TWhoAmI {
    optional bool ReturnGroups = 1;
    optional string SecurityToken = 5;
}

message TBlobStorageConfigRequest {
    optional uint32 Domain = 1;
    optional NKikimrBlobStorage.TConfigRequest Request = 2;
    optional string SecurityToken = 3;
}

message TDrainNodeRequest {
    optional uint32 NodeID = 1;
    optional string SecurityToken = 5;
};

message TFillNodeRequest {
    optional uint32 NodeID = 1;
    optional string SecurityToken = 5;
};

message TResolveNodeRequest {
    optional string Host = 1;
    optional uint32 NodeId = 2;
    optional bool ResolveLocalNode = 3; // for compatibility of resolving local '.' node
};

message TNodeRegistrationRequest {
    optional string Host = 1;
    optional uint32 Port = 2;
    optional string ResolveHost = 3;
    optional string Address = 4;
    optional NActorsInterconnect.TNodeLocation Location = 5;
    optional string DomainPath = 6;
    optional bool FixedNodeId = 7;
    optional string Path = 8;
}

message TNodeRegistrationResponse {
    optional NKikimrNodeBroker.TStatus Status = 1;
    optional uint32 NodeId = 2;
    optional string DomainPath = 3;
    optional uint64 Expire = 4;
    repeated NKikimrNodeBroker.TNodeInfo Nodes = 5;
    optional uint64 ScopeTabletId = 6;
    optional uint64 ScopePathId = 7;
}

message TCmsRequest {
    oneof Request {
        NKikimrCms.TClusterStateRequest ClusterStateRequest = 1;
        NKikimrCms.TPermissionRequest PermissionRequest = 2;
        NKikimrCms.TManageRequestRequest ManageRequestRequest = 3;
        NKikimrCms.TCheckRequest CheckRequest = 4;
        NKikimrCms.TManagePermissionRequest ManagePermissionRequest = 5;
        NKikimrCms.TConditionalPermissionRequest ConditionalPermissionRequest = 6;
        NKikimrCms.TNotification Notification = 7;
        NKikimrCms.TManageNotificationRequest ManageNotificationRequest = 8;
        NKikimrCms.TGetConfigRequest GetConfigRequest = 9;
        NKikimrCms.TSetConfigRequest SetConfigRequest = 10;
        NKikimrCms.TSetMarkerRequest SetMarkerRequest = 11;
        NKikimrCms.TResetMarkerRequest ResetMarkerRequest = 12;
        NKikimrCms.TGetLogTailRequest GetLogTailRequest = 13;
    }
    optional string DomainName = 100;
    optional string SecurityToken = 101;
}

message TCmsResponse {
    oneof Response {
        NKikimrCms.TClusterStateResponse ClusterStateResponse = 1;
        NKikimrCms.TPermissionResponse PermissionResponse = 2;
        NKikimrCms.TManageRequestResponse ManageRequestResponse = 3;
        NKikimrCms.TManagePermissionResponse ManagePermissionResponse = 4;
        NKikimrCms.TNotificationResponse NotificationResponse = 5;
        NKikimrCms.TManageNotificationResponse ManageNotificationResponse = 6;
        NKikimrCms.TGetConfigResponse GetConfigResponse = 7;
        NKikimrCms.TSetConfigResponse SetConfigResponse = 8;
        NKikimrCms.TSetMarkerResponse SetMarkerResponse = 9;
        NKikimrCms.TResetMarkerResponse ResetMarkerResponse = 10;
        NKikimrCms.TGetLogTailResponse GetLogTailResponse = 11;
    }
    optional NKikimrCms.TStatus Status = 100;
}

message TSqsRequest {
    oneof Request {
        NKikimr.NSQS.TChangeMessageVisibilityRequest ChangeMessageVisibility = 1;
        NKikimr.NSQS.TCreateQueueRequest CreateQueue = 2;
        NKikimr.NSQS.TGetQueueAttributesRequest GetQueueAttributes = 3;
        NKikimr.NSQS.TDeleteMessageRequest DeleteMessage = 4;
        NKikimr.NSQS.TDeleteQueueRequest DeleteQueue = 5;
        NKikimr.NSQS.TListQueuesRequest ListQueues = 6;
        NKikimr.NSQS.TPurgeQueueRequest PurgeQueue = 7;
        NKikimr.NSQS.TReceiveMessageRequest ReceiveMessage = 8;
        NKikimr.NSQS.TSendMessageRequest SendMessage = 9;
        NKikimr.NSQS.TSetQueueAttributesRequest SetQueueAttributes = 10;
        NKikimr.NSQS.TGetQueueUrlRequest GetQueueUrl = 11;
        NKikimr.NSQS.TChangeMessageVisibilityBatchRequest ChangeMessageVisibilityBatch = 12;
        NKikimr.NSQS.TDeleteMessageBatchRequest DeleteMessageBatch = 13;
        NKikimr.NSQS.TSendMessageBatchRequest SendMessageBatch = 14;
        NKikimr.NSQS.TCreateUserRequest CreateUser = 15;
        NKikimr.NSQS.TDeleteUserRequest DeleteUser = 16;
        NKikimr.NSQS.TListUsersRequest ListUsers = 17;
        NKikimr.NSQS.TModifyPermissionsRequest ModifyPermissions = 18;
        NKikimr.NSQS.TListPermissionsRequest ListPermissions = 19;
        NKikimr.NSQS.TDeleteQueueBatchRequest DeleteQueueBatch = 20;
        NKikimr.NSQS.TPurgeQueueBatchRequest PurgeQueueBatch = 21;
        NKikimr.NSQS.TGetQueueAttributesBatchRequest GetQueueAttributesBatch = 22;
        NKikimr.NSQS.TListDeadLetterSourceQueuesRequest ListDeadLetterSourceQueues = 23;
        NKikimr.NSQS.TCountQueuesRequest CountQueues = 24;
    }
    optional string RequestId = 30;
    optional bool RequestRateLimit = 31 [default = true];
}

message TSqsResponse {
    oneof Response {
        NKikimr.NSQS.TChangeMessageVisibilityResponse ChangeMessageVisibility = 1;
        NKikimr.NSQS.TCreateQueueResponse CreateQueue = 2;
        NKikimr.NSQS.TGetQueueAttributesResponse GetQueueAttributes = 3;
        NKikimr.NSQS.TDeleteMessageResponse DeleteMessage = 4;
        NKikimr.NSQS.TDeleteQueueResponse DeleteQueue = 5;
        NKikimr.NSQS.TListQueuesResponse ListQueues = 6;
        NKikimr.NSQS.TPurgeQueueResponse PurgeQueue = 7;
        NKikimr.NSQS.TReceiveMessageResponse ReceiveMessage = 8;
        NKikimr.NSQS.TSendMessageResponse SendMessage = 9;
        NKikimr.NSQS.TSetQueueAttributesResponse SetQueueAttributes = 10;
        NKikimr.NSQS.TGetQueueUrlResponse GetQueueUrl = 11;
        NKikimr.NSQS.TChangeMessageVisibilityBatchResponse ChangeMessageVisibilityBatch = 12;
        NKikimr.NSQS.TDeleteMessageBatchResponse DeleteMessageBatch = 13;
        NKikimr.NSQS.TSendMessageBatchResponse SendMessageBatch = 14;
        NKikimr.NSQS.TCreateUserResponse CreateUser = 15;
        NKikimr.NSQS.TDeleteUserResponse DeleteUser = 16;
        NKikimr.NSQS.TListUsersResponse ListUsers = 17;
        NKikimr.NSQS.TModifyPermissionsResponse ModifyPermissions = 18;
        NKikimr.NSQS.TListPermissionsResponse ListPermissions = 19;
        NKikimr.NSQS.TDeleteQueueBatchResponse DeleteQueueBatch = 20;
        NKikimr.NSQS.TPurgeQueueBatchResponse PurgeQueueBatch = 21;
        NKikimr.NSQS.TGetQueueAttributesBatchResponse GetQueueAttributesBatch = 22;
        NKikimr.NSQS.TListDeadLetterSourceQueuesResponse ListDeadLetterSourceQueues = 23;
        NKikimr.NSQS.TCountQueuesResponse CountQueues = 24;
    }
    optional string RequestId = 30;
    optional string FolderId = 31;
    optional string ResourceId = 32;
    optional bool IsFifo = 33;
}

message TSqsActionCounterChanged {
    optional uint32 Action = 1;
    optional uint32 ErrorsCount = 2;
    optional uint64 DurationMs = 3;
    optional uint64 WorkingDurationMs = 4;
}

message TInterconnectDebug {
    optional string Name = 1;
    optional uint32 Channel = 2;
    repeated uint32 Hops = 3;
    optional uint32 SizeMin = 4;
    optional uint32 SizeMax = 5;
    optional uint32 InFlyMax = 6;
    optional uint64 IntervalMin = 7;
    optional uint64 IntervalMax = 8;
    optional bool SoftLoad = 9;
    optional uint64 Duration = 10;
    optional bool UseProtobufWithPayload = 11;
    optional string ServicePool = 12;

    optional uint32 ClosePeerSocketNodeId = 100;
    optional uint32 CloseInputSessionNodeId = 101;
    optional uint32 PoisonSessionNodeId = 102;

    optional uint32 NumSlowpokeActors = 200;
    optional uint32 PoolId = 201;
    optional uint64 SleepMin = 202;
    optional uint64 SleepMax = 203;
    optional uint64 RescheduleMin = 204;
    optional uint64 RescheduleMax = 205;
}

message TConsoleRequest {
    oneof Request {
        NKikimrConsole.TCreateTenantRequest CreateTenantRequest = 1;
        NKikimrConsole.TGetTenantStatusRequest GetTenantStatusRequest = 2;
        NKikimrConsole.TAlterTenantRequest AlterTenantRequest = 3;
        NKikimrConsole.TListTenantsRequest ListTenantsRequest = 4;
        NKikimrConsole.TGetConfigRequest GetConfigRequest = 5;
        NKikimrConsole.TSetConfigRequest SetConfigRequest = 6;
        NKikimrConsole.TConfigureRequest ConfigureRequest = 7;
        NKikimrConsole.TGetConfigItemsRequest GetConfigItemsRequest = 8;
        NKikimrConsole.TGetNodeConfigItemsRequest GetNodeConfigItemsRequest = 9;
        NKikimrConsole.TGetNodeConfigRequest GetNodeConfigRequest = 10;
        NKikimrConsole.TRemoveTenantRequest RemoveTenantRequest = 11;
        Ydb.Operations.GetOperationRequest GetOperationRequest = 12;
        NKikimrConsole.TCheckConfigUpdatesRequest CheckConfigUpdatesRequest = 13;
        NKikimrConsole.TListConfigValidatorsRequest ListConfigValidatorsRequest = 14;
        NKikimrConsole.TToggleConfigValidatorRequest ToggleConfigValidatorRequest = 15;
        NKikimrConsole.TUpdateTenantPoolConfig UpdateTenantPoolConfig = 16;
    }
    optional string DomainName = 100;
    optional string SecurityToken = 101;
}

message TConsoleResponse {
    oneof Response {
        NKikimrConsole.TCreateTenantResponse CreateTenantResponse = 1;
        NKikimrConsole.TGetTenantStatusResponse GetTenantStatusResponse = 2;
        NKikimrConsole.TAlterTenantResponse AlterTenantResponse = 3;
        NKikimrConsole.TListTenantsResponse ListTenantsResponse = 4;
        NKikimrConsole.TGetConfigResponse GetConfigResponse = 5;
        NKikimrConsole.TSetConfigResponse SetConfigResponse = 6;
        NKikimrConsole.TConfigureResponse ConfigureResponse = 7;
        NKikimrConsole.TGetConfigItemsResponse GetConfigItemsResponse = 8;
        NKikimrConsole.TGetNodeConfigItemsResponse GetNodeConfigItemsResponse = 9;
        NKikimrConsole.TGetNodeConfigResponse GetNodeConfigResponse = 10;
        NKikimrConsole.TRemoveTenantResponse RemoveTenantResponse = 11;
        Ydb.Operations.GetOperationResponse GetOperationResponse = 12;
        NKikimrConsole.TCheckConfigUpdatesResponse CheckConfigUpdatesResponse = 13;
        NKikimrConsole.TListConfigValidatorsResponse ListConfigValidatorsResponse = 14;
        NKikimrConsole.TToggleConfigValidatorResponse ToggleConfigValidatorResponse = 15;
    }
    optional NKikimrConsole.TStatus Status = 100;
}

message TTestShardControlRequest {
    message TSizeInterval {
        optional uint64 Weight = 1; // nonzero
        optional uint32 Min = 2;
        optional uint32 Max = 3;
        optional bool Inline = 4; // if true, then keys are stored as inline values of KV tablet rows
    }
    message TTimeInterval { // Poisson distribution of events
        optional uint64 Weight = 1; // nonzero
        optional double Frequency = 2; // events per second
        optional uint32 MaxIntervalMs = 3; // max interval between two events in milliseconds
    }
    message TCmdInitialize {
        optional string StorageServerHost = 1; // location of storage server containing tablet actual state
        optional int32 StorageServerPort = 2; // part of storage server location
        optional uint64 MaxDataBytes = 3; // when total length of stored keys reaches MaxDataBytes...
        optional uint64 MinDataBytes = 4; // then random keys are collected until total length drops below MinDataBytes
        optional uint32 MaxInFlight = 5;
        optional uint64 ValidateAfterBytes = 9; // number of bytes to write before starting automatic validation
        optional uint32 MaxReadsInFlight = 10;
        optional bool ResetWritePeriodOnFull = 11; // restart write periods when inflight is full
        repeated TSizeInterval Sizes = 6; // distrubution of generated value size
        repeated TTimeInterval WritePeriods = 7; // time between two events
        repeated TTimeInterval RestartPeriods = 8; // time between automatic restarts
        optional uint32 PatchRequestsFractionPPM = 12;
    }

    optional uint64 TabletId = 1;
    oneof Command {
        TCmdInitialize Initialize = 2;
    }
}

message TTestShardControlResponse {
}

message TLoginRequest {
    optional string Database = 1;
    optional string User = 2;
    optional string Password = 3;
};

