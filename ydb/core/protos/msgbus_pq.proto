import "ydb/core/protos/pqconfig.proto";
import "ydb/public/api/protos/draft/persqueue_error_codes.proto";
import "ydb/library/actors/protos/actors.proto";

package NKikimrClient;
option java_package = "ru.yandex.kikimr.proto";


message TReadSessionKey {
    optional string SessionId = 1;
    optional uint64 PartitionSessionId = 2;
}


message TPersQueuePartitionRequest {
    message TCmdRead {
        optional string ClientId = 1; // mandatory
        optional string SessionId = 2; // if not set, then read without session
        optional int64 Offset = 3; // mandatory
        optional int32 PartNo = 7 [default = 0]; //if not set then treat as 0
        optional int32 Count = 4; //optional
        optional int32 Bytes = 5; //optional, max value = 25Mb
        optional int32 TimeoutMs = 6; //ms, default = 1000
        optional int32 MaxTimeLagMs = 8; // optional, default = infinity, why we use int instead of uint?
        optional uint64 ReadTimestampMs = 9; //optional, default = 0

        optional bool MirrorerRequest = 10 [default = false];

        optional string ClientDC = 11;

        optional string PartitionKey = 12;
        optional string ExplicitHash = 13;

        optional bool ExternalOperation = 14 [default = false];
        optional uint64 DirectReadId = 15;
        optional uint64 PartitionSessionId = 16;
        optional int64 LastOffset = 17;

    }

    message TCmdPublishDirectRead {
        optional TReadSessionKey SessionKey = 1;
        optional uint64 DirectReadId = 2;
    }

    message TCmdForgetDirectRead {
        optional TReadSessionKey SessionKey = 1;
        optional uint64 DirectReadId = 2;
    }

    message TCmdCreateSession {
        optional string ClientId = 1;
        optional string SessionId = 2;
        optional uint64 Generation = 3;
        optional uint64 Step = 4;
        optional uint64 PartitionSessionId = 5;
    }

    message TCmdDeleteSession {
        optional string ClientId = 1; // mandatory
        optional string SessionId = 2; // optional
    }

    message TCmdSetClientOffset {
        optional string ClientId = 1; // mandatory
        optional int64 Offset = 2; // mandatory
        optional string SessionId = 4; // if not set, then no checks

        optional bool MirrorerRequest = 10 [default = false];
        optional bool Strict = 11 [default = false];
    }

    message TCmdGetClientOffset {
        optional string ClientId = 1; // mandatory
    }

    message TCmdWrite {
        optional bytes SourceId = 1; //mandatory
        optional int64 SeqNo = 2; //mandatory
        optional bytes Data = 4; //mandatory
        optional int32 PartNo = 5; //fill it for multi-part message
        optional int32 TotalParts = 6; //fill it for first part of multi-part message
        optional int32 TotalSize = 7; // fill it for first part of multi-part message
        optional int64 CreateTimeMS = 8; //mandatory
        optional bool DisableDeduplication = 9 [ default = false ];
        optional int64 WriteTimeMS = 10; //for mirroring only
        optional int32 UncompressedSize = 12; //fill it for all parts

        optional string ClientDC = 11;

        optional string PartitionKey = 13;
        optional bytes ExplicitHash = 14;

        optional bool ExternalOperation = 15 [ default = false ];

        // Do not reject request when quota exceeded
        optional bool IgnoreQuotaDeadline = 16 [ default = false ];

        optional NKikimrPQ.THeartbeat Heartbeat = 17; // mutually exclusive with Data & related fields
    }

    message TCmdUpdateWriteTimestamp {
        optional int64 WriteTimeMS = 1; //for mirroring only
    }

    message TCmdGetMaxSeqNo {
        repeated bytes SourceId = 2; //list of sourceIds to request
    }

    message TCmdGetOwnership { // get write ownership for partition
        optional string Owner = 1 [default = "default"];
        optional bool Force = 2 [ default = true];
        optional bool RegisterIfNotExists = 3 [default = true];
    }

    message TCmdReserveBytes {
        optional uint32 Size = 1;
        optional bool LastRequest = 2; // append size to last request's reservation
    }

    message TCmdRegisterMessageGroup {
        // Id of message group (SourceId)
        optional bytes Id = 1;
        // Range of the key to which it is allowed to write.
        optional NKikimrPQ.TPartitionKeyRange PartitionKeyRange = 2;
        // Starting sequence number
        optional int64 StartingSeqNo = 3;
        // Is the registration made after SplitMessageGroup or not
        optional bool AfterSplit = 4;
    }

    message TCmdDeregisterMessageGroup {
        // Id of message group (SourceId)
        optional bytes Id = 1;
    }

    message TCmdSplitMessageGroup {
        repeated TCmdDeregisterMessageGroup DeregisterGroups = 1;
        repeated TCmdRegisterMessageGroup RegisterGroups = 2;
    }

    optional string Topic = 1; //mandatory for request for partitions
    optional int32 Partition = 2; //mandatory for request for partitions
    optional string OwnerCookie = 3; //mandatory for write
    optional int64 MessageNo = 12; //mandatory for write
    optional int64 CmdWriteOffset = 13; //optional
    optional int64 WriteId = 23;
    optional bool NeedSupportivePartition = 28;

    repeated TCmdWrite CmdWrite = 4;
    optional TCmdGetMaxSeqNo CmdGetMaxSeqNo = 5;
    optional TCmdDeleteSession CmdDeleteSession = 6;
    optional TCmdCreateSession CmdCreateSession = 7;
    optional TCmdRead CmdRead = 8;
    optional TCmdPublishDirectRead CmdPublishRead = 24;
    optional TCmdForgetDirectRead CmdForgetRead = 25;
    optional TCmdSetClientOffset CmdSetClientOffset = 9;
    optional TCmdGetClientOffset CmdGetClientOffset = 10;
    optional TCmdGetOwnership CmdGetOwnership = 11;
    optional TCmdReserveBytes CmdReserveBytes = 14;
    optional TCmdRegisterMessageGroup CmdRegisterMessageGroup = 20;
    optional TCmdDeregisterMessageGroup CmdDeregisterMessageGroup = 21;
    optional TCmdSplitMessageGroup CmdSplitMessageGroup = 22;

    optional NActorsProto.TActorId PipeClient = 15;

    optional uint64 Cookie = 16; //client cookie to be returned in response

    optional TCmdUpdateWriteTimestamp CmdUpdateWriteTimestamp = 17;

    optional bool IsDirectWrite = 18 [default = false];
    optional uint64 PutUnitsSize = 19;
    optional int64 InitialSeqNo = 26;
    optional bool MeteringV2Enabled = 27 [default = false];
}

message TPersQueueMetaRequest {
    message TCmdCreateTopic {
        optional string Topic = 1; //mandatory, topic name
        optional int32 NumPartitions = 2; //mandatory, not zero
        optional NKikimrPQ.TPQTabletConfig Config = 3;
        optional int32 NumPartitionsPerTablet = 4 [default = 5];
    }
    message TCmdChangeTopic {
        optional string Topic = 1; //mandatory
        optional int32 NumPartitions = 2; //mandatory, not zero
        optional NKikimrPQ.TPQTabletConfig Config = 3; // if not set then config is not changed
    }

    message TCmdDeleteTopic {
        optional string Topic = 1; //mandatory
    }

    message TCmdGetTopicMetadata {
        repeated string Topic = 1; //if not set - describe all topics
    }

    message TTopicRequest {
        optional string Topic = 1; //must be set
        repeated int32 Partition = 2; // if empty - return info for all partitions
    }

    message TCmdGetPartitionLocations {
        repeated TTopicRequest TopicRequest = 1; //if not set - describe all topics
        optional string Host = 3; // if set - filter answer for partitions only from this host
    }

    message TCmdGetPartitionOffsets {
        repeated TTopicRequest TopicRequest = 1; //if not set - describe all topics
        optional string ClientId = 2; //if presented then client offset for this user is reported too
    }

    message TCmdGetPartitionStatus {
        repeated TTopicRequest TopicRequest = 1; //if not set - describe all topics
        optional string ClientId = 2; //if not presended then sum of metrics for all clients
    }

    message TCmdGetReadSessionsInfo {
        optional string ClientId = 1; //manadatory
        repeated string Topic = 2; //mandatory
    }

    optional TCmdCreateTopic CmdCreateTopic = 1;
    optional TCmdChangeTopic CmdChangeTopic = 2;
    optional TCmdDeleteTopic CmdDeleteTopic = 3;
    optional TCmdGetTopicMetadata CmdGetTopicMetadata = 4;
    optional TCmdGetPartitionLocations CmdGetPartitionLocations = 5;
    optional TCmdGetPartitionOffsets CmdGetPartitionOffsets = 6;
    optional TCmdGetPartitionStatus CmdGetPartitionStatus = 7;
    optional TCmdGetReadSessionsInfo CmdGetReadSessionsInfo = 8;
}


message TPersQueueFetchRequest {
    message TPartitionInfo {
        optional string Topic = 1; // must be set
        optional int32 Partition = 2; // must be set
        optional int64 Offset = 3; // must be set
        optional int32 MaxBytes = 4; // must be set
        optional uint64 ReadTimestampMs = 5; //optional, default = 0
    }
    repeated TPartitionInfo Partition = 1;
    optional int32 TotalMaxBytes = 2; //must be set
    optional int32 WaitMs = 3 [default = 0];
    optional string ClientId = 4; //must be set

    optional bool MirrorerRequest = 5 [default = false];
}


message TPersQueueRequest {
    optional TPersQueuePartitionRequest PartitionRequest = 1;
    optional TPersQueueMetaRequest MetaRequest = 2;
    optional TPersQueueFetchRequest FetchRequest = 3;

    //only one from data, meta or fetch request must be set.
    optional string SecurityToken = 5;
    optional string Ticket = 6; //if set, check for acl

    optional string RequestId = 100; //for logging
}


message TPersQueueMetaResponse {
    message TCmdGetPartitionOffsetsResult {
        message TTopicResult {
            optional string Topic = 1;
            repeated NKikimrPQ.TOffsetsResponse.TPartResult PartitionResult = 2;

            optional NPersQueue.NErrorCode.EErrorCode ErrorCode = 3;
            optional string ErrorReason = 4; //filled if ErrorCode is not OK
            // add read rule version here
        }
        repeated TTopicResult TopicResult = 1;
    }

    message TCmdGetTopicMetadataResult {
        message TTopicInfo {
            optional string Topic = 1; //mandatory
            optional int32 NumPartitions = 2; //mandatory
            optional NKikimrPQ.TPQTabletConfig Config = 3; //mandatory

            optional NPersQueue.NErrorCode.EErrorCode ErrorCode = 4;
            optional string ErrorReason = 5; //filled if ErrorCode is not OK

        }
        repeated TTopicInfo TopicInfo = 2;
    }
    message TCmdGetPartitionLocationsResult {
        message TTopicResult {
            message TPartitionLocation {
                optional int32 Partition = 1; // mandatory
                optional string Host = 2; //mandatory
                optional int32 HostId = 3; //mandatory, internal id of node
                optional NPersQueue.NErrorCode.EErrorCode ErrorCode = 6;
                optional string ErrorReason = 7; //filled if ErrorCode is not OK
            }

            optional string Topic = 1; //mandatory
            repeated TPartitionLocation PartitionLocation = 4;

            optional NPersQueue.NErrorCode.EErrorCode ErrorCode = 5;
            optional string ErrorReason = 6; //filled if ErrorCode is not OK

        }
        repeated TTopicResult TopicResult = 2;
    }

    message TCmdGetPartitionStatusResult {
        message TTopicResult {
            optional string Topic = 1; //mandatory
            repeated NKikimrPQ.TStatusResponse.TPartResult PartitionResult = 2;
            optional NPersQueue.NErrorCode.EErrorCode ErrorCode = 3;
            optional string ErrorReason = 4; //filled if ErrorCode is not OK
        }
        repeated TTopicResult TopicResult = 2;
    }

    message TCmdGetReadSessionsInfoResult {
        message TPartitionResult {
            optional NPersQueue.NErrorCode.EErrorCode ErrorCode = 700;
            optional string ErrorReason = 701; //filled if ErrorCode is not OK

            optional uint32 Partition = 1;
            optional uint64 ClientOffset = 2;
            optional uint64 StartOffset = 3;
            optional uint64 EndOffset = 4;
            optional uint64 MessageLag = 5;
            optional uint64 TimeLag = 7;
            optional string Session = 8;
            optional string ClientNode = 9;
            optional string ProxyNode = 10;
            optional string TabletNode = 11;
            optional string Timestamp = 12;
            optional uint64 ClientReadOffset = 13;
            optional uint64 ReadTimeLag = 14;
            optional uint32 TabletNodeId = 15;
        }

        message TTopicResult {
            optional string Topic = 1; //mandatory
            repeated TPartitionResult PartitionResult = 2;

            optional NPersQueue.NErrorCode.EErrorCode ErrorCode = 3;
            optional string ErrorReason = 4; //filled if ErrorCode is not OK

            // add read rule version here

        }
        repeated TTopicResult TopicResult = 2;

        message TSessionResult {
            optional string Session = 1;

            message TPartitionResult {
                optional string Topic = 1;
                optional uint64 Partition = 2;

                repeated uint64 NextCommits = 16;
                optional uint64 LastReadId = 17;
                optional uint64 ReadIdCommitted = 18;
                optional uint64 AssignId = 19;

                optional uint64 Timestamp = 20;
            }
            optional uint64 Timestamp = 5;

            optional string ClientNode = 6;
            optional string ProxyNode = 7;

            optional NPersQueue.NErrorCode.EErrorCode ErrorCode = 8;
            optional string ErrorReason = 9; //filled if ErrorCode is not OK

            repeated TPartitionResult PartitionResult = 10;
        }
        repeated TSessionResult SessionResult = 3;
    }

    optional TCmdGetPartitionOffsetsResult CmdGetPartitionOffsetsResult = 1;
    optional TCmdGetTopicMetadataResult CmdGetTopicMetadataResult = 2;
    optional TCmdGetPartitionLocationsResult CmdGetPartitionLocationsResult = 3;
    optional TCmdGetPartitionStatusResult CmdGetPartitionStatusResult = 4;
    optional TCmdGetReadSessionsInfoResult CmdGetReadSessionsInfoResult = 5;

}


message TCmdReadResult {
    message TResult {
        optional uint64 Offset = 1;
        optional bytes Data = 2;
        optional bytes SourceId = 3;
        optional uint64 SeqNo = 4;

        optional uint32 PartNo = 5; //will be filled for multi-parted message
        optional uint32 TotalParts = 6; //will be filled for multi-parted message
        optional uint32 TotalSize = 7; //will be filled for PartNo=0 TotalParts > 1

        optional uint64 WriteTimestampMS = 8;
        optional uint64 CreateTimestampMS = 9;
        optional uint32 UncompressedSize = 10;

        optional string PartitionKey = 11;
        optional bytes ExplicitHash = 12;
    }
    optional uint64 MaxOffset = 2;
    repeated TResult Result = 3;
    optional uint32 BlobsFromDisk = 4;
    optional uint32 BlobsFromCache = 5;
    optional NPersQueue.NErrorCode.EErrorCode ErrorCode = 6; //filled for FetchRequest if there is partition error
    optional string ErrorReason = 7; //filled for FetchRequest if there is partition error
    optional uint64 BlobsCachedSize = 8;
    optional uint64 SizeLag = 9;
    optional uint64 RealReadOffset = 10;
    optional uint64 WaitQuotaTimeMs = 11;
    optional uint64 ReadFromTimestampMs = 12;
    optional uint64 SizeEstimate = 13;
    optional int64 LastOffset = 14;
    optional uint64 EndOffset = 15;
}


message TPersQueueFetchResponse {
    message TPartResult {
        optional string Topic = 1;
        optional int32 Partition = 2;
        optional TCmdReadResult ReadResult = 3;
    }

    repeated TPartResult PartResult = 1;
}


message TPersQueuePartitionResponse {
    message TCmdWriteResult {
        optional bool AlreadyWritten = 1; //true if record already presented in partition
        optional bytes SourceId = 2;
        optional int64 SeqNo = 3;
        optional int64 Offset = 4; //offset of this record or last for this sourceId if AlreadyWritten is true
        optional int32 PartNo = 5;
        optional int64 WriteTimestampMS = 6;
        optional int64 MaxSeqNo = 7; //last seqNo is set when AlreadyWritten is true

        //write stat
        optional uint32 PartitionQuotedTimeMs = 8;
        optional uint32 TopicQuotedTimeMs = 11;
        optional uint32 TotalTimeInPartitionQueueMs = 9;
        optional uint32 WriteTimeMs = 10;
    }

    message TCmdGetMaxSeqNoResult {
        message TSourceIdInfo {
            optional bytes SourceId = 1; //mandatory
            optional int64 SeqNo = 2; // will not be set if no records with such sourceId in partition
            optional int64 Offset = 3; //the same
            optional int64 WriteTimestampMS = 4; //the same
            optional bool Explicit = 5;
            optional NKikimrPQ.TMessageGroupInfo.EState State = 6;
        }
        repeated TSourceIdInfo SourceIdInfo = 2;
    }

    message TCmdGetClientOffsetResult {
        optional uint64 Offset = 2; // will not be set if no client offset is known
        optional uint64 EndOffset = 3;
        optional uint64 WriteTimestampMS = 5; //kikimr Write Timestamp of record on Offset (next to be readed record); is not set if no such record exists (no lag)
        optional uint64 CreateTimestampMS = 6; //create Timestamp of record on Offset (next to be readed record); is not set if no such record exists (no lag)
        optional uint64 SizeLag = 7;
        optional uint64 WriteTimestampEstimateMS = 8;

    }

    message TCmdGetOwnershipResult {
        optional string OwnerCookie = 1;
        optional NKikimrPQ.ETopicPartitionStatus Status = 2;
        optional int64 SeqNo = 3;

        // transactions
        optional int32 SupportivePartition = 4;
    }

    message TCmdPrepareDirectReadResult {
        optional uint32 BytesSizeEstimate = 1;
        optional uint64 ReadOffset = 2;
        optional uint64 LastOffset = 3;

        optional uint64 EndOffset = 4;
        optional uint64 SizeLag = 6;
        optional uint64 WriteTimestampMS = 7;

        optional uint64 DirectReadId = 5;
    }

    message TCmdPublishDirectReadResult {
    }


    repeated TCmdWriteResult CmdWriteResult = 1;
    optional TCmdGetMaxSeqNoResult CmdGetMaxSeqNoResult = 2;
    optional TCmdReadResult CmdReadResult = 3;
    optional TCmdGetClientOffsetResult CmdGetClientOffsetResult = 4;
    optional TCmdGetOwnershipResult CmdGetOwnershipResult = 5;
    optional TCmdPrepareDirectReadResult CmdPrepareReadResult = 7;
    optional TCmdPublishDirectReadResult CmdPublishReadResult = 8;
    optional TCmdPublishDirectReadResult CmdForgetReadResult = 9;

    optional uint64 Cookie = 6;
}
