import "ydb/core/protos/subdomains.proto";
import "ydb/library/actors/protos/interconnect.proto";

package NKikimrNodeBroker;
option java_package = "ru.yandex.kikimr.proto";

message TListNodes {
    oneof Filter {
        // Response is sent only when specified epoch is reached.
        uint64 MinEpoch = 1;
        // Response with empty info if state is in specified version.
        uint64 CachedVersion = 2;
    }
}

message TNodeInfo {
    optional uint32 NodeId = 1;
    optional string Host = 2;
    optional uint32 Port = 3;
    optional string ResolveHost = 4;
    optional string Address = 5;
    optional NActorsInterconnect.TNodeLocation Location = 6;
    optional uint64 Expire = 7;
    optional string Name = 8;
    optional uint32 BridgePileId = 9;
}

message TNodeInfoSchema {
    optional string Host = 1;
    optional uint32 Port = 2;
    optional string ResolveHost = 3;
    optional string Address = 4;
    optional uint32 Lease = 5;
    optional uint64 Expire = 6;
    optional NActorsInterconnect.TNodeLocation Location = 7;
    optional NKikimrSubDomains.TDomainKey ServicedSubDomain = 8;
    optional uint32 SlotIndex = 9;
    optional bool AuthorizedByCertificate = 10;
    optional uint32 BridgePileId = 11;
}

message TVersionInfo {
    optional bool SupportDeltaProtocol = 1;
}

message TEpoch {
    optional uint64 Id = 1;
    optional uint64 Version = 2;
    optional uint64 Start = 3;
    optional uint64 End = 4;
    optional uint64 NextEnd = 5;
}

message TNodesInfo {
  optional uint32 Domain = 1;
  repeated TNodeInfo Nodes = 2;
  repeated TNodeInfo ExpiredNodes = 3;
  optional TEpoch Epoch = 4;
}

message TResolveNode {
  optional uint32 NodeId = 1;
}

message TStatus {
  enum ECode {
    UNKNOWN = 0;
    OK = 1;
    ERROR = 2;
    ERROR_TEMP = 3;
    WRONG_REQUEST = 4;
    UNAUTHORIZED = 5;
  }

  optional ECode Code = 1;
  optional string Reason = 2;
}

message TResolvedNode {
  optional TStatus Status = 1;
  optional TNodeInfo Node = 2;
}

message TRegistrationRequest {
  optional string Host = 1;
  optional uint32 Port = 2;
  optional string ResolveHost = 3;
  optional string Address = 4;
  optional NActorsInterconnect.TNodeLocation Location = 5;
  optional bool FixedNodeId = 6;
  optional string Path = 7;
  optional bool AuthorizedByCertificate = 8;
  optional string BridgePileName = 9;
}

message TRegistrationResponse {
  optional TStatus Status = 1;
  optional TNodeInfo Node = 2;
  optional uint64 ScopeTabletId = 3;
  optional uint64 ScopePathId = 4;
}

message TGracefulShutdownRequest {
  optional uint32 NodeId = 1;
}

message TGracefulShutdownResponse {
  optional TStatus Status = 1;
}

message TExtendLeaseRequest {
  optional uint32 NodeId = 1;
}

message TExtendLeaseResponse {
  optional TStatus Status = 1;
  optional uint32 NodeId = 2;
  optional uint64 Expire = 3;
  // Epoch at which ping happened. Lease is extended
  // until the end of the next epoch.
  optional TEpoch Epoch = 4;
}

message TConfig {
    // Both limits are inclusive.
    message TNodeIds {
        optional uint32 From = 1;
        optional uint32 To = 2;
    }

    optional uint64 EpochDuration = 1 [default = 3600000000];
    // Don't allocate and extend lease for IDs from banned intervals.
    repeated TNodeIds BannedNodeIds = 2;
    optional string StableNodeNamePrefix = 3 [default = "slot-"];
}

message TGetConfigRequest {
}

message TGetConfigResponse {
    optional TConfig Config = 1;
}

message TSetConfigRequest {
    optional TConfig Config = 1;
}

message TSetConfigResponse {
    optional TStatus Status = 1;
}

message TSubscribeNodesRequest {
    optional uint64 CachedVersion = 1;
    // Sender increments SeqNo each time it re-subscribes.
    // This invalidates all subscriptions with a lower SeqNo.
    optional uint64 SeqNo = 2;
}

message TUpdateNode {
    oneof UpdateType {
        TNodeInfo Node = 1;
        uint32 ExpiredNode = 2;
        uint32 RemovedNode = 3;
    }
}

message TUpdateNodes {
    optional TEpoch Epoch = 1;
    repeated TUpdateNode Updates = 2;
    optional uint64 SeqNo = 3;
}

message TSyncNodesRequest {
    optional uint64 SeqNo = 1;
}

message TSyncNodesResponse {
    optional uint64 SeqNo = 1;
}
