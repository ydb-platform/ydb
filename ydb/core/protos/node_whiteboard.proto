import "ydb/library/actors/protos/interconnect.proto";
import "ydb/core/protos/tablet.proto";
import "ydb/core/protos/subdomains.proto";
import "ydb/core/protos/blobstorage_disk.proto";
import "google/protobuf/descriptor.proto";
import "ydb/core/protos/tracing.proto";

package NKikimrWhiteboard;
option java_package = "ru.yandex.kikimr.proto";

extend google.protobuf.FieldOptions {
    optional uint64 InsignificantChangeAmount = 70553;
    optional uint32 InsignificantChangePercent = 70554;
}

enum EFlag {
    Grey = 0;
    Green = 1;
    Yellow = 2;
    Orange = 3;
    Red = 4;
}

message TCustomTabletAttribute {
    optional uint32 Key = 1; // implementation-dependent
    optional string Value = 2;
}

message TTabletStateInfo {
    enum ETabletState {
        Created = 0;
        ResolveStateStorage = 1;
        Candidate = 2;
        BlockBlobStorage = 3;
        RebuildGraph = 4;
        WriteZeroEntry = 5;
        Restored = 6;
        Discover = 7;
        Lock = 8;
        Dead = 9;
        Active = 10;
        ResolveLeader = 11;
        Deleted = 12;
        Stopped = 13;
        Reserved14 = 14;
        Reserved15 = 15;
        Reserved16 = 16;
    }

    optional uint64 TabletId = 1;
    optional uint64 CreateTime = 2;
    optional uint64 ChangeTime = 3;
    optional ETabletState State = 4;
    optional uint32 UserState = 5; // implementation-dependent
    optional uint32 Generation = 6;
    optional NKikimrTabletBase.TTabletTypes.EType Type = 7;
    optional string Host = 8;
    repeated uint32 ChannelGroupIDs = 9; // BS Group per channel
    repeated TCustomTabletAttribute Attributes = 10;
    optional uint32 NodeId = 11; // filled during merge
    optional bool Leader = 12; // leader or follower
    optional uint32 Count = 13; // filled during group count
    optional uint32 FollowerId = 14;
    optional EFlag Overall = 15; // filled during merge
    optional NKikimrSubDomains.TDomainKey TenantId = 16;
    optional fixed64 HiveId = 17;
}

message TEvTabletStateRequest {
    optional uint64 ChangedSince = 1;
    optional string Format = 5; // it could be "packed5"
    optional string GroupBy = 20; // it's either empty or "Type,State" for now
    repeated fixed64 FilterTabletId = 22;
}

message TEvTabletStateResponse {
    repeated TTabletStateInfo TabletStateInfo = 1;
    optional uint64 ResponseTime = 2; // ms, filled during processing and merging
    optional uint64 ResponseDuration = 3; // us, filled during collect
    optional uint64 ProcessDuration = 4; // us, filled during processing
    optional bytes Packed5 = 5;
}

message TNodeClockSkew {
    optional uint32 PeerNodeId = 1;
    optional int64 ClockSkewUs = 2;
}

message TNodeStateInfo {
    optional string PeerName = 1;
    optional bool Connected = 2;
    optional uint32 NodeId = 3; // filled during merge
    optional uint64 ChangeTime = 4;
    optional uint32 OutputQueueSize = 5 [(InsignificantChangeAmount) = 1048576]; // 1Mb
    optional EFlag ConnectStatus = 6;
    optional uint32 Count = 13; // filled during group count
}

message TEvNodeStateRequest {
    optional uint64 ChangedSince = 1;
}

message TEvNodeStateResponse {
    repeated TNodeStateInfo NodeStateInfo = 1;
    optional uint64 ResponseTime = 2;
    optional uint32 ResponseDuration = 3; // filled during collect
}

message TPDiskStateInfo {
    optional uint32 PDiskId = 1;
    optional uint64 CreateTime = 2;
    optional uint64 ChangeTime = 3;
    optional string Path = 4;
    optional uint64 Guid = 5;
    optional uint64 Category = 6;
    optional uint64 AvailableSize = 7 [(InsignificantChangeAmount) = 104857600]; // 100Mb
    optional uint64 TotalSize = 8;
    optional NKikimrBlobStorage.TPDiskState.E State = 9;
    optional uint32 NodeId = 10; // filled during merge
    optional uint32 Count = 13; // filled during group count
    optional EFlag Device = 14;
    optional EFlag Realtime = 15;
    // State as flag - to be filled
    optional EFlag StateFlag = 16;
    // overall state - to be filled
    optional EFlag Overall = 17;
    optional string SerialNumber = 18;
    optional uint64 SystemSize = 19;
    optional uint64 LogUsedSize = 20;
    optional uint64 LogTotalSize = 21;
    optional uint32 ExpectedSlotCount = 22;
    optional uint64 EnforcedDynamicSlotSize = 23;
}

message TEvPDiskStateRequest {
    optional uint64 ChangedSince = 1;
}

message TEvPDiskStateResponse {
    repeated TPDiskStateInfo PDiskStateInfo = 1;
    optional uint64 ResponseTime = 2;
    optional uint32 ResponseDuration = 3; // filled during collect
}

enum EVDiskState {
    Initial = 1;
    LocalRecoveryError = 2;
    SyncGuidRecovery = 3;
    SyncGuidRecoveryError = 4;
    OK = 5;
    PDiskError = 6;
}

// The structure reports VDisk compaction satisfaction rank, i.e.
// how good VDisk is in supporting its LSM Tree
message TVDiskSatisfactionRank {
    message TRank {
        // Rank in percents; 0-100% is good; >100% is bad.
        // Formula for rank calculation is the following:
        // Rank = actual_value / max_allowed_value * 100
        optional uint32 RankPercent = 1 [(InsignificantChangeAmount) = 3]; // 3%

        // Flag is the Rank transformed to something simple
        // to understand: Green, Yellow or Red
        optional EFlag Flag = 2;
    }

    optional TRank FreshRank = 1;
    optional TRank LevelRank = 2;
}

message TVDiskStateInfo {
    optional NKikimrBlobStorage.TVDiskID VDiskId = 1;
    optional uint64 CreateTime = 2;
    optional uint64 ChangeTime = 3;
    optional uint32 PDiskId = 4;
    optional uint32 VDiskSlotId = 5;
    optional uint64 Guid = 6;
    optional uint64 Kind = 7;
    optional uint32 NodeId = 9; // filled during merge
    optional uint32 Count = 17; // filled during group count

    // overall state - to be filled
    optional EFlag Overall = 10;

    // Current state of VDisk
    optional EVDiskState VDiskState = 11;
    // Disk space flags
    optional EFlag DiskSpace = 12;
    // Compaction satisfaction rank
    optional TVDiskSatisfactionRank SatisfactionRank = 13;
    // Is VDisk replicated? (i.e. contains all blobs it must have)
    optional bool Replicated = 14;
    // Does this VDisk has any yet unreplicated phantom-like blobs?
    optional bool UnreplicatedPhantoms = 20 [default = false];
    // The same for the non-phantom-like blobs.
    optional bool UnreplicatedNonPhantoms = 21 [default = false];
    // Replication progress (0 to 1). Only for replication, not blob scrubbing.
    optional float ReplicationProgress = 30;
    // Replication ETA.
    optional uint32 ReplicationSecondsRemaining = 31;
    // How many unsynced VDisks from current BlobStorage group we see
    optional uint64 UnsyncedVDisks = 15 [default = 0];
    // How much this VDisk have allocated on corresponding PDisk
    optional uint64 AllocatedSize = 16 [(InsignificantChangeAmount) = 536870912]; // 512MiB
    // How much space is available for VDisk corresponding to PDisk's hard space limits
    optional uint64 AvailableSize = 28 [(InsignificantChangeAmount) = 536870912]; // 512MiB
    // Does this disk has some unreadable but not yet restored blobs?
    optional bool HasUnreadableBlobs = 24;
    optional fixed64 IncarnationGuid = 25;
    optional bool DonorMode = 26;
    optional fixed64 InstanceGuid = 27; // VDisk actor instance guid
    repeated NKikimrBlobStorage.TVSlotId Donors = 29;

    // VDisk (Skeleton) Front Queue Status
    optional EFlag FrontQueues = 18;

    // VDisk storage pool label
    optional string StoragePoolName = 19;

    // Read bytes per second from PDisk for TEvVGet blobs only
    optional uint64 ReadThroughput = 22;
    // Write bytes per second to PDisk for TEvVPut blobs and replication bytes only
    optional uint64 WriteThroughput = 23;
}

message TEvVDiskStateRequest {
    optional uint64 ChangedSince = 1;
}

message TEvVDiskStateResponse {
    repeated TVDiskStateInfo VDiskStateInfo = 1;
    optional uint64 ResponseTime = 2;
    optional uint32 ResponseDuration = 3; // filled during collect
}

message TBSGroupStateInfo {
    optional uint32 GroupID = 1;
    optional string ErasureSpecies = 2;
    repeated NKikimrBlobStorage.TVDiskID VDiskIds = 3;
    optional uint64 ChangeTime = 4;
    optional uint32 NodeId = 5; // filled during merge
    optional uint32 GroupGeneration = 6;
    optional EFlag Overall = 7;
    optional EFlag Latency = 8;
    optional uint32 Count = 13; // filled during group count
    optional string StoragePoolName = 14; // from BS_CONTROLLER
    optional uint64 AllocatedSize = 15 [(InsignificantChangeAmount) = 100000000];
    optional uint64 AvailableSize = 16 [(InsignificantChangeAmount) = 100000000];
    optional uint64 ReadThroughput = 17;
    optional uint64 WriteThroughput = 18;
    optional bool Encryption = 19;
    repeated uint32 VDiskNodeIds = 20;
    optional uint64 BlobDepotId = 21; // if set, then this is virtual group
    optional bool NoVDisksInGroup = 22;
    optional uint64 BlobDepotOnlineTime = 23;
}

message TEvBSGroupStateRequest {
    optional uint64 ChangedSince = 1;
}

message TEvBSGroupStateResponse {
    repeated TBSGroupStateInfo BSGroupStateInfo = 1;
    optional uint64 ResponseTime = 2;
    optional uint32 ResponseDuration = 3; // filled during collect
}

enum EConfigState {
    Consistent = 0;
    Outdated = 1;
}

message TSystemStateInfo {
    message TPoolStats {
        optional string Name = 1;
        optional double Usage = 2 [(InsignificantChangePercent) = 30];
        optional uint32 Threads = 3;
    }

    message TEndpoint {
        optional string Name = 1;
        optional string Address = 2;
    }

    message TLegacyNodeLocation {
        optional uint32 DataCenter = 1;
        optional uint32 Room = 2;
        optional uint32 Rack = 3;
        optional uint32 Body = 4;
    }

    message TNodeSharedCache {
        optional uint64 UsedBytes = 1;
        optional uint64 LimitBytes = 2;
    }

    optional uint64 StartTime = 1;
    optional uint64 ChangeTime = 2;
    optional TLegacyNodeLocation SystemLocation = 3;
    repeated double LoadAverage = 4;
    optional uint32 NumberOfCpus = 5;
    optional EFlag SystemState = 6;
    optional EFlag MessageBusState = 7;
    optional EFlag GRpcState = 8;
    optional uint32 NodeId = 9; // filled during merge
    optional uint32 Count = 13; // filled during group count
    optional uint32 DataCenterId = 14;
    optional string DataCenterDescription = 15;
    optional string DataCenter = 16;
    optional uint32 RackId = 17;
    optional string Rack = 18;
    optional string Host = 19;
    optional string Version = 20;
    repeated TPoolStats PoolStats = 21;
    repeated TEndpoint Endpoints = 22;
    repeated string Roles = 23;
    repeated string Tenants = 24;
    optional string ClusterName = 25;
    optional uint64 MemoryUsed = 26;
    optional uint64 MemoryLimit = 27;
    optional EConfigState ConfigState = 28 [default = Consistent];
    optional uint64 MemoryUsedInAlloc = 29;
    optional double MaxDiskUsage = 30;
    optional NActorsInterconnect.TNodeLocation Location = 31;
    optional int64 MaxClockSkewWithPeerUs = 32; // a positive value means the peer is ahead in time; a negative value means it's behind
    optional uint32 MaxClockSkewPeerId = 33;
    optional uint64 DisconnectTime = 34;
    optional TNodeSharedCache SharedCacheStats = 35;
    optional uint32 TotalSessions = 36;
    optional string NodeName = 37;
}

message TEvSystemStateRequest {
    optional uint64 ChangedSince = 1;
}

message TEvSystemStateResponse {
    repeated TSystemStateInfo SystemStateInfo = 1;
    optional uint64 ResponseTime = 2;
    optional uint32 ResponseDuration = 3; // filled during collect
}

message TEvTabletLookupRequest {
}

message TEvTabletLookupResponse {
    repeated uint64 TabletIDs = 1;
}

message TEvTraceLookupRequest {
    optional uint64 TabletID = 1;
}

message TEvTraceLookupResponse {
    repeated NKikimrTracing.TTraceID TraceIDs = 1;
}

message TEvTraceRequest {
    optional uint64 TabletID = 1;
    optional NKikimrTracing.TTraceID TraceID = 2;
    optional uint32 Mode = 3;
    optional uint32 Precision = 4;
}

message TEvTraceResponse {
    optional string Trace = 1;
}

message TEvSignalBodyRequest {
    optional uint64 TabletID = 1;
    optional NKikimrTracing.TTraceID TraceID = 2;
    optional uint32 Mode = 3;
    optional uint32 Precision = 4;
    optional string SignalID = 5;
}

message TEvSignalBodyResponse {
    optional string SignalBody = 1;
}
