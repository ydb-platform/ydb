import "ydb/public/api/protos/draft/persqueue_error_codes.proto";
import "ydb/public/api/protos/draft/persqueue_common.proto";

import "ydb/public/api/protos/annotations/sensitive.proto";

import "ydb/core/protos/base.proto";
import "ydb/core/protos/msgbus_kv.proto";
import "ydb/core/protos/netclassifier.proto";
import "ydb/core/protos/node_limits.proto";
import "ydb/core/scheme/protos/pathid.proto";
import "ydb/core/scheme/protos/type_info.proto";

import "ydb/library/actors/protos/actors.proto";
import "ydb/library/services/services.proto";

package NKikimrPQ;
option java_package = "ru.yandex.kikimr.proto";


message TPartitionCounterData {
    optional uint64 MessagesWrittenTotal = 1;
    optional uint64 MessagesWrittenGrpc = 2;
    optional uint64 BytesWrittenTotal = 3;
    optional uint64 BytesWrittenGrpc = 4;
    optional uint64 BytesWrittenUncompressed = 5;
    repeated uint64 MessagesSizes = 6;
    //ToDo: !! InputLag = 7
}

message TPartitionMeta {
    optional uint64 StartOffset = 1;
    optional uint64 EndOffset = 2;
    optional bool SubDomainOutOfSpace = 3 [default = false];
    optional TPartitionCounterData CounterData = 4;
}

message TPartitionTxMeta {
    optional uint64 PlanStep = 1;
    optional uint64 TxId = 2;
}

message TPQConfig {
    optional uint32 ACLRetryTimeoutSec = 1 [default = 300];
    optional uint32 BalancerMetadataRetryTimeoutSec = 2 [default = 240];
    optional uint32 MaxBlobsPerLevel = 3 [default = 64]; // will produce 8mb blobs at last level
                                                         //32 => 1mb blobs at last level
    optional uint32 MaxBlobSize = 4 [default = 8388608]; //8mb
    optional uint32 ClustersUpdateTimeoutSec = 5 [default = 30];

    optional bool Enabled = 6 [default = true]; // Enable PQ proxies

    optional uint32 MetaCacheTimeoutSec = 7 [default = 30, deprecated = true];

    optional uint32 MaxReadCookies = 8 [default = 100000];

    optional bool CheckACL = 9 [default = true];

    optional uint32 SourceIdCleanupPeriodSec = 10 [default = 60]; // 24 hours // TODO: What is '24 hours'? Default is 60 seconds.
    optional uint32 SourceIdMaxLifetimeSec = 11 [default = 1382400]; // 16 days
    optional uint32 SourceIdTotalShardsCount = 12 [default = 131072];

    optional NKikimrClient.TKeyValueRequest.ETactic Tactic = 13 [default = MAX_THROUGHPUT];

    optional bool RequireCredentialsInNewProtocol = 14 [default = true];

    optional string ClusterTablePath = 15 [default = ""];
    optional string VersionTablePath = 16 [default = ""];

    optional uint32 ClustersUpdateTimeoutOnErrorSec = 17 [default = 1];

    optional uint32 WriteInitLatencyBigMs    = 19 [default = 900];
    optional uint32 ReadInitLatencyBigMs     = 20 [default = 900];
    optional uint32 CommitLatencyBigMs       = 21 [default = 900];
    optional uint32 WriteLatencyBigMs        = 22 [default = 550];
    optional uint32 ReadLatencyBigMs         = 23 [default = 550];
    optional uint32 ReadLatencyFromDiskBigMs = 28 [default = 1000];

    message TQuotingConfig {
        optional bool EnableQuoting = 1 [default = true];
        optional string QuotersDirectoryPath = 2 [default = ""];
        optional ELimitedEntity TopicWriteQuotaEntityToLimit = 3 [default = USER_PAYLOAD_SIZE];

        // Enum for describing entities that quoter can limit.
        enum ELimitedEntity {
            UNSPECIFIED = 0;
            WRITTEN_BLOB_SIZE = 1; // Written blob size, including additional data for compaction.
            USER_PAYLOAD_SIZE = 2; // Message + source id size.
        }
        optional bool EnableReadQuoting = 4 [default = false];
        optional uint64 ReadCreditBytes = 5 [default = 100000];

        optional uint64 QuotaWaitDurationMs = 6 [default = 0]; // 0 means infinity

        optional bool PartitionReadQuotaIsTwiceWriteQuota = 7 [default = false];

        optional uint32 MaxParallelConsumersPerPartition = 8 [default = 20];

    }
    optional TQuotingConfig QuotingConfig = 18;
    optional uint32 MaxInflightReadRequestsPerPartition = 56 [default = 20];

    // Time duration that we wait before we consider remote cluster enabled for load balancing purposes
    optional uint32 RemoteClusterEnabledDelaySec = 24 [default = 300]; // 5 minutes
    optional uint32 CloseClientSessionWithEnabledRemotePreferredClusterDelaySec = 25 [default = 300]; // 5 minutes

    reserved 26; // optional bool RoundRobinPartitionMapping = 26 [default = true];

    optional string Root = 27 [default = ""];
    optional string TestDatabaseRoot = 47; // For unit-tests only

    message TPQLibSettings {
        optional uint32 ThreadsCount = 1 [default = 1];
        optional uint32 CompressionPoolThreads = 2 [default = 1];
        optional uint32 GRpcThreads = 3 [default = 1];
    }

    message TMirrorConfig {
        optional bool Enabled = 1 [default = true];
        optional TPQLibSettings PQLibSettings = 2;
    }

    optional TMirrorConfig MirrorConfig = 29;

    optional uint64 MinWriteLatencyMs = 30 [default = 0];

    repeated TChannelProfile ChannelProfiles = 31;

    optional bool TopicsAreFirstClassCitizen = 32 [default = true];
    optional bool UseSrcIdMetaMappingInFirstClass = 52 [default = true];

    optional string SourceIdTablePath = 33 [default = "/Root/PQ/SourceIdMeta2"];

    repeated uint32 ValidWriteSpeedLimitsKbPerSec = 34;

    message TValidRetentionLimit {
        optional uint32 MinPeriodSeconds = 1;
        optional uint32 MaxPeriodSeconds = 2;
        optional uint64 MinStorageMegabytes = 3;
        optional uint64 MaxStorageMegabytes = 4;
    }

    repeated TValidRetentionLimit ValidRetentionLimits = 48;

    message TReadMeteringConfig {
        message TPricing {
            optional string Name = 1 [default = "unknown"];
        }
        repeated TPricing Pricing = 2;
        optional TPricing UnknownPricing = 3;
    }

    message TBillingMeteringConfig {
        // Enables billing & allows to use MeteringMode (see below)
        optional bool Enabled = 1 [default = false];
        optional uint64 FlushIntervalSec = 2 [default = 30];
        optional TReadMeteringConfig Read = 3;
    }

    optional TBillingMeteringConfig BillingMeteringConfig = 35;

    optional NKikimrNodeLimits.TNodeLimitsConfig.TPersQueueNodeConfig PersQueueNodeConfig = 36;

    optional bool EnableProtoSourceIdInfo = 37 [default = true];

    optional string Database = 38;

    message TClientServiceType {
        optional string Name = 1 [default = "data-streams"];
        optional string ReadPricingName = 2;
        optional uint32 MaxReadRulesCountPerTopic = 3 [default = 0]; // 0 means no limit. If you want to allow only zero count, then do not specify ClientServiceType.

        repeated string PasswordHashes = 4; //if one password matches, then user can use this type
    }

    optional bool ForceClientServiceTypePasswordCheck = 49 [default = false];

    repeated TClientServiceType ClientServiceType = 39;
    optional TClientServiceType DefaultClientServiceType = 40;
    optional bool DisallowDefaultClientServiceType = 43 [default = false];

    optional uint32 MetaCacheRefreshIntervalMilliSeconds = 41 [default = 10000, deprecated = true]; // DEPRECATED
    optional bool MetaCacheSkipVersionCheck = 42 [default = false, deprecated = true]; // DEPRECATED

    repeated string NonChargeableUser = 44;
    optional string LbCommunalDatabase = 45 [default = ""];

    message TPQDiscoveryConfig {
        optional uint32 CacheRefreshIntervalMilliSeconds = 1 [default = 10000];
        optional bool CacheSkipVersionCheck = 2 [default = false];
        optional bool LBFrontEnabled = 3 [default = true];
        optional bool UseLbAccountAlias = 4 [default = true];
        optional string LbUserDatabaseRoot = 5 [default = ""];
        optional bool UseDynNodesMapping = 6 [default = false];
        optional uint64 NodesMappingRescanIntervalMilliSeconds = 7 [default = 10000];
    }
    optional TPQDiscoveryConfig PQDiscoveryConfig = 46;

    optional uint32 MaxStorageNodePort = 50 [default = 19001];
    optional uint32 MaxStorageNodeId = 53 [default = 999];

    message TMoveTopicActorConfig {
        repeated string AllowedUserSIDs = 1;
    }

    optional TMoveTopicActorConfig MoveTopicActorConfig = 51;

    optional uint64 BalancerWakeupIntervalSec = 54 [default = 30];
    optional uint64 BalancerStatsWakeupIntervalSec = 55 [default = 5];
}

message TChannelProfile {
    optional string PoolKind = 1;
    optional uint64 Size = 2; // size in bytes
    optional double ReadIops = 3; // required iops for read requests
    optional double ReadBandwidth = 4; // required bandwidth (in bytes/sec) for read requests
    optional double WriteIops = 5; // required iops for write requests
    optional double WriteBandwidth = 6; // required bandwidth (in bytes/sec) for write requests
}

message TMirrorPartitionConfig {
    message TCredentials {
        message IamCredentials {
            optional string Endpoint = 1;
            optional string ServiceAccountKey = 2 [(Ydb.sensitive) = true];
        }
        oneof Credentials {
            string OauthToken = 1 [(Ydb.sensitive) = true];
            string JwtParams = 2 [(Ydb.sensitive) = true];
            IamCredentials Iam = 3;
        }
    }

    optional string Endpoint = 1;
    optional uint32 EndpointPort = 6;
    optional string Topic = 2;
    optional string Consumer = 3;
    optional uint64 ReadFromTimestampsMs = 5;
    optional TCredentials Credentials = 7;
    optional string Database = 8;
    optional bool UseSecureConnection = 9 [default = false];
    optional bool SyncWriteTime = 10 [default = false];
}

message TPartitionConfig {
    optional int32 MaxCountInPartition = 1 [default = 10000000];
    optional int64 MaxSizeInPartition = 2 [default = 1099511627776];
    optional int32 LifetimeSeconds = 3 [default = 604800]; //mandatory, must be set
    optional uint64 StorageLimitBytes = 16;

    // List of ClientIds, for which we don't delete data until they are read by these clients
    repeated string ImportantClientId = 4; //can be empty . Deprecated. Use Consumer.Important
    optional uint32 LowWatermark = 5 [default = 6291456]; //6Mb, compact blobs if they at least this big.
    optional uint32 SourceIdLifetimeSeconds = 6 [ default = 1382400]; //16 days
    optional uint32 SourceIdMaxCounts = 31 [default = 6000000]; // Maximum number of stored sourceId records in partition
                                                                // default - generate 5 new source id each second during 14 days

    optional uint64 WriteSpeedInBytesPerSecond = 7 [default = 50000000];
    optional uint64 BurstSize = 8 [default = 50000000];

    message TReadQuota {
        optional string ClientId = 1;
        optional uint64 SpeedInBytesPerSecond = 2;
        optional uint64 BurstSize = 3;
    }

    repeated TReadQuota ReadQuota = 11;
    optional uint64 MaxWriteInflightSize = 9 [default = 30000000]; //near 30mb
    optional uint64 BorderWriteInflightSize = 12 [default = 10000000]; //near 10mb

    reserved 10; // (deprecated) NumChannels;

    optional uint32 TotalPartitions = 13 [default = 1];

    repeated TChannelProfile ExplicitChannelProfiles = 14;

    optional TMirrorPartitionConfig MirrorFrom = 15;
};

message TPartitionKeyRange {
    // Inclusive left border. Emptiness means -inf.
    optional bytes FromBound = 1;
    // Exclusive right border. Emptiness means +inf.
    optional bytes ToBound = 2;
}

message TMessageGroup {
    // Id of message group (SourceId)
    optional bytes Id = 1;
    // Range of the key to which it is allowed to write.
    optional TPartitionKeyRange KeyRange = 2;
}

enum ETopicPartitionStatus {
    Active = 1; // the partition can be written
    Inactive = 2; // the partition can't be written but can be read
    Deleted = 3; // the partition can't be written and read
}

enum EConsumerScalingSupport {
    // The consumer can't work with scaling.
    NOT_SUPPORT = 1;
    // The consumer does not commit offsets. The order of messages may be disrupted at the time of scaling.
    PARTIAL_SUPPORT = 2;
    // The consumer fully supports scaling: during the reading process, offsets are regularly committed.
    FULL_SUPPORT = 3;
}

message TOffloadConfig {
    message TIncrementalBackup {
        optional string DstPath = 1;
        optional NKikimrProto.TPathID DstPathId = 2;
    }

    oneof Strategy {
        TIncrementalBackup IncrementalBackup = 1;
    }
}

message TPQTabletConfig {
    optional uint64 CacheSize = 1 [default = 104857600]; //100Mb, per tablet
    optional TPartitionConfig PartitionConfig = 2; //mandatory
    repeated uint32 PartitionIds = 3; //will be filled by schemeshard, don't touch. Deprecated by Partitions (id: 31)
    optional string TopicName = 4;  // also filled by schemeshard
    optional uint32 Version = 5; //also filled by schemeshard
    optional bool LocalDC = 6 [default = false];
    optional bool RequireAuthWrite = 7 [default = false];
    optional bool RequireAuthRead = 8 [default = false];
    optional string Producer = 9;
    optional string Ident = 10;
    optional string Topic = 11;
    optional string DC = 12;

    // ReadRules, ReadTopicTimestampMs, ReadRuleVersions, ConsumerFormatVersions, ConsumersCodecs and ConsumerScalingSupport form a consumer data array stored by columns
    repeated string ReadRules = 13; // Deprecated. Use Consumers.Name
    repeated uint64 ReadFromTimestampsMs = 14; // Deprecated. Use Consumers.ReadFromTimestampsMs
    repeated uint64 ConsumerFormatVersions = 15; // Deprecated. Use Consumers.FormatVersion
    message TCodecs {
        repeated int64 Ids = 1;
        repeated string Codecs = 2;
    }
    repeated TCodecs ConsumerCodecs = 16; // Deprecated. Use Consumers.Codec
    repeated string ReadRuleServiceTypes = 17; // Deprecated. Use Consumers.ServiceType

    optional uint64 FormatVersion = 20;
    optional TCodecs Codecs = 21;

    repeated uint64 ReadRuleVersions = 22; // Deprecated. Use Consumers.Version
    repeated uint64 ReadRuleGenerations = 32; // Deprecated. Use Consumers.Generation

    message TConsumer {
        optional string Name = 1;
        optional uint64 ReadFromTimestampsMs = 2 [default = 0];
        optional uint64 FormatVersion = 3 [default = 0];
        optional TCodecs Codec = 4;
        optional string ServiceType = 5;
        optional EConsumerScalingSupport ScalingSupport = 6;
        optional uint64 Version = 7 [default = 0];
        optional uint64 Generation = 8 [default = 0];
        optional bool Important = 9 [default = false];
    }

    repeated TConsumer Consumers = 37;

    optional string TopicPath = 23;

    optional uint64 AbcId = 24;
    optional string AbcSlug = 25;

    optional string YcCloudId = 26 [default = ""];
    optional string YcFolderId = 27 [default = ""];
    optional string YdbDatabaseId = 28 [default = ""];
    optional string YdbDatabasePath = 29 [default = ""];
    optional string FederationAccount = 33 [default = ""];

    message TKeyComponentSchema {
        optional string Name = 1;
        optional uint32 TypeId = 2;
        optional NKikimrProto.TTypeInfo TypeInfo = 3;
    }
    repeated TKeyComponentSchema PartitionKeySchema = 30;

    message TPartition {
        optional uint32 PartitionId = 1;
        optional TPartitionKeyRange KeyRange = 2;
        optional ETopicPartitionStatus Status = 3;
        repeated uint32 ParentPartitionIds = 4;
        repeated uint32 ChildPartitionIds = 5;
        optional uint64 CreateVersion = 6;
        optional uint64 TabletId = 7;
    }
    repeated TPartition Partitions = 31; // filled by schemeshard

    enum EMeteringMode {
        METERING_MODE_RESERVED_CAPACITY = 0;
        METERING_MODE_REQUEST_UNITS = 1;
    }
    optional EMeteringMode MeteringMode = 34;

    enum TPartitionStrategyType {
        // The autoscaling is disabled.
        DISABLED = 0;
        // The autoscaling algorithm will increase partitions count depending on the load characteristics.
        // The autoscaling algorithm will never decrease the number of partitions.
        CAN_SPLIT = 1;
        // The autoscaling algorithm will both increase and decrease partitions count depending on the load characteristics.
        CAN_SPLIT_AND_MERGE = 2;
    }

    // Strategy for automatically changing the number of topic partitions depending on the load
    message TPartitionStrategy {
        // The minimum number of partitions that will be supported by the strategy
        required uint32 MinPartitionCount = 1 [default = 1];
        // The maximum number of partitions that will be supported by the strategy. The strategy will not create partitions if the specified
        // amount is reached, even if the load exceeds the current capabilities of the topic.
        required uint32 MaxPartitionCount = 2 [default = 1];;
        required uint32 ScaleThresholdSeconds = 3 [default = 300];
        required uint32 ScaleUpPartitionWriteSpeedThresholdPercent = 4 [default = 80];
        required uint32 ScaleDownPartitionWriteSpeedThresholdPercent = 5 [default = 20];
        required TPartitionStrategyType PartitionStrategyType = 6;
    }
    optional TPartitionStrategy PartitionStrategy = 35;

    repeated TPartition AllPartitions = 36; // filled by schemeshard

    optional TOffloadConfig OffloadConfig = 38;
}

message THeartbeat {
    optional uint64 Step = 1;
    optional uint64 TxId = 2;
    optional bytes Data = 3;
}

message TMessageGroupInfo {
    enum EState {
        STATE_UNKNOWN = 0;
        STATE_REGISTERED = 1;
        STATE_PENDING_REGISTRATION = 2;
    }

    optional uint64 SeqNo = 1;
    optional uint64 MinSeqNo = 9;
    optional uint64 Offset = 2;
    optional uint64 WriteTimestamp = 3; // TInstant::TValue
    optional uint64 CreateTimestamp = 4; // TInstant::TValue
    optional bool Explicit = 5;
    optional TPartitionKeyRange KeyRange = 6;
    optional EState State = 7;
    optional THeartbeat LastHeartbeat = 8;
}

message TBootstrapConfig {
    repeated TMessageGroup ExplicitMessageGroups = 1;
}

message TUpdateConfig {
    optional uint64 TxId = 1;
    optional TPQTabletConfig TabletConfig = 2;
    optional TBootstrapConfig BootstrapConfig = 3; // passed only upon creation
}

message TUpdateBalancerConfig { //for schemeshard use only
    optional uint64 TxId = 1;
    optional uint64 PathId = 2;
    optional string TopicName = 3;
    optional string Path = 4;
    optional uint32 Version = 5;

    optional uint32 TotalGroupCount = 11;
    optional uint32 NextPartitionId = 12;

    optional TPQTabletConfig TabletConfig = 7;
    optional uint32 PartitionPerTablet = 8;
    optional uint64 SchemeShardId = 9;
    message TPartition {
        optional uint32 Partition = 1;
        optional uint64 TabletId = 2;
        optional uint32 Group = 3;
        optional TPartitionKeyRange KeyRange = 4;
        optional ETopicPartitionStatus Status = 5;
        repeated uint32 ParentPartitionIds = 6;
        repeated uint32 ChildPartitionIds = 7;
        optional uint64 CreateVersion = 8;
    }

    repeated TPartition Partitions = 6;

    message TTablet {
        optional uint64 TabletId = 1;
        optional uint64 Owner = 2;
        optional uint64 Idx = 3;
    }

    repeated TTablet Tablets = 10;
    optional uint64 SubDomainPathId = 13;
}

message TDescribe {
}

message TDescribeResponse {
    optional string TopicName = 1;
    optional uint32 Version = 2;
    optional TPQTabletConfig Config = 3;
    optional uint32 PartitionPerTablet = 4;
    optional uint64 SchemeShardId = 6;
    optional uint64 BalancerTabletId = 7;

    optional bytes SecurityObject = 8; //NACLibProto.TSecurityObject

    message TPartition {
        optional uint32 Partition = 1;
        optional uint64 TabletId = 2;
    }

    repeated TPartition Partitions = 5;
}

message TCheckACL {
    optional EOperation Operation = 2;
    optional NPersQueueCommon.Credentials Auth = 4; //leaved for compatibility
    optional string User = 5;
    optional bytes Token = 6;
}

message TCheckACLResponse {
    optional EAccess Access = 1;
    optional string Topic = 2;
    optional string Path = 3;

    optional string Error = 4;
}

enum EOperation {
    READ_OP = 1;
    WRITE_OP = 2;
}

enum EAccess {
    ALLOWED = 1;
    DENIED = 2;
    UNKNOWN = 3;
}

message TGetPartitionIdForWrite {
}

message TGetPartitionIdForWriteResponse {
    optional uint64 PartitionId = 1;
}

message TRegisterReadSession {
    optional string Session = 1;
    optional NActorsProto.TActorId PipeClient = 2;
    optional string ClientId = 3;
    optional string ClientNode = 4;

    repeated uint32 Groups = 5;
}

message TGetReadSessionsInfo {
    optional string ClientId = 1;
    repeated uint32 Partitions = 2;
}


message TReadSessionStatus { //request to PQ_READ_PROXY
}


message TReadSessionStatusResponse {
    message TPartitionStatus {
        repeated uint64 NextCommits = 1;
        optional uint64 LastReadId = 2;
        optional uint64 ReadIdCommitted = 3;
        optional uint64 AssignId = 4;
        optional string Topic = 5;
        optional uint64 Partition = 7;
        optional uint64 TimestampMs = 8;
    }

    repeated TPartitionStatus Partition = 8;

    optional string Session = 4;

    optional uint64 Timestamp = 5;

    optional string ClientNode = 6;
    optional uint32 ProxyNodeId = 7;
}


message TReadSessionsInfoResponse {
    message TPartitionInfo {
        optional uint32 Partition = 1;
        optional string ClientNode = 2;
        optional uint32 ProxyNodeId = 3;
        optional string Session = 4;
        optional uint64 Timestamp = 5;
        optional uint64 TimestampMs = 6;
    }
    repeated TPartitionInfo PartitionInfo = 1;
    optional uint64 TabletId = 2;

    message TReadSessionInfo {
        optional NActorsProto.TActorId SessionActor = 1;
        optional string Session = 2;

    }
    repeated TReadSessionInfo ReadSessions = 3;
}


message TGetPartitionsLocation {
    repeated uint64 Partitions = 1;
}

message TPartitionLocation {
    optional uint32 PartitionId = 1;
    optional uint64 NodeId = 2;
    optional uint32 Generation = 3;
};

message TPartitionsLocationResponse {
    optional bool Status = 1;
    repeated TPartitionLocation Locations = 2;
}

message TLockPartition {
    optional uint32 Partition = 1;
    optional uint64 TabletId = 2;
    optional string Topic = 3;
    optional uint32 Generation = 4;
    optional uint32 Step = 5;
    optional string Session = 6;
    optional string ClientId = 7;
    optional NActorsProto.TActorId PipeClient = 8;
    optional string Path = 9;
}

message TReleasePartition {
    optional string Topic = 1;
    optional uint64 Generation = 2;
    optional string Session = 3;
    optional string ClientId = 4;
    optional uint32 Count = 5 [deprecated = true]; // Remove at 2025-1
    optional NActorsProto.TActorId PipeClient = 6;
    optional uint32 Group = 7;
    optional string Path = 8;
    reserved 9; // repeated uint32 Partition = 9
}

message TPartitionReleased {
    optional uint32 Partition = 1;
    optional string Topic = 2;
    optional string Session = 3;
    optional NActorsProto.TActorId PipeClient = 4;
    optional string ClientId = 5;
}

enum ETabletState {
    ENormal = 0;
    EDropped = 1;
}

message TDropTablet {
    optional uint64 TxId = 1;
    optional ETabletState RequestedState = 2;
}

message TDropTabletResult {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional uint64 TxId = 2;
    optional uint64 TabletId = 3;
    optional ETabletState ActualState = 4;
}

message TTabletState {
    optional ETabletState State = 1;
}

enum EStatus{
    OK = 0;
    ERROR = 1;
    ERROR_BAD_VERSION = 2;
    ERROR_UPDATE_IN_PROGRESS = 3;
}

message TUpdateConfigResponse {
    optional uint64 TxId = 1;
    optional uint64 Origin = 2;
    optional EStatus Status = 3;
}

message TOffsets {
    optional string ClientId = 1;
}

message TOffsetsResponse {
    message TPartResult {
        optional int32 Partition = 1;
        optional int64 StartOffset = 2;
        optional int64 EndOffset = 3;
        optional int64 ClientOffset = 4; //Presented only if clientId is specified in request
        optional int64 WriteTimestampMS = 5; //Presented only if clientId is set and Wtime is computed(can be not computed for some time after commit)
        optional int64 CreateTimestampMS = 6; //the same

        optional NPersQueue.NErrorCode.EErrorCode ErrorCode = 7;
        optional string ErrorReason = 8; //filled if ErrorCode is not OK

        optional int64 ClientReadOffset = 9; //Presented only if clientId is specified in request
        optional int64 ReadWriteTimestampMS = 10; //Presented only if clientId is set and Wtime is computed(can be not computed for some time after commit)
        optional int64 ReadCreateTimestampMS = 11; //the same

        optional uint64 WriteTimestampEstimateMS = 12;
    }

    optional uint64 TabletId = 1;
    repeated TPartResult PartResult = 2;
}

message TStatus {
    optional string ClientId = 1;
    optional bool GetStatForAllConsumers = 2;
    repeated string Consumers = 3;
}

message TClientPosition {
    optional int64 Offset = 1;
    optional uint64 Size = 2;
    optional uint64 WriteTimestamp = 3;
    optional uint64 CreateTimestamp = 4;
}

message TClientInfo {
    optional string ClientId = 1;
    optional TClientPosition WritePosition = 2;
    optional TClientPosition ReadPosition = 3;

    optional uint64 WriteLagMs = 4;
    optional uint64 ReadLagMs = 5;
    optional uint64 LastReadTimestampMs = 8;
    optional uint64 TotalLagMs = 9;
}


message TAggregatedCounters {
    repeated uint64 Values = 1;
    repeated TConsumerAggregatedCounters ConsumerAggregatedCounters = 2;

    message TConsumerAggregatedCounters {
        optional string Consumer = 1;
        repeated uint64 Values = 2;
    }
}

enum EScaleStatus {
    NORMAL = 0;
    NEED_SPLIT = 1;
    NEED_MERGE = 2;
}

message TStatusResponse {
    enum EStatus {
        STATUS_OK = 0;
        STATUS_UNKNOWN = 1;
        STATUS_INITIALIZING = 2;
        STATUS_PARTITION_IS_FULL = 3;
        STATUS_DISK_IS_FULL = 4;
    }

    message TErrorMessage {
        optional uint64 Timestamp = 1;
        optional NKikimrServices.EServiceKikimr Service = 2;
        optional string Message = 3;
    }

    message TPartResult {
        optional int32 Partition = 1; // mandatory
        optional EStatus Status = 2;
        optional int32 LastInitDurationSeconds = 3;
        optional int32 CreationTimestamp = 4;
        optional int32 GapCount = 5;
        optional int64 GapSize = 6;
        optional int64 AvgWriteSpeedPerSec = 7;
        optional int64 AvgWriteSpeedPerMin = 8;
        optional int64 AvgWriteSpeedPerHour = 9;
        optional int64 AvgWriteSpeedPerDay = 10;

        //if no clientId specified and request then sum there speed
        optional int64 AvgReadSpeedPerSec = 11;
        optional int64 AvgReadSpeedPerMin = 12;
        optional int64 AvgReadSpeedPerHour = 13;
        optional int64 AvgReadSpeedPerDay = 14;

        optional int64 ReadBytesQuota = 15;
        optional int64 WriteBytesQuota = 16;

        optional int64 PartitionSize = 17;

        optional TClientInfo LagsInfo = 18; //just for one client!

        optional int64 StartOffset = 19;
        optional int64 EndOffset = 20;

        optional int64 LastWriteTimestampMs = 21;
        optional int64 WriteLagMs = 22;

        optional int64 AvgQuotaSpeedPerSec = 23;
        optional int64 AvgQuotaSpeedPerMin = 24;
        optional int64 AvgQuotaSpeedPerHour = 25;
        optional int64 AvgQuotaSpeedPerDay = 26;

        optional int64 SourceIdCount = 27;
        optional int64 SourceIdRetentionPeriodSec = 28;

        repeated TErrorMessage Errors = 29;

        repeated TConsumerResult ConsumerResult = 30;

        optional int64 UsedReserveSize = 31;
        optional TAggregatedCounters AggregatedCounters = 32;

        optional uint32 Generation = 33;
        optional uint64 Cookie = 34;

        optional EScaleStatus ScaleStatus = 35;
    }

    message TConsumerResult {
        optional string Consumer = 1;

        optional int64 AvgReadSpeedPerMin = 2;
        optional int64 AvgReadSpeedPerHour = 3;
        optional int64 AvgReadSpeedPerDay = 4;

        optional uint64 WriteLagMs = 5;
        optional uint64 ReadLagMs = 6;
        optional uint64 LastReadTimestampMs = 7;
        optional NPersQueue.NErrorCode.EErrorCode ErrorCode = 8;
        optional uint64 CommitedOffset = 9;

        optional bool ReadingFinished = 10;
    }


    optional uint64 TabletId = 1;
    repeated TPartResult PartResult = 2;
}

message THasDataInfo {
    optional int32 Partition = 1;
    optional uint64 Offset = 2;
    optional uint64 Deadline = 3; //in ms
    optional NActorsProto.TActorId Sender = 4;
    optional uint64 Cookie = 5;

    optional string ClientId = 6;
}

message THasDataInfoResponse { //signal
    optional uint64 EndOffset = 1;
    optional uint64 Cookie = 2;
    optional uint64 SizeLag = 3;
    optional uint64 WriteTimestampEstimateMS = 4;
    optional bool ReadingFinished = 5;
    repeated uint32 AdjacentPartitionIds = 6;
    repeated uint32 ChildPartitionIds = 7;
}

message TBatchHeader {
    optional uint64 Offset = 1;
    optional uint32 PartNo = 2;
    optional uint32 Count = 3;
    optional uint32 InternalPartsCount = 4;
    optional uint32 UnpackedSize = 5;
    optional uint32 PayloadSize = 6;
    enum EPayloadFormat {
        EUncompressed = 0;
        ECompressed = 1;
    }
    optional uint32 Format = 7; //for EPayloadFormat
    optional bool HasKinesis = 8;
}

message TUserInfo {
    optional uint64 Offset = 1;
    optional uint32 Generation = 2;
    optional uint32 Step = 3;
    optional string Session = 4;
    optional uint64 OffsetRewindSum = 5;
    optional uint64 ReadRuleGeneration = 6;
    optional uint64 PartitionSessionId = 7;

}

message TPartitionClientInfo {
    repeated int32 Partitions = 1;
}

message TClientInfoResponse {
    optional int32 Partition = 1;
    optional uint64 StartOffset = 2;
    optional uint64 EndOffset = 3;
    optional uint64 ResponseTimestamp = 4;
    repeated TClientInfo ClientInfo = 5;
}

message TPQClusterDiscoveryConfig {
    optional bool Enabled = 1;
    optional uint32 TimedCountersUpdateIntervalSeconds = 2 [default = 15];
    optional NKikimrNetClassifier.TNetData CloudNetData = 3;
    optional uint64 RequestInflightLimit = 4;
    optional string ControlPlaneEndpoint = 5;
    optional string FederationPathPrefix = 6;
}

message TYdsNextToken {
    required uint64 CreationTimestamp = 1;
    required uint32 MaxResults = 2;
    required uint32 AlreadyRead = 3;
    required string StreamArn = 4;
}

message TYdsShardIterator {
    enum ETopicKind {
        KIND_COMMON = 0;
        KIND_CDC = 1;
    }

    required string StreamName = 1;
    required string StreamArn = 2;
    required uint32 ShardId = 3;
    required uint64 ReadTimestampMs = 4;
    required uint64 SequenceNumber = 5;
    required uint64 CreationTimestampMs = 6;
    optional ETopicKind Kind = 7;
}

message TPartitionOperation {
    optional uint32 PartitionId = 1;
    optional uint64 Begin = 2;
    optional uint64 End = 3;
    optional string Consumer = 4;
    optional string Path = 5; // topic path
    optional uint32 SupportivePartition = 6;
};

message TDataTransaction {
    enum ELocksOp {
        Unspecified = 0;
        Validate = 1;
        Commit = 2;
        Rollback = 3;
    }

    repeated TPartitionOperation Operations = 1;
    optional ELocksOp Op = 2;
    repeated uint64 SendingShards = 3;
    repeated uint64 ReceivingShards = 4;
    optional bool Immediate = 5;
    optional fixed64 WriteId = 6;
}

message TConfigTransaction {
    optional TPQTabletConfig TabletConfig = 2;
    optional TBootstrapConfig BootstrapConfig = 3;
}

message TEvProposeTransaction {
    optional NActorsProto.TActorId SourceActor = 1;
    optional uint64 TxId = 2;
    oneof TxBody {
        TDataTransaction Data = 3;
        TConfigTransaction Config = 4;
    }
    optional NActorsProto.TActorId SupportivePartitionActor = 5;
};

message TError {
    enum EKind {
        OK = 0;
        ERROR = 1;
        INTERNAL = 2;
        BAD_REQUEST = 3;
    }

    optional EKind Kind = 1;
    optional string Reason = 2;
};

message TEvProposeTransactionResult {
    enum EStatus {
        PREPARED = 1;
        COMPLETE = 2;
        ABORTED = 3;
        ERROR = 4;
        LOCKS_BROKEN = 5;
        CANCELLED = 6;
        BAD_REQUEST = 7;
        OVERLOADED = 8;
    };

    optional uint64 Origin = 1; // Tablet Id
    optional EStatus Status = 2;
    optional uint64 TxId = 3;
    optional uint64 MinStep = 4;
    optional uint64 MaxStep = 6;
    optional string StatusMessage = 7;
    optional uint64 Step = 8;
    repeated fixed64 DomainCoordinators = 9;
    repeated TError Errors = 10;
};

message TEvCancelTransactionProposal {
    optional uint64 TxId = 1;
};

message TEvPeriodicTopicStats {
    required uint64 PathId = 1;

    required uint64 Generation = 2;
    required uint64 Round = 3;

    required uint64 DataSize = 4;
    required uint64 UsedReserveSize = 5;

    optional bool SubDomainOutOfSpace = 6;
};

message TEvSubDomainStatus {
    required bool SubDomainOutOfSpace = 1;
};

message TEvCheckPartitionStatusRequest {
    optional uint32 Partition = 1;
    optional string SourceId = 2;
};

message TEvCheckPartitionStatusResponse {
    optional ETopicPartitionStatus Status = 1;
    optional uint64 SeqNo = 2;
};

// The consumer's reading of the partition is finished  (from the partition)
message TEvReadingPartitionStatusRequest {
    optional string Consumer = 1;
    optional uint32 PartitionId = 2;
    optional uint32 Generation = 3;
    optional uint32 Cookie = 4;
};

// The consumer's reading of the partition is finished (from ReadSession)
message TEvReadingPartitionFinishedRequest {
    optional string Consumer = 1;
    optional uint32 PartitionId = 2;
    optional bool ScaleAwareSDK = 3;
    optional bool StartedReadingFromEndOffset = 4;
};

// The consumer's reading of the partition is started (from ReadSession)
message TEvReadingPartitionStartedRequest {
    optional string Consumer = 1;
    optional uint32 PartitionId = 2;
};

message TEvPartitionScaleStatusChanged {
    required uint32 PartitionId = 1;
    required EScaleStatus ScaleStatus = 2;
};

message TTransaction {
    enum EKind {
        KIND_UNKNOWN = 0;
        KIND_DATA = 1;
        KIND_CONFIG = 2;
    };

    enum EState {
        UNKNOWN = 0;
        PREPARING = 1;
        PREPARED = 2;     // хранится
        PLANNING = 3;
        PLANNED = 4;      // хранится. хотим выкинуть и не персистить
        CALCULATING = 5;
        CALCULATED = 6;
        WAIT_RS = 7;      // хранится
        EXECUTING = 8;
        EXECUTED = 9;
    };

    optional EKind Kind = 11;
    optional uint64 Step = 8;
    optional uint64 TxId = 1;
    optional EState State = 2;
    optional uint64 MinStep = 3;
    optional uint64 MaxStep = 4;

    //
    // TDataTransaction
    //
    repeated uint64 Senders = 5;
    repeated uint64 Receivers = 6;
    repeated TPartitionOperation Operations = 7;
    optional bool SelfPredicate = 9;  // только предикаты партиций. предикаты коллег отдельно
    optional bool AggrPredicate = 10;

    //
    // TConfigTransaction
    //
    optional TPQTabletConfig TabletConfig = 12;
    optional TBootstrapConfig BootstrapConfig = 13;

    //
    // получатель результата
    //
    optional NActorsProto.TActorId SourceActor = 14;

    optional uint64 WriteId = 15;
};

message TTabletTxInfo {
    message TTxWriteInfo {
        optional uint64 WriteId = 1;
        optional uint32 OriginalPartitionId = 2;
        optional uint32 InternalPartitionId = 3;
    };

    optional uint64 LastStep = 2;
    optional uint64 LastTxId = 3;
    repeated TTxWriteInfo TxWrites = 4;
    optional uint64 NextSupportivePartitionId = 5;
}
