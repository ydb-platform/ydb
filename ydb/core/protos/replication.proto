import "ydb/core/scheme/protos/pathid.proto";
import "ydb/public/api/protos/annotations/sensitive.proto";
import "ydb/public/api/protos/ydb_issue_message.proto";

package NKikimrReplication;
option java_package = "ru.yandex.kikimr.proto";

message TStaticCredentials {
    optional string User = 1;
    optional string Password = 2 [(Ydb.sensitive) = true];
    optional string PasswordSecretName = 3;
}

message TOAuthToken {
    optional string Token = 1 [(Ydb.sensitive) = true];
    optional string TokenSecretName = 2;
}

message TConnectionParams {
    optional string Endpoint = 1;
    optional string Database = 2;
    // credentials
    oneof Credentials {
        TStaticCredentials StaticCredentials = 3;
        TOAuthToken OAuthToken = 4;
    }
}

message TReplicationConfig {
    message TTargetEverything {
        optional string DstPrefix = 1;
    }

    message TTargetSpecific {
        message TTarget {
            optional string SrcPath = 1;
            optional string DstPath = 2;
            optional string SrcStreamName = 3;
            optional uint64 Id = 4;
        }

        repeated TTarget Targets = 1;
    }

    optional TConnectionParams SrcConnectionParams = 1;

    // targets to be replicated
    // Currently, only OLTP tables are supported.
    oneof Target {
        // replicate everything from source cluster
        TTargetEverything Everything = 4;
        // replicate specified objects
        TTargetSpecific Specific = 5;
    }

    optional bool InitialSync = 6;
}

message TReplicationState {
    message TStandBy {
    }

    message TPaused {
    }

    message TDone {
        enum EFailoverMode {
            FAILOVER_MODE_UNSPECIFIED = 0;
            FAILOVER_MODE_CONSISTENT = 1;
            FAILOVER_MODE_FORCE = 2;
        }

        optional EFailoverMode FailoverMode = 1;
    }

    message TError {
        repeated Ydb.Issue.IssueMessage Issues = 1;
    }

    oneof State {
        TStandBy StandBy = 1;
        TPaused Paused = 2;
        TDone Done = 3;
        TError Error = 4;
    }
}

message TOperationId {
    optional uint64 TxId = 1;
    optional uint32 PartId = 2;
}

message TEvCreateReplication {
    optional NKikimrProto.TPathID PathId = 1;
    optional TOperationId OperationId = 2;
    optional TReplicationConfig Config = 3;
}

message TEvCreateReplicationResult {
    enum EStatus {
        UNKNOWN = 0;
        SUCCESS = 1;
        ALREADY_EXISTS = 2;
    }

    optional TOperationId OperationId = 1;
    optional uint64 Origin = 2;
    optional EStatus Status = 3;
}

message TEvAlterReplication {
    optional NKikimrProto.TPathID PathId = 1;
    optional TOperationId OperationId = 2;
    optional TReplicationState SwitchState = 3;
    optional TReplicationConfig Config = 4;
}

message TEvAlterReplicationResult {
    enum EStatus {
        UNKNOWN = 0;
        SUCCESS = 1;
    }

    optional TOperationId OperationId = 1;
    optional uint64 Origin = 2;
    optional EStatus Status = 3;
}

message TEvDropReplication {
    optional NKikimrProto.TPathID PathId = 1;
    optional TOperationId OperationId = 2;
    optional bool Cascade = 3 [default = true];
}

message TEvDropReplicationResult {
    enum EStatus {
        UNKNOWN = 0;
        SUCCESS = 1;
        NOT_FOUND = 2;
    }

    optional TOperationId OperationId = 1;
    optional uint64 Origin = 2;
    optional EStatus Status = 3;
}

message TEvDescribeReplication {
    optional NKikimrProto.TPathID PathId = 1;
}

message TEvDescribeReplicationResult {
    enum EStatus {
        UNKNOWN = 0;
        SUCCESS = 1;
        NOT_FOUND = 2;
    }

    optional EStatus Status = 1;
    optional TConnectionParams ConnectionParams = 2;
    repeated TReplicationConfig.TTargetSpecific.TTarget Targets = 3;
    optional TReplicationState State = 4;
}

message TControllerIdentity {
    optional uint64 TabletId = 1;
    optional uint64 Generation = 2;
}

message TWorkerIdentity {
    optional uint64 ReplicationId = 1;
    optional uint64 TargetId = 2;
    optional uint64 WorkerId = 3;
}

message TEvHandshake {
    optional TControllerIdentity Controller = 1;
}

message TEvStatus {
    repeated TWorkerIdentity Workers = 1;
}

message TRemoteTopicReaderSettings {
    optional TConnectionParams ConnectionParams = 1;
    optional string TopicPath = 2;
    optional uint64 TopicPartitionId = 3;
    optional string ConsumerName = 4;
}

message TLocalTableWriterSettings {
    optional NKikimrProto.TPathID PathId = 1;
}

message TRunWorkerCommand {
    oneof Reader {
        TRemoteTopicReaderSettings RemoteTopicReader = 1;
    }

    oneof Writer {
        TLocalTableWriterSettings LocalTableWriter = 2;
    }
}

message TEvRunWorker {
    optional TControllerIdentity Controller = 1;
    optional TWorkerIdentity Worker = 2;
    optional TRunWorkerCommand Command = 3;
}

message TEvStopWorker {
    optional TControllerIdentity Controller = 1;
    optional TWorkerIdentity Worker = 2;
}

message TEvWorkerStatus {
    enum EStatus {
        STATUS_UNSPECIFIED = 0;
        STATUS_RUNNING = 1;
        STATUS_STOPPED = 2;
    }

    enum EReason {
        REASON_UNSPECIFIED = 0;
        REASON_ACK = 1;
        REASON_ERROR = 2;
    }

    optional TWorkerIdentity Worker = 1;
    optional EStatus Status = 2;
    optional EReason Reason = 3;
    optional string ErrorDescription = 4;
}
