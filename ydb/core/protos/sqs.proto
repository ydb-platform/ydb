package NKikimr.NSQS;

message TAuthentification {
    optional string UserName = 1; // Account or CloudId
    optional string FolderId = 2; // Cloud only
    optional string UserSID = 3;
}

message TCredentials {
    oneof AccessKey {
        string OAuthToken = 1;
        string TvmTicket = 2;
        string StaticCreds = 3; // Cloud only
    }
}

message TError {
    message TDebug {
        optional uint32 TransactionStatusCode = 1;
        optional bytes MiniKQLErrors = 2;
        optional bytes DataShardErrors = 3;
    }

    optional uint32 Status = 1;
    optional string Message = 2;
    optional string ErrorCode = 4; // https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList - list of error codes
    optional TDebug Debug = 3;
}

message TAttribute {
    optional string Name = 1;
    optional bytes Value = 2;
}

message TMessageAttribute {
    optional string Name = 1;
    optional string DataType = 2;
    optional string StringValue = 3;
    optional bytes  BinaryValue = 4;
}

message TQueueTag {
    optional string Key = 1;
    optional string Value = 2;
}

message TChangeMessageVisibilityRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// Name of queue.
    optional string QueueName = 2;
    /// The receipt handle associated with the message
    /// whose visibility timeout is changed.
    optional bytes ReceiptHandle = 3;
    /// The new value for the message's visibility timeout (in seconds).
    optional uint32 VisibilityTimeout = 4;
    /// Batch Id. Available only in case of batch request.
    optional string Id = 5;
}

message TChangeMessageVisibilityResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    /// Batch Id. Available only in case of batch response.
    optional string Id = 3;
}

message TChangeMessageVisibilityBatchRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// Name of queue.
    optional string QueueName = 2;
    repeated TChangeMessageVisibilityRequest Entries = 3;
}

message TChangeMessageVisibilityBatchResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    repeated TChangeMessageVisibilityResponse Entries = 3;
}

message TCreateQueueRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// Name of queue. Should be unique for specified user.
    optional string QueueName = 2;
    /// Queue's attributes.
    repeated TAttribute Attributes = 3;
    /// Number of shards of messages tables.
    optional uint64 Shards = 4 [default = 4];
    /// Number of partitions of data table.
    optional uint64 Partitions = 5 [default = 8];
    /// Autosplit partitions with data
    optional bool EnableAutosplit = 8;
    /// Size in bytes when partition will be splitted on two parts.
    optional uint64 SizeToSplit = 9 [default = 1073741824]; // 1GB
    /// Enable internal tables' transactions out of order execution.
    optional bool EnableOutOfOrderTransactionsExecution = 6 [default = true];

    /// Custom name of queue.
    optional string CustomQueueName = 10;
    /// Created time of queue
    optional uint64 CreatedTimestamp = 11;

    /// Queue's tags.
    repeated TQueueTag Tags = 12;
}

message TCreateQueueResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    optional string QueueName = 3;
    optional string QueueUrl = 4;
}

message TCreateUserRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// Then user name we want to create.
    optional string UserName = 2;
}

message TCreateUserResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
}

message TGetQueueAttributesRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    optional string QueueName = 2;
    /// List of attribute's names to return.
    repeated string Names = 3;
    /// Batch Id. Available only in case of batch request.
    optional string Id = 4;
}

message TGetQueueAttributesResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    /// Batch Id. Available only in case of batch request.
    optional string Id = 15;
    /// The approximate number of visible messages in a queue.
    optional uint64 ApproximateNumberOfMessages = 3;
    /// The approximate number of messages that are waiting
    /// to be added to the queue.
    optional uint64 ApproximateNumberOfMessagesDelayed = 4;
    /// The approximate number of messages that have not timed-out
    /// and aren't deleted.
    optional uint64 ApproximateNumberOfMessagesNotVisible = 5;
    /// The time when the queue was created in seconds (epoch time).
    optional uint64 CreatedTimestamp = 6;
    /// The default delay on the queue in seconds.
    optional uint64 DelaySeconds = 7;
    /// The time when the queue was last changed in seconds (epoch time).
    optional uint64 LastModifiedTimestamp = 8;
    /// The limit of how many bytes a message can contain before SQS rejects it.
    optional uint64 MaximumMessageSize = 9;
    /// The length of time, in seconds, for which SQS retains a message.
    optional uint64 MessageRetentionPeriod = 10;
    /// The length of time, in seconds, for which
    /// the ReceiveMessage action waits for a message to arrive.
    optional uint64 ReceiveMessageWaitTimeSeconds = 11;
    /// The visibility timeout for the queue.
    optional uint64 VisibilityTimeout = 12;
    /// Is the queue is FIFO.
    optional bool FifoQueue = 13;
    /// Is the content-based deduplication is enabled.
    optional bool ContentBasedDeduplication = 14;
    /// Contains maxReceiveCount and target DLQ ARN, defines DLQ params
    optional string RedrivePolicy = 16;
    /// Contains queue ARN
    optional string QueueArn = 17;
}

message TGetQueueAttributesBatchRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// List of attribute's names to return.
    repeated string Names = 3;
    repeated TGetQueueAttributesRequest Entries = 4;
}

message TGetQueueAttributesBatchResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    repeated TGetQueueAttributesResponse Entries = 3;
}

message TGetQueueUrlRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// The name of the queue whose URL must be fetched.
    optional string QueueName = 2;
}

message TGetQueueUrlResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    optional string QueueUrl = 3;
}

message TDeleteMessageRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    optional string QueueName = 2;
    optional bytes ReceiptHandle = 3;
    /// Batch Id. Available only in case of batch request.
    optional string Id = 4;
}

message TDeleteMessageResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    /// Batch Id. Available only in case of batch response.
    optional string Id = 3;
}

message TDeleteMessageBatchRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    optional string QueueName = 2;
    repeated TDeleteMessageRequest Entries = 3;
}

message TDeleteMessageBatchResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    repeated TDeleteMessageResponse Entries = 3;
}

message TDeleteQueueRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    optional string QueueName = 2;
    /// Batch Id. Available only in case of batch response.
    optional string Id = 3;
}

message TDeleteQueueResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    /// Batch Id. Available only in case of batch response.
    optional string Id = 3;
}

message TDeleteQueueBatchRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    repeated TDeleteQueueRequest Entries = 2;
}

message TDeleteQueueBatchResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    repeated TDeleteQueueResponse Entries = 3;
}

message TDeleteUserRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// Then user name we want to delete.
    optional string UserName = 2;
}

message TDeleteUserResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
}

message TListQueuesRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// A string to use for filtering the list results.
    // Only those queues whose name begins
    // with the specified string are returned.
    optional string QueueNamePrefix = 2;
}

message TListQueuesResponse {
    message TQueueType {
        optional string QueueName = 1;
        optional string QueueUrl = 2;
    }
    optional TError Error = 1;
    optional string RequestId = 2;
    repeated TQueueType Queues = 3;
}

message TListUsersRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// A string to use for filtering the list results.
    // Only those users whose name begins
    // with the specified string are returned.
    optional string UserNamePrefix = 2;
}

message TListUsersResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    repeated string UserNames = 3;
}

message TPurgeQueueRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    optional string QueueName = 2;
    /// Batch Id. Available only in case of batch response.
    optional string Id = 3;
}

message TPurgeQueueResponse {
    optional TError Error = 1;
    optional string RequestId = 3;
    /// Batch Id. Available only in case of batch response.
    optional string Id = 4;
}

message TPurgeQueueBatchRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    repeated TPurgeQueueRequest Entries = 2;
}

message TPurgeQueueBatchResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    repeated TPurgeQueueResponse Entries = 3;
}

message TReceiveMessageRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    optional string QueueName = 2;
    /// The maximum number of messages to return.
    optional uint32 MaxNumberOfMessages = 3;
    /// The token used for deduplication of ReceiveMessage calls.
    optional string ReceiveRequestAttemptId = 4;
    /// The duration (in seconds) that the received messages are hidden
    /// from subsequent retrieve requests after being retrieved
    /// by a ReceiveMessage request.
    optional uint32 VisibilityTimeout = 5;
    /// The duration (in seconds) for which the call waits
    /// for a message to arrive in the queue before returning.
    optional uint32 WaitTimeSeconds = 6;
    /// A list of attributes that need to be returned
    /// along with each message.
    repeated string AttributeName = 7;
    /// The name of the message attribute that need to be returned
    /// along with each message.
    repeated string MessageAttributeName = 8;
}

message TReceiveMessageResponse {
    message TMessage {
        /// The time the message was first received from the queue
        /// (epoch time in milliseconds).
        optional uint64 ApproximateFirstReceiveTimestamp = 1;
        /// The number of times a message has been received from the queue
        /// but not deleted.
        optional uint64 ApproximateReceiveCount = 2;
        /// Unique message id.
        optional string MessageId = 3;
        /// The value provided by the sender that calls the SendMessage action.
        optional string MessageDeduplicationId = 4;
        /// Sharding tag.
        optional string MessageGroupId = 5;
        /// An MD5 digest of the message body string.
        optional string MD5OfMessageBody = 6;
        /// An MD5 digest of the non-URL-encoded message attribute string.
        /// https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html#sqs-attributes-md5-message-digest-calculation
        optional string MD5OfMessageAttributes = 12;
        /// Message's attributes.
        repeated TMessageAttribute MessageAttributes = 7;
        /// Message's data itself.
        optional bytes Data = 8;
        /// The receipt handle associated with the message.
        optional bytes ReceiptHandle = 9;
        /// The time the message was sent to the queue
        /// (epoch time in milliseconds).
        optional uint64 SentTimestamp = 10;
        /// The large, non-consecutive number that SQS assigns to each message.
        optional uint64 SequenceNumber = 11;
        /// Message sender's SID, may be empty in case of unauthenticated writes.
        optional string SenderId = 13;
    }

    optional TError Error = 1;
    optional string RequestId = 2;
    /// List of retrived messages.
    repeated TMessage Messages = 3;
    /// If a caller of the ReceiveMessage action doesn't provide
    /// a ReceiveRequestAttemptId, SQS generates a ReceiveRequestAttemptId.
    optional string ReceiveRequestAttemptId = 4;
}

message TSendMessageRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// The name of the queue in which the message should be placed.
    optional string QueueName = 2;
    /// Sharding tag.
    optional string MessageGroupId = 3;
    /// Deduplication token.
    optional string MessageDeduplicationId = 4;
    /// Message's data itself.
    optional bytes MessageBody = 5;
    /// Message's attributes.
    repeated TMessageAttribute MessageAttributes = 6;
    /// Batch Id. Available only in case of batch request.
    optional string Id = 7;
    /// The length of time, in seconds, for which to delay a specific message.
    optional uint64 DelaySeconds = 8;
}

message TSendMessageResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    /// An MD5 digest of the non-URL-encoded message attribute string.
    /// https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html#sqs-attributes-md5-message-digest-calculation
    optional string MD5OfMessageAttributes = 3;
    /// An MD5 digest of the non-URL-encoded message body string.
    optional string MD5OfMessageBody = 4;
    /// Unique message id.
    optional string MessageId = 5;
    /// The large, non-consecutive number that SQS assigns to each message.
    optional uint64 SequenceNumber = 6;
    /// Batch Id. Available only in case of batch response.
    optional string Id = 7;
}

message TSendMessageBatchRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// The name of the queue in which the message should be placed.
    optional string QueueName = 2;
    repeated TSendMessageRequest Entries = 3;
}

message TSendMessageBatchResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    repeated TSendMessageResponse Entries = 3;
}

message TSetQueueAttributesRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// The name of the queue.
    optional string QueueName = 2;
    /// Queue's attributes.
    repeated TAttribute Attributes = 3;
}

message TSetQueueAttributesResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
}

message TPermissions {
    optional string Subject = 1;
    repeated string PermissionNames = 2; // SQS-3
}

message TPermissionsAction {
    oneof Action {
        TPermissions Grant = 1;
        TPermissions Revoke = 2;
        TPermissions Set = 3;
    }
}

message TModifyPermissionsRequest {
    optional TCredentials Credentials = 100;
    optional string Resource = 1;
    repeated TPermissionsAction Actions = 2;
    optional bool ClearACL = 3 [default = false];
    optional TAuthentification Auth = 4; // for compatibility only
}

message TModifyPermissionsResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
}

message TListPermissionsRequest {
    optional TCredentials Credentials = 100;
    optional string Path = 1;
    optional TAuthentification Auth = 2; // for compatibility only
}

message TQueuePermissions {
    repeated TPermissions Permissions = 1;
    repeated TPermissions EffectivePermissions = 2;
}

message TAccountPermissions {
    repeated TPermissions Permissions = 1;
    repeated TPermissions EffectivePermissions = 2;
}

message TDirectoryPermissions {
    repeated TPermissions Permissions = 1;
    repeated TPermissions EffectivePermissions = 2;
}

message TListPermissionsResponse {
    optional TError Error = 1;
    optional string RequestId = 2;

    oneof NodeType {
        TQueuePermissions QueuePermissions = 3;
        TQueuePermissions AccountPermissions = 4;
        TQueuePermissions DirectoryPermissions = 5; // not used right now
    }
}

message TListDeadLetterSourceQueuesRequest {
    optional TCredentials Credentials = 100;
    /// The name of the queue.
    optional string QueueName = 1;
    optional TAuthentification Auth = 2;
}

message TListDeadLetterSourceQueuesResponse {
    message TQueueType {
        optional string QueueName = 1;
        optional string QueueUrl = 2;
    }
    optional TError Error = 1;
    optional string RequestId = 2;
    repeated TQueueType Queues = 3;
}

message TCountQueuesRequest {
    optional TCredentials Credentials = 100;
    optional TAuthentification Auth = 1;
}

message TCountQueuesResponse {
    optional TError Error = 1;
    optional string RequestId = 2;

    optional uint64 Count = 3;
}

message TListQueueTagsRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    optional string QueueName = 2;
}

message TListQueueTagsResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
    repeated TQueueTag Tags = 4;
}

message TTagQueueRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// The name of the queue.
    optional string QueueName = 2;
    repeated TQueueTag Tags = 3;
}

message TTagQueueResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
}

message TUntagQueueRequest {
    optional TCredentials Credentials = 100;
    /// Sender's authentification.
    optional TAuthentification Auth = 1;
    /// The name of the queue.
    optional string QueueName = 2;
    repeated string TagKeys = 3;
}

message TUntagQueueResponse {
    optional TError Error = 1;
    optional string RequestId = 2;
}
