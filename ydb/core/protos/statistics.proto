import "ydb/core/scheme/protos/pathid.proto";
import "ydb/core/protos/data_events.proto";

package NKikimrStat;

option java_package = "ru.yandex.kikimr.proto";

message TEvConfigureAggregator {
    optional string Database = 1;
}

message TPathEntry {
    optional NKikimrProto.TPathID PathId = 1;
    optional uint64 RowCount = 2;
    optional uint64 BytesSize = 3;
}

message TSchemeShardStats {
    repeated TPathEntry Entries = 1;
}

// SS -> SA
message TEvConnectSchemeShard {
    optional fixed64 SchemeShardId = 1;
}

// SS -> SA
message TEvSchemeShardStats {
    optional fixed64 SchemeShardId = 1;
    optional bytes Stats = 2; // serialized TSchemeShardStats
}

// nodes -> SA
message TEvConnectNode {
    optional uint32 NodeId = 1;
    repeated fixed64 NeedSchemeShards = 2;
    message THaveEntry {
        optional fixed64 SchemeShardId = 1;
        optional uint64 Timestamp = 2;
    }
    repeated THaveEntry HaveSchemeShards = 3;
}

// nodes -> SA
message TEvRequestStats {
    optional uint32 NodeId = 1;
    repeated fixed64 NeedSchemeShards = 2;
    optional bool Urgent = 3;
}

// SA -> nodes, node -> nodes
message TEvPropagateStatistics {
    repeated uint32 NodeIds = 1; // hierarchical propagation
    message TStatsEntry {
        optional fixed64 SchemeShardId = 1;
        optional bytes Stats = 2; // serialized TSchemeShardStats
        optional uint64 Timestamp = 3;
    }
    repeated TStatsEntry Entries = 2;
}

// node -> SA, node -> node
message TEvPropagateStatisticsResponse {
}

// SA -> nodes
message TEvStatisticsIsDisabled {
}

message TEvScanTable {
    optional NKikimrProto.TPathID PathId = 1;
}

message TEvScanTableAccepted {
    optional uint64 OperationId = 1;
}

message TEvScanTableResponse {
}

message TEvGetScanStatus {
    optional NKikimrProto.TPathID PathId = 1;
}

message TEvGetScanStatusResponse {
    enum EStatus {
        NO_OPERATION = 0;
        ENQUEUED = 1;
        IN_PROGRESS = 2;
    }
    optional EStatus Status = 1;
}

message TEvStatisticsRequest {
    optional NKikimrDataEvents.TTableId TableId = 1;
    optional bytes StartKey = 2;
    // list of columns to gather statistics from. Empty means asking for every column.
    repeated uint32 ColumnTags = 3;
    // list of statistics types requested. Empty means asking for all available.
    repeated uint32 Types = 4;
}

message TEvStatisticsResponse {
    message TStatistic {
        optional uint32 Type = 1;
        optional bytes Data = 2;
    }
    message TColumn {
        optional uint32 Tag = 1;
        repeated TStatistic Statistics = 2;
    }
    repeated TColumn Columns = 1;

    enum EStatus {
        SUCCESS = 1;
        ABORTED = 2;
        ERROR = 3;
    }
    optional EStatus Status = 2;

    optional fixed64 ShardTabletId = 3;
}
