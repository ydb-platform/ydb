package NKikimrSysView;

option java_package = "ru.yandex.kikimr.proto";

import "ydb/core/protos/labeled_counters.proto";
import "ydb/core/protos/tablet.proto";

message TPartitionStatsKey {
    optional uint64 OwnerId = 1;
    optional uint64 PathId = 2;
    optional uint64 PartIdx = 3;
}

message TTtlStats {
    optional uint64 LastRunTime = 1; // milliseconds since epoch
    optional uint64 LastRowsProcessed = 2;
    optional uint64 LastRowsErased = 3;
}

message TPartitionStats {
    optional uint64 DataSize = 1;
    optional uint64 RowCount = 2;
    optional uint64 IndexSize = 3;
    optional double CPUCores = 4;

    optional fixed64 TabletId = 5;
    optional uint32 NodeId = 6;

    optional uint64 StartTime = 7; // milliseconds since epoch
    optional uint64 AccessTime = 8;
    optional uint64 UpdateTime = 9;

    optional uint64 InFlightTxCount = 10;

    optional uint64 RowUpdates = 11;
    optional uint64 RowDeletes = 12;
    optional uint64 RowReads = 13;
    optional uint64 RangeReads = 14;
    optional uint64 RangeReadRows = 15;

    optional uint64 ImmediateTxCompleted = 16;
    optional uint64 PlannedTxCompleted = 17;
    optional uint64 TxRejectedByOverload = 18;
    optional uint64 TxRejectedBySpace = 19;

    optional TTtlStats TtlStats = 20;

    optional uint64 ByKeyFilterSize = 21;
}

message TPartitionStatsResult {
    optional TPartitionStatsKey Key = 1;
    optional TPartitionStats Stats = 2;
    optional string Path = 3;
}

message TEvGetPartitionStats {
    optional uint64 DomainKeyOwnerId = 1;
    optional uint64 DomainKeyPathId = 2;

    optional TPartitionStatsKey From = 3;
    optional bool FromInclusive = 4;

    optional TPartitionStatsKey To = 5;
    optional bool ToInclusive = 6;

    optional bool IncludePathColumn = 7;
}

message TEvGetPartitionStatsResult {
    repeated TPartitionStatsResult Stats = 1;
    optional TPartitionStatsKey Next = 2;
    optional bool LastBatch = 3;
    optional bool Overloaded = 4;
}

message TQueryDataStats {
    optional uint64 ReadRows = 1;
    optional uint64 ReadBytes = 2;
    optional uint64 UpdateRows = 3;
    optional uint64 UpdateBytes = 4;
    optional uint64 DeleteRows = 5;
    optional uint64 DeleteBytes = 6; // deprecated
    optional uint64 PartitionCount = 7;
}

message TStatsAggr {
    optional uint64 Min = 1;
    optional uint64 Max = 2;
    optional uint64 Sum = 3;
    optional uint64 Cnt = 4;
}

message TQueryStats {
    optional string QueryText = 1;
    optional uint64 QueryTextHash = 2;
    optional uint64 DurationMs = 3;
    optional uint64 EndTimeMs = 4;
    optional TQueryDataStats Stats = 5;
    optional string UserSID = 6;
    optional uint64 ParametersSize = 7;
    optional uint64 CompileDurationMs = 8;
    optional bool FromQueryCache = 9;
    optional uint32 NodeId = 10;
    optional TStatsAggr ShardsCpuTimeUs = 11;
    optional TStatsAggr ComputeCpuTimeUs = 12;
    optional uint64 CompileCpuTimeUs = 13;
    optional uint64 ProcessCpuTimeUs = 14;
    optional uint64 TotalCpuTimeUs = 15;
    optional string Type = 16;
    optional uint64 RequestUnits = 17;
}

message TTopQueryStats {
    repeated TQueryStats Stats = 1;
}

enum EStatsType {
    TOP_DURATION_ONE_MINUTE = 1;
    TOP_DURATION_ONE_HOUR = 2;
    TOP_READ_BYTES_ONE_MINUTE = 3;
    TOP_READ_BYTES_ONE_HOUR = 4;
    TOP_CPU_TIME_ONE_MINUTE = 5;
    TOP_CPU_TIME_ONE_HOUR = 6;
    METRICS_ONE_MINUTE = 7;
    METRICS_ONE_HOUR = 8;
    TOP_REQUEST_UNITS_ONE_MINUTE = 9;
    TOP_REQUEST_UNITS_ONE_HOUR = 10;
    TOP_PARTITIONS_ONE_MINUTE = 11;
    TOP_PARTITIONS_ONE_HOUR = 12;
}

message TEvGetQueryStats {
    optional EStatsType StatsType = 1;
    optional uint64 StartBucket = 2;
    optional string TenantName = 3;
}

message THashedQueryText {
    optional uint64 Hash = 1;
    optional string Text = 2;
}

message TEvGetQueryStatsResult {
    repeated TTopQueryStats Buckets = 1;
    optional uint64 LastBucket = 2;
    optional uint64 BucketSizeMs = 3;
    repeated THashedQueryText QueryTexts = 4;
}

message TPDiskKey {
    optional uint32 NodeId = 1;
    optional uint32 PDiskId = 2;
}

message TPDiskInfo {
    optional string Type = 1;
    optional uint64 Kind = 2;
    optional string Path = 3;
    optional uint64 Guid = 4;
    optional uint64 BoxId = 5;
    optional bool SharedWithOs = 6;
    optional bool ReadCentric = 7;
    optional uint64 AvailableSize = 8;
    optional uint64 TotalSize = 9;
    reserved 10;
    reserved 11;
    optional string StatusV2 = 12;
    optional uint64 StatusChangeTimestamp = 13;
    optional uint64 EnforcedDynamicSlotSize = 14;
    optional uint32 ExpectedSlotCount = 15;
    optional uint32 NumActiveSlots = 16;
    optional uint64 Category = 17;
    optional string DecommitStatus = 18;
    // metrics ?
    // physical location ?
    // config ?
}

message TPDiskEntry {
    optional TPDiskKey Key = 1;
    optional TPDiskInfo Info = 2;
}

message TEvGetPDisksRequest {
    optional TPDiskKey From = 1;
    optional bool InclusiveFrom = 2;

    optional TPDiskKey To = 3;
    optional bool InclusiveTo = 4;
}

message TEvGetPDisksResponse {
    repeated TPDiskEntry Entries = 1;
}

message TVSlotKey {
    optional uint32 NodeId = 1;
    optional uint32 PDiskId = 2;
    optional uint32 VSlotId = 3;
}

message TVSlotInfo {
    reserved 1;
    optional uint32 GroupId = 2;
    optional uint32 GroupGeneration = 3;
    optional uint32 FailRealm = 4;
    optional uint32 FailDomain = 5;
    optional uint32 VDisk = 6;
    optional uint64 AllocatedSize = 7;
    optional uint64 AvailableSize = 8;
    reserved 9;
    reserved 10;
    optional string StatusV2 = 12;
    optional string Kind = 13;
    optional bool IsBeingDeleted = 14;
    // metrics ?
}

message TVSlotEntry {
    optional TVSlotKey Key = 1;
    optional TVSlotInfo Info = 2;
}

message TEvGetVSlotsRequest {
    optional TVSlotKey From = 1;
    optional bool InclusiveFrom = 2;

    optional TVSlotKey To = 3;
    optional bool InclusiveTo = 4;
}

message TEvGetVSlotsResponse {
    repeated TVSlotEntry Entries = 1;
}

message TGroupKey {
    optional uint32 GroupId = 1;
}

message TGroupInfo {
    optional uint32 Generation = 1;
    reserved 2;
    optional uint64 BoxId = 3;
    optional uint64 StoragePoolId = 4;
    optional uint32 EncryptionMode = 5;
    optional uint32 LifeCyclePhase = 6;
    optional uint64 AllocatedSize = 7;
    optional uint64 AvailableSize = 8;
    reserved 9;
    reserved 10;
    optional bool SeenOperational = 11;
    optional string ErasureSpeciesV2 = 12;
    optional uint64 PutTabletLogLatency = 13;
    optional uint64 PutUserDataLatency = 14;
    optional uint64 GetFastLatency = 15;
    // owner ?
    // storage pool name ?
    // desired disk categories ?
    // down/persisted down ?
    // metrics ?
}

message TGroupEntry {
    optional TGroupKey Key = 1;
    optional TGroupInfo Info = 2;
}

message TEvGetGroupsRequest {
    optional TGroupKey From = 1;
    optional bool InclusiveFrom = 2;

    optional TGroupKey To = 3;
    optional bool InclusiveTo = 4;
}

message TEvGetGroupsResponse {
    repeated TGroupEntry Entries = 1;
}

message TStoragePoolKey {
    optional uint64 BoxId = 1;
    optional uint64 StoragePoolId = 2;
}

message TStoragePoolInfo {
    optional string Name = 1;
    optional uint64 Generation = 2;
    reserved 3;
    reserved 4;
    optional string Kind = 5;
    optional uint32 NumGroups = 6;
    optional uint32 EncryptionMode = 7;
    optional uint64 SchemeshardId = 8;
    optional uint64 PathId = 9;
    optional string ErasureSpeciesV2 = 10;
    optional string VDiskKindV2 = 12;
    optional string PDiskFilter = 13;
    optional bytes PDiskFilterData = 14;
    // metrics ?
}

message TStoragePoolEntry {
    optional TStoragePoolKey Key = 1;
    optional TStoragePoolInfo Info = 2;
}

message TEvGetStoragePoolsRequest {
    optional TStoragePoolKey From = 1;
    optional bool InclusiveFrom = 2;

    optional TStoragePoolKey To = 3;
    optional bool InclusiveTo = 4;
}

message TEvGetStoragePoolsResponse {
    repeated TStoragePoolEntry Entries = 1;
}

message TStorageStatsEntry {
    reserved 1;
    optional string PDiskFilter = 2;
    optional string ErasureSpecies = 3;
    optional uint32 CurrentGroupsCreated = 4;
    optional uint64 CurrentAllocatedSize = 5;
    optional uint64 CurrentAvailableSize = 6;
    optional uint32 AvailableGroupsToCreate = 7;
    optional uint64 AvailableSizeToCreate = 8; // total space of newly created groups, if they would've been created
    optional bytes PDiskFilterData = 9;
}

message TEvGetStorageStatsRequest {
}

message TEvGetStorageStatsResponse {
    repeated TStorageStatsEntry Entries = 1;
}

message TTabletEntry {
    optional fixed64 TabletId = 1;
    optional uint32 FollowerId = 2;
    optional string Type = 3;
    optional string State = 4;
    optional string VolatileState = 5;
    optional string BootState = 6;
    optional uint32 Generation = 7;
    optional uint32 NodeId = 8;
    optional uint64 CPU = 9;
    optional uint64 Memory = 10;
    optional uint64 Network = 11;
}

message TEvGetTabletIdsRequest {
    optional fixed64 From = 1;
    optional fixed64 To = 2;
}

message TEvGetTabletIdsResponse {
    repeated fixed64 TabletIds = 1;
}

message TEvGetTabletsRequest {
    repeated fixed64 TabletIds = 1;
    optional uint32 BatchSizeLimit = 2;
}

message TEvGetTabletsResponse {
    repeated TTabletEntry Entries = 1;
    optional fixed64 NextTabletId = 2;
}

// ---- Query metrics

message TQueryMetrics {
    message TMetrics {
        optional uint64 Sum = 1;
        optional uint64 Min = 2;
        optional uint64 Max = 3;
    }

    optional fixed64 QueryTextHash = 1;
    optional uint64 Count = 2;

    optional TMetrics CpuTimeUs = 3;
    optional TMetrics DurationUs = 4;
    optional TMetrics ReadRows = 5;
    optional TMetrics ReadBytes = 6;
    optional TMetrics UpdateRows = 7;
    optional TMetrics UpdateBytes = 8;
    optional TMetrics DeleteRows = 9;
    optional TMetrics RequestUnits = 10;
}

// node -> sysview processor tablet
// per node {hash -> cpu} mapping
message TEvIntervalQuerySummary {
    optional string Database = 1;
    optional uint64 IntervalEndUs = 2;
    optional uint32 NodeId = 3;

    message TQuerySet {
        repeated fixed64 Hashes = 1; // hashes
        repeated uint64 Values = 2; // top by values
    }

    optional TQuerySet Metrics = 4;
    optional TQuerySet TopByDuration = 5;
    optional TQuerySet TopByReadBytes = 6;
    optional TQuerySet TopByCpuTime = 7;
    optional TQuerySet TopByRequestUnits = 8;
}

// sysview processor tablet -> node
// only selected queries with top cpu
message TEvGetIntervalMetricsRequest {
    optional string Database = 1;
    optional uint64 IntervalEndUs = 2;
    repeated fixed64 Metrics = 3; // request full query metrics
    repeated fixed64 QueryTextsToGet = 4; // request query texts
    repeated fixed64 TopByDuration = 5; // request interval top
    repeated fixed64 TopByReadBytes = 6; // request interval top
    repeated fixed64 TopByCpuTime = 7; // request interval top
    repeated fixed64 TopByRequestUnits = 8; // request interval top
}

// node -> sysview processor tablet
// query metrics and texts
message TEvGetIntervalMetricsResponse {
    message TQueryText {
        optional fixed64 Hash = 1;
        optional string Text = 2;
    }

    optional uint64 IntervalEndUs = 1;
    repeated TQueryMetrics Metrics = 2;
    repeated TQueryText QueryTexts = 3;
    repeated TQueryStats TopByDuration = 4;
    repeated TQueryStats TopByReadBytes = 5;
    repeated TQueryStats TopByCpuTime = 6;
    repeated TQueryStats TopByRequestUnits = 7;
}

message TEvConfigureProcessor {
    optional string Database = 1;
}

message TQueryMetricsKey {
    optional uint64 IntervalEndUs = 1;
    optional uint32 Rank = 2;
}

message TQueryMetricsEntry {
    optional TQueryMetricsKey Key = 1;
    optional TQueryMetrics Metrics = 2;
    optional string QueryText = 3;
}

message TQueryStatsEntry {
    optional TQueryMetricsKey Key = 1;
    optional TQueryStats Stats = 2;
}

message TEvGetQueryMetricsRequest {
    optional TQueryMetricsKey From = 1;
    optional bool InclusiveFrom = 2;

    optional TQueryMetricsKey To = 3;
    optional bool InclusiveTo = 4;

    optional EStatsType Type = 5;
}

// reply to TEvGetQueryMetricsRequest
message TEvGetQueryMetricsResponse {
    repeated TQueryMetricsEntry Entries = 1;
    optional TQueryMetricsKey Next = 2;
    optional bool LastBatch = 3;
    optional bool Overloaded = 4;
}

// reply to TEvGetQueryMetricsRequest
message TEvGetQueryStatsResponse {
    repeated TQueryStatsEntry Entries = 1;
    optional TQueryMetricsKey Next = 2;
    optional bool LastBatch = 3;
    optional bool Overloaded = 4;
}

// ---- Database counters

// generic set of counters with stable enumeration order in each category
// simple values are absolute
// cumulative and histogram values may be absolute or diffs depending on the context
// only index-value pairs with non-zero values are stored in diff mode
message TDbCounters {
    message THistogram {
        repeated uint64 Buckets = 1;
        optional uint64 BucketsCount = 2; // total number of buckets in diff mode
    }

    repeated uint64 Simple = 1;
    repeated uint64 Cumulative = 2;
    optional uint64 CumulativeCount = 3; // total number of cumulative counters in diff mode
    repeated THistogram Histogram = 4;
}

message TDbTabletCounters {
    optional NKikimrTabletBase.TTabletTypes.EType Type = 1;
    optional TDbCounters ExecutorCounters = 2;
    optional TDbCounters AppCounters = 3;
    optional TDbCounters MaxExecutorCounters = 4;
    optional TDbCounters MaxAppCounters = 5;
}

message TDbGRpcCounters {
    optional string GRpcService = 1;
    optional string GRpcRequest = 2;
    optional TDbCounters RequestCounters = 3;
}

message TDbGRpcProxyCounters {
    optional TDbCounters RequestCounters = 1;
}

message TDbLabeledCounters {
    optional NKikimrLabeledCounters.TTabletLabeledCounters AggregatedPerTablets = 1;
}

message TDbServiceCounters {
    optional TDbCounters Main = 1;
    repeated TDbTabletCounters TabletCounters = 2;
    repeated TDbGRpcCounters GRpcCounters = 3;
    optional TDbGRpcProxyCounters GRpcProxyCounters = 4;
    repeated TDbLabeledCounters LabeledCounters = 5;
}

enum EDbCountersService {
    KQP = 1;
    TABLETS = 2;
    GRPC = 3;
    GRPC_PROXY = 4;
    LABELED = 5;
    RESERVED_3 = 6;
    RESERVED_4 = 7;
}

// node -> sysview processor tablet
// cumulative values are diffs since last confirmed state
message TEvSendDbCountersRequest {
    message TServiceCounters {
        optional EDbCountersService Service = 1;
        optional TDbServiceCounters Counters = 2;
    }
    repeated TServiceCounters ServiceCounters = 1;
    optional uint64 NodeId = 2;
    optional uint64 Generation = 3;
}

message TEvSendDbCountersResponse {
    optional string Database = 1;
    optional uint64 Generation = 2; // confirmed generation
}

message TEvSendDbLabeledCountersRequest {
    message TServiceCounters {
        optional EDbCountersService Service = 1;
        optional TDbServiceCounters Counters = 2;
    }
    repeated TServiceCounters ServiceCounters = 1;
    optional uint64 NodeId = 2;
    optional uint64 Generation = 3;
}

message TEvSendDbLabeledCountersResponse {
    optional string Database = 1;
    optional uint64 Generation = 2; // confirmed generation
}


// ---- Top partitions

message TTopPartitionsKey {
    optional uint64 IntervalEndUs = 1;
    optional uint64 Rank = 2;
}

message TTopPartitionsInfo {
    optional fixed64 TabletId = 1;
    optional string Path = 2;
    optional uint64 PeakTimeUs = 3;
    optional double CPUCores = 4;
    optional uint32 NodeId = 5;
    optional uint64 DataSize = 6;
    optional uint64 RowCount = 7;
    optional uint64 IndexSize = 8;
    optional uint32 InFlightTxCount = 9;
}

message TTopPartitionsEntry {
    optional TTopPartitionsKey Key = 1;
    optional TTopPartitionsInfo Info = 2;
}

message TEvGetTopPartitionsRequest {
    optional TTopPartitionsKey From = 1;
    optional bool InclusiveFrom = 2;

    optional TTopPartitionsKey To = 3;
    optional bool InclusiveTo = 4;

    optional EStatsType Type = 5;
}

message TEvGetTopPartitionsResponse {
    repeated TTopPartitionsEntry Entries = 1;
    optional TTopPartitionsKey Next = 2;
    optional bool LastBatch = 3;
    optional bool Overloaded = 4;
}

// partitions stats collector -> SVP
message TEvSendTopPartitions {
    repeated TTopPartitionsInfo Partitions = 1;
    optional uint64 TimeUs = 2;
}


