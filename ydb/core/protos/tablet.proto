import "ydb/core/protos/base.proto";
import "ydb/core/protos/tablet_counters.proto";

package NKikimrTabletBase;
option java_package = "ru.yandex.kikimr.proto";

// we have changed type without changing it's number because there is a binary compatibility with ui32 and enums
message TTabletTypes {
    enum EType {
        Unknown = 0;
        OldSchemeShard = 1;
        OldDataShard = 2;
        OldHive = 3;
        OldCoordinator = 4;
        Mediator = 5;
        OldTxProxy = 6;
        OldBSController = 7;
        Dummy = 8;
        // number 9 was OldJobRunnerPoolManager - hierarchical JRPM tablet
        RTMRPartition = 10;
        OldKeyValue = 11;
        KeyValue = 12;
        Coordinator = 13;
        Hive = 14;
        BSController = 15;
        SchemeShard = 16;
        TxProxy = 17;
        DataShard = 18;
        // number 19 was JobRunnerPoolManager - flat JRPM tablet
        PersQueue = 20;
        Cms = 21;
        NodeBroker = 22;
        TxAllocator = 23;
        PersQueueReadBalancer = 24;
        BlockStoreVolume = 25;
        BlockStorePartition = 26;
        TenantSlotBroker = 27;
        Console = 28;
        Kesus = 29;
        BlockStorePartition2 = 30;
        BlockStoreDiskRegistry = 31;
        SysViewProcessor = 32;
        FileStore = 33;
        // number 34 was OlapShard
        ColumnShard = 35;
        TestShard = 36;
        SequenceShard = 37;
        ReplicationController = 38;
        BlobDepot = 39;
        StatisticsAggregator = 40;
        GraphShard = 41;
        BackupController = 42;

        // when adding a new tablet type and keeping parse compatibility with the old version
        // rename existing reserved item to desired one, and add new reserved item to
        // the end of reserved list
        Reserved43 = 43;
        Reserved44 = 44;
        Reserved45 = 45;
        Reserved46 = 46;

        UserTypeStart = 255;
        TypeInvalid = -1;
    }
}

message TTabletLogMetadata {
    optional uint32 Key = 1;
    optional bytes Data = 2;
}

message TTabletLogEntry {
    // normal log entries
    repeated uint32 DependsOn = 1;
    repeated NKikimrProto.TLogoBlobID References = 2;
    optional fixed64 Snapshot = 3;
    optional uint32 Confirmed = 4;
    optional bool IsSnapshot = 5;

    repeated NKikimrProto.TLogoBlobID GcDiscovered = 6;
    repeated NKikimrProto.TLogoBlobID GcLeft = 7;

    optional bool IsTotalSnapshot = 8;

    // zero log entry
    optional fixed64 ZeroConfirmed = 10;
    optional uint32 ZeroTailSz = 11;
    repeated fixed64 ZeroTailBitmask = 12;

    optional bytes EmbeddedLogBody = 13;
    repeated TTabletLogMetadata EmbeddedMetadata = 14;
}

message TTabletChannelInfo {
    message THistoryEntry {
        optional uint32 FromGeneration = 1;
        optional uint32 GroupID = 2;
    }

    optional uint32 Channel = 1;
    optional uint32 ChannelType = 2;
    repeated THistoryEntry History = 3;
    optional string ChannelErasureName = 4;
    optional string StoragePool = 5;
}

message TTabletStorageInfo {
    optional fixed64 TabletID = 1;
    repeated TTabletChannelInfo Channels = 2;
    optional TTabletTypes.EType TabletType = 3;
    optional uint32 Version = 4;
    optional uint64 TenantIdOwner = 5;
    optional uint64 TenantIdLocalId = 6;
}

message TEvPing {
    optional fixed64 TabletID = 1;
    optional uint64 Flags = 2;
}

message TEvPong {
    optional fixed64 TabletID = 1;
    optional uint64 Flags = 2;
}

message TEvReadLocalBase {
    optional bytes RootKey = 1;
    optional bool SaveScheme = 2;
}

message TEvReadLocalBaseResult {
    optional uint64 Origin = 1;
    optional bytes RootKey = 2;
    optional bool IsError = 3;
    optional bytes DocBuffer = 4;
    optional bytes Scheme = 5;
}

message TEvFollowerAttach {
    optional fixed64 TabletId = 1;
    optional uint32 FollowerAttempt = 2;
}

message TEvFollowerUpdate {
    optional fixed64 TabletId = 1;
    optional uint32 FollowerAttempt = 2;
    optional uint64 StreamCounter = 3;

    optional uint32 Generation = 10;
    optional uint32 Step = 11;

    repeated NKikimrProto.TLogoBlobID ReferencesIds = 12;
    repeated bytes References = 13;
    optional bool IsSnapshot = 14;
    optional bytes Body = 15;
    optional bytes AuxPayload = 16;
    optional TTabletStorageInfo TabletStorageInfo = 17; // set only for initial log snapshot

    repeated NKikimrProto.TLogoBlobID GcDiscovered = 20;
    repeated NKikimrProto.TLogoBlobID GcLeft = 21;
    optional bool NeedGCApplyAck = 22;
}

message TEvFollowerGcAck {
    optional fixed64 TabletId = 1;
    optional uint32 FollowerAttempt = 2;
    optional uint32 Generation = 3;
    optional uint32 Step = 4;
}

message TEvFollowerAuxUpdate {
    optional fixed64 TabletId = 1;
    optional uint32 FollowerAttempt = 2;
    optional uint64 StreamCounter = 3;

    optional bytes AuxPayload = 10;
}

message TEvFollowerDetach {
    optional fixed64 TabletId = 1;
    optional uint32 FollowerAttempt = 2;
}

message TEvFollowerDisconnect {
    optional fixed64 TabletId = 1;
    optional uint32 FollowerAttempt = 2;
    optional uint32 Reason = 3; // todo: enum
}

message TEvFollowerRefresh {
    optional fixed64 TabletId = 1;
    optional uint32 Generation = 2;
    optional bool OfflineProtocol = 3;
}

message TEvGetCounters {
}

message TEvGetCountersResponse {
    optional NKikimrTabletBase.TTabletCounters TabletCounters = 1;
}

message TEvCutTabletHistory {
    optional fixed64 TabletID = 1;
    optional uint32 Channel = 2;
    optional uint32 GroupID = 3;
    optional uint32 FromGeneration = 4;
}

message TThroughputRecord {
    optional uint32 GroupID = 1;
    optional uint32 Channel = 2; // it uint8 actually
    optional uint64 Throughput = 3;
}

message TIopsRecord {
    optional uint32 GroupID = 1;
    optional uint32 Channel = 2; // actually uint8
    optional uint64 Iops = 3;
}

message TMetrics {
    optional uint64 CPU = 1;
    optional uint64 Memory = 2;
    optional uint64 Network = 3;
    optional uint64 Counter = 4;
    optional uint64 Storage = 5;
    repeated TThroughputRecord GroupReadThroughput = 6;
    repeated TThroughputRecord GroupWriteThroughput = 7;
    optional uint64 ReadThroughput = 8;
    optional uint64 WriteThroughput = 9;
    repeated TIopsRecord GroupReadIops = 10;
    repeated TIopsRecord GroupWriteIops = 11;
    optional uint64 ReadIops = 12;
    optional uint64 WriteIops = 13;
}

message TEvTabletStop {
    enum EReason {
        ReasonUnknown = 0;
        ReasonStop = 1; // tablet is requested to gracefully stop
        ReasonDemoted = 2; // a newer tablet instance is detected
        ReasonIsolated = 3; // isolated from state storage
        ReasonStorageBlocked = 4; // storage blocked by another instance
        ReasonStorageFailure = 5; // storage failure (must shutdown as soon as possible)
    }

    optional uint64 TabletID = 1;
    optional EReason Reason = 2;
}

message TEvDropLease {
    optional uint64 TabletID = 1;
}

message TEvLeaseDropped {
    optional uint64 TabletID = 1;
}
