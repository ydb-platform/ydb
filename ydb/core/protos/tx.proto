import "ydb/library/actors/protos/actors.proto";
import "ydb/core/scheme/protos/key_range.proto";
import "ydb/core/protos/base.proto";
import "google/protobuf/any.proto";

package NKikimrTx;
option java_package = "ru.yandex.kikimr.proto";

// smth to coordinator
message TProxyTransaction {
    enum EFlags {
        // Set for volatile transactions.
        // Volatile transactions are not guaranteed to reach participants,
        // and may be discarded at any time during execution, which will
        // cause transaction to abort.
        FLAG_VOLATILE = 1;
    }

    enum EAffectedFlags {
        // Transaction performs reads at the given participant
        FLAG_AFFECTED_READ = 1;
        // Transaction performs writes at the given participant
        FLAG_AFFECTED_WRITE = 2;
    }

    message TAffectedEntry {
        optional fixed64 TabletId = 1;
        optional uint32 Flags = 2; // 8 bit int, 1 - read-set, 2 - write-set
    }

    repeated TAffectedEntry AffectedSet = 1;

    optional uint32 ExecLevel = 3; // only 8 bits used.

    optional fixed64 TxId = 4; // proxy domain - 6 bit, proxy id - 10 bit, uniq part - 48 bit.

    optional uint64 MinStep = 6; // not plan before
    optional uint64 MaxStep = 7; // not plan after

    optional bool IgnoreLowDiskSpace = 8; // plan even disk space is low

    optional uint32 Flags = 9;
}

message TEvProposeTransaction {
    optional TProxyTransaction Transaction = 1;
    optional fixed64 CoordinatorID = 10; // addressed to, more about paranoid check then anything useful
}

message TEvProposeTransactionStatus {
    optional uint32 Status = 1; // enum defined in tx.h

    optional fixed64 StepId = 2;

    optional fixed64 TxId = 9;
}

// reader to coordinator
message TEvAcquireReadStep {
    optional fixed64 CoordinatorID = 1; // tablet id of target coordinator, for paranoid checks
}

message TEvAcquireReadStepResult {
    optional fixed64 CoordinatorID = 1;
    // Chosen step for a read snapshot
    // Client is expected to read all effects up to and including this step
    // Logically this is equivalent to a step of the most recently planned
    // transaction. The resulting step is linearizable with respect to all
    // committed transactions at the time of the request, in a sense that
    // it would not be smaller than the step of the last executed transaction
    // in the database. This step is usually smaller than step assigned
    // to a normally planned transaction, but it may still correspond to some
    // future point in time. It is not guaranteed that this step is the
    // smallest possible linearizable step, only an approximation.
    optional fixed64 Step = 2;
}

// mediator timecast to coordinator
message TEvSubscribeReadStep {
    // Coordinator tablet id for paranoid checks
    optional fixed64 CoordinatorID = 1;
    // Sender increments seqno each time it re-subscribes
    // This invalidates all subscriptions with a lower seqno
    optional uint64 SeqNo = 2;
}

// mediator timecast to coordinator (not really used)
message TEvUnsubscribeReadStep {
    // Coordinator tablet id for paranoid checks
    optional fixed64 CoordinatorID = 1;
    // Unsubscribe up to this seqno (inclusive)
    optional uint64 SeqNo = 2;
}

// coordinator to mediator timecast
message TEvSubscribeReadStepResult {
    optional fixed64 CoordinatorID = 1;
    optional uint64 SeqNo = 2;

    // The maximum step that coordinator has possibly given to clients as a
    // read step in the past. This is useful to detect which point in time
    // has been possibly used for snapshot isolation reads. Clients are
    // expected to take the maximum value from multiple coordinators.
    optional fixed64 LastAcquireStep = 3;

    // The minimum step that coordinator would return as read step in the
    // future. This is useful to understand which step is guaranteed to be
    // readable with snapshot isolation. Clients are expected to take the
    // minimum value from multiple coordinators which may be a basis of a
    // readable point in time, and also the upper bound for mediator timecast.
    optional fixed64 NextAcquireStep = 4;
}

// coordinator to mediator timecast
message TEvSubscribeReadStepUpdate {
    optional fixed64 CoordinatorID = 1;
    optional uint64 SeqNo = 2;

    // See above description for NextAcquireStep
    optional fixed64 NextAcquireStep = 3;
}

// Coordinator to sibling coordinators
// Subscribes to updates of the last planned step, which is sent to all
// subscribers as soon as planning of said step has started. This indicates
// that said step needs to be planned on siblings sooner rather than later.
message TEvSubscribeLastStep {
    // Coordinator tablet id for paranoid checks
    optional fixed64 CoordinatorID = 1;
    // Sender increments seqno each time it re-subscribes
    // This invalidates all subscriptions with a lower seqno
    optional uint64 SeqNo = 2;
}

// Coordinator to sibling coordinators
// Unsubscribes a previous subscription, usually sent before tablet dies
message TEvUnsubscribeLastStep {
    optional fixed64 CoordinatorID = 1;
    optional uint64 SeqNo = 2;
}

// Coordinator to subscribers
// The last known step that has started to be planned, sent before it is
// persistent in storage, and as such may temporarily jump backwards on
// restarts.
message TEvUpdatedLastStep {
    optional fixed64 CoordinatorID = 1;
    optional uint64 SeqNo = 2;
    optional fixed64 LastStep = 3;
}

// Time cast to coordinators
// Notifies coordinator that clients are waiting for some specific steps
message TEvRequirePlanSteps {
    optional fixed64 CoordinatorID = 1;
    repeated uint64 PlanSteps = 2 [packed = true];
}

// coordinator to mediator
message TCoordinatorTransaction {
    repeated uint64 AffectedSet = 1; // read and write set - joined and then filtered for concrete mediator

    optional fixed64 TxId = 2;
    optional bytes Body = 3;

    optional uint64 Moderator = 5; // tablet id of moderator (if any)
}

message TEvSubDomainConfigurationAck {
    enum EStatus {
        SUCCESS = 0; // ok
        ALREADY = 1; // ok, repeated request
        REJECT = 2; // precisely not ok
    }

    optional EStatus Status = 1;
    optional fixed64 OnTabletId = 2;
}

message TEvCoordinatorSync {
    optional fixed64 Cookie = 1;
    optional fixed64 MediatorID = 9;
    optional fixed64 CoordinatorID = 10;
}

message TEvCoordinatorSyncResult {
    optional NKikimrProto.EReplyStatus Status = 1;

    optional fixed64 Cookie = 2;

    optional fixed64 CompleteStep = 3;
    optional fixed64 LatestKnown = 4;
    optional fixed64 SubjectiveTime = 5;

    optional fixed64 MediatorID = 9;
    optional fixed64 CoordinatorID = 10;
}

message TEvCoordinatorStep {
    repeated TCoordinatorTransaction Transactions = 1;

    optional fixed64 Step = 2;
    optional fixed64 PrevStep = 3;

    optional fixed64 MediatorID = 9;
    optional fixed64 CoordinatorID = 10;
    optional uint64 ActiveCoordinatorGeneration = 11;

    optional uint64 TotalTxAffectedEntries = 20; // sum(transactions[i].affectedset.size)
}

message TEvTxAllocate {
    optional fixed64 RangeSize = 1;
}

message TEvTxAllocateResult {
    enum EStatus {
        SUCCESS = 0; // ok
        IMPOSIBLE = 1; // precisely not ok
    }

    optional EStatus Status = 1;

    optional fixed64 RangeBegin = 2;
    optional fixed64 RangeEnd = 3;
}

message TEvCoordinatorStepResult {
    enum EStatus {
        UNKNOWN_COORDINATOR = 0; // requested coordinator not known
        ACCEPTED_DOMAIN = 1; // ok
        ACCEPTED_FOREIGN = 2;
        DISCARDED_TOOLATE = 3; // foreign request came too late
        DISCARDED_TOOEARLY = 4; // request too far in future
    }

    optional EStatus Status = 1;

    optional fixed64 Step = 2;

    optional fixed64 CompleteStep = 3;
    optional fixed64 LatestKnown = 4;
    optional fixed64 SubjectiveTime = 5;

    optional fixed64 MediatorID = 9;
    optional fixed64 CoordinatorID = 10;
}

// must be delivered to source coordinator
message TEvPlanStepAck {
    optional fixed64 TabletId = 1;
    optional fixed64 Step = 2;
    repeated fixed64 TxId = 3;
}

// must be delivered to mediator exec queue
message TEvPlanStepAccepted {
    optional fixed64 TabletId = 1;
    optional fixed64 Step = 2;
}

// mediator to tablet
message TMediatorTransaction {
    optional fixed64 TxId = 1;
    optional fixed64 Coordinator = 2;
    optional fixed64 Moderator = 3;

    optional bytes Body = 4;

    optional NActorsProto.TActorId AckTo = 10; // must be set to source coordinator-mediator queue
}

message TEvMediatorPlanStep {
    repeated TMediatorTransaction Transactions = 1;

    optional uint64 Step = 2;

    optional fixed64 MediatorID = 9;
    optional fixed64 TabletID = 10;
}

message TEvTransactionBatchResult {
    optional NKikimrProto.EReplyStatus Status = 1;
    optional uint64 Step = 2;
    optional uint64 TabletID = 10;
}


// mediator to local
message TEvMediatorDone {
    optional uint64 Step = 1;
    optional uint64 MediatorID = 10;
}

message TEvMediatorDoneResult {
}

message TBalanceHop {
    optional uint64 Shard = 1;
    repeated uint64 Sibling = 2;
}

message TBalanceTrack {
    repeated TBalanceHop Hop = 1;
}

message TBalanceTrackList {
    repeated TBalanceTrack Track = 1;
}

// Generic readset data format
message TReadSetData {
    enum EDecision {
        // Unknown decision
        // This may happen when transaction is aborted and no longer exists in
        // memory, and also when readset is acknowledged and transaction is
        // committed, so the previous decision is not known. Note, that this
        // is similar to abort decision in practice.
        DECISION_UNKNOWN = 0;

        // Commit decision
        // Distributed transactions are committed when all participants decide
        // to commit. Transaction is aborted when at least one participant
        // decides not to commit. Participants must really commit to this
        // decision, it cannot be changed unless consensus is to abort.
        DECISION_COMMIT = 1;

        // Abort decision
        // Distributed transactions are aborted when at least one participant
        // decides to abort. This decision is ephemeral and may change to
        // unknown at any time, or even be unknown from the start.
        DECISION_ABORT = 2;
    }

    // Local decision on the outcome of a distributed transaction
    optional EDecision Decision = 1;

    // Optional data attached to readset, specific between a pair of tablets
    optional google.protobuf.Any Data = 2;
}

// tablet to tablet
message TEvReadSet {
    enum EFlags {
        // The sender is not expecting an ack. This is used for temporary
        // readsets that are non-persistent, e.g. when the transaction was
        // aborted and transaction outcome is unknown.
        FLAG_NO_ACK = 1;

        // This readset does not have any data. This is used when sender needs
        // to produce a readset, either because it was asked to, but the
        // transaction aborted or expired, or when no data is expected, but
        // the sender is expecting some data back.
        FLAG_NO_DATA = 2;

        // The sender is expecting a readset from destination shard. The
        // receiver is expected to send a readset to the source shard, even
        // when there is no data, in which case FLAG_NO_DATA should be used.
        FLAG_EXPECT_READSET = 4;
    }

    optional uint64 Step = 1;
    optional uint64 TxId = 2;
    optional uint64 TabletSource = 3;
    optional uint64 TabletDest = 4;
    optional uint64 TabletProducer = 5;
    optional bytes ReadSet = 6;
    optional TBalanceTrackList BalanceTrackList = 7;
    optional uint64 Seqno = 8; // Key in outReadSet table to facilitate erasing on ACK
    optional uint32 Flags = 9;
}

// tablet to tablet
message TEvReadSetAck {
    optional uint64 Step = 1;
    optional uint64 TxId = 2;
    optional uint64 TabletSource = 3;
    optional uint64 TabletDest = 4;
    optional uint64 TabletConsumer = 5;
    optional uint32 Flags = 6;
    optional uint64 Seqno = 7; // Should be equal to TEvReadSet.Seqno which we are ACKing
}

message TEvStreamClearanceRequest {
    optional uint64 TxId = 1;
    optional uint64 ShardId = 2;
    optional TKeyRange KeyRange = 3;
}

message TEvStreamClearanceResponse {
    optional uint64 TxId = 1;
    optional bool   Cleared = 2;
}

message TEvStreamClearancePending {
    optional uint64 TxId = 1;
}

message TEvStreamQuotaRequest {
    optional uint64 TxId = 1;
    optional uint64 ShardId = 2;
}

message TEvStreamQuotaResponse {
    optional uint64 TxId = 1;
    optional uint64 MessageSizeLimit = 2;
    optional uint32 ReservedMessages = 3;
    optional uint64 RowLimit = 4;
    optional uint64 MessageRowsLimit = 5;
}

message TEvStreamQuotaRelease {
    optional uint64 TxId = 1;
    optional uint64 ShardId = 2;
}

message TEvStreamIsDead {
    optional uint64 TxId = 1;
}

message TEvInterruptTransaction {
    optional uint64 TxId = 1;
}

message TEvStreamDataAck {
}

