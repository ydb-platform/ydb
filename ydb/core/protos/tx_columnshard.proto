import "ydb/library/actors/protos/actors.proto";
import "ydb/core/protos/flat_scheme_op.proto";
import "ydb/core/protos/long_tx_service.proto";
import "ydb/core/protos/subdomains.proto";
import "ydb/core/protos/ssa.proto";

package NKikimrTxColumnShard;
option java_package = "ru.yandex.kikimr.proto";

enum EResultStatus {
    UNSPECIFIED = 0;
    PREPARED = 1;
    SUCCESS = 2;
    ABORTED = 3;
    ERROR = 4;
    TIMEOUT = 5;
    OUTDATED = 6;
    SCHEMA_ERROR = 7;
    SCHEMA_CHANGED = 8;
    OVERLOADED = 9;
    STORAGE_ERROR = 10;

    UNKNOWN = 0xFFFF;
}

enum EResultFormat {
    FORMAT_ARROW = 1;
}

message TReadStats {
    optional uint64 BeginTimestamp = 1;
    optional uint64 DurationUsec = 2;
    optional uint32 SelectedIndex = 3;
    optional uint64 IndexGranules = 4;
    optional uint64 IndexPortions = 5;
    optional uint64 IndexBatches = 6;
    optional uint64 NotIndexedBatches = 7;
    optional uint32 SchemaColumns = 8;
    optional uint64 DataFilterBytes = 10;
    optional uint64 DataAdditionalBytes = 11;

    optional uint32 FilterColumns = 12;
    optional uint32 AdditionalColumns = 13;

    optional uint32 SelectedRows = 14;
    optional uint64 CompactedPortionsBytes = 15;
    optional uint64 InsertedPortionsBytes = 16;
    optional uint64 CommittedPortionsBytes = 17;
}

message TLogicalMetadata {
    optional uint32 NumRows = 1;
    optional uint64 RawBytes = 4;
    optional uint64 DirtyWriteTimeSeconds = 5;
    optional string SpecialKeysRawData = 6;
}

message TMetadata {
    optional uint32 Format = 1; // EResultFormat
    optional bytes Schema = 2;
    optional TReadStats ReadStats = 3;
    optional bytes LogicalMeta = 4; // TLogicalMetadata
}

message TEvictMetadata {
    optional string TierName = 1;
}

message TEvWrite {
    optional NActorsProto.TActorId Source = 1;
    optional uint64 TxInitiator = 2;
    optional uint64 WriteId = 3;
    optional uint64 TableId = 4;
    optional string DedupId = 5;
    optional bytes Data = 6;
    optional TMetadata Meta = 7;
    optional NKikimrLongTxService.TLongTxId LongTxId = 8;
    optional uint32 WritePartId = 9 [default = 0];
}

message TEvWriteResult {
    optional uint32 Status = 1; // EResultStatus
    optional uint64 Origin = 2;
    optional uint64 TxInitiator = 3;
    optional uint64 WriteId = 4;
    optional uint64 TableId = 5;
    optional string DedupId = 6;
}

message TEvRead {
    message TPredicate {
        repeated string ColumnNames = 1;
        optional bytes Row = 2; // One row in arrow::RecordBatch
        optional bool Inclusive = 3;
    }

    optional NActorsProto.TActorId Source = 1;
    optional uint64 TxInitiator = 2;
    optional uint64 PlanStep = 3;
    optional uint64 TxId = 4;
    optional uint64 TableId = 5;
    repeated uint32 ColumnIds = 6;
    repeated string ColumnNames = 7;
    optional TPredicate GreaterPredicate = 8;   // Greater[OrEqual] (or From for range)
    optional TPredicate LessPredicate = 9;      // Less[OrEqual] (or To for range)
    // Serialized Olap program
    optional bytes OlapProgram = 10;
    optional NKikimrSchemeOp.EOlapProgramType OlapProgramType = 11;
}

message TEvReadResult {
    optional uint32 Status = 1; // EResultStatus
    optional uint64 Origin = 2;
    optional uint64 TxInitiator = 3;
    optional uint64 PlanStep = 4;
    optional uint64 TxId = 5;
    optional uint64 TableId = 6;
    optional uint32 Batch = 7;
    optional bool Finished = 8;
    optional bytes Data = 9;
    optional TMetadata Meta = 10;
}

enum ETransactionKind {
    TX_KIND_NONE = 0;
    TX_KIND_SCHEMA = 1;
    TX_KIND_COMMIT = 2;
    TX_KIND_TTL = 3; // Immediate (not planned)
    TX_KIND_DATA = 4;
    TX_KIND_COMMIT_WRITE = 5;
}

enum ETransactionFlag {
    TX_FLAG_IMMEDIATE = 1;
}

message TEvProposeTransaction {
    optional NActorsProto.TActorId Source = 1;
    optional ETransactionKind TxKind = 2;
    optional uint64 TxId = 3;
    optional bytes TxBody = 4; // TCommitTxBody for TX_KIND_COMMIT

    optional uint64 SchemeShardId = 5;
    optional NKikimrSubDomains.TProcessingParams ProcessingParams = 6;
    optional uint64 Flags = 7;
}

message TEvCheckPlannedTransaction {
    optional NActorsProto.TActorId Source = 1;
    optional uint64 Step = 2;
    optional uint64 TxId = 3;
}

message TEvProposeTransactionResult {
    optional EResultStatus Status = 1;
    optional ETransactionKind TxKind = 2;
    optional uint64 Origin = 3;
    optional uint64 TxId = 4;
    optional uint64 MinStep = 5;
    optional uint64 MaxStep = 6;
    optional string StatusMessage = 7;
    repeated fixed64 DomainCoordinators = 8;
    optional uint64 Step = 9;
}

message TEvCancelTransactionProposal {
    optional uint64 TxId = 1;
}

message TEvNotifyTxCompletion {
    optional uint64 TxId = 1;
}

message TEvNotifyTxCompletionResult {
    optional uint64 Origin = 1;
    optional uint64 TxId = 2;
}

message TCommitTxBody {
    optional uint64 TxInitiator = 1;
    repeated uint64 WriteIds = 2;
}

message TCommitWriteTxBody {
    optional uint64 LockId = 1;
}

message TSchemaPresetVersionInfo {
    optional uint64 Id = 1;
    optional uint64 SinceStep = 2;
    optional uint64 SinceTxId = 3;
    optional NKikimrSchemeOp.TColumnTableSchema Schema = 4;
}

message TTtlSettingsPresetVersionInfo {
    optional uint64 Id = 1;
    optional uint64 SinceStep = 2;
    optional uint64 SinceTxId = 3;
    optional NKikimrSchemeOp.TColumnDataLifeCycle TtlSettings = 4;
}

message TTableVersionInfo {
    optional uint64 PathId = 1;
    optional uint64 SinceStep = 2;
    optional uint64 SinceTxId = 3;
    optional NKikimrSchemeOp.TColumnTableSchema Schema = 4;
    optional uint32 SchemaPresetId = 5;
    optional NKikimrSchemeOp.TColumnDataLifeCycle TtlSettings = 6;
    optional uint32 TtlSettingsPresetId = 7;
    optional uint64 SchemaPresetVersionAdj = 8;
    optional uint64 TtlSettingsPresetVersionAdj = 9;
}

message TCreateTable {
    optional uint64 PathId = 1;
    optional NKikimrSchemeOp.TColumnTableSchema Schema = 2;
    optional NKikimrSchemeOp.TColumnTableSchemaPreset SchemaPreset = 3;
    optional NKikimrSchemeOp.TColumnDataLifeCycle TtlSettings = 4;
    optional NKikimrSchemeOp.TColumnTableTtlSettingsPreset TtlSettingsPreset = 5;
    optional uint64 SchemaPresetVersionAdj = 6;
    optional uint64 TtlSettingsPresetVersionAdj = 7;
}

message TInitShard {
    optional uint32 DataChannelCount = 1;
    optional uint64 OwnerPathId = 2;
    repeated TCreateTable Tables = 3;
    optional string OwnerPath = 4;
}

message TAlterTable {
    optional uint64 PathId = 1;
    optional NKikimrSchemeOp.TAlterColumnTable AlterBody = 2;
    optional NKikimrSchemeOp.TColumnTableSchema Schema = 3;
    optional NKikimrSchemeOp.TColumnTableSchemaPreset SchemaPreset = 4;
    optional NKikimrSchemeOp.TColumnDataLifeCycle TtlSettings = 5;
    optional NKikimrSchemeOp.TColumnTableTtlSettingsPreset TtlSettingsPreset = 6;
    optional uint64 SchemaPresetVersionAdj = 7;
    optional uint64 TtlSettingsPresetVersionAdj = 8;
}

message TDropTable {
    optional uint64 PathId = 1;
}

message TEnsureTables {
    repeated TCreateTable Tables = 1;
}

message TAlterStore {
    optional NKikimrSchemeOp.TAlterColumnStore AlterBody = 1;
    repeated uint32 DroppedSchemaPresets = 2;
    repeated NKikimrSchemeOp.TColumnTableSchemaPreset SchemaPresets = 3;
    repeated uint32 Reserved_4 = 4; // DroppedTtlSettingsPresets, deprecated
    repeated NKikimrSchemeOp.TColumnTableTtlSettingsPreset Reserved_5 = 5; // TtlSettingsPresets, deprecated
    optional uint64 StorePathId = 6;
}

message TSchemaSeqNo {
    optional uint32 Generation = 1;
    optional uint64 Round = 2;
}

message TIndexGranuleMeta {
    optional uint32 MarkSize = 1; // Composite key mark (granule border) size: count of first PK elements in mark
}

message TSnapshot {
    optional uint64 PlanStep = 1;
    optional uint64 TxId = 2;
}

message TIndexPortionMeta {
    oneof Produced {
        bool IsInserted = 1;
        bool IsCompacted = 2;
        bool IsSplitCompacted = 3;
        bool IsEvicted = 4;
    }
    optional string TierName = 5;
    optional bytes PrimaryKeyBorders = 6; // arrow::RecordBatch with first and last ReplaceKey rows
    optional TSnapshot RecordSnapshotMin = 7;
    optional TSnapshot RecordSnapshotMax = 8;
}

message TIndexColumnMeta {
    optional uint32 NumRows = 1;
    optional uint32 RawBytes = 2;
    optional NKikimrSSA.TProgram.TConstant MinValue = 3;
    optional NKikimrSSA.TProgram.TConstant MaxValue = 4;
    optional TIndexPortionMeta PortionMeta = 5; // First PK column could contain portion info
}

message TSchemaTxBody {
    optional TSchemaSeqNo SeqNo = 1;
    oneof TxBody {
        TInitShard InitShard = 2;
        TEnsureTables EnsureTables = 3;
        TDropTable DropTable = 4;
        TAlterTable AlterTable = 5;
        TAlterStore AlterStore = 6;
    }
}

message TTtlTxBody {
    optional string TtlColumnName = 1;
    optional uint64 UnixTimeSeconds = 2;
    optional uint32 TtlPresetId = 3;
    optional string TtlPresetName = 4;
    repeated uint64 PathIds = 5;
}

message TBlobRange {
    optional bytes BlobId = 1;
    optional uint64 Offset = 2;
    optional uint64 Size = 3;
}

// Read ranges of multiple small blobs directly from Tablet
message TEvReadBlobRanges {
    repeated TBlobRange BlobRanges = 1;
}

message TEvReadBlobRangesResult {
    message TResult {
        optional TBlobRange BlobRange = 1;
        optional uint32 Status = 2; // NKikimrProto::EReplyStatus
        optional bytes Data = 3;
    };

    optional uint64 TabletId = 1;
    repeated TResult Results = 2;
}

message TInternalOperationData {
    repeated uint64 InternalWriteIds = 1;
}
