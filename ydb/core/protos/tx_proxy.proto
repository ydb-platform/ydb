import "ydb/core/protos/export.proto";
import "ydb/core/protos/flat_scheme_op.proto";
import "ydb/core/protos/query_stats.proto";
import "ydb/library/mkql_proto/protos/minikql.proto";
import "ydb/library/ydb_issue/proto/issue_id.proto";

import "ydb/public/api/protos/ydb_issue_message.proto";

package NKikimrTxUserProxy;
option java_package = "ru.yandex.kikimr.proto";

message TRWTransaction {
    message TPredicate {
        optional bytes Key = 1;
        optional bytes Value = 2; // TRawTypeValue
        optional uint32 ValueType = 3;
        optional bool MustNotExist = 4;
        optional bool MustExist = 5;
    }

    message TRead {
        optional bytes Key = 1;

        optional uint32 ExpectedPayloadType = 10;
    }

    message TWrite {
        optional bytes Key = 1;
        optional bytes Value = 2; // TRawTypeValue
        optional uint32 ValueType = 3;
        optional bool Erase = 4;
    }

    repeated TPredicate Predicate = 1;
    repeated TRead Read = 2;
    repeated TWrite Write = 3;
}

message TReadTransaction {
    message TRead {
        optional bytes Key = 1;

        optional uint32 ExpectedPayloadType = 10;
    }

    optional fixed64 StepId = 2;
    optional fixed64 OrderId = 3;
}

message TKeyRange {
    // Key as a tuple of values. Missing key column values are treated as NULL.
    optional NKikimrMiniKQL.TParams From = 1;
    // Missing key column values are treated as INF.
    optional NKikimrMiniKQL.TParams To = 2;
    optional bool FromInclusive = 3 [default = true];
    optional bool ToInclusive = 4 [default = false];
};

message TReadTableTransaction {
    enum EVersion {
        UNSPECIFIED = 0;
        YDB_V1 = 1;
        YDB_V2 = 2; // Like V1 but allows NotNull types in result set
    }
    optional string Path = 1;
    optional bool Ordered = 2 [default = false];
    optional bool AllowDuplicates = 3 [default = false];
    repeated string Columns = 4; // All by default.
    optional TKeyRange KeyRange = 5;
    optional uint64 RowLimit = 6 [default = 0]; // All rows by default.
    optional uint32 ApiVersion = 7;
    optional uint64 SnapshotStep = 8;
    optional uint64 SnapshotTxId = 9;
};

message TCreateVolatileSnapshotTx {
    message TTable {
        optional string TablePath = 1;
        optional TKeyRange KeyRange = 2;
    }

    repeated TTable Tables = 1;
    optional string Name = 2;
    optional uint64 TimeoutMs = 3;
    optional bool IgnoreSystemViews = 4;
}

message TRefreshVolatileSnapshotTx {
    message TTable {
        optional string TablePath = 1;
        optional TKeyRange KeyRange = 2;
    }

    repeated TTable Tables = 1;
    optional uint64 SnapshotStep = 2;
    optional uint64 SnapshotTxId = 3;
    optional bool IgnoreSystemViews = 4;
}

message TDiscardVolatileSnapshotTx {
    message TTable {
        optional string TablePath = 1;
        optional TKeyRange KeyRange = 2;
    }

    repeated TTable Tables = 1;
    optional uint64 SnapshotStep = 2;
    optional uint64 SnapshotTxId = 3;
    optional bool IgnoreSystemViews = 4;
}

message TCommitWritesTx {
    message TTable {
        optional string TablePath = 1;
        optional TKeyRange KeyRange = 2;
    }

    repeated TTable Tables = 1;
    optional uint64 WriteTxId = 2;
}

message TMiniKQLTransaction {
    message TMiniKQLProgram {
        // Server will use Text, if not set -- Bin.
        optional string Text = 1; // Text program.
        optional bytes Bin = 2;  // Serialized program.
        optional bytes ResultDocScheme = 3; // [opt] Will be applied to result document for program.
    };

    message TMiniKQLParams {
        // Server will use Text, if not set -- Bin.
        optional string Text = 1; // Text params.
        optional bytes Bin = 2;  // Serialized params.
        optional NKikimrMiniKQL.TParams Proto = 3;
    };

    enum EMode {
        COMPILE_AND_EXEC = 1;
        COMPILE = 2;
    };

    message TLimits {
        optional uint32 AffectedShardsLimit = 1;
        optional uint32 ReadsetCountLimit = 2;
        optional uint64 ComputeNodeMemoryLimitBytes = 3;
        optional uint64 TotalReadSizeLimitBytes = 4;
    };

    optional EMode Mode = 1 [default = COMPILE_AND_EXEC];
    optional TMiniKQLProgram Program = 2;
    optional TMiniKQLParams Params = 3;

    optional bool EvaluateResultType = 50 [default = true];
    optional bool EvaluateResultValue = 51 [default = true];
    optional bool FlatMKQL = 52 [default = true];
    optional bool LlvmRuntime = 53;
    optional uint64 PerShardKeysSizeLimitBytes = 54;
    optional bool CollectStats = 55;
    optional TLimits Limits = 56;
    optional uint64 SnapshotStep = 9;
    optional uint64 SnapshotTxId = 10;
};

message TMiniKQLCompileResults {
    optional bytes CompiledProgram = 1;
    repeated Ydb.Issue.IssueMessage ProgramCompileErrors = 2;
    optional bytes CompiledParams = 20;
    repeated Ydb.Issue.IssueMessage ParamsCompileErrors = 21;
};

message TTransaction {
    optional TMiniKQLTransaction MiniKQLTransaction = 4;

    optional uint32 Flags = 6; // See ydb/core/tx/tx_datashard.h NKikimr::NTxDataShard::TTxFlags
    optional string UserRequestId = 8;

    optional NKikimrSchemeOp.TModifyScheme ModifyScheme = 10;
    repeated NKikimrSchemeOp.TModifyScheme TransactionalModification = 11;

    optional TReadTableTransaction ReadTableTransaction = 20;

    optional TCreateVolatileSnapshotTx CreateVolatileSnapshot = 30;
    optional TRefreshVolatileSnapshotTx RefreshVolatileSnapshot = 31;
    optional TDiscardVolatileSnapshotTx DiscardVolatileSnapshot = 32;

    optional TCommitWritesTx CommitWrites = 40;
}

message TEvProposeTransaction {
    optional TTransaction Transaction = 1;
    optional uint64 ProxyFlags = 2;
    optional uint64 ExecTimeoutPeriod = 3;
    optional string UserToken = 4; // already built and serialized user's token
    optional bool StreamResponse = 5;
    optional uint64 CancelAfterMs = 6;
    optional string DatabaseName = 7;
    optional string RequestType = 8;
    optional string PeerName = 9;
}

message TTxProxyTimings {
    optional uint64 WallClockAccepted = 10;
    optional uint64 WallClockResolved = 11;
    optional uint64 WallClockPrepared = 12;
    optional uint64 WallClockPlanned = 13;
    optional uint64 WallClockNow = 14;
    optional uint64 ElapsedPrepareExec = 15;
    optional uint64 ElapsedExecExec = 16;
    optional uint64 ElapsedPrepareComplete = 17;
    optional uint64 ElapsedExecComplete = 18;
}

message TEvProposeTransactionStatus {
    optional uint32 Status = 1;
    optional fixed64 TxId = 2;
    optional fixed64 Step = 3;

    optional NKikimrIssues.TStatusIds.EStatusCode StatusCode = 7;
    repeated Ydb.Issue.IssueMessage Issues = 8;

    optional uint32 ExecutionEngineStatus = 10;
    optional uint32 ExecutionEngineResponseStatus = 11;
    optional bytes ExecutionEngineResponse = 12; // Native document.
    optional bytes MiniKQLErrors = 13;
    optional bytes DataShardErrors = 14;
    repeated fixed64 ComplainingDataShards = 15;
    repeated bytes UnresolvedKeys = 16; // text

    optional TMiniKQLCompileResults MiniKQLCompileResults = 17;
    optional NKikimrMiniKQL.TResult ExecutionEngineEvaluatedResponse = 18;

    optional NKikimrQueryStats.TTxStats TxStats = 19;
    optional TTxProxyTimings Timings = 20;
    optional bool HadFollowerReads = 21;

    optional uint32 SchemeShardStatus = 30;
    optional uint32 SchemeShardReportedId = 31;
    optional bytes SchemeShardReason = 32;
    optional fixed64 SchemeShardTabletId = 33;
    optional uint64 PathId = 34;
    optional uint64 PathCreateTxId = 35;
    optional uint64 PathDropTxId = 36;

    optional fixed64 DataShardTabletId = 40;

    optional bytes SerializedReadTableResponse = 50;
    optional uint32 ReadTableResponseVersion = 51;
}

message TEvNavigate {
    reserved 1; // optional bytes Path = 1;
    reserved 2; // optional uint32 ReadMaterializedFamily = 2;
    reserved 3; // optional bytes TextPath = 3;
    reserved 4; // optional uint64 SchemeShardHint = 4;

    optional NKikimrSchemeOp.TDescribePath DescribePath = 5;

    optional string UserToken = 6; // already built and serialized user's token
    optional string DatabaseName = 7;
}

// This message is no longer used
message TEvNavigateStatus_Deprecated {
    optional uint32 Status = 1;

    optional bytes SchemePrefix = 10;
    optional bytes SchemePart = 11;

    optional uint32 SchemeShardStatus = 30;
    optional uint32 SchemeShardReportedId = 31;

    optional NKikimrSchemeOp.TPathDescription PathDescription = 40;
}

message TEvInvalidateTable {
    optional uint64 SchemeShardId = 1;
    optional uint64 TableId = 2;
}

message TEvExportRequest {
    optional string DatabaseName = 1;
    optional string UserToken = 2;
    oneof Request {
        NKikimrExport.TCreateExportRequest CreateExport = 3;
        NKikimrExport.TGetExportRequest GetExport = 4;
        NKikimrExport.TCancelExportRequest CancelExport = 5;
        NKikimrExport.TForgetExportRequest ForgetExport = 6;
        NKikimrExport.TListExportsRequest ListExports = 7;
    }
}

message TEvExportResponse {
    optional uint32 Status = 1;
    optional string ErrorDescription = 7;
    oneof Response {
        NKikimrExport.TCreateExportResponse CreateExport = 2;
        NKikimrExport.TGetExportResponse GetExport = 3;
        NKikimrExport.TCancelExportResponse CancelExport = 4;
        NKikimrExport.TForgetExportResponse ForgetExport = 5;
        NKikimrExport.TListExportsResponse ListExports = 6;
    }
}
