syntax = "proto3";
import "ydb/core/scheme/protos/pathid.proto";

package NKikimrTxSequenceShard;
option java_package = "ru.yandex.kikimr.proto";
option cc_enable_arenas = true;

/**
 * Used to mark schemeshard communication pipes
 * Every time schemeshard creates a new pipe within a given generation it
 * must increment the Round, this way any messages from outdated pipes will
 * be automatically ignored.
 */
message TEvMarkSchemeShardPipe {
    uint64 SchemeShardId = 1;
    uint64 Generation = 2;
    uint64 Round = 3;
}

message TEvCreateSequence {
    message TSetVal {
        sint64 NextValue = 1;
        bool NextUsed = 2;
    }

    NKikimrProto.TPathID PathId = 1;
    uint64 TxId = 2;
    uint64 TxPartId = 3;
    oneof OptionalMinValue {
        sint64 MinValue = 4; // defaults to 1 or Min<i64>
    }
    oneof OptionalMaxValue {
        sint64 MaxValue = 5; // defaults to Max<i64> or -1
    }
    oneof OptionalStartValue {
        sint64 StartValue = 6; // defaults to MinValue
    }
    oneof OptionalCache {
        uint64 Cache = 7;
    }
    oneof OptionalIncrement {
        sint64 Increment = 8;
    }
    oneof OptionalCycle {
        bool Cycle = 9;
    }
    bool Frozen = 10; // defaults to false
    TSetVal SetVal = 11;
}

message TEvCreateSequenceResult {
    enum EStatus {
        UNKNOWN = 0;
        SUCCESS = 1;
        PIPE_OUTDATED = 2;
        SEQUENCE_ALREADY_EXISTS = 3;
    }

    EStatus Status = 1;
    uint64 Origin = 2;
    uint64 TxId = 3;
    uint64 TxPartId = 4;
}

message TEvAllocateSequence {
    NKikimrProto.TPathID PathId = 1;
    uint64 Cache = 2;
}

message TEvAllocateSequenceResult {
    enum EStatus {
        UNKNOWN = 0;
        SUCCESS = 1;
        PIPE_OUTDATED = 2;
        SEQUENCE_NOT_FOUND = 3;
        SEQUENCE_FROZEN = 4;
        SEQUENCE_MOVED = 5;
        SEQUENCE_OVERFLOW = 6;
    }

    EStatus Status = 1;
    uint64 Origin = 2;
    sint64 AllocationStart = 3;
    uint64 AllocationCount = 4;
    sint64 AllocationIncrement = 5;
    uint64 MovedTo = 6; // moved to a different sequence shard
}

message TEvDropSequence {
    NKikimrProto.TPathID PathId = 1;
    uint64 TxId = 2;
    uint64 TxPartId = 3;
}

message TEvDropSequenceResult {
    enum EStatus {
        UNKNOWN = 0;
        SUCCESS = 1;
        PIPE_OUTDATED = 2;
        SEQUENCE_NOT_FOUND = 3;
    }

    EStatus Status = 1;
    uint64 Origin = 2;
    uint64 TxId = 3;
    uint64 TxPartId = 4;
}

message TEvUpdateSequence {
    NKikimrProto.TPathID PathId = 1;
    uint64 TxId = 2;
    uint64 TxPartId = 3;
    oneof ChangeMinValue {
        sint64 MinValue = 4;
    }
    oneof ChangeMaxValue {
        sint64 MaxValue = 5;
    }
    oneof ChangeStartValue {
        sint64 StartValue = 6;
    }
    oneof ChangeNextValue {
        sint64 NextValue = 7;
    }
    oneof ChangeNextUsed {
        bool NextUsed = 8;
    }
    oneof ChangeCache {
        uint64 Cache = 9;
    }
    oneof ChangeIncrement {
        sint64 Increment = 10;
    }
    oneof ChangeCycle {
        bool Cycle = 11;
    }
}

message TEvUpdateSequenceResult {
    enum EStatus {
        UNKNOWN = 0;
        SUCCESS = 1;
        PIPE_OUTDATED = 2;
        SEQUENCE_NOT_FOUND = 3;
        SEQUENCE_FROZEN = 4;
        SEQUENCE_MOVED = 5;
    }

    EStatus Status = 1;
    uint64 Origin = 2;
    uint64 TxId = 3;
    uint64 TxPartId = 4;
    uint64 MovedTo = 5; // moved to a different sequence shard
}

message TEvFreezeSequence {
    NKikimrProto.TPathID PathId = 1;
    uint64 TxId = 2;
    uint64 TxPartId = 3;
}

message TEvFreezeSequenceResult {
    enum EStatus {
        UNKNOWN = 0;
        SUCCESS = 1;
        PIPE_OUTDATED = 2;
        SEQUENCE_NOT_FOUND = 3;
        SEQUENCE_MOVED = 4;
    }

    EStatus Status = 1;
    uint64 Origin = 2;
    uint64 TxId = 3;
    uint64 TxPartId = 4;
    uint64 MovedTo = 5; // moved to a different sequence shard
    sint64 MinValue = 6;
    sint64 MaxValue = 7;
    sint64 StartValue = 8;
    sint64 NextValue = 9;
    bool NextUsed = 10;
    uint64 Cache = 11;
    sint64 Increment = 12;
    bool Cycle = 13;
}

message TEvRestoreSequence {
    NKikimrProto.TPathID PathId = 1;
    uint64 TxId = 2;
    uint64 TxPartId = 3;
    sint64 MinValue = 4;
    sint64 MaxValue = 5;
    sint64 StartValue = 6;
    sint64 NextValue = 7;
    bool NextUsed = 8;
    uint64 Cache = 9;
    sint64 Increment = 10;
    bool Cycle = 11;
}

message TEvRestoreSequenceResult {
    enum EStatus {
        UNKNOWN = 0;
        SUCCESS = 1;
        PIPE_OUTDATED = 2;
        SEQUENCE_ALREADY_ACTIVE = 3;
    }

    EStatus Status = 1;
    uint64 Origin = 2;
    uint64 TxId = 3;
    uint64 TxPartId = 4;
}

message TEvRedirectSequence {
    NKikimrProto.TPathID PathId = 1;
    uint64 TxId = 2;
    uint64 TxPartId = 3;
    uint64 RedirectTo = 4;
}

message TEvRedirectSequenceResult {
    enum EStatus {
        UNKNOWN = 0;
        SUCCESS = 1;
        PIPE_OUTDATED = 2;
        SEQUENCE_NOT_FOUND = 3;
    }

    EStatus Status = 1;
    uint64 Origin = 2;
    uint64 TxId = 3;
    uint64 TxPartId = 4;
}

message TEvGetSequence {
    NKikimrProto.TPathID PathId = 1;
    uint64 TxId = 2;
    uint64 TxPartId = 3;
}

message TEvGetSequenceResult {
    enum EStatus {
        UNKNOWN = 0;
        SUCCESS = 1;
        PIPE_OUTDATED = 2;
        SEQUENCE_NOT_FOUND = 3;
        SEQUENCE_MOVED = 4;
    }

    EStatus Status = 1;
    uint64 Origin = 2;
    uint64 TxId = 3;
    uint64 TxPartId = 4;
    uint64 MovedTo = 5; // moved to a different sequence shard
    sint64 MinValue = 6;
    sint64 MaxValue = 7;
    sint64 StartValue = 8;
    sint64 NextValue = 9;
    bool NextUsed = 10;
    uint64 Cache = 11;
    sint64 Increment = 12;
    bool Cycle = 13;
}
