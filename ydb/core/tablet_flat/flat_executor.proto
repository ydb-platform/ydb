import "ydb/core/protos/base.proto";
import "ydb/core/protos/tablet.proto";
import "ydb/core/protos/flat_scheme_op.proto";
import "ydb/library/actors/protos/actors.proto";

package NKikimrExecutorFlat;
option java_package = "ru.yandex.kikimr.proto";

message TLargeGlobId {
    // This is the correct way of doing for what StorageInfo is now used.

    required uint32 Group = 1;
    required uint32 Bytes = 2;
    required NKikimrProto.TLogoBlobID Lead = 3;
}

message TPageCollection {
    message TPage {
        required uint32 Id = 1;
        required bytes Body = 2;
    }

    repeated NKikimrProto.TLogoBlobID MetaId = 1; // Replaced by TLargeGlobId

    optional TLargeGlobId LargeGlobId = 6;

    // Page collection may be serialized with some meta blobs (its meanings is defined
    // at application level), may be used for quick cooking on a receiver side,
    // i.e. without extra blob loadings at page collection warming stage. This kind of
    // packed page collection is called HotBundle.

    optional bytes Meta = 2;
    repeated TPage Pages = 5;
}

message TBundle {
    // Bundle, a generic page collections ordered sequence with properties:
    //
    // * PageCollections bundle have to be composed at least with one page collection.
    // * Bundle Id is TLogoBlobID of first meta blob of first page collection.
    // * Bundle holds an opaque entity in general indivisible by page collections to
    //      two or more bundles producing new valid entities of the same kind.

    repeated TPageCollection PageCollections = 2;

    // Legacy opaque can only be used for non-empty screen in TPart bundles,

    optional bytes Legacy = 3;

    // Attached to bundle app. defined data that cannot be placed within parts.

    optional bytes Opaque = 4;

    // An optional epoch used for ordering bundles in logical time

    optional int64 Epoch = 5;
}

message TBundleChange {
    optional NKikimrProto.TLogoBlobID Label = 1;
    optional bytes Legacy = 2;
    optional bytes Opaque = 3;
}

message TBundleDelta {
    optional NKikimrProto.TLogoBlobID Label = 1;
    optional bytes Delta = 2;
}

message TBundleMove {
    optional NKikimrProto.TLogoBlobID Label = 1; 
    optional int64 RebasedEpoch = 2;
    optional uint32 SourceTable = 3;
}

message TTxStatus {
    // Large glob (up to 4GB) that contains tx status data
    optional TLargeGlobId DataId = 1;

    // Epoch which describes data logical time
    optional int64 Epoch = 2;

    // Optional data, useful when e.g. transferring it to followers
    optional bytes Data = 3;
}

message TEvolution {
    required uint32 Tail  = 1;
    required uint32 Head  = 2;
}

message TLogTableSnap {
    optional uint32 Table = 1;
    repeated NKikimrProto.TLogoBlobID DbPartMetaInfoBody = 2; // Legacy, replaced with Bundles
    optional uint32 Legacy0_ = 3;
    optional uint32 Legacy1_ = 4;
    optional uint32 Legacy2_ = 5;
    optional uint32 Legacy3_ = 6;

    optional uint32 CompactionLevel = 7;

    repeated TBundle Bundles = 8;
}

message TLogTxStatusSnap {
    optional uint32 Table = 1;
    repeated TTxStatus TxStatus = 2;
}

message TLogMemSnap {
    optional uint32 Table = 1;
    optional uint32 Generation = 2;
    optional uint32 Step = 3;
    optional int64 Head = 4;
}

message TGcChannelBarrierInfo {
    optional uint32 Channel = 1;
    optional uint32 SetToGeneration = 2;
    optional uint32 SetToStep = 3;
}

message TEmbeddedLogBody {
    optional uint32 Generation = 1;
    optional uint32 Step = 2;
    optional bytes Body = 3;
}

message TBorrowedList {
    optional uint64 Who = 1;
    repeated NKikimrProto.TLogoBlobID What = 2;
}

message TBorrowedPart {
    optional NKikimrProto.TLogoBlobID MetaId = 1;

    repeated uint64 Loaners = 2;
    repeated TBorrowedList BorrowedList = 3;
    repeated NKikimrProto.TLogoBlobID BorrowKeepList = 4;

    optional uint64 Lender = 10;
    repeated NKikimrTabletBase.TTabletStorageInfo StorageInfo = 11;
    optional bool LoanCollected = 12;
    repeated NKikimrProto.TLogoBlobID LoanKeepList = 13;
}

message TSnapWaste {
    optional uint64 Since = 1;  // Stamp of waste accounting age
    optional uint64 Level = 2;  // Total bytes keeping by tablet
    optional uint64 Keep = 3;   // Total bytes designed for KEEP flag
    optional uint64 Drop = 4;   // Total dropped blobs designed for KEEP.
}

message TCompactionState {
    message TKeyValue {
        optional uint64 Key = 1;
        optional bytes Value = 2;
    }

    optional uint32 Table = 1;
    optional NKikimrSchemeOp.ECompactionStrategy Strategy = 2;
    repeated TKeyValue KeyValues = 3; // Key/value mapping (updates or snapshot)
}

message TRowVersionState {
    message TRemovedRange {
        optional NKikimrProto.TRowVersion Lower = 1;
        optional NKikimrProto.TRowVersion Upper = 2;
    }

    optional uint32 Table = 1;
    repeated TRemovedRange RemovedRanges = 2;
}

message TLogSnapshot {
    repeated NKikimrProto.TLogoBlobID NonSnapLogBodies = 1;
    repeated NKikimrProto.TLogoBlobID SchemeInfoBodies = 2;
    repeated TLogTableSnap DbParts = 3;
    repeated TEmbeddedLogBody EmbeddedLogBodies = 4;
    repeated TLogMemSnap TableSnapshoted = 5;
    repeated NKikimrProto.TLogoBlobID BorrowInfoIds = 6;

    repeated NKikimrProto.TLogoBlobID GcSnapDiscovered = 12;
    repeated NKikimrProto.TLogoBlobID GcSnapLeft = 13;
    repeated TGcChannelBarrierInfo GcBarrierInfo = 14;

    optional bytes Legacy0_ = 15;
    optional TEvolution Version = 16;
    optional uint64 Serial = 17; // db change serial at moment of snapshot
    optional TSnapWaste Waste = 18;

    repeated TCompactionState CompactionStates = 19;
    repeated TRowVersionState RowVersionStates = 20;
    repeated TLogTxStatusSnap TxStatusParts = 21;
}

message TTablePartSwitch {
    optional TLogTableSnap IntroducedParts = 1;
    optional TLogMemSnap TableSnapshoted = 2;
    optional uint32 TableId = 3;

    repeated NKikimrProto.TLogoBlobID LeavingBundles = 10;
    repeated TBundleChange ChangedBundles = 11;
    optional TCompactionState CompactionChanges = 12;
    repeated TBundleDelta BundleDeltas = 13;
    optional TRowVersionState RowVersionChanges = 14;
    repeated TBundleMove BundleMoves = 15;

    repeated NKikimrProto.TLogoBlobID LeavingTxStatus = 16;
    optional TLogTxStatusSnap IntroducedTxStatus = 17;
}

message TExternalGcEntry {
    repeated NKikimrProto.TLogoBlobID GcDiscovered = 1;
    repeated NKikimrProto.TLogoBlobID GcLeft = 2;
}

message TFollowerPartSwitchAux {
    message TBySwitch {
        optional NKikimrProto.TLogoBlobID PartSwitchRef = 1;
        repeated TBundle HotBundles = 2;
        repeated TTxStatus HotTxStatus = 3;
    }

    repeated TBySwitch BySwitchAux = 1;
}

message TFollowerAux {
    message TTouchByPageCollection {
        optional NKikimrProto.TLogoBlobID MetaInfoId = 1;
        repeated uint32 TouchedPages = 2;
    }

    repeated TTouchByPageCollection PageCollectionsTouched = 1;

    optional bytes UserAuxUpdate = 2;
}

message TDatabaseBorrowPart {
    message TPartInfo {
        optional TBundle Bundle = 12;
        repeated NKikimrTabletBase.TTabletStorageInfo StorageInfo = 11;
    }

    optional uint64 LenderTablet = 1;
    optional uint32 SourceTable = 2;

    repeated TPartInfo Parts = 3;
    repeated TTxStatus TxStatusParts = 4;
}

message TLeaseInfoMetadata {
    // Actor id of the lease holder, which is an executor actor
    optional NActorsProto.TActorId LeaseHolder = 1;

    // Lease duration in microseconds. Lease holder may perform leader-only
    // tasks up to this duration since the last channel 0 block confirmation,
    // and expects future generations will not interfere.
    optional uint32 LeaseDurationUs = 2;
}
