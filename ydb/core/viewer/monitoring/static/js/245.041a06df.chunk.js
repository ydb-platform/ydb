"use strict";(globalThis.webpackChunkydb_embedded_ui=globalThis.webpackChunkydb_embedded_ui||[]).push([[245],{50245:(e,t,n)=>{n.d(t,{registerYQLCompletionItemProvider:()=>J});var i=n(80781),s=n(92727);const o={suggestTemplates:0,suggestPragmas:1,suggestEntity:2,suggestAllColumns:3,suggestColumns:4,suggestColumnAliases:5,suggestVariables:6,suggestTableIndexes:7,suggestTableHints:8,suggestEntitySettings:9,suggestKeywords:10,suggestAggregateFunctions:11,suggestTableFunctions:12,suggestWindowFunctions:13,suggestFunctions:14,suggestSimpleTypes:15,suggestUdfs:16};function a(e){return o[e]}const r="abcdefghijklmnopqrstuvwxyz";function l(e){const t=r[e];if(t)return t;const n=Math.floor(e/26),i=e%26;return r.slice(-1).repeat(n)+r[i]}function u(e){return e.startsWith("$")}function c(e=[]){return Array.from(new Set(e))}const m=/[\s'"-/@]/;function g(e){if(e.startsWith("`")&&e.endsWith("`"))return e;let t=e;return e.match(m)&&(t=`\`${e}\``),t}function d(e){let t=0,n=e.length;return e.startsWith("`")&&(t=1),e.endsWith("`")&&(n=-1),e.slice(t,n)}function T(e,t){const n=e.slice(0,t).split("\n");return{lineNumber:n.length,column:n[n.length-1].length+1}}const p=/([^\s]+)$/;function S(e,t,n=p){const i=e.slice(0,t).match(n);return i&&i[1]?i[1]:""}const I=/([^\\/\s`]+)$/;class h{constructor({getQueryParser:e,getUdfs:t,getSimpleTypes:n,getPragmas:i,getWindowFunctions:s,getTableFunctions:o,getAggregateFunctions:a,getSimpleFunctions:r,getEntitySettings:l,fetchEntities:u,fetchEntityColumns:c}){e&&(this.getQueryParser=e),t&&(this.getUdfs=t),n&&(this.getSimpleTypes=n),i&&(this.getPragmas=i),s&&(this.getWindowFunctions=s),o&&(this.getTableFunctions=o),a&&(this.getAggregateFunctions=a),r&&(this.getSimpleFunctions=r),l&&(this.getEntitySettings=l),u&&(this.fetchEntities=u),c&&(this.fetchEntityColumns=c)}async getSuggestions(e,t){const n=await this.parseInput(e,t);let i=[],o=[],r=[],m=[],p=[],h=[],y=[],f=[],C=[],A=[],b=[];const L=function(e,t){const n=T(e,t),i=S(e,t,I);return{startColumn:n.column-i.length,startLineNumber:n.lineNumber,endColumn:n.column,endLineNumber:n.lineNumber}}(e,t),D=S(e,t);if(n.suggestSimpleTypes){const e=await this.getSimpleTypes(D);y=await async function(e,t=[]){return t.map((t=>({label:t,insertText:t,kind:s.eo.CompletionItemKind.TypeParameter,detail:"Type",range:e,sortText:l(a("suggestSimpleTypes"))})))}(L,e)}if(n.suggestEntity){const e=await this.fetchEntities(D,n.suggestEntity);i=await async function(e,t,n=""){const i=null===n||void 0===n?void 0:n.startsWith("`");return t.reduce(((t,{value:n,detail:o,isDir:r})=>{const u=r?`${n}/`:n;let c;r&&!i&&(c=`\`${u}$0\``);const m=t.length;return t.push({label:u,insertText:null!==c&&void 0!==c?c:u,kind:r?s.eo.CompletionItemKind.Folder:s.eo.CompletionItemKind.Text,insertTextRules:c?s.eo.CompletionItemInsertTextRule.InsertAsSnippet:s.eo.CompletionItemInsertTextRule.None,detail:o,range:e,command:u.endsWith("/")?{id:"editor.action.triggerSuggest",title:""}:void 0,sortText:l(a("suggestEntity"))+l(m)}),t}),[])}(L,e,D)}if(n.suggestVariables&&(b=function(e,t=[]){return t.map((({name:t})=>{const n="$"+t;return{label:n,insertText:n,kind:s.eo.CompletionItemKind.Variable,detail:"Variable",range:e,sortText:l(a("suggestVariables"))}}))}(L,n.suggestVariables)),n.suggestFunctions){const e=await this.getSimpleFunctions(D);o=await async function(e,t=[]){return t.map((t=>({label:t,insertText:t,kind:s.eo.CompletionItemKind.Function,detail:"Function",range:e,sortText:l(a("suggestFunctions"))})))}(L,e)}if(n.suggestAggregateFunctions){const e=await this.getAggregateFunctions(D);r=await async function(e,t=[]){return t.map((t=>({label:t,insertText:t,kind:s.eo.CompletionItemKind.Function,detail:"Aggregate function",range:e,sortText:l(a("suggestAggregateFunctions"))})))}(L,e)}if(n.suggestWindowFunctions){const e=await this.getWindowFunctions(D);m=await async function(e,t=[]){return t.map((t=>({label:t,insertText:t,kind:s.eo.CompletionItemKind.Function,detail:"Window function",range:e,sortText:l(a("suggestWindowFunctions"))})))}(L,e)}if(n.suggestTableFunctions){const e=await this.getTableFunctions(D);p=await async function(e,t=[]){return t.map((t=>({label:t,insertText:t,kind:s.eo.CompletionItemKind.Function,detail:"Table function",range:e,sortText:l(a("suggestTableFunctions"))})))}(L,e)}if(n.suggestUdfs){const e=await this.getUdfs(D);h=await async function(e,t=[]){return t.map((t=>({label:t,insertText:t,kind:s.eo.CompletionItemKind.Function,detail:"UDF",range:e,sortText:l(a("suggestUdfs"))})))}(L,e)}if(n.suggestPragmas){const e=await this.getPragmas(D);f=await async function(e,t=[]){return t.map((t=>({label:t,insertText:t,kind:s.eo.CompletionItemKind.Module,detail:"Pragma",range:e,sortText:l(a("suggestPragmas"))})))}(L,e)}if(n.suggestEntitySettings){const e=await this.getEntitySettings(n.suggestEntitySettings);C=await async function(e,t=[]){return t.map((t=>({label:t,insertText:t,kind:s.eo.CompletionItemKind.Property,detail:"Setting",range:e,sortText:l(a("suggestEntitySettings"))})))}(L,e)}const F=function(e,t=[]){return t.map((t=>({label:t.value,insertText:t.value,kind:s.eo.CompletionItemKind.Keyword,detail:"Keyword",range:e,sortText:l(a("suggestKeywords"))})))}(L,n.suggestKeywords),v=await function(e,t=[]){return t.map((t=>({label:t.name,insertText:t.name,kind:s.eo.CompletionItemKind.Variable,detail:"Column alias",range:e,sortText:l(a("suggestColumnAliases"))})))}(L,n.suggestColumnAliases);if(n.suggestColumns){const e=function(e){var t;return c(null===(t=null===e||void 0===e?void 0:e.tables)||void 0===t?void 0:t.map((e=>e.name))).filter((e=>!u(e)))}(n.suggestColumns),t=await this.fetchEntityColumns(e);A=await async function(e,t,n,i){var o;if(!(null===t||void 0===t?void 0:t.tables))return[];const r=[],m=t.all?[]:void 0,T=t.tables.length>1,p=c(t.tables.map((e=>e.name))).filter(u),S=[];p.length&&p.forEach((e=>{var t,i,s,o;const a=null!==(o=null===(s=null===(i=null===(t=null===n||void 0===n?void 0:n.find((t=>e.slice(1)===t.name)))||void 0===t?void 0:t.value)||void 0===i?void 0:i.columns)||void 0===s?void 0:s.map((t=>({name:t,parent:e}))))&&void 0!==o?o:[];S.push(...a)}));const I=t.tables.reduce(((e,t)=>{const n=t.columns;return n&&e.push(...n.map((e=>({name:e,parent:t.name})))),e}),[]),h=null===(o=t.tables)||void 0===o?void 0:o.reduce(((e,t)=>{var n;const i=d(t.name),s=null!==(n=e[i])&&void 0!==n?n:[];return t.alias&&s.push(t.alias),e[i]=s,e}),{});if([...i,...S,...I].forEach((t=>{const n=g(t.name),i=h[d(t.parent)],o=r.length;if(null===i||void 0===i?void 0:i.length)i.forEach((i=>{const u=`${i}.${n}`;r.push({label:{label:u,description:t.detail},insertText:u,kind:s.eo.CompletionItemKind.Variable,detail:"Column",range:e,sortText:l(a("suggestColumns"))+l(o)}),null===m||void 0===m||m.push(u)}));else{let i=n;T&&(i=`${g(t.parent)}.${n}`),r.push({label:{label:i,description:t.detail},insertText:i,kind:s.eo.CompletionItemKind.Variable,detail:"Column",range:e,sortText:l(a("suggestColumns"))+l(o)}),null===m||void 0===m||m.push(i)}})),m&&m.length>1){const t=m.join(", ");r.push({label:t,insertText:t,kind:s.eo.CompletionItemKind.Variable,range:e,sortText:l(a("suggestAllColumns"))})}return r}(L,n.suggestColumns,n.suggestVariables,t)}return[...i,...o,...m,...p,...h,...y,...f,...v,...A,...F,...r,...C,...b]}async parseInput(e,t){const n=T(e,t);return(await this.getQueryParser())(e,{line:n.lineNumber,column:n.column})}async getQueryParser(){const{parseYqlQuery:e}=await Promise.resolve().then(n.bind(n,41614));return e}async getSimpleTypes(e){return[]}async getUdfs(e){return[]}async getPragmas(e){return[]}async getWindowFunctions(e){return[]}async getTableFunctions(e){return[]}async getAggregateFunctions(e){return[]}async getSimpleFunctions(e){return[]}async getEntitySettings(e){return[]}async fetchEntities(e,t){return[]}async fetchEntityColumns(e){return[]}}function y(e={}){const t=new h(e);return async(e,n,i,s)=>({suggestions:await t.getSuggestions(e.getValue(),e.getOffsetAt(n))})}const f=new Map;function C(e,t,n){!function(e){const t=f.get(e);t&&t.dispose()}(e);const s=i.languages.registerCompletionItemProvider(e,{triggerCharacters:t,provideCompletionItems:y(n)});f.set(e,s)}var A=n(23195);const b=["Text","Bytes","String","Bool","Int32","Uint32","Int64","Uint64","Float","Double","Void","Yson","Utf8","Unit","Json","Date","Datetime","Timestamp","Interval","Date32","Datetime64","Timestamp64","Interval64","TzDate32","TzDatetime64","TzTimestamp64","Null","Int8","Uint8","Int16","Uint16","TzDate","TzDatetime","TzTimestamp","Uuid","EmptyList","EmptyDict","JsonDocument","DyNumber"],L=["CAST","COALESCE","LENGTH","LEN","SUBSTRING","FIND","RFIND","StartsWith","EndsWith","IF","NANVL","Random","RandomNumber","RandomUuid","CurrentUtcDate","CurrentUtcDatetime","CurrentUtcTimestamp","CurrentTzDate","CurrentTzDatetime","CurrentTzTimestamp","AddTimezone","RemoveTimezone","MAX_OF","MIN_OF","GREATEST","LEAST","AsTuple","AsStruct","AsList","AsDict","AsSet","AsListStrict","AsDictStrict","AsSetStrict","Variant","AsVariant","Enum","AsEnum","AsTagged","Untag","TableRow","JoinTableRow","Ensure","EnsureType","EnsureConvertibleTo","ToBytes","FromBytes","ByteAt","TestBit","ClearBit","SetBit","FlipBit","Abs","Just","Unwrap","Nothing","Callable","StaticMap","StaticZip","ListCreate","AsListStrict","ListLength","ListHasItems","ListCollect","ListSort","ListSortAsc","ListSortDesc","ListExtend","ListExtendStrict","ListUnionAll","ListZip","ListZipAll","ListEnumerate","ListReverse","ListSkip","ListTake","ListIndexOf","ListMap","ListFilter","ListFlatMap","ListNotNull","ListFlatten","ListUniq","ListAny","ListAll","ListHas","ListHead","ListLast","ListMin","ListMax","ListSum","ListAvg","ListFold","ListFold1","ListFoldMap","ListFold1Map","ListFromRange","ListReplicate","ListConcat","ListExtract","ListTakeWhile","ListSkipWhile","ListAggregate","ToDict","ToMultiDict","ToSet","DictCreate","SetCreate","DictLength","DictHasItems","DictItems","DictKeys","DictPayloads","DictLookup","DictContains","DictAggregate","SetIsDisjoint","SetIntersection","SetIncludes","SetUnion","SetDifference","SetSymmetricDifference","TryMember","ExpandStruct","AddMember","RemoveMember","ForceRemoveMember","ChooseMembers","RemoveMembers","ForceRemoveMembers","CombineMembers","FlattenMembers","StructMembers","RenameMembers","ForceRenameMembers","GatherMembers","SpreadMembers","ForceSpreadMembers","FormatType","ParseType","TypeOf","InstanceOf","DataType","OptionalType","ListType","StreamType","DictType","TupleType","StructType","VariantType","ResourceType","CallableType","GenericType","UnitType","VoidType","OptionalItemType","ListItemType","StreamItemType","DictKeyType","DictPayloadType","TupleElementType","StructMemberType","CallableResultType","CallableArgumentType","VariantUnderlyingType","JSON_EXISTS","JSON_VALUE","JSON_QUERY"],D=["COUNT","MIN","MAX","SUM","AVG","COUNT_IF","SUM_IF","AVG_IF","SOME","CountDistinctEstimate","HyperLogLog","AGGREGATE_LIST","AGGREGATE_LIST_DISTINCT","AGG_LIST","AGG_LIST_DISTINCT","MAX_BY","MIN_BY","AGGREGATE_BY","MULTI_AGGREGATE_BY","TOP","BOTTOM","TOP_BY","BOTTOM_BY","TOPFREQ","MODE","STDDEV","VARIANCE","CORRELATION","COVARIANCE","PERCENTILE","MEDIAN","HISTOGRAM","LogarithmicHistogram","LogHistogram","LinearHistogram","BOOL_AND","BOOL_OR","BOOL_XOR","BIT_AND","BIT_OR","BIT_XOR","SessionStart"],F=Object.entries({DateTime:["EndOfMonth","Format","FromMicroseconds","FromMilliseconds","FromSeconds","GetDayOfMonth","GetDayOfWeek","GetDayOfWeekName","GetDayOfYear","GetHour","GetMicrosecondOfSecond","GetMillisecondOfSecond","GetMinute","GetMonth","GetMonthName","GetSecond","GetTimezoneId","GetTimezoneName","GetWeekOfYear","GetWeekOfYearIso8601","GetYear","IntervalFromDays","IntervalFromHours","IntervalFromMicroseconds","IntervalFromMilliseconds","IntervalFromMinutes","IntervalFromSeconds","MakeDate","MakeDatetime","MakeTimestamp","MakeTzDate","MakeTzDatetime","MakeTzTimestamp","Parse","ParseHttp","ParseIso8601","ParseRfc822","ParseX509","ShiftMonths","ShiftQuarters","ShiftYears","Split","StartOf","StartOfDay","StartOfMonth","StartOfQuarter","StartOfWeek","StartOfYear","TimeOfDay","ToDays","ToHours","ToMicroseconds","ToMilliseconds","ToMinutes","ToSeconds","Update"],Dsv:["Parse","ReadRecord","Serialize"],String:["AsciiToLower","AsciiToTitle","AsciiToUpper","Base32Decode","Base32Encode","Base32StrictDecode","Base64Decode","Base64Encode","Base64EncodeUrl","Base64StrictDecode","Bin","BinText","CgiEscape","CgiUnescape","Collapse","CollapseText","Contains","DecodeHtml","EncodeHtml","EndsWith","EndsWithIgnoreCase","EscapeC","FromByteList","HasPrefix","HasPrefixIgnoreCase","HasSuffix","HasSuffixIgnoreCase","Hex","HexDecode","HexEncode","HexText","HumanReadableBytes","HumanReadableDuration","HumanReadableQuantity","IsAscii","IsAsciiAlnum","IsAsciiAlpha","IsAsciiDigit","IsAsciiHex","IsAsciiLower","IsAsciiSpace","IsAsciiUpper","JoinFromList","LeftPad","LevensteinDistance","Prec","RemoveAll","RemoveFirst","RemoveLast","ReplaceAll","ReplaceFirst","ReplaceLast","RightPad","SBin","SHex","SplitToList","StartsWith","StartsWithIgnoreCase","Strip","ToByteList","UnescapeC"],Unicode:["Find","Fold","FromCodePointList","GetLength","IsAlnum","IsAlpha","IsAscii","IsDigit","IsHex","IsLower","IsSpace","IsUnicodeSet","IsUpper","IsUtf","JoinFromList","LevensteinDistance","Normalize","NormalizeNFC","NormalizeNFD","NormalizeNFKC","NormalizeNFKD","RFind","RemoveAll","RemoveFirst","RemoveLast","ReplaceAll","ReplaceFirst","ReplaceLast","Reverse","SplitToList","Strip","Substring","ToCodePointList","ToLower","ToTitle","ToUint64","ToUpper","Translit","TryToUint64"],Url:["BuildQueryString","CanBePunycodeHostName","CutQueryStringAndFragment","CutScheme","CutWWW","CutWWW2","Decode","Encode","ForceHostNameToPunycode","ForcePunycodeToHostName","GetCGIParam","GetDomain","GetDomainLevel","GetFragment","GetHost","GetHostPort","GetOwner","GetPath","GetPort","GetScheme","GetSchemeHost","GetSchemeHostPort","GetSignificantDomain","GetTLD","GetTail","HostNameToPunycode","IsAllowedByRobotsTxt","IsKnownTLD","IsWellKnownTLD","Normalize","NormalizeWithDefaultHttpScheme","Parse","PunycodeToHostName","QueryStringToDict","QueryStringToList"],Yson:["Attributes","Contains","ConvertTo","ConvertToBool","ConvertToBoolDict","ConvertToBoolList","ConvertToDict","ConvertToDouble","ConvertToDoubleDict","ConvertToDoubleList","ConvertToInt64","ConvertToInt64Dict","ConvertToInt64List","ConvertToList","ConvertToString","ConvertToStringDict","ConvertToStringList","ConvertToUint64","ConvertToUint64Dict","ConvertToUint64List","Equals","From","GetHash","GetLength","IsBool","IsDict","IsDouble","IsEntity","IsInt64","IsList","IsString","IsUint64","Lookup","LookupBool","LookupDict","LookupDouble","LookupInt64","LookupList","LookupString","LookupUint64","Options","Parse","ParseJson","ParseJsonDecodeUtf8","Serialize","SerializeJson","SerializePretty","SerializeText","WithAttributes","YPath","YPathBool","YPathDict","YPathDouble","YPathInt64","YPathList","YPathString","YPathUint64"],HyperLogLog:["AddValue","Create","Deserialize","GetResult","Merge","Serialize"],Hyperscan:["BacktrackingGrep","BacktrackingMatch","Capture","Grep","Match","MultiGrep","MultiMatch","Replace"],Ip:["ConvertToIPv6","FromString","GetSubnet","GetSubnetByMask","IsEmbeddedIPv4","IsIPv4","IsIPv6","SubnetFromString","SubnetMatch","SubnetToString","ToFixedIPv6String","ToString"],Json:["BoolAsJsonNode","CompilePath","DoubleAsJsonNode","JsonAsJsonNode","JsonDocumentSqlExists","JsonDocumentSqlQuery","JsonDocumentSqlQueryConditionalWrap","JsonDocumentSqlQueryWrap","JsonDocumentSqlTryExists","JsonDocumentSqlValueBool","JsonDocumentSqlValueConvertToUtf8","JsonDocumentSqlValueInt64","JsonDocumentSqlValueNumber","JsonDocumentSqlValueUtf8","Parse","Serialize","SerializeToJsonDocument","SqlExists","SqlQuery","SqlQueryConditionalWrap","SqlQueryWrap","SqlTryExists","SqlValueBool","SqlValueConvertToUtf8","SqlValueInt64","SqlValueNumber","SqlValueUtf8","Utf8AsJsonNode"],Math:["Abs","Acos","Asin","Asinh","Atan","Atan2","Cbrt","Ceil","Cos","Cosh","E","Eps","Erf","ErfInv","ErfcInv","Exp","Exp2","Fabs","Floor","Fmod","FuzzyEquals","Hypot","IsFinite","IsInf","IsNaN","Ldexp","Lgamma","Log","Log10","Log2","Mod","NearbyInt","Pi","Pow","Rem","Remainder","Rint","Round","RoundDownward","RoundToNearest","RoundTowardZero","RoundUpward","Sigmoid","Sin","Sinh","Sqrt","Tan","Tanh","Tgamma","Trunc"],Pire:["Capture","Grep","Match","MultiGrep","MultiMatch","Replace"],Re2:["Capture","Count","Escape","FindAndConsume","Grep","Match","Options","PatternFromLike","Replace"],Re2posix:["Capture","Count","Escape","FindAndConsume","Grep","Match","Options","PatternFromLike","Replace"],Digest:["Argon2","Blake2B","CityHash","CityHash128","Crc32c","Crc64","FarmHashFingerprint","FarmHashFingerprint128","FarmHashFingerprint2","FarmHashFingerprint32","FarmHashFingerprint64","Fnv32","Fnv64","HighwayHash","IntHash64","Md5HalfMix","Md5Hex","Md5Raw","MurMurHash","MurMurHash2A","MurMurHash2A32","MurMurHash32","NumericHash","Sha1","Sha256","SipHash","SuperFastHash","XXH3","XXH3_128"],Histogram:["CalcLowerBound","CalcLowerBoundSafe","CalcUpperBound","CalcUpperBoundSafe","GetSumAboveBound","GetSumBelowBound","GetSumInRange","Normalize","Print","ToCumulativeDistributionFunction"]}).reduce(((e,[t,n])=>{const i=n.map((e=>`${t}::${e}`));return e.concat(i)}),[]),v=["ROW_NUMBER","LAG","LEAD","FIRST_VALUE","LAST_VALUE","RANK","DENSE_RANK","SessionState"],E=[],R=["TablePathPrefix","Warning"],M={table:["AUTO_PARTITIONING_BY_SIZE","AUTO_PARTITIONING_PARTITION_SIZE_MB","AUTO_PARTITIONING_BY_LOAD","AUTO_PARTITIONING_MIN_PARTITIONS_COUNT","AUTO_PARTITIONING_MAX_PARTITIONS_COUNT","UNIFORM_PARTITIONS","READ_REPLICAS_SETTINGS","TTL","KEY_BLOOM_FILTER","STORE"],view:["security_invoker"],topic:["min_active_partitions","partition_count_limit","retention_period","retention_storage_mb","partition_write_speed_bytes_per_second","partition_write_burst_bytes","metering_mode"],object:[],user:[],group:[],externalDataSource:[],externalTable:[],tableStore:[],replication:["ENDPOINT","DATABASE","USER","PASSWORD"],tableIndex:[],topicConsumer:["important","read_from"]},N={externalDataSource:["external_data_source"],externalTable:["external_table"],replication:["replication"],table:["table","column_table"],tableStore:["column_store"],topic:["pers_queue_group"],view:["view"],tableIndex:["table_index","index"]},P=["dir","unknown","ext_sub_domain"],_=["dir","ext_sub_domain"];function x(e){let t=0,n=e.length;return e.startsWith("`")&&(t=1),e.endsWith("`")&&(n=-1),e.slice(t,n)}function O(e){return e.startsWith("/")?e.slice(1):e}async function w(){return L}async function G(){return v}async function U(){return E}async function B(){return D}async function H(){return R}async function k(e){return M[e]}async function W(){return F}async function V(){return b}function z(e){const{PKIndex:t,NotNull:n,Default:i}=e,s=[];void 0!==t&&s.push(`PK${t}`),n&&s.push("NN"),i&&s.push("Default");return s.length?s.join(", "):""}function K(e,t){var n;return null!==(n=e.map((e=>{let n=x(e);return n.endsWith("/")||(n=`${n}/`),function(e="",t){const n=x(e);if(!n.startsWith("/"))return n;let i=O(n);const s=O(t);return i.startsWith(s)&&(i=i.slice(s.length)),O(i)}(n,t)})))&&void 0!==n?n:[]}function J(e){C(A.l,[" ",".","`","(","/"],{fetchEntities:async(t,n)=>{var i;const s=await window.api.viewer.autocomplete({database:e,prefix:x(t),limit:1e3});if(!s.Success||!s.Result.Entities)return[];const o=function(e,t){const n=t.reduce(((e,t)=>{const n=N[t];return n&&n.forEach((t=>e.add(t))),e}),new Set(P));return null===e||void 0===e?void 0:e.filter((({Type:e})=>n.has(e)))}(s.Result.Entities,n);return null!==(i=null===o||void 0===o?void 0:o.map((({Name:e,Type:t})=>{return{value:e,detail:t,isDir:(n=t,_.includes(n))};var n})))&&void 0!==i?i:[]},fetchEntityColumns:async t=>{let n=[];const i=K(t,e),s=await window.api.viewer.autocomplete({database:e,table:i,limit:1e3});var o;s.Success&&(n=null!==(o=s.Result.Entities)&&void 0!==o?o:[]);const a=[];return n.forEach((e=>{(function(e){return"column"===e.Type})(e)&&a.push({name:e.Name,detail:z(e),parent:e.Parent})})),a},getEntitySettings:k,getPragmas:H,getSimpleFunctions:w,getAggregateFunctions:B,getTableFunctions:U,getWindowFunctions:G,getUdfs:W,getSimpleTypes:V})}}}]);