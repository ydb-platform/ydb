"use strict";(globalThis.webpackChunkydb_embedded_ui=globalThis.webpackChunkydb_embedded_ui||[]).push([[4024],{94024:(e,t,n)=>{n.d(t,{registerYQLCompletionItemProvider:()=>B});var i=n(67913),s=n(23195),a=n(80781);const o=["Text","Bytes","String","Bool","Int32","Uint32","Int64","Uint64","Float","Double","Void","Yson","Utf8","Unit","Json","Date","Datetime","Timestamp","Interval","Date32","Datetime64","Timestamp64","Interval64","TzDate32","TzDatetime64","TzTimestamp64","Null","Int8","Uint8","Int16","Uint16","TzDate","TzDatetime","TzTimestamp","Uuid","EmptyList","EmptyDict","JsonDocument","DyNumber"],r=["CAST","COALESCE","LENGTH","LEN","SUBSTRING","FIND","RFIND","StartsWith","EndsWith","IF","NANVL","Random","RandomNumber","RandomUuid","CurrentUtcDate","CurrentUtcDatetime","CurrentUtcTimestamp","CurrentTzDate","CurrentTzDatetime","CurrentTzTimestamp","AddTimezone","RemoveTimezone","MAX_OF","MIN_OF","GREATEST","LEAST","AsTuple","AsStruct","AsList","AsDict","AsSet","AsListStrict","AsDictStrict","AsSetStrict","Variant","AsVariant","Enum","AsEnum","AsTagged","Untag","TableRow","JoinTableRow","Ensure","EnsureType","EnsureConvertibleTo","ToBytes","FromBytes","ByteAt","TestBit","ClearBit","SetBit","FlipBit","Abs","Just","Unwrap","Nothing","Callable","StaticMap","StaticZip","ListCreate","AsListStrict","ListLength","ListHasItems","ListCollect","ListSort","ListSortAsc","ListSortDesc","ListExtend","ListExtendStrict","ListUnionAll","ListZip","ListZipAll","ListEnumerate","ListReverse","ListSkip","ListTake","ListIndexOf","ListMap","ListFilter","ListFlatMap","ListNotNull","ListFlatten","ListUniq","ListAny","ListAll","ListHas","ListHead","ListLast","ListMin","ListMax","ListSum","ListAvg","ListFold","ListFold1","ListFoldMap","ListFold1Map","ListFromRange","ListReplicate","ListConcat","ListExtract","ListTakeWhile","ListSkipWhile","ListAggregate","ToDict","ToMultiDict","ToSet","DictCreate","SetCreate","DictLength","DictHasItems","DictItems","DictKeys","DictPayloads","DictLookup","DictContains","DictAggregate","SetIsDisjoint","SetIntersection","SetIncludes","SetUnion","SetDifference","SetSymmetricDifference","TryMember","ExpandStruct","AddMember","RemoveMember","ForceRemoveMember","ChooseMembers","RemoveMembers","ForceRemoveMembers","CombineMembers","FlattenMembers","StructMembers","RenameMembers","ForceRenameMembers","GatherMembers","SpreadMembers","ForceSpreadMembers","FormatType","ParseType","TypeOf","InstanceOf","DataType","OptionalType","ListType","StreamType","DictType","TupleType","StructType","VariantType","ResourceType","CallableType","GenericType","UnitType","VoidType","OptionalItemType","ListItemType","StreamItemType","DictKeyType","DictPayloadType","TupleElementType","StructMemberType","CallableResultType","CallableArgumentType","VariantUnderlyingType","JSON_EXISTS","JSON_VALUE","JSON_QUERY"],l=["COUNT","MIN","MAX","SUM","AVG","COUNT_IF","SUM_IF","AVG_IF","SOME","CountDistinctEstimate","HyperLogLog","AGGREGATE_LIST","AGGREGATE_LIST_DISTINCT","AGG_LIST","AGG_LIST_DISTINCT","MAX_BY","MIN_BY","AGGREGATE_BY","MULTI_AGGREGATE_BY","TOP","BOTTOM","TOP_BY","BOTTOM_BY","TOPFREQ","MODE","STDDEV","VARIANCE","CORRELATION","COVARIANCE","PERCENTILE","MEDIAN","HISTOGRAM","LogarithmicHistogram","LogHistogram","LinearHistogram","BOOL_AND","BOOL_OR","BOOL_XOR","BIT_AND","BIT_OR","BIT_XOR","SessionStart"],u=Object.entries({DateTime:["EndOfMonth","Format","FromMicroseconds","FromMilliseconds","FromSeconds","GetDayOfMonth","GetDayOfWeek","GetDayOfWeekName","GetDayOfYear","GetHour","GetMicrosecondOfSecond","GetMillisecondOfSecond","GetMinute","GetMonth","GetMonthName","GetSecond","GetTimezoneId","GetTimezoneName","GetWeekOfYear","GetWeekOfYearIso8601","GetYear","IntervalFromDays","IntervalFromHours","IntervalFromMicroseconds","IntervalFromMilliseconds","IntervalFromMinutes","IntervalFromSeconds","MakeDate","MakeDatetime","MakeTimestamp","MakeTzDate","MakeTzDatetime","MakeTzTimestamp","Parse","ParseHttp","ParseIso8601","ParseRfc822","ParseX509","ShiftMonths","ShiftQuarters","ShiftYears","Split","StartOf","StartOfDay","StartOfMonth","StartOfQuarter","StartOfWeek","StartOfYear","TimeOfDay","ToDays","ToHours","ToMicroseconds","ToMilliseconds","ToMinutes","ToSeconds","Update"],Dsv:["Parse","ReadRecord","Serialize"],String:["AsciiToLower","AsciiToTitle","AsciiToUpper","Base32Decode","Base32Encode","Base32StrictDecode","Base64Decode","Base64Encode","Base64EncodeUrl","Base64StrictDecode","Bin","BinText","CgiEscape","CgiUnescape","Collapse","CollapseText","Contains","DecodeHtml","EncodeHtml","EndsWith","EndsWithIgnoreCase","EscapeC","FromByteList","HasPrefix","HasPrefixIgnoreCase","HasSuffix","HasSuffixIgnoreCase","Hex","HexDecode","HexEncode","HexText","HumanReadableBytes","HumanReadableDuration","HumanReadableQuantity","IsAscii","IsAsciiAlnum","IsAsciiAlpha","IsAsciiDigit","IsAsciiHex","IsAsciiLower","IsAsciiSpace","IsAsciiUpper","JoinFromList","LeftPad","LevensteinDistance","Prec","RemoveAll","RemoveFirst","RemoveLast","ReplaceAll","ReplaceFirst","ReplaceLast","RightPad","SBin","SHex","SplitToList","StartsWith","StartsWithIgnoreCase","Strip","ToByteList","UnescapeC"],Unicode:["Find","Fold","FromCodePointList","GetLength","IsAlnum","IsAlpha","IsAscii","IsDigit","IsHex","IsLower","IsSpace","IsUnicodeSet","IsUpper","IsUtf","JoinFromList","LevensteinDistance","Normalize","NormalizeNFC","NormalizeNFD","NormalizeNFKC","NormalizeNFKD","RFind","RemoveAll","RemoveFirst","RemoveLast","ReplaceAll","ReplaceFirst","ReplaceLast","Reverse","SplitToList","Strip","Substring","ToCodePointList","ToLower","ToTitle","ToUint64","ToUpper","Translit","TryToUint64"],Url:["BuildQueryString","CanBePunycodeHostName","CutQueryStringAndFragment","CutScheme","CutWWW","CutWWW2","Decode","Encode","ForceHostNameToPunycode","ForcePunycodeToHostName","GetCGIParam","GetDomain","GetDomainLevel","GetFragment","GetHost","GetHostPort","GetOwner","GetPath","GetPort","GetScheme","GetSchemeHost","GetSchemeHostPort","GetSignificantDomain","GetTLD","GetTail","HostNameToPunycode","IsAllowedByRobotsTxt","IsKnownTLD","IsWellKnownTLD","Normalize","NormalizeWithDefaultHttpScheme","Parse","PunycodeToHostName","QueryStringToDict","QueryStringToList"],Yson:["Attributes","Contains","ConvertTo","ConvertToBool","ConvertToBoolDict","ConvertToBoolList","ConvertToDict","ConvertToDouble","ConvertToDoubleDict","ConvertToDoubleList","ConvertToInt64","ConvertToInt64Dict","ConvertToInt64List","ConvertToList","ConvertToString","ConvertToStringDict","ConvertToStringList","ConvertToUint64","ConvertToUint64Dict","ConvertToUint64List","Equals","From","GetHash","GetLength","IsBool","IsDict","IsDouble","IsEntity","IsInt64","IsList","IsString","IsUint64","Lookup","LookupBool","LookupDict","LookupDouble","LookupInt64","LookupList","LookupString","LookupUint64","Options","Parse","ParseJson","ParseJsonDecodeUtf8","Serialize","SerializeJson","SerializePretty","SerializeText","WithAttributes","YPath","YPathBool","YPathDict","YPathDouble","YPathInt64","YPathList","YPathString","YPathUint64"],HyperLogLog:["AddValue","Create","Deserialize","GetResult","Merge","Serialize"],Hyperscan:["BacktrackingGrep","BacktrackingMatch","Capture","Grep","Match","MultiGrep","MultiMatch","Replace"],Ip:["ConvertToIPv6","FromString","GetSubnet","GetSubnetByMask","IsEmbeddedIPv4","IsIPv4","IsIPv6","SubnetFromString","SubnetMatch","SubnetToString","ToFixedIPv6String","ToString"],Json:["BoolAsJsonNode","CompilePath","DoubleAsJsonNode","JsonAsJsonNode","JsonDocumentSqlExists","JsonDocumentSqlQuery","JsonDocumentSqlQueryConditionalWrap","JsonDocumentSqlQueryWrap","JsonDocumentSqlTryExists","JsonDocumentSqlValueBool","JsonDocumentSqlValueConvertToUtf8","JsonDocumentSqlValueInt64","JsonDocumentSqlValueNumber","JsonDocumentSqlValueUtf8","Parse","Serialize","SerializeToJsonDocument","SqlExists","SqlQuery","SqlQueryConditionalWrap","SqlQueryWrap","SqlTryExists","SqlValueBool","SqlValueConvertToUtf8","SqlValueInt64","SqlValueNumber","SqlValueUtf8","Utf8AsJsonNode"],Math:["Abs","Acos","Asin","Asinh","Atan","Atan2","Cbrt","Ceil","Cos","Cosh","E","Eps","Erf","ErfInv","ErfcInv","Exp","Exp2","Fabs","Floor","Fmod","FuzzyEquals","Hypot","IsFinite","IsInf","IsNaN","Ldexp","Lgamma","Log","Log10","Log2","Mod","NearbyInt","Pi","Pow","Rem","Remainder","Rint","Round","RoundDownward","RoundToNearest","RoundTowardZero","RoundUpward","Sigmoid","Sin","Sinh","Sqrt","Tan","Tanh","Tgamma","Trunc"],Pire:["Capture","Grep","Match","MultiGrep","MultiMatch","Replace"],Re2:["Capture","Count","Escape","FindAndConsume","Grep","Match","Options","PatternFromLike","Replace"],Re2posix:["Capture","Count","Escape","FindAndConsume","Grep","Match","Options","PatternFromLike","Replace"],Digest:["Argon2","Blake2B","CityHash","CityHash128","Crc32c","Crc64","FarmHashFingerprint","FarmHashFingerprint128","FarmHashFingerprint2","FarmHashFingerprint32","FarmHashFingerprint64","Fnv32","Fnv64","HighwayHash","IntHash64","Md5HalfMix","Md5Hex","Md5Raw","MurMurHash","MurMurHash2A","MurMurHash2A32","MurMurHash32","NumericHash","Sha1","Sha256","SipHash","SuperFastHash","XXH3","XXH3_128"],Histogram:["CalcLowerBound","CalcLowerBoundSafe","CalcUpperBound","CalcUpperBoundSafe","GetSumAboveBound","GetSumBelowBound","GetSumInRange","Normalize","Print","ToCumulativeDistributionFunction"]}).reduce(((e,[t,n])=>{const i=n.map((e=>`${t}::${e}`));return e.concat(i)}),[]),c=["ROW_NUMBER","LAG","LEAD","FIRST_VALUE","LAST_VALUE","RANK","DENSE_RANK","SessionState"],m=[],T=["TablePathPrefix","Warning"],d={table:["AUTO_PARTITIONING_BY_SIZE","AUTO_PARTITIONING_PARTITION_SIZE_MB","AUTO_PARTITIONING_BY_LOAD","AUTO_PARTITIONING_MIN_PARTITIONS_COUNT","AUTO_PARTITIONING_MAX_PARTITIONS_COUNT","UNIFORM_PARTITIONS","READ_REPLICAS_SETTINGS","TTL","KEY_BLOOM_FILTER","STORE"],view:["security_invoker"],topic:["min_active_partitions","partition_count_limit","retention_period","retention_storage_mb","partition_write_speed_bytes_per_second","partition_write_burst_bytes","metering_mode"],object:[],user:[],group:[],externalDataSource:[],externalTable:[],tableStore:[],replication:["ENDPOINT","DATABASE","USER","PASSWORD"],tableIndex:[],topicConsumer:["important","read_from"]},g={Method:0,Function:1,Constructor:2,Field:3,Variable:4,Class:5,Struct:6,Interface:7,Module:8,Property:9,Event:10,Operator:11,Unit:12,Value:13,Constant:14,Enum:15,EnumMember:16,Keyword:17,Text:18,Color:19,File:20,Reference:21,Customcolor:22,Folder:23,TypeParameter:24,User:25,Issue:26,Snippet:27},p=/[\s'"-/@]/,S={externalDataSource:["external_data_source"],externalTable:["external_table"],replication:["replication"],table:["table","column_table"],tableStore:["column_store"],topic:["pers_queue_group"],view:["view"],tableIndex:["table_index","index"]},I=["dir","unknown","ext_sub_domain"],L=["dir","ext_sub_domain"];function y(e){let t=e;return e.match(p)&&(t=`\`${e}\``),t}function b(e){let t=0,n=e.length;return e.startsWith("`")&&(t=1),e.endsWith("`")&&(n=-1),e.slice(t,n)}function A(e){return e.startsWith("$")}function C(e){return e.startsWith("/")?e.slice(1):e}function h(e="",t){const n=b(e);if(!n.startsWith("/"))return n;let i=C(n);const s=C(t);return i.startsWith(s)&&(i=i.slice(s.length)),C(i)}const D={suggestTemplates:0,suggestPragmas:1,suggestEntity:2,suggestAllColumns:3,suggestColumns:4,suggestColumnAliases:5,suggestVariables:6,suggestTableIndexes:7,suggestTableHints:8,suggestEntitySettings:9,suggestKeywords:10,suggestAggregateFunctions:11,suggestTableFunctions:12,suggestWindowFunctions:13,suggestFunctions:14,suggestSimpleTypes:15,suggestUdfs:16};function f(e){return D[e]}async function v(e,t,n,i){const s=h(i,n),o=await window.api.viewer.autocomplete({database:n,prefix:s,limit:1e3}),r=null===i||void 0===i?void 0:i.startsWith("`");if(o.Success){const n=function(e,t){const n=t.reduce(((e,t)=>{const n=S[t];return n&&n.forEach((t=>e.add(t))),e}),new Set(I));return null===e||void 0===e?void 0:e.filter((({Type:e})=>n.has(e)))}(o.Result.Entities,t);return n?n.reduce(((t,{Name:n,Type:i})=>{var s;const o=L.includes(i),l=o?`${n}/`:n;let u;o&&!r&&(u=`\`${l}$0\``);const c=t.length;return t.push({label:l,insertText:null!==(s=u)&&void 0!==s?s:l,kind:o?g.Folder:g.Text,insertTextRules:u?a.languages.CompletionItemInsertTextRule.InsertAsSnippet:a.languages.CompletionItemInsertTextRule.None,detail:i,range:e,command:l.endsWith("/")?{id:"editor.action.triggerSuggest",title:""}:void 0,sortText:G(f("suggestEntity"))+G(c)}),t}),[]):[]}return[]}async function F(e){return(await async function(){return r}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"Function",range:e,sortText:G(f("suggestFunctions"))})))}async function E(e){return(await async function(){return o}()).map((t=>({label:t,insertText:t,kind:g.TypeParameter,detail:"Type",range:e,sortText:G(f("suggestSimpleTypes"))})))}async function M(e){return(await async function(){return u}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"UDF",range:e,sortText:G(f("suggestUdfs"))})))}async function N(e){return(await async function(){return c}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"Window function",range:e,sortText:G(f("suggestWindowFunctions"))})))}async function R(e){return(await async function(){return m}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"Table function",range:e,sortText:G(f("suggestTableFunctions"))})))}async function _(e){return(await async function(){return l}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"Aggregate function",range:e,sortText:G(f("suggestAggregateFunctions"))})))}async function P(e){return(await async function(){return T}()).map((t=>({label:t,insertText:t,kind:g.Module,detail:"Pragma",range:e,sortText:G(f("suggestPragmas"))})))}async function x(e,t){const n=await async function(e){return d[e]}(t);return n.map((t=>({label:t,insertText:t,kind:g.Property,detail:"Setting",range:e,sortText:G(f("suggestEntitySettings"))})))}const O="abcdefghijklmnopqrstuvwxyz";function G(e){const t=O[e];if(t)return t;const n=Math.floor(e/O.length),i=e%O.length;return O.slice(-1).repeat(n)+O[i]}function U(e){return async(t,i,s,a)=>{const o=function(e,t){const{startColumn:n,endColumn:i}=e.getWordUntilPosition(t),s="$"===e.getLineContent(t.lineNumber)[n-2]?1:0;return{startColumn:n-s,startLineNumber:t.lineNumber,endColumn:i,endLineNumber:t.lineNumber}}(t,i),r=await async function(e,t,i,s){const{parseYqlQuery:a}=await Promise.resolve().then(n.bind(n,41614)),o={line:t.lineNumber,column:t.column},r=a(e.getValue(),o);let l=[],u=[],c=[],m=[],T=[],d=[],p=[],S=[],I=[],L=[];if(r.suggestEntity){const n=function(e,t){var n,i,s,a;const o=e.findPreviousMatch("\\s(`?[^\\s]*)",t,!0,!1,null,!0),r=e.findNextMatch("([^\\s]*)`?",t,!0,!1,null,!0);return`${null!==(n=null===o||void 0===o||null===(i=o.matches)||void 0===i?void 0:i[1])&&void 0!==n?n:""}${null!==(s=null===r||void 0===r||null===(a=r.matches)||void 0===a?void 0:a[1])&&void 0!==s?s:""}`}(e,t);l=await v(i,r.suggestEntity,s,n)}r.suggestFunctions&&(u=await F(i));r.suggestAggregateFunctions&&(c=await _(i));r.suggestWindowFunctions&&(m=await N(i));r.suggestTableFunctions&&(T=await R(i));r.suggestSimpleTypes&&(p=await E(i));r.suggestVariables&&(L=function(e,t){return t?t.map((({name:t})=>{const n="$"+t;return{label:n,insertText:n,kind:g.Variable,detail:"Variable",range:e,sortText:G(f("suggestVariables"))}})):[]}(i,r.suggestVariables));r.suggestUdfs&&(d=await M(i));r.suggestPragmas&&(S=await P(i));r.suggestEntitySettings&&(I=await x(i,r.suggestEntitySettings));const C=await function(e,t){return t?null===t||void 0===t?void 0:t.map((t=>({label:t.name,insertText:t.name,kind:g.Variable,detail:"Column alias",range:e,sortText:G(f("suggestColumnAliases"))}))):[]}(i,r.suggestColumnAliases),D=await async function(e,t,n,i){var s,a,o;if(null===t||void 0===t||!t.tables)return[];const r=[],l=t.all?[]:void 0,u=t.tables.length>1,c=null!==(s=null===(a=t.tables)||void 0===a?void 0:a.map((e=>{let t=b(e.name);return t.endsWith("/")||A(t)||(t=`${t}/`),{...e,name:h(t,i)}})))&&void 0!==s?s:[],m=c.map((e=>e.name)),T=Array.from(new Set(m)),d=T.filter((e=>!A(e)));let p=[];if(d.length){const e=await window.api.viewer.autocomplete({database:i,table:d,limit:1e3});var S;e.Success&&(p=null!==(S=e.Result.Entities)&&void 0!==S?S:[])}const I=T.filter(A),L=[];I.length&&I.forEach((e=>{var t,i,s,a;const o=null!==(t=null===n||void 0===n||null===(i=n.find((t=>e.slice(1)===t.name)))||void 0===i||null===(s=i.value)||void 0===s||null===(a=s.columns)||void 0===a?void 0:a.map((t=>({Name:t,Type:"column",Parent:e}))))&&void 0!==t?t:[];L.push(...o)}));const C=c.reduce(((e,t)=>{const n=t.columns;return n&&e.push(...n.map((e=>({Name:e,Type:"column",Parent:t.name})))),e}),[]),D=null===(o=t.tables)||void 0===o?void 0:o.reduce(((e,t)=>{var n;const s=h(b(t.name),i),a=null!==(n=e[s])&&void 0!==n?n:[];return t.alias&&a.push(t.alias),e[s]=a,e}),{});if([...p,...L,...C].forEach((t=>{if("column"!==t.Type)return;const n=function(e){const{PKIndex:t,NotNull:n,Default:i}=e,s=[];return void 0!==t&&s.push(`PK${t}`),n&&s.push("NN"),i&&s.push("Default"),s.length?s.join(", "):""}(t),s=y(t.Name),a=h(t.Parent,i),o=D[a],c=r.length;if(null!==o&&void 0!==o&&o.length)o.forEach((t=>{const i=`${t}.${s}`;r.push({label:{label:i,description:n},insertText:i,kind:g.Variable,detail:"Column",range:e,sortText:G(f("suggestColumns"))+G(c)}),null===l||void 0===l||l.push(i)}));else{let t=s;u&&(t=`${y(a)}.${s}`),r.push({label:{label:t,description:n},insertText:t,kind:g.Variable,detail:"Column",range:e,sortText:G(f("suggestColumns"))+G(c)}),null===l||void 0===l||l.push(t)}})),l&&l.length>1){const t=l.join(", ");r.push({label:t,insertText:t,kind:g.Variable,range:e,sortText:G(f("suggestAllColumns"))})}return r}(i,r.suggestColumns,r.suggestVariables,s),O=function(e,t){return t?t.map((t=>({label:t.value,insertText:t.value,kind:g.Keyword,detail:"Keyword",range:e,sortText:G(f("suggestKeywords"))}))):[]}(i,r.suggestKeywords),U=[...l,...u,...m,...T,...d,...p,...S,...C,...D,...O,...c,...I,...L];return U}(t,i,o,e);return{suggestions:r}}}let w;function B(e){w&&w.dispose(),w=i.eo.registerCompletionItemProvider(s.l,{triggerCharacters:[" ",".","`","(","/"],provideCompletionItems:U(e)})}}}]);