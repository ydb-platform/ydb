"use strict";(globalThis.webpackChunkydb_embedded_ui=globalThis.webpackChunkydb_embedded_ui||[]).push([[633],{30633:(e,t,n)=>{n.r(t),n.d(t,{registerYQLCompletionItemProvider:()=>U});n(98098),n(23053),n(15968),n(32944),n(34564),n(19757),n(13391),n(50238),n(79623),n(52722),n(21476),n(61778),n(8295),n(63950),n(29134),n(1377),n(44870),n(61522),n(66953),n(17987),n(45713),n(63776),n(91135),n(13499),n(95851),n(95879),n(67069),n(76198),n(81584),n(11506),n(49116),n(48628),n(40335),n(37434),n(38259),n(54829),n(70597),n(25025),n(73166),n(27353),n(46030),n(36513),n(81927),n(10628),n(3394),n(71571),n(70902),n(40606),n(23977),n(36920),n(97737),n(89489),n(78201),n(79908),n(67017),n(34338),n(82148),n(53295),n(48208),n(77042),n(49724),n(39422),n(71636),n(78564),n(97235),n(77137);var i,s=n(56017);n(67709),n(41777),n(26525),n(52016),n(7067),n(86543),n(59134),n(65340),n(7389),n(66493),n(12867),n(78859),n(80198),n(39019),n(33693),n(76434),n(16842),n(14983),n(56454),n(61466),n(76799),n(29679),n(47281),n(13078),n(55799),n(45115),n(41645),n(82686),n(86703),n(1072),n(902),n(72107),n(66405),n(30539),n(45189),n(81888),n(13162),n(31518),n(60601),n(78626),n(13763),n(6581),n(44758),n(35281),n(97611),n(63874),n(29075),n(51083),n(97810),n(22920),n(89045),n(14366),n(54872),n(66333),n(34789),n(64646),n(31e3),n(94380),n(87133),n(87259),n(47526),n(30408),n(10211),n(55167),n(89673),n(56536),n(17535),n(21914),n(63235),n(70600),n(8940),n(187),n(92176),n(86394),n(59280),n(79397),n(13536),n(7717),n(32434),n(19736),n(94385),n(83443),n(54205),n(6174),n(23523),n(60951),n(91063);self.MonacoEnvironment=(i={editorWorkerService:"editor.worker.js",css:"css.worker.js",html:"html.worker.js",json:"json.worker.js",typescript:"ts.worker.js",javascript:"ts.worker.js",less:"css.worker.js",scss:"css.worker.js",handlebars:"html.worker.js",razor:"html.worker.js"},{globalAPI:!1,getWorkerUrl:function(e,t){var s=n.p,o=(s?s.replace(/\/$/,"")+"/":"")+i[t];if(/^((http:)|(https:)|(file:)|(\/\/))/.test(o)){var r=String(window.location),a=r.substr(0,r.length-window.location.hash.length-window.location.search.length-window.location.pathname.length);if(o.substring(0,a.length)!==a){/^(\/\/)/.test(o)&&(o=window.location.protocol+o);var l=new Blob(["/*"+t+'*/importScripts("'+o+'");'],{type:"application/javascript"});return URL.createObjectURL(l)}}return o}});var o=n(54975);const r=["String","Bool","Int32","Uint32","Int64","Uint64","Float","Double","Void","Yson","Utf8","Unit","Json","Date","Datetime","Timestamp","Interval","Null","Int8","Uint8","Int16","Uint16","TzDate","TzDatetime","TzTimestamp","Uuid","EmptyList","EmptyDict","JsonDocument","DyNumber"],a=["CAST","COALESCE","LENGTH","LEN","SUBSTRING","FIND","RFIND","StartsWith","EndsWith","IF","NANVL","Random","RandomNumber","RandomUuid","CurrentUtcDate","CurrentUtcDatetime","CurrentUtcTimestamp","CurrentTzDate","CurrentTzDatetime","CurrentTzTimestamp","AddTimezone","RemoveTimezone","MAX_OF","MIN_OF","GREATEST","LEAST","AsTuple","AsStruct","AsList","AsDict","AsSet","AsListStrict","AsDictStrict","AsSetStrict","Variant","AsVariant","Enum","AsEnum","AsTagged","Untag","TableRow","JoinTableRow","Ensure","EnsureType","EnsureConvertibleTo","ToBytes","FromBytes","ByteAt","TestBit","ClearBit","SetBit","FlipBit","Abs","Just","Unwrap","Nothing","Callable","StaticMap","StaticZip","ListCreate","AsListStrict","ListLength","ListHasItems","ListCollect","ListSort","ListSortAsc","ListSortDesc","ListExtend","ListExtendStrict","ListUnionAll","ListZip","ListZipAll","ListEnumerate","ListReverse","ListSkip","ListTake","ListIndexOf","ListMap","ListFilter","ListFlatMap","ListNotNull","ListFlatten","ListUniq","ListAny","ListAll","ListHas","ListHead","ListLast","ListMin","ListMax","ListSum","ListAvg","ListFold","ListFold1","ListFoldMap","ListFold1Map","ListFromRange","ListReplicate","ListConcat","ListExtract","ListTakeWhile","ListSkipWhile","ListAggregate","ToDict","ToMultiDict","ToSet","DictCreate","SetCreate","DictLength","DictHasItems","DictItems","DictKeys","DictPayloads","DictLookup","DictContains","DictAggregate","SetIsDisjoint","SetIntersection","SetIncludes","SetUnion","SetDifference","SetSymmetricDifference","TryMember","ExpandStruct","AddMember","RemoveMember","ForceRemoveMember","ChooseMembers","RemoveMembers","ForceRemoveMembers","CombineMembers","FlattenMembers","StructMembers","RenameMembers","ForceRenameMembers","GatherMembers","SpreadMembers","ForceSpreadMembers","FormatType","ParseType","TypeOf","InstanceOf","DataType","OptionalType","ListType","StreamType","DictType","TupleType","StructType","VariantType","ResourceType","CallableType","GenericType","UnitType","VoidType","OptionalItemType","ListItemType","StreamItemType","DictKeyType","DictPayloadType","TupleElementType","StructMemberType","CallableResultType","CallableArgumentType","VariantUnderlyingType","JSON_EXISTS","JSON_VALUE","JSON_QUERY"],l=["COUNT","MIN","MAX","SUM","AVG","COUNT_IF","SUM_IF","AVG_IF","SOME","CountDistinctEstimate","HyperLogLog","AGGREGATE_LIST","AGGREGATE_LIST_DISTINCT","AGG_LIST","AGG_LIST_DISTINCT","MAX_BY","MIN_BY","AGGREGATE_BY","MULTI_AGGREGATE_BY","TOP","BOTTOM","TOP_BY","BOTTOM_BY","TOPFREQ","MODE","STDDEV","VARIANCE","CORRELATION","COVARIANCE","PERCENTILE","MEDIAN","HISTOGRAM","LogarithmicHistogram","LogHistogram","LinearHistogram","BOOL_AND","BOOL_OR","BOOL_XOR","BIT_AND","BIT_OR","BIT_XOR","SessionStart"],u=Object.entries({DateTime:["EndOfMonth","Format","FromMicroseconds","FromMilliseconds","FromSeconds","GetDayOfMonth","GetDayOfWeek","GetDayOfWeekName","GetDayOfYear","GetHour","GetMicrosecondOfSecond","GetMillisecondOfSecond","GetMinute","GetMonth","GetMonthName","GetSecond","GetTimezoneId","GetTimezoneName","GetWeekOfYear","GetWeekOfYearIso8601","GetYear","IntervalFromDays","IntervalFromHours","IntervalFromMicroseconds","IntervalFromMilliseconds","IntervalFromMinutes","IntervalFromSeconds","MakeDate","MakeDatetime","MakeTimestamp","MakeTzDate","MakeTzDatetime","MakeTzTimestamp","Parse","ParseHttp","ParseIso8601","ParseRfc822","ParseX509","ShiftMonths","ShiftQuarters","ShiftYears","Split","StartOf","StartOfDay","StartOfMonth","StartOfQuarter","StartOfWeek","StartOfYear","TimeOfDay","ToDays","ToHours","ToMicroseconds","ToMilliseconds","ToMinutes","ToSeconds","Update"],Dsv:["Parse","ReadRecord","Serialize"],String:["AsciiToLower","AsciiToTitle","AsciiToUpper","Base32Decode","Base32Encode","Base32StrictDecode","Base64Decode","Base64Encode","Base64EncodeUrl","Base64StrictDecode","Bin","BinText","CgiEscape","CgiUnescape","Collapse","CollapseText","Contains","DecodeHtml","EncodeHtml","EndsWith","EndsWithIgnoreCase","EscapeC","FromByteList","HasPrefix","HasPrefixIgnoreCase","HasSuffix","HasSuffixIgnoreCase","Hex","HexDecode","HexEncode","HexText","HumanReadableBytes","HumanReadableDuration","HumanReadableQuantity","IsAscii","IsAsciiAlnum","IsAsciiAlpha","IsAsciiDigit","IsAsciiHex","IsAsciiLower","IsAsciiSpace","IsAsciiUpper","JoinFromList","LeftPad","LevensteinDistance","Prec","RemoveAll","RemoveFirst","RemoveLast","ReplaceAll","ReplaceFirst","ReplaceLast","RightPad","SBin","SHex","SplitToList","StartsWith","StartsWithIgnoreCase","Strip","ToByteList","UnescapeC"],Unicode:["Find","Fold","FromCodePointList","GetLength","IsAlnum","IsAlpha","IsAscii","IsDigit","IsHex","IsLower","IsSpace","IsUnicodeSet","IsUpper","IsUtf","JoinFromList","LevensteinDistance","Normalize","NormalizeNFC","NormalizeNFD","NormalizeNFKC","NormalizeNFKD","RFind","RemoveAll","RemoveFirst","RemoveLast","ReplaceAll","ReplaceFirst","ReplaceLast","Reverse","SplitToList","Strip","Substring","ToCodePointList","ToLower","ToTitle","ToUint64","ToUpper","Translit","TryToUint64"],Url:["BuildQueryString","CanBePunycodeHostName","CutQueryStringAndFragment","CutScheme","CutWWW","CutWWW2","Decode","Encode","ForceHostNameToPunycode","ForcePunycodeToHostName","GetCGIParam","GetDomain","GetDomainLevel","GetFragment","GetHost","GetHostPort","GetOwner","GetPath","GetPort","GetScheme","GetSchemeHost","GetSchemeHostPort","GetSignificantDomain","GetTLD","GetTail","HostNameToPunycode","IsAllowedByRobotsTxt","IsKnownTLD","IsWellKnownTLD","Normalize","NormalizeWithDefaultHttpScheme","Parse","PunycodeToHostName","QueryStringToDict","QueryStringToList"],Yson:["Attributes","Contains","ConvertTo","ConvertToBool","ConvertToBoolDict","ConvertToBoolList","ConvertToDict","ConvertToDouble","ConvertToDoubleDict","ConvertToDoubleList","ConvertToInt64","ConvertToInt64Dict","ConvertToInt64List","ConvertToList","ConvertToString","ConvertToStringDict","ConvertToStringList","ConvertToUint64","ConvertToUint64Dict","ConvertToUint64List","Equals","From","GetHash","GetLength","IsBool","IsDict","IsDouble","IsEntity","IsInt64","IsList","IsString","IsUint64","Lookup","LookupBool","LookupDict","LookupDouble","LookupInt64","LookupList","LookupString","LookupUint64","Options","Parse","ParseJson","ParseJsonDecodeUtf8","Serialize","SerializeJson","SerializePretty","SerializeText","WithAttributes","YPath","YPathBool","YPathDict","YPathDouble","YPathInt64","YPathList","YPathString","YPathUint64"],HyperLogLog:["AddValue","Create","Deserialize","GetResult","Merge","Serialize"],Hyperscan:["BacktrackingGrep","BacktrackingMatch","Capture","Grep","Match","MultiGrep","MultiMatch","Replace"],Ip:["ConvertToIPv6","FromString","GetSubnet","GetSubnetByMask","IsEmbeddedIPv4","IsIPv4","IsIPv6","SubnetFromString","SubnetMatch","SubnetToString","ToFixedIPv6String","ToString"],Json:["BoolAsJsonNode","CompilePath","DoubleAsJsonNode","JsonAsJsonNode","JsonDocumentSqlExists","JsonDocumentSqlQuery","JsonDocumentSqlQueryConditionalWrap","JsonDocumentSqlQueryWrap","JsonDocumentSqlTryExists","JsonDocumentSqlValueBool","JsonDocumentSqlValueConvertToUtf8","JsonDocumentSqlValueInt64","JsonDocumentSqlValueNumber","JsonDocumentSqlValueUtf8","Parse","Serialize","SerializeToJsonDocument","SqlExists","SqlQuery","SqlQueryConditionalWrap","SqlQueryWrap","SqlTryExists","SqlValueBool","SqlValueConvertToUtf8","SqlValueInt64","SqlValueNumber","SqlValueUtf8","Utf8AsJsonNode"],Math:["Abs","Acos","Asin","Asinh","Atan","Atan2","Cbrt","Ceil","Cos","Cosh","E","Eps","Erf","ErfInv","ErfcInv","Exp","Exp2","Fabs","Floor","Fmod","FuzzyEquals","Hypot","IsFinite","IsInf","IsNaN","Ldexp","Lgamma","Log","Log10","Log2","Mod","NearbyInt","Pi","Pow","Rem","Remainder","Rint","Round","RoundDownward","RoundToNearest","RoundTowardZero","RoundUpward","Sigmoid","Sin","Sinh","Sqrt","Tan","Tanh","Tgamma","Trunc"],Pire:["Capture","Grep","Match","MultiGrep","MultiMatch","Replace"],Re2:["Capture","Count","Escape","FindAndConsume","Grep","Match","Options","PatternFromLike","Replace"],Re2posix:["Capture","Count","Escape","FindAndConsume","Grep","Match","Options","PatternFromLike","Replace"],Digest:["Argon2","Blake2B","CityHash","CityHash128","Crc32c","Crc64","FarmHashFingerprint","FarmHashFingerprint128","FarmHashFingerprint2","FarmHashFingerprint32","FarmHashFingerprint64","Fnv32","Fnv64","HighwayHash","IntHash64","Md5HalfMix","Md5Hex","Md5Raw","MurMurHash","MurMurHash2A","MurMurHash2A32","MurMurHash32","NumericHash","Sha1","Sha256","SipHash","SuperFastHash","XXH3","XXH3_128"],Histogram:["CalcLowerBound","CalcLowerBoundSafe","CalcUpperBound","CalcUpperBoundSafe","GetSumAboveBound","GetSumBelowBound","GetSumInRange","Normalize","Print","ToCumulativeDistributionFunction"]}).reduce(((e,t)=>{let[n,i]=t;const s=i.map((e=>`${n}::${e}`));return e.concat(s)}),[]),c=["ROW_NUMBER","LAG","LEAD","FIRST_VALUE","LAST_VALUE","RANK","DENSE_RANK","SessionState"],m=[],T=["TablePathPrefix","Warning"],d={table:["AUTO_PARTITIONING_BY_SIZE","AUTO_PARTITIONING_PARTITION_SIZE_MB","AUTO_PARTITIONING_BY_LOAD","AUTO_PARTITIONING_MIN_PARTITIONS_COUNT","AUTO_PARTITIONING_MAX_PARTITIONS_COUNT","UNIFORM_PARTITIONS","READ_REPLICAS_SETTINGS","TTL","KEY_BLOOM_FILTER","STORE"],view:["security_invoker"],topic:["min_active_partitions","partition_count_limit","retention_period","retention_storage_mb","partition_write_speed_bytes_per_second","partition_write_burst_bytes","metering_mode"],object:[],user:[],group:[],externalDataSource:[],externalTable:[],tableStore:[],replication:["ENDPOINT","DATABASE","USER","PASSWORD"],tableIndex:[],topicConsumer:["important","read_from"]},g={Method:0,Function:1,Constructor:2,Field:3,Variable:4,Class:5,Struct:6,Interface:7,Module:8,Property:9,Event:10,Operator:11,Unit:12,Value:13,Constant:14,Enum:15,EnumMember:16,Keyword:17,Text:18,Color:19,File:20,Reference:21,Customcolor:22,Folder:23,TypeParameter:24,User:25,Issue:26,Snippet:27},p=/[\s'"-/@]/,S={externalDataSource:["external_data_source"],externalTable:["external_table"],replication:["replication"],table:["table","column_table"],tableStore:["column_store"],topic:["pers_queue_group"],view:["view"],tableIndex:["table_index","index"]},I=["dir","unknown","ext_sub_domain"],L=["dir","ext_sub_domain"];function y(e){let t=e;return e.match(p)&&(t=`\`${e}\``),t}function A(e){let t=0,n=e.length;return e.startsWith("`")&&(t=1),e.endsWith("`")&&(n=-1),e.slice(t,n)}function h(e){return e.startsWith("/")?e.slice(1):e}function C(){let e=arguments.length>1?arguments[1]:void 0;const t=A(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"");if(!t.startsWith("/"))return t;let n=h(t);const i=h(e);return n.startsWith(i)&&(n=n.slice(i.length)),h(n)}const b={suggestTemplates:0,suggestPragmas:1,suggestEntity:2,suggestColumns:3,suggestColumnAliases:4,suggestTableIndexes:5,suggestTableHints:6,suggestEntitySettings:7,suggestKeywords:8,suggestAggregateFunctions:9,suggestTableFunctions:10,suggestWindowFunctions:11,suggestFunctions:12,suggestSimpleTypes:13,suggestUdfs:14};function D(e){return b[e]}async function f(e,t,n,i){const o=C(i,n),r=await window.api.autocomplete({database:n,prefix:o,limit:1e3}),a=null===i||void 0===i?void 0:i.startsWith("`");if(r.Success){return function(e,t){const n=t.reduce(((e,t)=>{const n=S[t];return n&&n.forEach((t=>e.add(t))),e}),new Set(I));return e.filter((e=>{let{Type:t}=e;return n.has(t)}))}(r.Result.Entities,t).reduce(((t,n)=>{var i;let{Name:o,Type:r}=n;const l=L.includes(r),u=l?`${o}/`:o;let c;return l&&!a&&(c=`\`${u}$0\``),t.push({label:u,insertText:null!==(i=c)&&void 0!==i?i:u,kind:l?g.Folder:g.Text,insertTextRules:c?s.languages.CompletionItemInsertTextRule.InsertAsSnippet:s.languages.CompletionItemInsertTextRule.None,detail:r,range:e,command:u.endsWith("/")?{id:"editor.action.triggerSuggest",title:""}:void 0,sortText:O(D("suggestEntity"))}),t}),[])}return[]}async function F(e){return(await async function(){return a}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"Function",range:e,sortText:O(D("suggestFunctions"))})))}async function v(e){return(await async function(){return r}()).map((t=>({label:t,insertText:t,kind:g.TypeParameter,detail:"Type",range:e,sortText:O(D("suggestSimpleTypes"))})))}async function E(e){return(await async function(){return u}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"UDF",range:e,sortText:O(D("suggestUdfs"))})))}async function M(e){return(await async function(){return c}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"Window function",range:e,sortText:O(D("suggestWindowFunctions"))})))}async function R(e){return(await async function(){return m}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"Table function",range:e,sortText:O(D("suggestTableFunctions"))})))}async function N(e){return(await async function(){return l}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"Aggregate function",range:e,sortText:O(D("suggestAggregateFunctions"))})))}async function w(e){return(await async function(){return T}()).map((t=>({label:t,insertText:t,kind:g.Module,detail:"Pragma",range:e,sortText:O(D("suggestPragmas"))})))}async function _(e,t){const n=await async function(e){return d[e]}(t);return n.map((t=>({label:t,insertText:t,kind:g.Property,detail:"Setting",range:e,sortText:O(D("suggestEntitySettings"))})))}const P="abcdefghijklmnopqrstuvwxyz";function O(e){const t=P[e];if(t)return t;const n=Math.floor(e/P.length),i=e%P.length;return P.slice(-1).repeat(n)+P[i]}function x(e){return async(t,i,s,o)=>{const r=function(e,t){const{startColumn:n,endColumn:i}=e.getWordUntilPosition(t),s="$"===e.getLineContent(t.lineNumber)[n-2]?1:0;return{startColumn:n-s,startLineNumber:t.lineNumber,endColumn:i,endLineNumber:t.lineNumber}}(t,i),a=await async function(e,t,i,s){const{parseYqlQuery:o}=await n.e(165).then(n.bind(n,10165)),r={line:t.lineNumber,column:t.column},a=o(e.getValue(),r);let l=[],u=[],c=[],m=[],T=[],d=[],p=[],S=[],I=[];if(a.suggestEntity){const n=function(e,t){var n,i,s,o;const r=e.findPreviousMatch("\\s(`?[^\\s]*)",t,!0,!1,null,!0),a=e.findNextMatch("([^\\s]*)`?",t,!0,!1,null,!0);return`${null!==(n=null===r||void 0===r||null===(i=r.matches)||void 0===i?void 0:i[1])&&void 0!==n?n:""}${null!==(s=null===a||void 0===a||null===(o=a.matches)||void 0===o?void 0:o[1])&&void 0!==s?s:""}`}(e,t);l=await f(i,a.suggestEntity,s,n)}a.suggestFunctions&&(u=await F(i));a.suggestAggregateFunctions&&(c=await N(i));a.suggestWindowFunctions&&(m=await M(i));a.suggestTableFunctions&&(T=await R(i));a.suggestSimpleTypes&&(p=await v(i));a.suggestUdfs&&(d=await E(i));a.suggestPragmas&&(S=await w(i));a.suggestEntitySettings&&(I=await _(i,a.suggestEntitySettings));const L=await function(e,t){return t?null===t||void 0===t?void 0:t.map((t=>({label:t.name,insertText:t.name,kind:g.Field,detail:"Column alias",range:e,sortText:O(D("suggestColumnAliases"))}))):[]}(i,a.suggestColumnAliases),h=await async function(e,t,n){var i,s,o;if(null===t||void 0===t||!t.tables)return[];const r=[],a=t.tables.length>1,l=null!==(i=null===(s=t.tables)||void 0===s?void 0:s.map((e=>{let t=A(e.name);return t.endsWith("/")||(t=`${t}/`),C(t,n)})))&&void 0!==i?i:[],u=Array.from(new Set(l)),c=await window.api.autocomplete({database:n,table:u,limit:1e3});if(!c.Success)return[];const m=null===(o=t.tables)||void 0===o?void 0:o.reduce(((e,t)=>{var i;const s=C(A(t.name),n),o=null!==(i=e[s])&&void 0!==i?i:[];return t.alias&&o.push(t.alias),e[s]=o,e}),{});return c.Result.Entities.forEach((t=>{if("column"!==t.Type)return;const i=y(t.Name),s=C(t.Parent,n),o=m[s];if(null!==o&&void 0!==o&&o.length)o.forEach((t=>{const n=`${t}.${i}`;r.push({label:n,insertText:n,kind:g.Field,detail:"Column",range:e,sortText:O(D("suggestColumns"))})}));else{let t=i;a&&(t=`${y(s)}.${i}`),r.push({label:t,insertText:t,kind:g.Field,detail:"Column",range:e,sortText:O(D("suggestColumns"))})}})),r}(i,a.suggestColumns,s),b=function(e,t){return t?null===t||void 0===t?void 0:t.map((t=>({label:t.value,insertText:t.value,kind:g.Keyword,detail:"Keyword",range:e,sortText:O(D("suggestKeywords"))}))):[]}(i,a.suggestKeywords),P=[...l,...u,...m,...T,...d,...p,...S,...L,...h,...b,...c,...I];return P}(t,i,r,e);return{suggestions:a}}}let G;function U(e){G&&G.dispose(),G=s.languages.registerCompletionItemProvider(o.m,{triggerCharacters:[" ",".","`","(","/"],provideCompletionItems:x(e)})}}}]);