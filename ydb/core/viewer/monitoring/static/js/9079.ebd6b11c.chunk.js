"use strict";(self.webpackChunkydb_embedded_ui=self.webpackChunkydb_embedded_ui||[]).push([[9079],{99079:(e,t,n)=>{n.r(t),n.d(t,{registerYQLCompletionItemProvider:()=>G});n(45442),n(73776),n(70469),n(48938),n(17555),n(74246),n(54440),n(76025),n(71516),n(41156),n(31394),n(67255),n(98979),n(64219),n(22919),n(8882),n(42983),n(33550),n(23226),n(76858),n(2558),n(69916),n(1764),n(91331),n(27676),n(73557),n(51501),n(99740),n(92808),n(20474),n(68913),n(82586),n(13961),n(27881),n(44161),n(15199),n(17084),n(76285),n(86903),n(91397),n(30650),n(47077),n(16389),n(77538),n(12380),n(64918),n(9035),n(53510),n(3354),n(72961),n(44473),n(15321),n(57133),n(64953),n(4202),n(60202),n(63034),n(22887),n(295),n(49938),n(99236),n(99324),n(26217),n(38152),n(94952),n(65560);var i,s=n(77849);n(74485),n(11179),n(88750),n(53222),n(53602),n(22394),n(93758),n(77387),n(97591),n(13404),n(75537),n(37427),n(20187),n(38020),n(26203),n(13236),n(11751),n(19159),n(70866),n(27263),n(90872),n(19205),n(30621),n(82566),n(44841),n(54225),n(82676),n(32279),n(6645),n(56353),n(92367),n(62271),n(41566),n(24108),n(18981),n(33477),n(37492),n(43051),n(71553),n(58122),n(40638),n(10452),n(31743),n(72482),n(94955),n(1668),n(57428),n(94871),n(32608),n(4104),n(16325),n(43178),n(54468),n(17545),n(22571),n(35546),n(49269),n(34778),n(19105),n(88180),n(65230),n(40767),n(3189),n(32032),n(98335),n(40062),n(9615),n(63815),n(95865),n(1466),n(74635),n(59118),n(95431),n(821),n(68190),n(93992),n(63464),n(97008),n(8689),n(21724),n(52641),n(38796),n(31714),n(13746),n(36334),n(28348),n(88772);self.MonacoEnvironment=(i={editorWorkerService:"editor.worker.js",css:"css.worker.js",html:"html.worker.js",json:"json.worker.js",typescript:"ts.worker.js",javascript:"ts.worker.js",less:"css.worker.js",scss:"css.worker.js",handlebars:"html.worker.js",razor:"html.worker.js"},{globalAPI:!1,getWorkerUrl:function(e,t){var s=n.p,o=(s?s.replace(/\/$/,"")+"/":"")+i[t];if(/^((http:)|(https:)|(file:)|(\/\/))/.test(o)){var r=String(window.location),a=r.substr(0,r.length-window.location.hash.length-window.location.search.length-window.location.pathname.length);if(o.substring(0,a.length)!==a){/^(\/\/)/.test(o)&&(o=window.location.protocol+o);var l=new Blob(["/*"+t+'*/importScripts("'+o+'");'],{type:"application/javascript"});return URL.createObjectURL(l)}}return o}});var o=n(57254);const r=["String","Bool","Int32","Uint32","Int64","Uint64","Float","Double","Void","Yson","Utf8","Unit","Json","Date","Datetime","Timestamp","Interval","Null","Int8","Uint8","Int16","Uint16","TzDate","TzDatetime","TzTimestamp","Uuid","EmptyList","EmptyDict","JsonDocument","DyNumber"],a=["CAST","COALESCE","LENGTH","LEN","SUBSTRING","FIND","RFIND","StartsWith","EndsWith","IF","NANVL","Random","RandomNumber","RandomUuid","CurrentUtcDate","CurrentUtcDatetime","CurrentUtcTimestamp","CurrentTzDate","CurrentTzDatetime","CurrentTzTimestamp","AddTimezone","RemoveTimezone","MAX_OF","MIN_OF","GREATEST","LEAST","AsTuple","AsStruct","AsList","AsDict","AsSet","AsListStrict","AsDictStrict","AsSetStrict","Variant","AsVariant","Enum","AsEnum","AsTagged","Untag","TableRow","JoinTableRow","Ensure","EnsureType","EnsureConvertibleTo","ToBytes","FromBytes","ByteAt","TestBit","ClearBit","SetBit","FlipBit","Abs","Just","Unwrap","Nothing","Callable","StaticMap","StaticZip","ListCreate","AsListStrict","ListLength","ListHasItems","ListCollect","ListSort","ListSortAsc","ListSortDesc","ListExtend","ListExtendStrict","ListUnionAll","ListZip","ListZipAll","ListEnumerate","ListReverse","ListSkip","ListTake","ListIndexOf","ListMap","ListFilter","ListFlatMap","ListNotNull","ListFlatten","ListUniq","ListAny","ListAll","ListHas","ListHead","ListLast","ListMin","ListMax","ListSum","ListAvg","ListFold","ListFold1","ListFoldMap","ListFold1Map","ListFromRange","ListReplicate","ListConcat","ListExtract","ListTakeWhile","ListSkipWhile","ListAggregate","ToDict","ToMultiDict","ToSet","DictCreate","SetCreate","DictLength","DictHasItems","DictItems","DictKeys","DictPayloads","DictLookup","DictContains","DictAggregate","SetIsDisjoint","SetIntersection","SetIncludes","SetUnion","SetDifference","SetSymmetricDifference","TryMember","ExpandStruct","AddMember","RemoveMember","ForceRemoveMember","ChooseMembers","RemoveMembers","ForceRemoveMembers","CombineMembers","FlattenMembers","StructMembers","RenameMembers","ForceRenameMembers","GatherMembers","SpreadMembers","ForceSpreadMembers","FormatType","ParseType","TypeOf","InstanceOf","DataType","OptionalType","ListType","StreamType","DictType","TupleType","StructType","VariantType","ResourceType","CallableType","GenericType","UnitType","VoidType","OptionalItemType","ListItemType","StreamItemType","DictKeyType","DictPayloadType","TupleElementType","StructMemberType","CallableResultType","CallableArgumentType","VariantUnderlyingType","JSON_EXISTS","JSON_VALUE","JSON_QUERY"],l=["COUNT","MIN","MAX","SUM","AVG","COUNT_IF","SUM_IF","AVG_IF","SOME","CountDistinctEstimate","HyperLogLog","AGGREGATE_LIST","AGGREGATE_LIST_DISTINCT","AGG_LIST","AGG_LIST_DISTINCT","MAX_BY","MIN_BY","AGGREGATE_BY","MULTI_AGGREGATE_BY","TOP","BOTTOM","TOP_BY","BOTTOM_BY","TOPFREQ","MODE","STDDEV","VARIANCE","CORRELATION","COVARIANCE","PERCENTILE","MEDIAN","HISTOGRAM","LogarithmicHistogram","LogHistogram","LinearHistogram","BOOL_AND","BOOL_OR","BOOL_XOR","BIT_AND","BIT_OR","BIT_XOR","SessionStart"],u=Object.entries({DateTime:["EndOfMonth","Format","FromMicroseconds","FromMilliseconds","FromSeconds","GetDayOfMonth","GetDayOfWeek","GetDayOfWeekName","GetDayOfYear","GetHour","GetMicrosecondOfSecond","GetMillisecondOfSecond","GetMinute","GetMonth","GetMonthName","GetSecond","GetTimezoneId","GetTimezoneName","GetWeekOfYear","GetWeekOfYearIso8601","GetYear","IntervalFromDays","IntervalFromHours","IntervalFromMicroseconds","IntervalFromMilliseconds","IntervalFromMinutes","IntervalFromSeconds","MakeDate","MakeDatetime","MakeTimestamp","MakeTzDate","MakeTzDatetime","MakeTzTimestamp","Parse","ParseHttp","ParseIso8601","ParseRfc822","ParseX509","ShiftMonths","ShiftQuarters","ShiftYears","Split","StartOf","StartOfDay","StartOfMonth","StartOfQuarter","StartOfWeek","StartOfYear","TimeOfDay","ToDays","ToHours","ToMicroseconds","ToMilliseconds","ToMinutes","ToSeconds","Update"],Dsv:["Parse","ReadRecord","Serialize"],String:["AsciiToLower","AsciiToTitle","AsciiToUpper","Base32Decode","Base32Encode","Base32StrictDecode","Base64Decode","Base64Encode","Base64EncodeUrl","Base64StrictDecode","Bin","BinText","CgiEscape","CgiUnescape","Collapse","CollapseText","Contains","DecodeHtml","EncodeHtml","EndsWith","EndsWithIgnoreCase","EscapeC","FromByteList","HasPrefix","HasPrefixIgnoreCase","HasSuffix","HasSuffixIgnoreCase","Hex","HexDecode","HexEncode","HexText","HumanReadableBytes","HumanReadableDuration","HumanReadableQuantity","IsAscii","IsAsciiAlnum","IsAsciiAlpha","IsAsciiDigit","IsAsciiHex","IsAsciiLower","IsAsciiSpace","IsAsciiUpper","JoinFromList","LeftPad","LevensteinDistance","Prec","RemoveAll","RemoveFirst","RemoveLast","ReplaceAll","ReplaceFirst","ReplaceLast","RightPad","SBin","SHex","SplitToList","StartsWith","StartsWithIgnoreCase","Strip","ToByteList","UnescapeC"],Unicode:["Find","Fold","FromCodePointList","GetLength","IsAlnum","IsAlpha","IsAscii","IsDigit","IsHex","IsLower","IsSpace","IsUnicodeSet","IsUpper","IsUtf","JoinFromList","LevensteinDistance","Normalize","NormalizeNFC","NormalizeNFD","NormalizeNFKC","NormalizeNFKD","RFind","RemoveAll","RemoveFirst","RemoveLast","ReplaceAll","ReplaceFirst","ReplaceLast","Reverse","SplitToList","Strip","Substring","ToCodePointList","ToLower","ToTitle","ToUint64","ToUpper","Translit","TryToUint64"],Url:["BuildQueryString","CanBePunycodeHostName","CutQueryStringAndFragment","CutScheme","CutWWW","CutWWW2","Decode","Encode","ForceHostNameToPunycode","ForcePunycodeToHostName","GetCGIParam","GetDomain","GetDomainLevel","GetFragment","GetHost","GetHostPort","GetOwner","GetPath","GetPort","GetScheme","GetSchemeHost","GetSchemeHostPort","GetSignificantDomain","GetTLD","GetTail","HostNameToPunycode","IsAllowedByRobotsTxt","IsKnownTLD","IsWellKnownTLD","Normalize","NormalizeWithDefaultHttpScheme","Parse","PunycodeToHostName","QueryStringToDict","QueryStringToList"],Yson:["Attributes","Contains","ConvertTo","ConvertToBool","ConvertToBoolDict","ConvertToBoolList","ConvertToDict","ConvertToDouble","ConvertToDoubleDict","ConvertToDoubleList","ConvertToInt64","ConvertToInt64Dict","ConvertToInt64List","ConvertToList","ConvertToString","ConvertToStringDict","ConvertToStringList","ConvertToUint64","ConvertToUint64Dict","ConvertToUint64List","Equals","From","GetHash","GetLength","IsBool","IsDict","IsDouble","IsEntity","IsInt64","IsList","IsString","IsUint64","Lookup","LookupBool","LookupDict","LookupDouble","LookupInt64","LookupList","LookupString","LookupUint64","Options","Parse","ParseJson","ParseJsonDecodeUtf8","Serialize","SerializeJson","SerializePretty","SerializeText","WithAttributes","YPath","YPathBool","YPathDict","YPathDouble","YPathInt64","YPathList","YPathString","YPathUint64"],HyperLogLog:["AddValue","Create","Deserialize","GetResult","Merge","Serialize"],Hyperscan:["BacktrackingGrep","BacktrackingMatch","Capture","Grep","Match","MultiGrep","MultiMatch","Replace"],Ip:["ConvertToIPv6","FromString","GetSubnet","GetSubnetByMask","IsEmbeddedIPv4","IsIPv4","IsIPv6","SubnetFromString","SubnetMatch","SubnetToString","ToFixedIPv6String","ToString"],Json:["BoolAsJsonNode","CompilePath","DoubleAsJsonNode","JsonAsJsonNode","JsonDocumentSqlExists","JsonDocumentSqlQuery","JsonDocumentSqlQueryConditionalWrap","JsonDocumentSqlQueryWrap","JsonDocumentSqlTryExists","JsonDocumentSqlValueBool","JsonDocumentSqlValueConvertToUtf8","JsonDocumentSqlValueInt64","JsonDocumentSqlValueNumber","JsonDocumentSqlValueUtf8","Parse","Serialize","SerializeToJsonDocument","SqlExists","SqlQuery","SqlQueryConditionalWrap","SqlQueryWrap","SqlTryExists","SqlValueBool","SqlValueConvertToUtf8","SqlValueInt64","SqlValueNumber","SqlValueUtf8","Utf8AsJsonNode"],Math:["Abs","Acos","Asin","Asinh","Atan","Atan2","Cbrt","Ceil","Cos","Cosh","E","Eps","Erf","ErfInv","ErfcInv","Exp","Exp2","Fabs","Floor","Fmod","FuzzyEquals","Hypot","IsFinite","IsInf","IsNaN","Ldexp","Lgamma","Log","Log10","Log2","Mod","NearbyInt","Pi","Pow","Rem","Remainder","Rint","Round","RoundDownward","RoundToNearest","RoundTowardZero","RoundUpward","Sigmoid","Sin","Sinh","Sqrt","Tan","Tanh","Tgamma","Trunc"],Pire:["Capture","Grep","Match","MultiGrep","MultiMatch","Replace"],Re2:["Capture","Count","Escape","FindAndConsume","Grep","Match","Options","PatternFromLike","Replace"],Re2posix:["Capture","Count","Escape","FindAndConsume","Grep","Match","Options","PatternFromLike","Replace"],Digest:["Argon2","Blake2B","CityHash","CityHash128","Crc32c","Crc64","FarmHashFingerprint","FarmHashFingerprint128","FarmHashFingerprint2","FarmHashFingerprint32","FarmHashFingerprint64","Fnv32","Fnv64","HighwayHash","IntHash64","Md5HalfMix","Md5Hex","Md5Raw","MurMurHash","MurMurHash2A","MurMurHash2A32","MurMurHash32","NumericHash","Sha1","Sha256","SipHash","SuperFastHash","XXH3","XXH3_128"],Histogram:["CalcLowerBound","CalcLowerBoundSafe","CalcUpperBound","CalcUpperBoundSafe","GetSumAboveBound","GetSumBelowBound","GetSumInRange","Normalize","Print","ToCumulativeDistributionFunction"]}).reduce(((e,t)=>{let[n,i]=t;const s=i.map((e=>"".concat(n,"::").concat(e)));return e.concat(s)}),[]),c=["ROW_NUMBER","LAG","LEAD","FIRST_VALUE","LAST_VALUE","RANK","DENSE_RANK","SessionState"],m=[],T=["TablePathPrefix","Warning"],d={table:["AUTO_PARTITIONING_BY_SIZE","AUTO_PARTITIONING_PARTITION_SIZE_MB","AUTO_PARTITIONING_BY_LOAD","AUTO_PARTITIONING_MIN_PARTITIONS_COUNT","AUTO_PARTITIONING_MAX_PARTITIONS_COUNT","UNIFORM_PARTITIONS","READ_REPLICAS_SETTINGS","TTL","KEY_BLOOM_FILTER","STORE"],view:["security_invoker"],topic:["min_active_partitions","partition_count_limit","retention_period","retention_storage_mb","partition_write_speed_bytes_per_second","partition_write_burst_bytes","metering_mode"],object:[],user:[],group:[],externalDataSource:[],externalTable:[],tableStore:[],replication:["ENDPOINT","DATABASE","USER","PASSWORD"],tableIndex:[],topicConsumer:["important","read_from"]},g={Method:0,Function:1,Constructor:2,Field:3,Variable:4,Class:5,Struct:6,Interface:7,Module:8,Property:9,Event:10,Operator:11,Unit:12,Value:13,Constant:14,Enum:15,EnumMember:16,Keyword:17,Text:18,Color:19,File:20,Reference:21,Customcolor:22,Folder:23,TypeParameter:24,User:25,Issue:26,Snippet:27},p=/[\s'"-/@]/,S={externalDataSource:["external_data_source"],externalTable:["external_table"],replication:["replication"],table:["table","column_table"],tableStore:["column_store"],topic:["pers_queue_group"],view:["view"],tableIndex:["table_index","index"]},I=["dir","unknown"];function L(e){let t=e;return e.match(p)&&(t="`".concat(e,"`")),t}function y(e){let t=0,n=e.length;return e.startsWith("`")&&(t=1),e.endsWith("`")&&(n=-1),e.slice(t,n)}function A(e){return e.startsWith("/")?e.slice(1):e}function C(){let e=arguments.length>1?arguments[1]:void 0,t=A(y(arguments.length>0&&void 0!==arguments[0]?arguments[0]:""));const n=A(e);return t.startsWith(n)&&(t=t.slice(n.length)),A(t)}const h={suggestTemplates:0,suggestPragmas:1,suggestEntity:2,suggestColumns:3,suggestColumnAliases:4,suggestTableIndexes:5,suggestTableHints:6,suggestEntitySettings:7,suggestKeywords:8,suggestAggregateFunctions:9,suggestTableFunctions:10,suggestWindowFunctions:11,suggestFunctions:12,suggestSimpleTypes:13,suggestUdfs:14};function b(e){return h[e]}async function D(e,t,n,i){const o=C(i,n),r=await window.api.autocomplete({database:n,prefix:o,limit:1e3}),a=null===i||void 0===i?void 0:i.startsWith("`");if(r.Success){return function(e,t){const n=t.reduce(((e,t)=>{const n=S[t];return n&&n.forEach((t=>e.add(t))),e}),new Set(I));return e.filter((e=>{let{Type:t}=e;return n.has(t)}))}(r.Result.Entities,t).reduce(((t,n)=>{var i;let{Name:o,Type:r}=n;const l="dir"===r,u=l?"".concat(o,"/"):o;let c;return l&&!a&&(c="`".concat(u,"$0`")),t.push({label:u,insertText:null!==(i=c)&&void 0!==i?i:u,kind:l?g.Folder:g.Text,insertTextRules:c?s.languages.CompletionItemInsertTextRule.InsertAsSnippet:s.languages.CompletionItemInsertTextRule.None,detail:r,range:e,command:u.endsWith("/")?{id:"editor.action.triggerSuggest",title:""}:void 0,sortText:P(b("suggestEntity"))}),t}),[])}return[]}async function f(e){return(await async function(){return a}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"Function",range:e,sortText:P(b("suggestFunctions"))})))}async function F(e){return(await async function(){return r}()).map((t=>({label:t,insertText:t,kind:g.TypeParameter,detail:"Type",range:e,sortText:P(b("suggestSimpleTypes"))})))}async function v(e){return(await async function(){return u}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"UDF",range:e,sortText:P(b("suggestUdfs"))})))}async function E(e){return(await async function(){return c}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"Window function",range:e,sortText:P(b("suggestWindowFunctions"))})))}async function M(e){return(await async function(){return m}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"Table function",range:e,sortText:P(b("suggestTableFunctions"))})))}async function R(e){return(await async function(){return l}()).map((t=>({label:t,insertText:t,kind:g.Function,detail:"Aggregate function",range:e,sortText:P(b("suggestAggregateFunctions"))})))}async function N(e){return(await async function(){return T}()).map((t=>({label:t,insertText:t,kind:g.Module,detail:"Pragma",range:e,sortText:P(b("suggestPragmas"))})))}async function w(e,t){const n=await async function(e){return d[e]}(t);return n.map((t=>({label:t,insertText:t,kind:g.Property,detail:"Setting",range:e,sortText:P(b("suggestEntitySettings"))})))}const _="abcdefghijklmnopqrstuvwxyz";function P(e){const t=_[e];if(t)return t;const n=Math.floor(e/_.length),i=e%_.length;return _.slice(-1).repeat(n)+_[i]}function O(e){return async(t,i,s,o)=>{const r=function(e,t){const{startColumn:n,endColumn:i}=e.getWordUntilPosition(t),s="$"===e.getLineContent(t.lineNumber)[n-2]?1:0;return{startColumn:n-s,startLineNumber:t.lineNumber,endColumn:i,endLineNumber:t.lineNumber}}(t,i),a=await async function(e,t,i,s){const{parseYqlQuery:o}=await n.e(8607).then(n.bind(n,68607)),r={line:t.lineNumber,column:t.column},a=o(e.getValue(),r);let l=[],u=[],c=[],m=[],T=[],d=[],p=[],S=[],I=[];if(a.suggestEntity){const n=function(e,t){var n,i,s,o;const r=e.findPreviousMatch("\\s(`?[^\\s]*)",t,!0,!1,null,!0),a=e.findNextMatch("([^\\s]*)`?",t,!0,!1,null,!0);return"".concat(null!==(n=null===r||void 0===r||null===(i=r.matches)||void 0===i?void 0:i[1])&&void 0!==n?n:"").concat(null!==(s=null===a||void 0===a||null===(o=a.matches)||void 0===o?void 0:o[1])&&void 0!==s?s:"")}(e,t);l=await D(i,a.suggestEntity,s,n)}a.suggestFunctions&&(u=await f(i));a.suggestAggregateFunctions&&(c=await R(i));a.suggestWindowFunctions&&(m=await E(i));a.suggestTableFunctions&&(T=await M(i));a.suggestSimpleTypes&&(p=await F(i));a.suggestUdfs&&(d=await v(i));a.suggestPragmas&&(S=await N(i));a.suggestEntitySettings&&(I=await w(i,a.suggestEntitySettings));const A=await function(e,t){return t?null===t||void 0===t?void 0:t.map((t=>({label:t.name,insertText:t.name,kind:g.Field,detail:"Column alias",range:e,sortText:P(b("suggestColumnAliases"))}))):[]}(i,a.suggestColumnAliases),h=await async function(e,t,n){var i,s,o;if(null===t||void 0===t||!t.tables)return[];const r=[],a=t.tables.length>1,l=null!==(i=null===(s=t.tables)||void 0===s?void 0:s.map((e=>{let t=y(e.name);return t.endsWith("/")||(t="".concat(t,"/")),C(t,n)})))&&void 0!==i?i:[],u=Array.from(new Set(l)),c=await window.api.autocomplete({database:n,table:u,limit:1e3});if(!c.Success)return[];const m=null===(o=t.tables)||void 0===o?void 0:o.reduce(((e,t)=>{var i;const s=C(y(t.name),n),o=null!==(i=e[s])&&void 0!==i?i:[];return t.alias&&o.push(t.alias),e[s]=o,e}),{});return c.Result.Entities.forEach((t=>{if("column"!==t.Type)return;const i=L(t.Name),s=C(t.Parent,n),o=m[s];if(null!==o&&void 0!==o&&o.length)o.forEach((t=>{const n="".concat(t,".").concat(i);r.push({label:n,insertText:n,kind:g.Field,detail:"Column",range:e,sortText:P(b("suggestColumns"))})}));else{let t=i;a&&(t="".concat(L(s),".").concat(i)),r.push({label:t,insertText:t,kind:g.Field,detail:"Column",range:e,sortText:P(b("suggestColumns"))})}})),r}(i,a.suggestColumns,s),_=function(e,t){return t?null===t||void 0===t?void 0:t.map((t=>({label:t.value,insertText:t.value,kind:g.Keyword,detail:"Keyword",range:e,sortText:P(b("suggestKeywords"))}))):[]}(i,a.suggestKeywords),O=[...l,...u,...m,...T,...d,...p,...S,...A,...h,..._,...c,...I];return O}(t,i,r,e);return{suggestions:a}}}let x;function G(e){x&&x.dispose(),x=s.languages.registerCompletionItemProvider(o.m,{triggerCharacters:[" ",".","`","(","/"],provideCompletionItems:O(e)})}}}]);