#include <ydb/library/http_proxy/error/error.h>
#include <ydb/core/ymq/base/helpers.h>
#include <ydb/core/ymq/http/params.h>

#include <library/cpp/string_utils/base64/base64.h>

#include <util/string/cast.h>
#include <util/generic/strbuf.h>

namespace NKikimr::NSQS {
namespace {

const TString& ValidateAlphaNumAndPunctuation128ForAssign(const TString& value, TStringBuf parameterName) {
    if (value.size() > 128 || !IsAlphaNumAndPunctuation(value)) {
        if (parameterName) {
            throw TSQSException(NErrors::INVALID_PARAMETER_VALUE)
                << "Invalid parameter \"" << parameterName
                << "\". It is expected to be shorter than 128 characters and consist of aplhanum and punctuation characters.";
        } else {
            throw TSQSException(NErrors::INVALID_PARAMETER_VALUE);
        }
    }
    return value;
}

class TParameterValidator {
public:
    TParameterValidator(TStringBuf value, TStringBuf parameterName)
        : Value(value)
        , ParameterName(parameterName)
    {
    }

    template <class T>
    operator TMaybe<T>() const {
        T v;
        if (!TryFromString(Value, v)) {
            if (ParameterName) {
                throw TSQSException(NErrors::INVALID_PARAMETER_VALUE) << "Invalid parameter \"" << ParameterName << "\".";
            } else {
                throw TSQSException(NErrors::INVALID_PARAMETER_VALUE);
            }
        }
        return v;
    }

private:
    TStringBuf Value;
    TStringBuf ParameterName;
};

TParameterValidator ParseAndValidate(TStringBuf value, TStringBuf parameterName) {
    return TParameterValidator(value, parameterName);
}

%%{
machine params_parser;

include HttpDateTimeParser "../../../../util/datetime/parser.rl6";

alphtype unsigned char;

attribute =
    "Attribute" > { Num_ = 1; } ('.' int %{ Num_ = I; }) ? '.'
        (("Name"  % { CurrentParams_->Attributes[Num_].SetName(value); }) |
         ("Value" % { CurrentParams_->Attributes[Num_].SetValue(value); }));

attribute_name =
    "AttributeName" > { Num_ = 1; } ('.' int %{ Num_ = I; }) ?
        % { CurrentParams_->AttributeNames[Num_] = value; };

message_attribute =
    "MessageAttribute" > { Num_ = 1; } ('.' int %{ Num_ = I; }) ? '.'
        (("Name" % { CurrentParams_->MessageAttributes[Num_].SetName(value); }) |
         ("Value" '.'
            (("StringValue" % { CurrentParams_->MessageAttributes[Num_].SetStringValue(value); }) |
             ("DataType"    % { CurrentParams_->MessageAttributes[Num_].SetDataType(value); }) |
             ("BinaryValue" % { CurrentParams_->MessageAttributes[Num_].SetBinaryValue(Base64Decode(value)); }))));

change_visibility_entry =
    "ChangeMessageVisibilityBatchRequestEntry" > { Id_ = 1; } ('.' int %{ Id_ = I; CurrentParams_ = &Params_->BatchEntries[Id_]; }) '.'
        (("Id"                % { CurrentParams_->Id = value; }) |
         ("ReceiptHandle"     % { CurrentParams_->ReceiptHandle = value; }) |
         ("VisibilityTimeout" % { CurrentParams_->VisibilityTimeout = ParseAndValidate(value, TStringBuf("VisibilityTimeout")); }));

delete_message_entry =
    "DeleteMessageBatchRequestEntry" > { Id_ = 1; } ('.' int %{ Id_ = I; CurrentParams_ = &Params_->BatchEntries[Id_]; }) '.'
        (("Id"            % { CurrentParams_->Id = value; }) |
         ("ReceiptHandle" % { CurrentParams_->ReceiptHandle = value; }));

send_message_entry =
    "SendMessageBatchRequestEntry" > { Id_ = 1; } ('.' int %{ Id_ = I; CurrentParams_ = &Params_->BatchEntries[Id_]; }) '.'
        (("DelaySeconds"           % { CurrentParams_->DelaySeconds = ParseAndValidate(value, TStringBuf("DelaySeconds")); }) |
         ("Id"                     % { CurrentParams_->Id = value; }) |
         ("MessageBody"            % { CurrentParams_->MessageBody = value; }) |
         ("MessageDeduplicationId" % { CurrentParams_->MessageDeduplicationId = ValidateAlphaNumAndPunctuation128ForAssign(value, TStringBuf("MessageDeduplicationId")); }) |
         ("MessageGroupId"         % { CurrentParams_->MessageGroupId = ValidateAlphaNumAndPunctuation128ForAssign(value, TStringBuf("MessageGroupId")); }) |
         message_attribute);

delete_queue_entry =
    "DeleteQueueBatchRequestEntry" > { Id_ = 1; } ('.' int %{ Id_ = I; CurrentParams_ = &Params_->BatchEntries[Id_]; }) '.'
        (("Id"       % { CurrentParams_->Id = value; }) |
         ("QueueUrl" % { CurrentParams_->QueueUrl = value; }));

purge_queue_entry =
    "PurgeQueueBatchRequestEntry" > { Id_ = 1; } ('.' int %{ Id_ = I; CurrentParams_ = &Params_->BatchEntries[Id_]; }) '.'
        (("Id"       % { CurrentParams_->Id = value; }) |
         ("QueueUrl" % { CurrentParams_->QueueUrl = value; }));

get_queue_attributes_entry =
    "GetQueueAttributesBatchRequestEntry" > { Id_ = 1; } ('.' int %{ Id_ = I; CurrentParams_ = &Params_->BatchEntries[Id_]; }) '.'
        (("Id"       % { CurrentParams_->Id = value; }) |
         ("QueueUrl" % { CurrentParams_->QueueUrl = value; }));

permissions_entry =
    "Permission" > { Id_ = 1; } ('.' int %{ Id_ = I; CurrentParams_ = &Params_->BatchEntries[Id_]; CurrentParams_->Action = value; });

main := |*
    ('Action')                  { CurrentParams_->Action = value; };
    ('Clear')                   { CurrentParams_->Clear = value; };
    ('DelaySeconds')            { CurrentParams_->DelaySeconds = ParseAndValidate(value, TStringBuf("DelaySeconds")); };
    ('folderId')                { CurrentParams_->FolderId = value; };
    ('MaxNumberOfMessages')     { CurrentParams_->MaxNumberOfMessages = ParseAndValidate(value, TStringBuf("MaxNumberOfMessages")); };
    ('MessageBody')             { CurrentParams_->MessageBody = value; };
    ('MessageDeduplicationId')  { CurrentParams_->MessageDeduplicationId = ValidateAlphaNumAndPunctuation128ForAssign(value, TStringBuf("MessageDeduplicationId")); };
    ('MessageGroupId')          { CurrentParams_->MessageGroupId = ValidateAlphaNumAndPunctuation128ForAssign(value, TStringBuf("MessageGroupId")); };
    ('Path')                    { CurrentParams_->Path = value; };
    ('QueueName')               { CurrentParams_->QueueName = value; };
    ('QueueNamePrefix')         { CurrentParams_->QueueNamePrefix = value; };
    ('QueueUrl')                { CurrentParams_->QueueUrl = value; };
    ('ReceiptHandle')           { CurrentParams_->ReceiptHandle = value; };
    ('ReceiveRequestAttemptId') { CurrentParams_->ReceiveRequestAttemptId = ValidateAlphaNumAndPunctuation128ForAssign(value, TStringBuf("ReceiveRequestAttemptId")); };
    ('Subject')                 { CurrentParams_->Subject = value; };
    ('UserName')                { CurrentParams_->UserName = value; };
    ('UserNamePrefix')          { CurrentParams_->UserNamePrefix = value; };
    ('Version')                 { CurrentParams_->Version = value; };
    ('VisibilityTimeout')       { CurrentParams_->VisibilityTimeout = ParseAndValidate(value, TStringBuf("VisibilityTimeout")); };
    ('WaitTimeSeconds')         { CurrentParams_->WaitTimeSeconds = ParseAndValidate(value, TStringBuf("WaitTimeSeconds")); };
    ('CreatedTimestamp')        { CurrentParams_->CreateTimestampSeconds = ParseAndValidate(value, TStringBuf("CreatedTimestamp")); };
    ('CustomQueueName')         { CurrentParams_->CustomQueueName = ParseAndValidate(value, TStringBuf("CustomQueueName")); };

    attribute;
    attribute_name;
    change_visibility_entry;
    delete_message_entry;
    message_attribute;
    permissions_entry;
    send_message_entry;
    delete_queue_entry;
    purge_queue_entry;
    get_queue_attributes_entry;
*|;

}%%

%% write data;

} // namespace

TParametersParser::TParametersParser(TParameters* params)
    : Params_(params)
    , CurrentParams_(params)
    , Id_(1)
    , Num_(1)
{
}

TParametersParser::~TParametersParser()
{ }

void TParametersParser::Append(const TString& name, const TString& value) {
    CurrentParams_ = Params_;

    int cs;
    int act;
    int I = 0;
    int Dc = 0;
    const unsigned char *ts, *te;
    %% write init;

    Y_UNUSED(Dc);
    Y_UNUSED(ts);
    Y_UNUSED(act);

    const unsigned char* p = (const unsigned char*)name.data();
    const unsigned char* pe = p + name.size();
    const unsigned char *eof = pe;

    %% write exec;
}

} // namespace NKikimr::NSQS
