#include <ydb/library/global_plugins/abstract.h>
#include <contrib/libs/breakpad/src/client/linux/handler/exception_handler.h>
#include <unistd.h>
#include <sys/wait.h>


class TMinidumper {
public:
    TMinidumper(const char* path) {
        Init(path);
    }
    void Init(const char* path) {
        if (TStringBuf(path)) {
            Handler = MakeHolder<google_breakpad::ExceptionHandler>(google_breakpad::MinidumpDescriptor(path), nullptr, DumpCallback, nullptr, true, -1, true);
        }
    }

    TString Script = getenv("BREAKPAD_MINIDUMPS_SCRIPT");

    private:
    static bool DumpCallback(const google_breakpad::MinidumpDescriptor& descriptor, void* context, bool succeeded);
    THolder<google_breakpad::ExceptionHandler> Handler;
};

TMinidumper Minidumper(getenv("BREAKPAD_MINIDUMPS_PATH"));

bool TMinidumper::DumpCallback(const google_breakpad::MinidumpDescriptor& descriptor, void* /*context*/, bool succeeded) {
    if (Minidumper.Script) {
        if (auto pid = fork()) {
            waitpid(pid, 0, 0);
        } else {
            char* dumpSucceded = succeeded ? (char *)"true" : (char *)"false";  
            char* descriptorPath = succeeded ? (char *)descriptor.path() : (char *)"\0";  
            char* cmd[] = {Minidumper.Script.begin(), dumpSucceded, descriptorPath, NULL};  
            if (execve(cmd[0], &cmd[0], NULL)) {
                fprintf(stderr, "Error while process BREAKPAD MINIDUMPS SCRIPT: execve(%s '%s' '%s' '%s'): %s\n", cmd[0], cmd[1], cmd[2], strerror(errno));
            }
        }
    }
    return succeeded;
}


class TMinidumperInitilizer final: public NYdb::NGlobalPlugins::IPluginInitilizer {
public:
    void SetupOpts(NLastGetopt::TOpts& opts) override {
        opts.AddLongOption("breakpad-minidumps-path", "Path for minidumps generated by internal breakpad")
            .RequiredArgument("PATH").Handler1T<TString>([](const TString& path) {
            Minidumper.Init(path.c_str());
        });
        opts.AddLongOption("breakpad-minidumps-script", "Script for process minidumps generated by internal breakpad")
            .RequiredArgument("SCRIPT").StoreResult(&Minidumper.Script);
    }
    NYdb::NGlobalPlugins::IPlugin::TPtr CreatePlugin() const override {
        return {};
    }
    const static NYdb::NGlobalPlugins::TPluginFactory::TRegistrator<TMinidumperInitilizer> Registrar;
};

const NYdb::NGlobalPlugins::TPluginFactory::TRegistrator<TMinidumperInitilizer> TMinidumperInitilizer::Registrar("internal_breakpad");
