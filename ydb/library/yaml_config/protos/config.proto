syntax = "proto2";

import "ydb/core/config/protos/marker.proto";
import "ydb/core/protos/blobstorage.proto";
import "ydb/core/protos/blobstorage_config.proto";
import "ydb/core/protos/blobstorage_disk.proto";
import "ydb/core/protos/blobstorage_disk_color.proto";
import "ydb/core/protos/blobstorage_pdisk_config.proto";
import "ydb/core/protos/blobstorage_vdisk_config.proto";
import "ydb/core/protos/bootstrap.proto";
import "ydb/core/protos/config.proto";
import "ydb/library/actors/protos/interconnect.proto";

package NKikimrConfig;
option java_package = "ru.yandex.kikimr.proto";

// message below used to parse part of yaml by following path
// /blob_storage_config/service_set/groups/*/rings/*/fail_domains/*/vdisk_locations/*
// later this part is transformed and copied to corresponding config parts
message TCombinedDiskInfo {
    option (NMarkers.CombinedType) = true;
    optional string NodeID = 1; // +allow string // have to copy manually
    optional uint32 PDiskID = 2 [(NMarkers.CopyTo) = "TVDiskLocation", (NMarkers.CopyTo) = "TPDisk"];
    optional uint32 VDiskSlotID = 3 [(NMarkers.CopyTo) = "TVDiskLocation"];
    optional uint64 PDiskGuid = 4 [(NMarkers.CopyTo) = "TVDiskLocation", (NMarkers.CopyTo) = "TPDisk"];

    optional NKikimrBlobStorage.TVDiskID VDiskID = 101 [(NMarkers.CopyTo) = "TVDisk"];
    optional NKikimrBlobStorage.TVDiskLocation VDiskLocation = 102 [(NMarkers.CopyTo) = "TVDisk"];
    optional NKikimrBlobStorage.TVDiskKind.EVDiskKind VDiskKind = 103 [(NMarkers.CopyTo) = "TVDisk"];
    optional bool DoDestroy = 104 [default = false, (NMarkers.CopyTo) = "TVDisk"];
    optional bool DoWipe = 105 [default = false, (NMarkers.CopyTo) = "TVDisk"];
    optional NKikimrBlobStorage.EEntityStatus EntityStatus = 106 [(NMarkers.CopyTo) = "TVDisk", (NMarkers.CopyTo) = "TPDisk"];
    optional string StoragePoolName = 108 [(NMarkers.CopyTo) = "TVDisk"];
    optional NKikimrBlobStorage.TNodeWardenServiceSet.TVDisk.TDonorMode DonorMode = 109 [(NMarkers.CopyTo) = "TVDisk"];
    repeated NKikimrBlobStorage.TNodeWardenServiceSet.TVDisk.TDonor Donors = 110 [(NMarkers.CopyTo) = "TVDisk"];
    optional bool ReadOnly = 111 [(NMarkers.CopyTo) = "TVDisk"];

    optional string Path = 203 [(NMarkers.CopyTo) = "TPDisk"];
    optional string PDiskCategory = 206; // +allow string // have to copy manually
    optional NKikimrBlobStorage.TPDiskConfig PDiskConfig = 207 [(NMarkers.CopyTo) = "TPDisk"];
    optional uint64 InMemoryForTestsBufferBytes = 210 [default = 0, (NMarkers.CopyTo) = "TPDisk"];
    optional string ExpectedSerial = 211 [(NMarkers.CopyTo) = "TPDisk"];
    optional NKikimrBlobStorage.TSerialManagementStage.E ManagementStage = 212 [(NMarkers.CopyTo) = "TPDisk"];
    optional NKikimrBlobStorage.TPDiskSpaceColor.E SpaceColorBorder = 213 [(NMarkers.CopyTo) = "TPDisk"];
}

message TSystemTablets {
    option (NMarkers.WithMapType) = true;
    repeated uint64 DefaultNode = 1;
    repeated NKikimrConfig.TBootstrap.TTablet FlatHive = 2 [(NMarkers.AsMap) = "Tablets"];
    repeated NKikimrConfig.TBootstrap.TTablet FlatBsController = 3 [(NMarkers.AsMap) = "Tablets"];
    repeated NKikimrConfig.TBootstrap.TTablet FlatSchemeshard = 4 [(NMarkers.AsMap) = "Tablets"];
    repeated NKikimrConfig.TBootstrap.TTablet Cms = 5 [(NMarkers.AsMap) = "Tablets"];
    repeated NKikimrConfig.TBootstrap.TTablet NodeBroker = 6 [(NMarkers.AsMap) = "Tablets"];
    repeated NKikimrConfig.TBootstrap.TTablet TenantSlotBroker = 7 [(NMarkers.AsMap) = "Tablets"];
    repeated NKikimrConfig.TBootstrap.TTablet Console = 8 [(NMarkers.AsMap) = "Tablets"];
    repeated NKikimrConfig.TBootstrap.TTablet FlatTxCoordinator = 9 [(NMarkers.AsMap) = "Tablets"];
    repeated NKikimrConfig.TBootstrap.TTablet TxAllocator = 10 [(NMarkers.AsMap) = "Tablets"];
    repeated NKikimrConfig.TBootstrap.TTablet TxMediator = 11 [(NMarkers.AsMap) = "Tablets"];
}

message TExtendedHostConfigDrive {
    option (NMarkers.CombinedType) = true;
    optional string Path = 1 [(NMarkers.CopyTo) = "THostConfigDrive"];
    optional string Type = 2 [
        (NMarkers.AdvancedCopyTo) = {
            Target: "THostConfigDrive"
            Transform: true
        }];
    optional bool SharedWithOs = 3 [(NMarkers.CopyTo) = "THostConfigDrive"];
    optional bool ReadCentric = 4 [(NMarkers.CopyTo) = "THostConfigDrive"];
    optional uint64 Kind = 5 [(NMarkers.CopyTo) = "THostConfigDrive"];

    optional NKikimrBlobStorage.TPDiskConfig PDiskConfig = 6 [(NMarkers.CopyTo) = "THostConfigDrive"];
}

message THosts {
    optional uint32 NodeId = 1;
    optional uint32 Port = 2;
    optional uint64 HostConfigId = 3;
    optional string Host = 4;
    optional string InterconnectHost = 5;
    optional NActorsInterconnect.TNodeLocation Location = 6;
    repeated TStaticNameserviceConfig.TEndpoint Endpoint = 7;
    optional NActorsInterconnect.TNodeLocation WalleLocation = 8 [deprecated=true];
    optional string Address = 9;
    optional string Name = 10;
    repeated TExtendedHostConfigDrive Drive = 11;
}

message TTls {
    option (NMarkers.CombinedType) = true;
    optional string Key = 1 [
        (NMarkers.AdvancedCopyTo) = {
            Target: "TGRpcConfig"
            Keep: true
        },
        (NMarkers.AdvancedCopyTo) = {
            Target: "TInterconnectConfig"
            Keep: true
            Rename: "PathToPrivateKeyFile"
        }];
    optional string Cert = 2 [
        (NMarkers.AdvancedCopyTo) = {
            Target: "TGRpcConfig"
            Keep: true
        },
        (NMarkers.AdvancedCopyTo) = {
            Target: "TInterconnectConfig"
            Keep: true
            Rename: "PathToCertificateFile"
        }];
    optional string CA = 3 [
        (NMarkers.AdvancedCopyTo) = {
            Target: "TGRpcConfig"
            Keep: true
        },
        (NMarkers.AdvancedCopyTo) = {
            Target: "TInterconnectConfig"
            Keep: true
            Rename: "PathToCaFile"
        }];
}

message TExtendedDefineHostConfig {
    option (NMarkers.CombinedType) = true;
    optional uint64 HostConfigId = 1 [(NMarkers.CopyTo) = "TDefineHostConfig"];
    optional string Name = 2 [(NMarkers.CopyTo) = "TDefineHostConfig"];
    repeated TExtendedHostConfigDrive Drive = 3 [
        (NMarkers.AdvancedCopyTo) = {
            Target: "TDefineHostConfig"
            Recurse: "THostConfigDrive"
        }];

    optional NKikimrBlobStorage.TPDiskConfig DefaultHostPDiskConfig = 4 [(NMarkers.CopyTo) = "TDefineHostConfig"];

    repeated string Rot = 5 [(NMarkers.CopyTo) = "TDefineHostConfig"];
    repeated string Ssd = 6 [(NMarkers.CopyTo) = "TDefineHostConfig"];
    repeated string Nvme = 7 [(NMarkers.CopyTo) = "TDefineHostConfig"];

    optional uint64 ItemConfigGeneration = 100 [(NMarkers.CopyTo) = "TDefineHostConfig"];
}

// these are additional fields used only before transformations
// after all transformations they shouldnt be used
// but probably will be saved for debugging purposes
message TEphemeralInputFields {
    optional TSystemTablets SystemTablets = 1;
    optional string StaticErasure = 2;
    repeated THosts Hosts = 3;
    repeated TExtendedDefineHostConfig HostConfigs = 4;
    optional uint32 StorageConfigGeneration = 5;
    // mutually exclusive with StaticErasure, but we should only warn and perfer one of them for smoother transition
    optional string Erasure = 6;
    optional string DefaultDiskType = 7 [default = "SSD"];
    optional TTls Tls = 8;
}
