(
(let Equals (lambda '(value) (lambda '(x) (== x value))))
(let Unequals (lambda '(value) (lambda '(x) (!= x value))))

(let FindIndex (lambda '(list predicate) (block '(
   (let enumerated (Enumerate list))
   (let filtered (Filter enumerated (lambda '(x) (Coalesce (Apply predicate (Nth x '1)) (Bool '0)))))
   (return (Nth (ToOptional filtered) '0))
))))

(let IndexOf (lambda '(list item) (Apply FindIndex list (Apply Equals item))))
(let RemoveOptionalType (lambda '(type) (MatchType type 'Optional (lambda '() (OptionalItemType type))  (lambda '() type))))
(let MaskBit (lambda '(value index) (ShiftLeft (Data (Apply RemoveOptionalType (TypeOf value)) '1) index)))

(let TestBitInt (lambda '(value index) (Convert (BitAnd value (Apply MaskBit value index)) 'Bool)))
(let TestBitStr (lambda '(value index) (Apply TestBitInt (ByteAt value (Convert (ShiftRight (Convert index 'Uint64) (Uint8 '8)) 'Uint32)) (BitAnd (Convert index 'Uint8) (Uint8 '7)))))
(let TestBit (lambda '(value index) (block '(
    (let x (InstanceOf (Apply RemoveOptionalType (TypeOf value))))
    (return (IfType x (DataType 'String)
        (lambda '() (Apply TestBitStr value index))
        (lambda '() (IfType x (DataType 'Utf8)
            (lambda '() (Apply TestBitStr value index))
            (lambda '() (Apply TestBitInt value index))))))
))))
(let SetBit (lambda '(value index) (BitOr value (Apply MaskBit value index))))
(let ClearBit (lambda '(value index) (BitAnd value (BitNot (Apply MaskBit value index)))))
(let FlipBit (lambda '(value index) (BitXor value (Apply MaskBit value index))))

(let Decode (lambda '(key cases default) (block '(
   (let n (Enumerate cases))
   (let p (Filter (Zip (Skip n (Uint64 '1)) n) (lambda '(x) (!= (BitAnd (Uint64 '1) (Nth (Nth x '0) '0)) (Uint64 '0)))))
   (let f (Fold p default (lambda '(x state) (If (== key (Nth (Nth x '1) '1)) (Nth (Nth x '0) '1) state))))
   (return f)
))))

(let PythonFuncSignatureScript (String '@@
try:
    import typing
except:
    typing = None

def convert_annotation(arg_name, ann, func_name):
    from yql.typing import is_valid_type, parse_slice_arg
    if is_valid_type(ann):
        return str(ann)

    if isinstance(ann, slice) and arg_name != "return":
       ret = parse_slice_arg(ann)
       if ret: return ret

    raise ValueError("Unknown type annotation " + repr(ann) + " in the function " + func_name + " for " +
        ("return value" if arg_name == "return" else "argument " + arg_name))

def parse_annotations(func, ann, name):
    if not hasattr(func, "__code__") or not hasattr(func, "__defaults__"):
        raise ValueError("Cannot extract code object and defaults in the function: " + name)
    code = func.__code__
    defaults = func.__defaults__
    if code.co_flags & 0x0c:
       raise ValueError("*args or **kwargs are not supported in the function: " + name)
    if defaults is not None:
        for d in defaults:
            if d is not None:
                raise ValueError("Only None is supported as default value in the function: " + name)
    ret = ann.get("return")
    if not ret:
        raise ValueError("No return type annotation in the function: " + name)
    args = []
    for arg_name in code.co_varnames[:code.co_argcount]:
        arg = ann.get(arg_name)
        if not arg:
            raise ValueError("No type annotation for argument: " + arg_name + " in the function: " + name)
        args.append((arg_name, arg))
    if defaults:
        return ("(" + ",".join(convert_annotation(arg[0], arg[1], name) for arg in args[:len(args)-len(defaults)]) +
            ("," if len(args)>len(defaults) else "") + "[" +
            ",".join(convert_annotation(arg[0], arg[1], name) for arg in args[len(args)-len(defaults):]) +
            "])->" + convert_annotation("return", ret, name));
    else:
        return "(" + ",".join(convert_annotation(arg[0], arg[1], name) for arg in args) + ")->" + convert_annotation("return", ret, name);

def signature(script, name):
    import sys
    if sys.version_info >= (3, 0):
        name = name.decode("utf-8")

    try:
        exec(script)
        func = locals()[name]
        if typing is not None and hasattr(func, "__annotations__"):
            ann = func.__annotations__
            if ann:
                return parse_annotations(func, ann, name)
        doc = func.__doc__
        if doc is None:
            raise ValueError("Missing doc string in the function: " + name)
        lines = doc.lstrip().splitlines()
        func = []
        for line in lines:
            if not line.strip():
                break
            func.append(line)
        if not func:
            raise ValueError("Cannot extract type signature from the empty doc string in the function: " + name)
        return "\n".join(func)
    except ValueError:
        raise
    except:
        import traceback
        import sys
        if sys.version_info >= (3, 0):
            from io import StringIO
        else:
            from cStringIO import StringIO

        out = StringIO()
        nested = traceback.print_exc(file=out)
        raise RuntimeError("Failed to extract type signature in the function: " + name + ", reason: \n" + out.getvalue())
@@))

(let PythonFuncSignature (lambda '(flavor script name) (Apply 
    (ScriptUdf flavor 'signature (ParseType '"(String, String)->String") PythonFuncSignatureScript) script name)))

(let KeysImpl (lambda '(seq)
   (MatchType seq 'Dict (lambda '() (DictKeys seq)) (lambda '() 
       (MatchType seq 'EmptyDict (lambda '() (EmptyList)) (lambda '() seq)))
)))

(let ToSet (lambda '(list) (ToDict list (lambda '(x) x) (lambda '(x) (Void)) '('Auto 'One))))
(let SetIsDisjointImpl (lambda '(dict scan) (Not (HasItems (SkipWhile
    (Apply KeysImpl scan)
    (lambda '(item) (Not (Contains dict item))))))))

(let AutoMap2 (lambda '(f) (lambda '(x y) (MatchType x 'Optional
(lambda '() (MatchType y 'Optional
    (lambda '() # opt/opt
        (FlatMap x (lambda '(x) (Map y (lambda '(y) (Apply f x y)))))
    )
    (lambda '() # opt/!opt
        (Map x (lambda '(x) (Apply f x y)))
    )
))

(lambda '() (MatchType y 'Optional
    (lambda '() # !opt/opt
        (Map y (lambda '(y) (Apply f x y)))
    )
    (lambda '() # !opt/!opt
        (Apply f x y)
    )
))
))))

(let SetIntersectionImpl (lambda '(f)
    (lambda '(x y) (ToDict (FlatMap (DictItems x) (lambda '(p) (block '(
        (let key (Nth p '0))
        (let lookup (Lookup y key))
        (return (Map lookup (lambda '(r) '(key (Apply f key (Nth p '1) r)))))
    )))) (lambda '(z) (Nth z '0)) (lambda '(z) (Nth z '1)) '('Auto 'One)
    )
)))

(let SetIncludesImpl (lambda '(dict scan) (Not (HasItems (SkipWhile
    (Apply KeysImpl scan)
    (lambda '(item) (Contains dict item)))))))

(let SetDifferenceImpl (lambda '(x y) (ToDict (Filter (DictItems x) (lambda '(p)
    (Not (Contains y (Nth p '0)))))
    (lambda '(z) (Nth z '0)) (lambda '(z) (Nth z '1)) '('Auto 'One) )))

(let SetUnionImpl (lambda '(f)
    (lambda '(x y) (ToDict (Extend
        (Map (DictItems x) (lambda '(p) (block '(
        (let key (Nth p '0))
        (let lookup (Lookup y key))
        (return '(key (Apply f key (Just (Nth p '1)) lookup)))
        ))))
        (FlatMap (DictItems y) (lambda '(p) (block '(
        (let key (Nth p '0))
        (let lookup (Lookup x key))
        (return (If (Exists lookup) (Null) '(key (Apply f key lookup (Just (Nth p '1)) ))))
        ))))
        )
        (lambda '(z) (Nth z '0)) (lambda '(z) (Nth z '1)) '('Auto 'One)
    )
)))

(let SetSymmetricDifferenceImpl (lambda '(f)
    (lambda '(x y) (ToDict (Extend
        (FlatMap (DictItems x) (lambda '(p) (block '(
        (let key (Nth p '0))
        (let lookup (Lookup y key))
        (return (If (Exists lookup) (Null) '(key (Apply f key (Just (Nth p '1)) lookup ))))
        ))))
        (FlatMap (DictItems y) (lambda '(p) (block '(
        (let key (Nth p '0))
        (let lookup (Lookup x key))
        (return (If (Exists lookup) (Null) '(key (Apply f key lookup (Just (Nth p '1)) ))))
        ))))
        )
        (lambda '(z) (Nth z '0)) (lambda '(z) (Nth z '1)) '('Auto 'One)
    )
)))

(let SetIsDisjoint (Apply AutoMap2 SetIsDisjointImpl))
(let SetIntersection3 (lambda '(x y f) (Apply (Apply AutoMap2 (Apply SetIntersectionImpl f)) x y)))
(let SetIntersection2 (lambda '(x y) (Apply SetIntersection3 x y (lambda '(k a b) (Void)))))
(let SetIncludes (Apply AutoMap2 SetIncludesImpl))
(let SetDifference (Apply AutoMap2 SetDifferenceImpl))
(let SetUnion3 (lambda '(x y f) (Apply (Apply AutoMap2 (Apply SetUnionImpl f)) x y)))
(let SetUnion2 (lambda '(x y) (Apply SetUnion3 x y (lambda '(k a b) (Void)))))
(let SetSymmetricDifference3 (lambda '(x y f) (Apply (Apply AutoMap2 (Apply SetSymmetricDifferenceImpl f)) x y)))
(let SetSymmetricDifference2 (lambda '(x y) (Apply SetSymmetricDifference3 x y (lambda '(k a b) (Void)))))

(let ListAggregateImpl (lambda '(list factory) (MatchType list 'EmptyList 
   (lambda '() (AsList (Null)))
   (lambda '() (Extract (Aggregate
   (Map list (lambda '(x) (AsStruct '('Data x))))
   '()
   '('('Data (Apply factory (StructType '('Data (ListItemType (TypeOf list)))) (lambda '(x) (Member x 'Data)))))
   '('('compact))
   ) 'Data))
)))

(let FirstItem (lambda '(list) (Unwrap (ToOptional list))))

(let ListAggregate (lambda '(list factory) (MatchType list 'Null (lambda '() (Null)) (lambda '() (MatchType list 'Optional
    (lambda '() (Apply FirstItem (Apply ListAggregateImpl (Coalesce list (List (OptionalItemType (TypeOf list)))) factory)))
    (lambda '() (Apply FirstItem (Apply ListAggregateImpl list factory)))
)))))

(let DictAggregateImpl (lambda '(dict factory) (MatchType dict 'EmptyDict (lambda '() (EmptyDict)) (lambda '() (ToDict (Aggregate
   (FlatMap (Map (DictItems dict) (lambda '(x) (AsStruct '('Key (Nth x '0)) '('Data (Nth x '1)))))
      (lambda '(row) (Map (Member row 'Data) (lambda '(item) (AsStruct '('Key (Member row 'Key)) '('Data item))))))
   '('Key)
   '('('Data (Apply factory (StructType '('Data (ListItemType (DictPayloadType (TypeOf dict))))) (lambda '(x) (Member x 'Data)))))
   '('('compact))
) 
(lambda '(x) (Member x 'Key)) (lambda '(x) (Member x 'Data)) '('Auto 'One)
)))))

(let DictAggregate (lambda '(dict factory) (MatchType dict 'Null (lambda '() (Null)) (lambda '() (MatchType dict 'Optional
    (lambda '() (Map dict (lambda '(unpacked) (Apply DictAggregateImpl unpacked factory))))
    (lambda '() (Apply DictAggregateImpl dict factory))
)))))

(let AggregateTransformInput (lambda '(factory transform) (lambda '(type extractor)
    (Apply factory type (lambda '(x) (Apply transform (Apply extractor x))))
)))

(let AggregateTransformOutput (lambda '(factory transform) (lambda '(type extractor) (block '(
    (let traits (Apply factory type extractor))
    (let init (NthArg '1 traits))
    (let update (NthArg '2 traits))
    (let save (NthArg '3 traits))
    (let load (NthArg '4 traits))
    (let merge (NthArg '5 traits))
    (let finish (NthArg '6 traits))
    (return (AggregationTraits type init update save load merge (lambda '(x) (Apply transform (Apply finish x))) (Null)))
)))))

(let AggregateFlatten (lambda '(factory) (lambda '(type extractor) (block '(
    (let traits (Apply factory (ListItemType (TypeOf (Apply extractor (InstanceOf type)))) (lambda '(x) x)))
    (let init (NthArg '1 traits))
    (let update (NthArg '2 traits))
    (let save (NthArg '3 traits))
    (let load (NthArg '4 traits))
    (let merge (NthArg '5 traits))
    (let finish (NthArg '6 traits))

    (let list_init (lambda '(value parent) (Fold1 (Apply extractor value)
        (lambda '(x) (NamedApply init '(x) (AsStruct) (DependsOn parent)))
        (lambda '(x y) (NamedApply update '(x y) (AsStruct) (DependsOn parent)))
    )))
    (let list_update (lambda '(value state parent) (IfPresent state (lambda '(unpackedState) 
        (Just (Fold (Apply extractor value) unpackedState
        (lambda '(x y) (NamedApply update '(x y) (AsStruct) (DependsOn parent)))))) 
        (Fold1 (Apply extractor value)
            (lambda '(x) (NamedApply init '(x) (AsStruct) (DependsOn parent)))
            (lambda '(x y) (NamedApply update '(x y) (AsStruct) (DependsOn parent))) ))))
    (let list_save (lambda '(state) (Map state save)))
    (let list_load (lambda '(state) (Map state load)))
    (let list_merge (lambda '(state1 state2) (OptionalReduce state1 state2 merge)))
    (let list_finish (lambda '(state) (Map state finish)))

    (return (AggregationTraits type list_init list_update list_save list_load list_merge list_finish (Null)))
)))))

(let ChooseMembersImpl (lambda '(str fields) 
    (Apply (EvaluateCode (LambdaCode (lambda '(row) (block '(
        (let items (ListMap fields (lambda '(f) (block '(
            (let atom (AtomCode f))
            (return (ListCode atom (FuncCode (String 'Member) row atom)))
        )))))

        (return (FuncCode (String 'AsStruct) items))
    ))))) str)
))

(let RemoveMembersImpl (lambda '(str fields) (block '(
    (return (Apply (EvaluateCode (LambdaCode (lambda '(row) (block '(
        (let type (Apply RemoveOptionalType (TypeOf str)))
        (let all (ListExtract (StructTypeComponents (TypeHandle type)) 'Name))
        (let fields (ListMap fields (lambda '(f) (Ensure f (SqlIn all f '()) (Concat (String '"Member not found: ") f)))))
        (let items (ListNotNull (ListMap all (lambda '(f) (block '(
            (let atom (AtomCode f))
            (let predicate (SqlIn fields f '()))
            (return (If predicate (Null) (ListCode atom (FuncCode (String 'Member) row atom))))
        ))))))

        (return (MatchType type 'Null (lambda '() (ReprCode (Null))) (lambda '() (FuncCode (String 'AsStruct) items))))
    ))))) str))))
))

(let ForceRemoveMembersImpl (lambda '(str fields) (block '(
    (return (Apply (EvaluateCode (LambdaCode (lambda '(row) (block '(
        (let type (Apply RemoveOptionalType (TypeOf str)))
        (let all (ListExtract (StructTypeComponents (TypeHandle (TypeOf str))) 'Name))
        (let items (ListNotNull (ListMap all (lambda '(f) (block '(
            (let atom (AtomCode f))
            (let predicate (SqlIn fields f '()))
            (return (If predicate (Null) (ListCode atom (FuncCode (String 'Member) row atom))))
        ))))))

        (return (MatchType type 'Null (lambda '() (ReprCode (Null))) (lambda '() (FuncCode (String 'AsStruct) items))))
    ))))) str))))
))

(let DispatchStructFunc (lambda '(impl) (lambda '(str fields) 
    (MatchType str 'Null (lambda '() (Null)) (lambda '()
    (MatchType str 'Optional (lambda '() (Map str (lambda '(unpacked) (Apply impl unpacked fields))))
    (lambda '() (Apply impl str fields))))
))))

(let ChooseMembers (Apply DispatchStructFunc ChooseMembersImpl))
(let RemoveMembers (Apply DispatchStructFunc RemoveMembersImpl))
(let ForceRemoveMembers (Apply DispatchStructFunc ForceRemoveMembersImpl))

(let StructMembers (lambda '(str) 
    (MatchType str 'Null (lambda '() (List (ListType (DataType 'String)))) (lambda '()
    (Extract (StructTypeComponents (TypeHandle (Apply RemoveOptionalType (TypeOf str)))) 'Name))
)))

(let GatherMembersImpl (lambda '(str) 
    (Apply (EvaluateCode (LambdaCode (lambda '(strCode) (block '(
        (let type (Apply RemoveOptionalType (TypeOf str)))
        (let fields (ListExtract (StructTypeComponents (TypeHandle type)) 'Name))
        (let items (ListMap fields (lambda '(f) (block '(
            (let atom (AtomCode f))
            (return (ListCode (ReprCode f) (FuncCode (String 'Member) strCode atom)))
        )))))

        (return (MatchType type 'Null (lambda '() (ReprCode (EmptyList))) (lambda '() (FuncCode (String 'AsList) items))))
    ))))) str)
))

(let GatherMembers (lambda '(str)
    (MatchType str 'Null (lambda '() (EmptyList)) (lambda '()
    (MatchType str 'Optional (lambda '() (Map str (lambda '(unpacked) (Apply GatherMembersImpl unpacked))))
    (lambda '() (Apply GatherMembersImpl str))))
)))

(let RenameMembersImpl (lambda '(str renames force)
    (Apply (EvaluateCode (LambdaCode (lambda '(strCode) (block '(
        (let type (Apply RemoveOptionalType (TypeOf str)))
        (let originalFields (ListExtract (StructTypeComponents (TypeHandle type)) 'Name))
        (let originalSet (Apply ToSet originalFields))
        (let renameSet (Apply ToSet (ListExtract renames '0)))
        (let oldItems (ListNotNull (ListMap originalFields (lambda '(f) (block '(
            (let atom (AtomCode f))
            (return (If (Contains renameSet f) (Null)
                (ListCode atom (FuncCode (String 'Member) strCode atom))))
        ))))))
        (let newItems (ListNotNull (ListMap renames (lambda '(r) (block '(
            (let prevAtom (AtomCode (Nth r '0)))
            (let newAtom (AtomCode (Nth r '1)))
            (let item (ListCode newAtom (FuncCode (String 'Member) strCode prevAtom)))
            (return (If force (If (Contains originalSet (Nth r '0)) item (Null)) (Just item)))
        ))))))
        (return (MatchType type 'Null (lambda '() (ReprCode (Null))) (lambda '() (FuncCode (String 'AsStruct) (Extend oldItems newItems)))))
    ))))) str)
))

(let RenameMembers (lambda '(str renames) 
    (MatchType str 'Null (lambda '() (Null)) (lambda '()
    (MatchType str 'Optional (lambda '() (Map str (lambda '(unpacked) (Apply RenameMembersImpl unpacked renames (Bool '0)))))
    (lambda '() (Apply RenameMembersImpl str renames (Bool '0)))))
)))

(let ForceRenameMembers (lambda '(str renames) 
    (MatchType str 'Null (lambda '() (Null)) (lambda '()
    (MatchType str 'Optional (lambda '() (Map str (lambda '(unpacked) (Apply RenameMembersImpl unpacked renames (Bool '1)))))
    (lambda '() (Apply RenameMembersImpl str renames (Bool '1)))))
)))

(let RenameMembers (lambda '(str renames) 
    (MatchType str 'Null (lambda '() (Null)) (lambda '()
    (MatchType str 'Optional (lambda '() (Map str (lambda '(unpacked) (Apply RenameMembersImpl unpacked renames (Bool '0)))))
    (lambda '() (Apply RenameMembersImpl str renames (Bool '0)))))
)))

(let SpreadMembersImpl (lambda '(list fields force) (block '(
    (let fieldsSet (Apply ToSet fields))
    (let check (lambda '(item) (Ensure item (SqlIn fieldsSet (Nth item '0) '()) 
        (Concat (String '"Member not found: ") (Nth item '0)))))
    (let list (If force list (ListMap list check)))
    (let type (Apply RemoveOptionalType (TypeOf list)))
    (let itemType (TupleElementType (ListItemType type) '1))
    (let optType (OptionalType (Apply RemoveOptionalType itemType)))
    (let empty (MatchType type 'EmptyList (lambda '() (Null)) (lambda '() 
        (MatchType type 'Null (lambda '() (Null)) (lambda '() (Nothing optType)))))
    )
    (return (Apply (EvaluateCode (LambdaCode (lambda '(listCode) (block '(
        (let items (ListMap fields (lambda '(f) (block '(
            (let atom (AtomCode f))
            (let foldLambda (LambdaCode (lambda '(itemCode stateCode)
                (FuncCode (String 'If)
                    (FuncCode (String '==)
                        (ReprCode f)
                        (FuncCode (String 'Nth) itemCode (AtomCode (String '0)))
                    )
                    (FuncCode (String 'Nth) itemCode (AtomCode (String '1)))
                    stateCode
                )
            )))
            (let fold (FuncCode (String 'Fold) listCode (ReprCode empty) foldLambda))
            (return (ListCode atom fold))
        )))))
        (return (FuncCode (String 'AsStruct) items))
    ))))) list))
))))

(let SpreadMembers (lambda '(list fields) 
    (MatchType list 'Null (lambda '() (Null)) (lambda '()
    (MatchType list 'Optional (lambda '() (Map list (lambda '(unpacked) (Apply SpreadMembersImpl unpacked fields (Bool '0)))))
    (lambda '() (Apply SpreadMembersImpl list fields (Bool '0)))))
)))

(let ForceSpreadMembers (lambda '(list fields) 
    (MatchType list 'Null (lambda '() (Null)) (lambda '()
    (MatchType list 'Optional (lambda '() (Map list (lambda '(unpacked) (Apply SpreadMembersImpl unpacked fields (Bool '1)))))
    (lambda '() (Apply SpreadMembersImpl list fields (Bool '1)))))
)))

(let ListFromTupleImpl (lambda '(tuple) (block '(
    (let n (MatchType tuple 'Tuple (lambda '() (Length (TupleTypeComponents (TypeHandle (TypeOf tuple))))) (lambda '() (Uint32 '0))))
    (let lambdaCode (LambdaCode (lambda '(tupleCode) (block '(
        (let items (Map (ListFromRange (Uint32 '0) n) (lambda '(i) 
            (FuncCode (String 'Nth) tupleCode (AtomCode (SafeCast i (DataType 'String)))))))
        (return (FuncCode (String 'AsList) items))
    )))))
    (return (Apply (EvaluateCode lambdaCode) tuple))
))))

(let ListToTupleImpl (lambda '(list n) (block '(
    (let list (Ensure list (== (Length list) n) (String '"Mismatch length of list")))
    (let lambdaCode (LambdaCode (lambda '(listCode) (block '(
        (let indexDictCode (FuncCode (String 'ToIndexDict) listCode))
        (let items (Map (ListFromRange (Uint32 '0) n) (lambda '(i) 
            (FuncCode (String 'Unwrap) (FuncCode (String 'Lookup) indexDictCode (ReprCode i))))))
        (return (ListCode items))
    )))))
    (return (Apply (EvaluateCode lambdaCode) list))))
))

(let ListFromTuple (lambda '(tuple) 
    (MatchType tuple 
        'Null (lambda '() (Null))
        'Optional (lambda '() (Map tuple (lambda '(unpacked) (Apply ListFromTupleImpl unpacked))))
        (lambda '() (Apply ListFromTupleImpl tuple)))
))

(let ListToTuple (lambda '(list n) 
    (MatchType list 
        'Null (lambda '() (Null))
        'EmptyList (lambda '() (Ensure '() (== n (Uint32 '0)) (String '"Expected empty tuple") ))
        'Optional (lambda '() (Map list (lambda '(unpacked) (Apply ListToTupleImpl unpacked n))))
        (lambda '() (Apply ListToTupleImpl list n)))
))

(export Equals)
(export Unequals)
(export FindIndex)
(export IndexOf)
(export RemoveOptionalType)
(export TestBit)
(export SetBit)
(export ClearBit)
(export FlipBit)
(export Decode)
(export PythonFuncSignature)
(export ToSet)
(export SetIsDisjoint)
(export SetIntersection2)
(export SetIntersection3)
(export SetIncludes)
(export SetUnion2)
(export SetUnion3)
(export SetDifference)
(export SetSymmetricDifference2)
(export SetSymmetricDifference3)
(export ListAggregate)
(export DictAggregate)
(export AggregateTransformInput)
(export AggregateTransformOutput)
(export AggregateFlatten)
(export ChooseMembers)
(export RemoveMembers)
(export ForceRemoveMembers)
(export StructMembers)
(export GatherMembers)
(export RenameMembers)
(export ForceRenameMembers)
(export SpreadMembers)
(export ForceSpreadMembers)
(export ListFromTuple)
(export ListToTuple)
)
