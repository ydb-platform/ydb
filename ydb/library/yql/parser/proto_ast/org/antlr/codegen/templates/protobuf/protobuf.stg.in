/*
 [The "BSD license"]
 Copyright (c) 2005-2006 Terence Parr
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/** The overall file structure of a recognizer; stores methods for rules
 *  and cyclic DFAs plus support code.
 */
outputFile(LEXER,PARSER,TREE_PARSER, actionScope, actions,
           docComment, recognizer,
           name, tokens, tokenNames, rules, cyclicDFAs,
           bitsets, buildTemplate, buildAST, rewriteMode, profile,
           backtracking, synpreds, memoize, numRules,
           fileName, ANTLRVersion, generatedTimestamp, trace,
           scopes, superClass, literals) ::= <<
<if(PARSER)>
// $ANTLR <ANTLRVersion> <fileName> <generatedTimestamp>
//
// Generated with: -d64 -lib ./ -language protobuf

syntax = "proto3";
option cc_enable_arenas = true;
option optimize_for = CODE_SIZE;

package @ANTLR_PACKAGE_NAME@;

message TToken {
    uint32 Id = 1;
    uint32 Line = 2;
    uint32 Column = 3;
    uint32 Element = 4;
    string Value = 5;
}

<recognizer>

message T<name>AST {
    <first(rules):{r | TRule_<r.ruleDescriptor.name> Rule_<r.ruleDescriptor.name> = 1;}; separator="">
}
<endif>
>>

lexer(grammar, name, tokens, scopes, rules, numRules, filterMode,
      labelType="CommonToken", superClass="Lexer") ::= <<
>>

parser(grammar, name, scopes, tokens, tokenNames, rules, numRules, bitsets,
       ASTLabelType="Object", superClass="Parser", labelType="Token",
       members={<actions.parser.members>},
       init={<actions.parser.init>}
       ) ::= <<
<rules; separator="\n\n">
>>

treeParser(grammar, name, scopes, tokens, tokenNames, globalAction, rules,
           numRules, bitsets, filterMode, labelType={<ASTLabelType>}, ASTLabelType="Object",
           superClass={<if(filterMode)><if(buildAST)>TreeRewriter<else>TreeFilter<endif><else>TreeParser<endif>},
           members={<actions.treeparser.members>},
       init={<actions.treeparser.init>}
           ) ::= <<
>>

/** A simpler version of a rule template that is specific to the imaginary
 *  rules created for syntactic predicates.  As they never have return values
 *  nor parameters etc..., just give simplest possible method.  Don't do
 *  any of the normal memoization stuff in here either; it's a waste.
 *  As predicates cannot be inlined into the invoking rule, they need to
 *  be in a rule by themselves.
 */
synpredRule(ruleName, ruleDescriptor, block, description, nakedBlock) ::= "//-->> synpredRule"
synpred(name) ::= "//-->> synpred"
lexerSynpred(name) ::= "//-->> lexerSynpred"
ruleMemoization(name) ::= "//-->> ruleMemoization"
ruleBacktrackFailure() ::= "//-->> ruleBacktrackFailure"

/** How to generate code for a rule.  This includes any return type
 *  data aggregates required for multiple return values.
 */
rule(ruleName,ruleDescriptor,block,emptyRule,description,exceptions,finally,memoize) ::= <<
// rule $ANTLR start "<ruleName>"
// <fileName>:<description>
message TRule_<ruleName> {
    <block>
}
// $ANTLR end "<ruleName>"
>>

lexerRule(ruleName,nakedBlock,ruleDescriptor,block,memoize) ::= "//-->> lexerRule"
tokensRule(ruleName,nakedBlock,args,block,ruleDescriptor) ::= "//-->> tokensRule"

// S U B R U L E S

/** A (...) subrule with multiple alternatives */
block(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::= <<
<blockDecl()>
TBlock<elemId> Block<elemId> = <elemId>;
>>

/** A rule block with multiple alternatives */
ruleBlock(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::= <<
<altDecls()>
oneof Alt {
    <alts:{a | TAlt<i> Alt_<ruleName><i> = <i>; }; separator="\n">
}
>>

ruleBlockSingleAlt(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::= <<
<alts>
>>

/** A special case of a (...) subrule with a single alternative */
blockSingleAlt ::= block

/** A (..)* block with 1 or more alternatives */
closureBlock(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::= <<
<blockDecl()>
repeated TBlock<elemId> Block<elemId> = <elemId>;
>>

closureBlockSingleAlt ::= closureBlock
positiveClosureBlock ::= closureBlock
positiveClosureBlockSingleAlt ::= closureBlock

optionalBlock(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::=  <<
<blockDecl()>
TBlock<elemId> Block<elemId> = <elemId>;
>>

optionalBlockSingleAlt ::= optionalBlock

blockDecl() ::= <<
message TBlock<elemId> {
<if(rest(alts))>
    <altDecls()>
    oneof Alt {
        <alts:{a | TAlt<i> Alt<i> = <i>; }; separator="\n">
    }
<else>
    <alts>
<endif>
}
>>

altDecls() ::= <<
<alts:{a | <altDecl(a,i)>}; separator="\n">
>>

altDecl(alt,altNum) ::= <<
message TAlt<altNum> {
    <alt>
}
>>

/** An alternative is just a list of elements; at outermost level */
alt(elements,altNum,description,autoAST,outerAlt, treeLevel,rew) ::= <<
<elements:{e | <element(e, i)>}; separator="\n">

string Descr = <length([elements, altNum])>;
>>

/** What to emit when there is no rewrite.  For auto build
 *  mode, does nothing.
 */
noRewrite(rewriteBlockLevel, treeLevel) ::= ""

// E L E M E N T S

/** Dump the elements one per line */
element(e,elemId) ::= <<
<e.el>

>>

/** match a token optionally with a label in front */
tokenRef(token,label,elementIndex,terminalOptions={}) ::= <<
TToken Token<elemId> = <elemId>;
>>

/** ids+=ID */
tokenRefAndListLabel(token,label,elementIndex,terminalOptions={}) ::= <<
<tokenRef(token,label,elementIndex,terminalOptions)>
<listLabel(label, label)>
>>

listLabel(label, elem) ::= "//-->> listLabel"
charRef(char,label) ::= "//-->> charRef"
charRangeRef(a,b,label) ::= "//-->> charRangeRef"

/** For now, sets are interval tests and must be tested inline */
matchSet(s,label,elementIndex,postmatchCode="",terminalOptions={}) ::= <<
TToken Token<elemId> = <elemId>;
>>

matchRuleBlockSet ::= matchSet

matchSetAndListLabel(s,label,elementIndex,postmatchCode) ::= <<
<matchSet(...)>
<listLabel(label, label)>
>>

/** Match a string literal */
lexerStringRef(string,label,elementIndex="0") ::= "//-->> lexerStringRef"
wildcard(token,label,elementIndex,terminalOptions={}) ::= "//-->> wildcard"

wildcardAndListLabel(token,label,elementIndex,terminalOptions={}) ::= <<
<wildcard(...)>
<listLabel(label,label)>
>>

/** Match . wildcard in lexer */
wildcardChar(label, elementIndex) ::= "//-->> wildcardChar"

wildcardCharListLabel(label, elementIndex) ::= <<
<wildcardChar(label, elementIndex)>
<listLabel(label, label)>
>>

/** Match a rule reference by invoking it possibly with arguments
 *  and a return value or values. The 'rule' argument was the
 *  target rule name, but now is type Rule, whose toString is
 *  same: the rule name.  Now though you can access full rule
 *  descriptor stuff.
 */
ruleRef(rule,label,elementIndex,args,scope) ::= <<
TRule_<rule.name> Rule_<rule.name><elemId> = <elemId>;
>>

/** ids+=rule */
ruleRefAndListLabel(rule,label,elementIndex,args,scope) ::= <<
<ruleRef(rule,label,elementIndex,args,scope)>
<listLabel(label, label)>
>>

/** A lexer rule reference
 *  The 'rule' argument was the target rule name, but now
 *  is type Rule, whose toString is same: the rule name.
 *  Now though you can access full rule descriptor stuff.
 */
lexerRuleRef(rule,label,args,elementIndex,scope) ::= "//-->> lexerRuleRef"

/** i+=INT in lexer */
lexerRuleRefAndListLabel(rule,label,args,elementIndex,scope) ::= "//-->> lexerRuleRefAndListLabel"

/** EOF in the lexer */
lexerMatchEOF(label,elementIndex) ::= "//-->> lexerMatchEOF"

// used for left-recursive rules
recRuleDefArg()                       ::= "//-->> recRuleDefArg"
recRuleArg()                          ::= "//-->> recRuleArg"
recRuleAltPredicate(ruleName, opPrec) ::= "//-->> recRuleAltPredicate"
recRuleSetResultAction()              ::= "//-->> recRuleSetResultAction"
recRuleSetReturnAction(src, name)     ::= "//-->> recRuleSetReturnAction"

/** match ^(root children) in tree parser */
tree(root, actionsAfterRoot, children, nullableChildList, enclosingTreeLevel, treeLevel) ::= "//-->> tree"

/** Every predicate is used as a validating predicate (even when it is
 *  also hoisted into a prediction expression).
 */
validateSemanticPredicate(pred,description) ::= "//-->> validateSemanticPredicate"

// F i x e d  D F A  (if-then-else)

dfaState(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= "//-->> dfaState"

/** Same as a normal DFA state except that we don't examine lookahead
 *  for the bypass alternative.  It delays error detection but this
 *  is faster, smaller, and more what people expect.  For (X)? people
 *  expect "if ( LA(1)==X ) match(X);" and that's it.
 */
dfaOptionalBlockState(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= "//-->> dfaOptionalBlockState"

/** A DFA state that is actually the loopback decision of a closure
 *  loop.  If end-of-token (EOT) predicts any of the targets then it
 *  should act like a default clause (i.e., no error can be generated).
 *  This is used only in the lexer so that for ('a')* on the end of a rule
 *  anything other than 'a' predicts exiting.
 */
dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= "//-->> dfaLoopbackState"

/** An accept state indicates a unique alternative has been predicted */
dfaAcceptState(alt) ::= "//-->> dfaAcceptState"

/** A simple edge with an expression.  If the expression is satisfied,
 *  enter to the target state.  To handle gated productions, we may
 *  have to evaluate some predicates for this edge.
 */
dfaEdge(labelExpr, targetState, predicates) ::= "//-->> dfaEdge"

// F i x e d  D F A  (switch case)

/** A DFA state where a SWITCH may be generated.  The code generator
 *  decides if this is possible: CodeGenerator.canGenerateSwitch().
 */
dfaStateSwitch(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= "//-->> dfaStateSwitch"
dfaOptionalBlockStateSwitch(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= "//-->> dfaOptionalBlockStateSwitch"
dfaLoopbackStateSwitch(k, edges,eotPredictsAlt,description,stateNumber,semPredState) ::= "//-->> dfaLoopbackStateSwitch"
dfaEdgeSwitch(labels, targetState) ::= "//-->> dfaEdgeSwitch"

// C y c l i c  D F A

/** The code to initiate execution of a cyclic DFA; this is used
 *  in the rule to predict an alt just like the fixed DFA case.
 *  The <name> attribute is inherited via the parser, lexer, ...
 */
dfaDecision(decisionNumber,description) ::= "//-->> dfaDecision"

/* Dump DFA tables as run-length-encoded Strings of octal values.
 * Can't use hex as compiler translates them before compilation.
 * These strings are split into multiple, concatenated strings.
 * Java puts them back together at compile time thankfully.
 * Java cannot handle large static arrays, so we're stuck with this
 * encode/decode approach.  See analysis and runtime DFA for
 * the encoding methods.
 */
cyclicDFA(dfa) ::= "//-->> cyclicDFA"

/** A state in a cyclic DFA; it's a special state and part of a big switch on
 *  state.
 */
cyclicDFAState(decisionNumber,stateNumber,edges,needErrorClause,semPredState) ::= "//-->> cyclicDFAState"

/** Just like a fixed DFA edge, test the lookahead and indicate what
 *  state to jump to next if successful.
 */
cyclicDFAEdge(labelExpr, targetStateNumber, edgeNumber, predicates) ::= "//-->> cyclicDFAEdge"

/** An edge pointing at end-of-token; essentially matches any char;
 *  always jump to the target.
 */
eotDFAEdge(targetStateNumber,edgeNumber, predicates) ::= "//-->> eotDFAEdge"

// D F A  E X P R E S S I O N S

andPredicates(left,right) ::= "//-->> andPredicates"
orPredicates(operands) ::= "//-->> orPredicates"
notPredicate(pred) ::= "//-->> notPredicate"
evalPredicate(pred,description) ::= "//-->> evalPredicate"
evalSynPredicate(pred,description) ::= "//-->> evalSynPredicate"
lookaheadTest(atom,k,atomAsInt) ::= "//-->> lookaheadTest"

/** Sometimes a lookahead test cannot assume that LA(k) is in a temp variable
 *  somewhere.  Must ask for the lookahead directly.
 */
isolatedLookaheadTest(atom,k,atomAsInt) ::= "//-->> isolatedLookaheadTest"
lookaheadRangeTest(lower,upper,k,rangeNumber,lowerAsInt,upperAsInt) ::= "//-->> lookaheadRangeTest"
isolatedLookaheadRangeTest(lower,upper,k,rangeNumber,lowerAsInt,upperAsInt) ::= "//-->> isolatedLookaheadRangeTest"
setTest(ranges) ::= "//-->> setTest"

// A T T R I B U T E S

globalAttributeScopeClass(scope) ::= "//-->> globalAttributeScopeClass"
globalAttributeScopeStack(scope) ::= "//-->> globalAttributeScopeStack"
ruleAttributeScopeClass(scope) ::= "//-->> ruleAttributeScopeClass"
ruleAttributeScopeStack(scope) ::= "//-->> ruleAttributeScopeStack"
delegateName(d) ::= "//-->> delegateName"

/** Define a rule label including default value */
ruleLabelDef(label) ::= "//-->> ruleLabelDef"
returnStructName(r) ::= "//-->> returnStructName"

/** Define a return struct for a rule if the code needs to access its
 *  start/stop tokens, tree stuff, attributes, ...  Leave a hole for
 *  subgroups to stick in members.
 */
returnScope(scope) ::= "//-->> returnScope"
parameterScope(scope) ::= "//-->> parameterScope"
parameterAttributeRef(attr) ::= "//-->> parameterAttributeRef"
parameterSetAttributeRef(attr,expr) ::= "//-->> parameterSetAttributeRef"
scopeAttributeRef(scope,attr,index,negIndex) ::= "//-->> scopeAttributeRef"
scopeSetAttributeRef(scope,attr,expr,index,negIndex) ::= "//-->> scopeSetAttributeRef"

/** $x is either global scope or x is rule with dynamic scope; refers
 *  to stack itself not top of stack.  This is useful for predicates
 *  like {$function.size()>0 && $function::name.equals("foo")}?
 */
isolatedDynamicScopeRef(scope) ::= "//-->> isolatedDynamicScopeRef"

/** reference an attribute of rule; might only have single return value */
ruleLabelRef(referencedRule,scope,attr) ::= "//-->> ruleLabelRef"
returnAttributeRef(ruleDescriptor,attr) ::= "//-->> returnAttributeRef"
returnSetAttributeRef(ruleDescriptor,attr,expr) ::= "//-->> returnSetAttributeRef"

/** How to translate $tokenLabel */
tokenLabelRef(label) ::= "//-->> tokenLabelRef"

/** ids+=ID {$ids} or e+=expr {$e} */
listLabelRef(label) ::= "//-->> listLabelRef"


// not sure the next are the right approach; and they are evaluated early;
// they cannot see TREE_PARSER or PARSER attributes for example. :(

tokenLabelPropertyRef_text(scope,attr) ::= "//-->> tokenLabelPropertyRef_text"
tokenLabelPropertyRef_type(scope,attr) ::= "//-->> tokenLabelPropertyRef_type"
tokenLabelPropertyRef_line(scope,attr) ::= "//-->> tokenLabelPropertyRef_line"
tokenLabelPropertyRef_pos(scope,attr) ::= "//-->> tokenLabelPropertyRef_pos"
tokenLabelPropertyRef_channel(scope,attr) ::= "//-->> tokenLabelPropertyRef_channel"
tokenLabelPropertyRef_index(scope,attr) ::= "//-->> tokenLabelPropertyRef_index"
tokenLabelPropertyRef_tree(scope,attr) ::= "//-->> tokenLabelPropertyRef_tree"

ruleLabelPropertyRef_start(scope,attr) ::= "//-->> ruleLabelPropertyRef_start"
ruleLabelPropertyRef_stop(scope,attr) ::= "//-->> ruleLabelPropertyRef_stop"
ruleLabelPropertyRef_tree(scope,attr) ::= "//-->> ruleLabelPropertyRef_tree"
ruleLabelPropertyRef_text(scope,attr) ::= "//-->> ruleLabelPropertyRef_text"
ruleLabelPropertyRef_st(scope,attr) ::= "//-->> ruleLabelPropertyRef_st"

/** Isolated $RULE ref ok in lexer as it's a Token */
lexerRuleLabel(label) ::= "//-->> lexerRuleLabel"

lexerRuleLabelPropertyRef_type(scope,attr) ::= "//-->> lexerRuleLabelPropertyRef_type"
lexerRuleLabelPropertyRef_line(scope,attr) ::= "//-->> lexerRuleLabelPropertyRef_line"
lexerRuleLabelPropertyRef_pos(scope,attr) ::= "//-->> lexerRuleLabelPropertyRef_pos"
lexerRuleLabelPropertyRef_channel(scope,attr) ::= "//-->> lexerRuleLabelPropertyRef_channel"
lexerRuleLabelPropertyRef_index(scope,attr) ::= "//-->> lexerRuleLabelPropertyRef_index"
lexerRuleLabelPropertyRef_text(scope,attr) ::= "//-->> lexerRuleLabelPropertyRef_text"
lexerRuleLabelPropertyRef_int(scope,attr) ::= "//-->> lexerRuleLabelPropertyRef_int"

// Somebody may ref $template or $tree or $stop within a rule:
rulePropertyRef_start(scope,attr) ::= "//-->> rulePropertyRef_start"
rulePropertyRef_stop(scope,attr) ::= "//-->> rulePropertyRef_stop"
rulePropertyRef_tree(scope,attr) ::= "//-->> rulePropertyRef_tree"
rulePropertyRef_text(scope,attr) ::= "//-->> rulePropertyRef_text"
rulePropertyRef_st(scope,attr) ::= "//-->> rulePropertyRef_st"

lexerRulePropertyRef_text(scope,attr) ::= "//-->> lexerRulePropertyRef_text"
lexerRulePropertyRef_type(scope,attr) ::= "//-->> lexerRulePropertyRef_type"
lexerRulePropertyRef_line(scope,attr) ::= "//-->> lexerRulePropertyRef_line"
lexerRulePropertyRef_pos(scope,attr) ::= "//-->> lexerRulePropertyRef_pos"
lexerRulePropertyRef_index(scope,attr) ::= "//-->> lexerRulePropertyRef_index"
lexerRulePropertyRef_channel(scope,attr) ::= "//-->> lexerRulePropertyRef_channel"
lexerRulePropertyRef_start(scope,attr) ::= "//-->> lexerRulePropertyRef_start"
lexerRulePropertyRef_stop(scope,attr) ::= "//-->> lexerRulePropertyRef_stop"
lexerRulePropertyRef_int(scope,attr) ::= "//-->> lexerRulePropertyRef_int"

// setting $st and $tree is allowed in local rule. everything else
// is flagged as error
ruleSetPropertyRef_tree(scope,attr,expr) ::= "//-->> ruleSetPropertyRef_tree"
ruleSetPropertyRef_st(scope,attr,expr) ::= "//-->> ruleSetPropertyRef_st"


/** How to execute an action (only when not backtracking) */
execAction(action) ::= ""

/** How to always execute an action even when backtracking */
execForcedAction(action) ::= ""

// M I S C (properties, etc...)

codeFileExtension() ::= ".proto"
