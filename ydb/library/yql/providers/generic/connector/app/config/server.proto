syntax = "proto3";
package NYql.Connector.App.Config;

import "ydb/library/yql/providers/generic/connector/api/common/endpoint.proto";

option go_package = "github.com/ydb-platform/ydb/ydb/library/yql/providers/generic/connector/app/config";

// Connector server configuration
message TServerConfig {
    // TODO: remove it after YQ-2057
    NYql.NConnector.NApi.TEndpoint endpoint = 1 [deprecated=true];
    TServerTLSConfig tls = 2 [deprecated=true];

    TConnectorServerConfig connector_server = 5; 
    // This is a rough restriction for YQ memory consumption until
    // https://st.yandex-team.ru/YQ-2057 is implemented.
    // Leave it empty if you want to avoid any memory limits.
    TServerReadLimit read_limit = 3;
    // Logger config
    TLoggerConfig logger = 4;
    // Go runtime profiler.
    // Disabled if this part of config is empty.
    TPprofServerConfig pprof_server = 6;
    // Metrics server config
    TMetricsServerConfig metrics_server = 7;
    // Paging settings
    TPagingConfig paging = 8;
}

// TConnectorServerConfig - configuration of the main GRPC server
message TConnectorServerConfig {
    // Network address server will be listening on
    NYql.NConnector.NApi.TEndpoint endpoint = 1;
    // TLS settings.
    // Leave it empty for insecure connections.
    TServerTLSConfig tls = 2;
}

message TServerTLSConfig {
    // TLS private key path
    string key = 2;
    // TLS public cert path
    string cert = 3;

    reserved 1;
}

// ServerReadLimit limitates the amount of data extracted from the data source on every read request. 
message TServerReadLimit {
    // The number of rows extracted from the data source
    uint64 rows = 1;
}

// TLogger represents logger configuration
message TLoggerConfig {
    // Level of logging
    ELogLevel log_level = 1;
    // Is logging of queries enabled
    bool enable_sql_query_logging = 2;
}

// ELogLevel enumerates standard levels of logging
enum ELogLevel {
    TRACE = 0;
	DEBUG = 1;
	INFO = 2;
	WARN = 3;
	ERROR = 4;
	FATAL = 5;
}

// TPprofServerConfig configures HTTP server delivering Go runtime profiler data 
message TPprofServerConfig {
    // Network address server will be listening on
    NYql.NConnector.NApi.TEndpoint endpoint = 1;
    // TLS settings.
    // Leave it empty for insecure connections.
    TServerTLSConfig tls = 2;
}

// TMetricsConfig - configuration of the metrics service
message TMetricsServerConfig {
    // Network address server will be listening on
    NYql.NConnector.NApi.TEndpoint endpoint = 1;
    // TLS settings.
    // Leave it empty for insecure connections.
    TServerTLSConfig tls = 2;
}

// TPagingConfig configures the way of splitting of the data stream into the fragments (or pages)
// in order to return them as separate GRPC messages to the client.
message TPagingConfig {
    // Configures the limit of a page size in rows.
    // It may override other limits. Ignored if set to zero.
    uint64 rows_per_page = 1;

    // Configures the limit of a page size in bytes.
    // It may override other limits. Ignored if set to zero.
    uint64 bytes_per_page = 2;

    // Connector service can read ahead some data from the data source before returning it to the client.
    // This setting configures the number of pages that may reside in the service's address space 
    // waiting for the client readiness for the data consumption.
    // Tune this carefully cause this may cause service OOMs. 
    uint32 prefetch_queue_capacity = 3;
}
