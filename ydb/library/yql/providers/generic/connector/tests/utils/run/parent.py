from abc import ABC, abstractmethod
from pathlib import Path

from ydb.library.yql.providers.generic.connector.tests.utils.settings import Settings, GenericSettings
from ydb.library.yql.providers.generic.connector.tests.utils.run.result import Result


class Runner(ABC):
    @abstractmethod
    def __init__(self, runner_path: Path, settings: Settings):
        pass

    @abstractmethod
    def run(
        self,
        test_name: str,
        script: str,
        generic_settings: GenericSettings,
    ) -> Result:
        """
        Runs YQL script via CLI application and stores artifacts.
        :param test_name: test name generated by request fixture (see https://stackoverflow.com/a/34732269/2361497)
        :param script: YQL script itself

        :return: Result packed with data suitable for assertion
        """
        pass
