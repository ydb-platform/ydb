syntax = "proto3";

package yandex.monitoring.api.v3;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

option go_package = "github.com/ydb-platform/ydb/ydb/library/yql/providers/solomon/solomon_accessor/grpc;solomon_accessor_pb";

// A set of methods for reading metrics data.
service DataService {
    // Retrieves metric data based on multi-query input.
    rpc Read(ReadRequest) returns (ReadResponse) {
    }

}

message Container {
    // Default project/folder for this request.
    oneof container {
        // ID of the project that will be used as default.
        // (unless it's specified in query)
        string project_id = 1;

        // Cloud folder that will be used as default.
        // (unless it's specified in query)
        string folder_id = 2;
    }
}

// List of available aggregate functions for downsampling.
message Downsampling {
    // List of available aggregate functions for downsampling.
    enum GridAggregation {
        GRID_AGGREGATION_UNSPECIFIED = 0;

        // Max value.
        GRID_AGGREGATION_MAX = 1;

        // Min value.
        GRID_AGGREGATION_MIN = 2;

        // Sum of values.
        GRID_AGGREGATION_SUM = 3;

        // Average value.
        GRID_AGGREGATION_AVG = 4;

        // Last value.
        GRID_AGGREGATION_LAST = 5;

        // Total count of points.
        GRID_AGGREGATION_COUNT = 6;
    }

    // List of available gap filling policy for downsampling.
    enum GapFilling {
        GAP_FILLING_UNSPECIFIED = 0;

        // Returns `null` as a metric value and `timestamp` as a time series value.
        GAP_FILLING_NULL = 1;

        // Returns no value and no timestamp.
        GAP_FILLING_NONE = 2;

        // Returns the value from the previous time interval.
        GAP_FILLING_PREVIOUS = 3;
    }

    oneof mode {
        // Maximum number of points to be returned.
        int64 max_points = 1;

        // Time interval (grid) for downsampling in milliseconds.
        // Points in the specified range are aggregated into one time point.
        int64 grid_interval = 2;

        // Disable downsampling.
        bool disabled = 3;
    }

    // Function that is used for downsampling.
    GridAggregation grid_aggregation = 4;

    // Parameters for filling gaps in data.
    GapFilling gap_filling = 5;
}

// Query used in multi-source requests for metrics retrieving.
message Query {
    // Name of the query.
    string name = 1;

    // Text of the program that will be executed.
    string value = 2;

    // Flag for hiding result timeseries from response.
    // Note: logic will still be executed,
    // so result of the query processing can be used in following calculations
    bool hidden = 3;
}

message ReadRequest {
    // Default container (project/folder) for this request.
    Container container = 1;

    // Time from which data should be collected.
    google.protobuf.Timestamp from_time = 3;

    // Time until which data should be collected.
    google.protobuf.Timestamp to_time = 4;

    // Queries which are data gathered based on.
    repeated Query queries = 5;

    // Downsampling parameters.
    Downsampling downsampling = 6;

    // Force cluster.
    string force_replica = 7;
}

message ReadResponse {
    // Data response for each not hidden query.
    repeated ResponsePerQuery response_per_query = 1;

    // Error raised during request processing.
    repeated google.rpc.Status errors = 2;
}

message ResponsePerQuery {
    message TimeseriesVector {
        // Timeseries values.
        repeated TimeseriesValue values = 1;
    }

    // Name of the query.
    string query_name = 1;

    // Result values for the query.
    oneof result_values {
        // Timeseries vector.
        TimeseriesVector timeseries_vector = 2;
    }
}

enum MetricType {
    METRIC_TYPE_UNSPECIFIED = 0;

    // Gauge with fractional values.
    DGAUGE = 1;

    // Gauge with integer values.
    IGAUGE = 2;

    // Counter.
    COUNTER = 3;

    // Rate.
    RATE = 4;
}

message TimeseriesValue {
    // Alias.
    string alias = 1;

    // Name of the metric.
    string name = 2;

    // List of metric labels as `key:value` pairs.
    map<string, string> labels = 3;

    // Type of the metric.
    MetricType type = 4;

    // List of timestamps.
    Int64Vector timestamp_values = 5;

    oneof values {
        // List of double values.
        DoubleVector double_values = 6;
    }
}

message DoubleVector {
    // List of double values.
    repeated double values = 1;
}

message Int64Vector {
    // List of int64 values.
    repeated int64 values = 1;
}
