<sql-statement>
--
-- FLOAT4
--
CREATE TABLE FLOAT4_TBL (f1  float4);
</sql-statement>
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('    0.0');
</sql-statement>
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('1004.30   ');
</sql-statement>
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('     -34.84    ');
</sql-statement>
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('1.2345678901234e+20');
</sql-statement>
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('1.2345678901234e-20');
</sql-statement>
<sql-statement>
-- test for over and under flow
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	-- test for over and under flow
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  "10e70" is out of range for type real

        	-- test for over and under flow
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  "-10e70" is out of range for type real

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70');
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  "10e-70" is out of range for type real

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70');
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  "-10e-70" is out of range for type real

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70');
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70'::float8);
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70'::float8);
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  value out of range: overflow

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70'::float8);
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70'::float8);
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70'::float8);
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  value out of range: overflow

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70'::float8);
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70'::float8);
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70'::float8);
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  value out of range: underflow

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70'::float8);
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70'::float8);
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70'::float8);
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  value out of range: underflow

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70'::float8);
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e400');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('10e400');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  "10e400" is out of range for type real

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('10e400');
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e400');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e400');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  "-10e400" is out of range for type real

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e400');
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-400');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-400');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  "10e-400" is out of range for type real

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-400');
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-400');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-400');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  "-10e-400" is out of range for type real

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-400');
	^
<sql-statement>
-- bad input
INSERT INTO FLOAT4_TBL(f1) VALUES ('');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	-- bad input
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type real: ""

        	-- bad input
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('       ');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('       ');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type real: "       "

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('       ');
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('xyz');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('xyz');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type real: "xyz"

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('xyz');
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('5.0.0');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('5.0.0');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type real: "5.0.0"

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('5.0.0');
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('5 . 0');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('5 . 0');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type real: "5 . 0"

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('5 . 0');
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('5.   0');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('5.   0');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type real: "5.   0"

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('5.   0');
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('     - 3.0');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('     - 3.0');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type real: "     - 3.0"

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('     - 3.0');
	^
<sql-statement>
INSERT INTO FLOAT4_TBL(f1) VALUES ('123            5');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO FLOAT4_TBL(f1) VALUES ('123            5');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type real: "123            5"

        	INSERT INTO FLOAT4_TBL(f1) VALUES ('123            5');
	^
<sql-statement>
-- special inputs
SELECT 'NaN'::float4;
</sql-statement>
<sql-statement>
SELECT 'nan'::float4;
</sql-statement>
<sql-statement>
SELECT '   NAN  '::float4;
</sql-statement>
<sql-statement>
SELECT 'infinity'::float4;
</sql-statement>
<sql-statement>
SELECT '          -INFINiTY   '::float4;
</sql-statement>
<sql-statement>
-- bad special inputs
SELECT 'N A N'::float4;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- bad special inputs
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type real: "N A N"

        	-- bad special inputs
	^
<sql-statement>
SELECT 'NaN x'::float4;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT 'NaN x'::float4;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type real: "NaN x"

        	SELECT 'NaN x'::float4;
	^
<sql-statement>
SELECT ' INFINITY    x'::float4;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT ' INFINITY    x'::float4;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type real: " INFINITY    x"

        	SELECT ' INFINITY    x'::float4;
	^
<sql-statement>
SELECT 'Infinity'::float4 + 100.0;
</sql-statement>
<sql-statement>
SELECT 'Infinity'::float4 / 'Infinity'::float4;
</sql-statement>
<sql-statement>
SELECT '42'::float4 / 'Infinity'::float4;
</sql-statement>
<sql-statement>
SELECT 'nan'::float4 / 'nan'::float4;
</sql-statement>
<sql-statement>
SELECT 'nan'::float4 / '0'::float4;
</sql-statement>
<sql-statement>
SELECT 'nan'::numeric::float4;
</sql-statement>
<sql-statement>
SELECT * FROM FLOAT4_TBL;
</sql-statement>
<sql-statement>
SELECT f.* FROM FLOAT4_TBL f WHERE f.f1 <> '1004.3';
</sql-statement>
<sql-statement>
SELECT f.* FROM FLOAT4_TBL f WHERE f.f1 = '1004.3';
</sql-statement>
<sql-statement>
SELECT f.* FROM FLOAT4_TBL f WHERE '1004.3' > f.f1;
</sql-statement>
<sql-statement>
SELECT f.* FROM FLOAT4_TBL f WHERE  f.f1 < '1004.3';
</sql-statement>
<sql-statement>
SELECT f.* FROM FLOAT4_TBL f WHERE '1004.3' >= f.f1;
</sql-statement>
<sql-statement>
SELECT f.* FROM FLOAT4_TBL f WHERE  f.f1 <= '1004.3';
</sql-statement>
<sql-statement>
SELECT f.f1, f.f1 * '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
</sql-statement>
<sql-statement>
SELECT f.f1, f.f1 + '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
</sql-statement>
<sql-statement>
SELECT f.f1, f.f1 / '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
</sql-statement>
<sql-statement>
SELECT f.f1, f.f1 - '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
</sql-statement>
<sql-statement>
-- test divide by zero
SELECT f.f1 / '0.0' from FLOAT4_TBL f;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtMap!
    	-- test divide by zero
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  division by zero

        	-- test divide by zero
	^
<sql-statement>
SELECT * FROM FLOAT4_TBL;
</sql-statement>
<sql-statement>
-- test the unary float4abs operator
SELECT f.f1, @f.f1 AS abs_f1 FROM FLOAT4_TBL f;
</sql-statement>
<sql-statement>
UPDATE FLOAT4_TBL
   SET f1 = FLOAT4_TBL.f1 * '-1'
   WHERE FLOAT4_TBL.f1 > '0.0';
</sql-statement>
-stdin-:<main>: Fatal: Pre type annotation

    -stdin-:<main>: Fatal: tools/enum_parser/enum_serialization_runtime/enum_runtime.cpp:70: Key 'pg_update' not found in enum NYql::EYtSettingType. Valid options are: 'initial', 'infer_scheme', 'force_infer_schema', 'do_not_fail_on_invalid_schema', 'direct_read', 'view', 'mode', 'scheme', 'weak_concat', 'anonymous', 'with_qb', 'inline', 'sample', 'joinLabel', 'ignore_non_existing', 'warn_non_existing', 'xlock', 'unordered', 'nonUnique', 'userschema', 'usercolumns', 'statcolumns', 'syscolumns', 'ignoretypev3', 'memUsage', 'itemsCount', 'rowFactor', 'ordered', 'keyFilter', 'keyFilter2', 'take', 'skip', 'limit', 'sortLimitBy', 'sortBy', 'reduceBy', 'reduceFilterBy', 'forceTransform', 'weakFields', 'sharded', 'combineChunks', 'jobCount', 'joinReduce', 'firstAsPrimary', 'flow', 'keepSorted', 'keySwitch', 'uniqueBy', 'opHash', 'mapOutputType', 'reduceInputType', 'noDq', 'split', 'compression_codec', 'erasure_codec', 'expiration', 'replication_factor', 'user_attrs', 'media', 'primary_medium', 'keep_meta', 'monotonic_keys'. 
    
<sql-statement>
SELECT * FROM FLOAT4_TBL;
</sql-statement>
<sql-statement>
-- test edge-case coercions to integer
SELECT '32767.4'::float4::int2;
</sql-statement>
<sql-statement>
SELECT '32767.6'::float4::int2;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '32767.6'::float4::int2;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  smallint out of range

        	SELECT '32767.6'::float4::int2;
	^
<sql-statement>
SELECT '-32768.4'::float4::int2;
</sql-statement>
<sql-statement>
SELECT '-32768.6'::float4::int2;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '-32768.6'::float4::int2;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  smallint out of range

        	SELECT '-32768.6'::float4::int2;
	^
<sql-statement>
SELECT '2147483520'::float4::int4;
</sql-statement>
<sql-statement>
SELECT '2147483647'::float4::int4;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '2147483647'::float4::int4;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT '2147483647'::float4::int4;
	^
<sql-statement>
SELECT '-2147483648.5'::float4::int4;
</sql-statement>
<sql-statement>
SELECT '-2147483900'::float4::int4;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '-2147483900'::float4::int4;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT '-2147483900'::float4::int4;
	^
<sql-statement>
SELECT '9223369837831520256'::float4::int8;
</sql-statement>
<sql-statement>
SELECT '9223372036854775807'::float4::int8;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '9223372036854775807'::float4::int8;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  bigint out of range

        	SELECT '9223372036854775807'::float4::int8;
	^
<sql-statement>
SELECT '-9223372036854775808.5'::float4::int8;
</sql-statement>
<sql-statement>
SELECT '-9223380000000000000'::float4::int8;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '-9223380000000000000'::float4::int8;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  bigint out of range

        	SELECT '-9223380000000000000'::float4::int8;
	^
<sql-statement>
-- Test for correct input rounding in edge cases.
-- These lists are from Paxson 1991, excluding subnormals and
-- inputs of over 9 sig. digits.
SELECT float4send('5e-20'::float4);
</sql-statement>
<sql-statement>
SELECT float4send('67e14'::float4);
</sql-statement>
BackTrace(void**, unsigned long)+29 (0x14087F6D)
TBackTrace::Capture()+30 (0x140884DE)
TWithBackTrace<yexception>::TWithBackTrace<>()+72 (0x14024628)
NYT::TNode::TTypeError::TTypeError()+25 (0x14530469)
NYT::TNode::CheckType(NYT::TNode::EType) const+267 (0x14531A3B)
NYT::TNode::AsString() const+30 (0x145305BE)
WriteTableToStream(IOutputStream&, TVector<NYT::TNode, std::__y1::allocator<NYT::TNode> > const&, TVector<NYT::TNode, std::__y1::allocator<NYT::TNode> > const&)+872 (0x13F0FC28)
Main(int, char**)+5748 (0x13F15084)
main+273 (0x13F16831)
??+0 (0x7F467B629D90)
__libc_start_main+128 (0x7F467B629E40)
??+0 (0x13EA0029)

(NYT::TNode::TTypeError) library/cpp/yson/node/node.cpp:829: TNode type string_node expected, actual type list_node
