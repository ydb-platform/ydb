--
-- FLOAT8
--
CREATE TABLE FLOAT8_TBL(f1 float8);
INSERT INTO FLOAT8_TBL(f1) VALUES ('    0.0   ');
INSERT INTO FLOAT8_TBL(f1) VALUES ('1004.30  ');
INSERT INTO FLOAT8_TBL(f1) VALUES ('   -34.84');
INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e+200');
INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e-200');
-- test for underflow and overflow handling
SELECT '10e400'::float8;
ERROR:  "10e400" is out of range for type double precision
LINE 1: SELECT '10e400'::float8;
               ^
SELECT '-10e400'::float8;
ERROR:  "-10e400" is out of range for type double precision
LINE 1: SELECT '-10e400'::float8;
               ^
SELECT '10e-400'::float8;
ERROR:  "10e-400" is out of range for type double precision
LINE 1: SELECT '10e-400'::float8;
               ^
SELECT '-10e-400'::float8;
ERROR:  "-10e-400" is out of range for type double precision
LINE 1: SELECT '-10e-400'::float8;
               ^
-- bad input
INSERT INTO FLOAT8_TBL(f1) VALUES ('');
ERROR:  invalid input syntax for type double precision: ""
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('     ');
ERROR:  invalid input syntax for type double precision: "     "
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('     ');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('xyz');
ERROR:  invalid input syntax for type double precision: "xyz"
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('xyz');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('5.0.0');
ERROR:  invalid input syntax for type double precision: "5.0.0"
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('5.0.0');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('5 . 0');
ERROR:  invalid input syntax for type double precision: "5 . 0"
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('5 . 0');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('5.   0');
ERROR:  invalid input syntax for type double precision: "5.   0"
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('5.   0');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('    - 3');
ERROR:  invalid input syntax for type double precision: "    - 3"
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('    - 3');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('123           5');
ERROR:  invalid input syntax for type double precision: "123           5"
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('123           5');
                                           ^
-- bad special inputs
SELECT 'N A N'::float8;
ERROR:  invalid input syntax for type double precision: "N A N"
LINE 1: SELECT 'N A N'::float8;
               ^
SELECT 'NaN x'::float8;
ERROR:  invalid input syntax for type double precision: "NaN x"
LINE 1: SELECT 'NaN x'::float8;
               ^
SELECT ' INFINITY    x'::float8;
ERROR:  invalid input syntax for type double precision: " INFINITY    x"
LINE 1: SELECT ' INFINITY    x'::float8;
               ^
SELECT '42'::float8 / 'Infinity'::float8;
 ?column? 
----------
        0
(1 row)

SELECT * FROM FLOAT8_TBL;
          f1          
----------------------
                    0
               1004.3
               -34.84
 1.2345678901234e+200
 1.2345678901234e-200
(5 rows)

SELECT f.* FROM FLOAT8_TBL f WHERE f.f1 <> '1004.3';
          f1          
----------------------
                    0
               -34.84
 1.2345678901234e+200
 1.2345678901234e-200
(4 rows)

SELECT f.* FROM FLOAT8_TBL f WHERE f.f1 = '1004.3';
   f1   
--------
 1004.3
(1 row)

SELECT f.* FROM FLOAT8_TBL f WHERE '1004.3' > f.f1;
          f1          
----------------------
                    0
               -34.84
 1.2345678901234e-200
(3 rows)

SELECT f.* FROM FLOAT8_TBL f WHERE  f.f1 < '1004.3';
          f1          
----------------------
                    0
               -34.84
 1.2345678901234e-200
(3 rows)

SELECT f.* FROM FLOAT8_TBL f WHERE '1004.3' >= f.f1;
          f1          
----------------------
                    0
               1004.3
               -34.84
 1.2345678901234e-200
(4 rows)

SELECT f.* FROM FLOAT8_TBL f WHERE  f.f1 <= '1004.3';
          f1          
----------------------
                    0
               1004.3
               -34.84
 1.2345678901234e-200
(4 rows)

SELECT f.f1, f.f1 * '-10' AS x
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0';
          f1          |           x           
----------------------+-----------------------
               1004.3 |                -10043
 1.2345678901234e+200 | -1.2345678901234e+201
 1.2345678901234e-200 | -1.2345678901234e-199
(3 rows)

SELECT f.f1, f.f1 + '-10' AS x
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0';
          f1          |          x           
----------------------+----------------------
               1004.3 |                994.3
 1.2345678901234e+200 | 1.2345678901234e+200
 1.2345678901234e-200 |                  -10
(3 rows)

SELECT f.f1, f.f1 / '-10' AS x
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0';
          f1          |           x           
----------------------+-----------------------
               1004.3 |   -100.42999999999999
 1.2345678901234e+200 | -1.2345678901234e+199
 1.2345678901234e-200 | -1.2345678901234e-201
(3 rows)

SELECT f.f1, f.f1 - '-10' AS x
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0';
          f1          |          x           
----------------------+----------------------
               1004.3 |               1014.3
 1.2345678901234e+200 | 1.2345678901234e+200
 1.2345678901234e-200 |                   10
(3 rows)

SELECT f.f1 ^ '2.0' AS square_f1
   FROM FLOAT8_TBL f where f.f1 = '1004.3';
     square_f1      
--------------------
 1008618.4899999999
(1 row)

-- absolute value
SELECT f.f1, @f.f1 AS abs_f1
   FROM FLOAT8_TBL f;
          f1          |        abs_f1        
----------------------+----------------------
                    0 |                    0
               1004.3 |               1004.3
               -34.84 |                34.84
 1.2345678901234e+200 | 1.2345678901234e+200
 1.2345678901234e-200 | 1.2345678901234e-200
(5 rows)

-- truncate
SELECT f.f1, trunc(f.f1) AS trunc_f1
   FROM FLOAT8_TBL f;
          f1          |       trunc_f1       
----------------------+----------------------
                    0 |                    0
               1004.3 |                 1004
               -34.84 |                  -34
 1.2345678901234e+200 | 1.2345678901234e+200
 1.2345678901234e-200 |                    0
(5 rows)

-- round
SELECT f.f1, round(f.f1) AS round_f1
   FROM FLOAT8_TBL f;
          f1          |       round_f1       
----------------------+----------------------
                    0 |                    0
               1004.3 |                 1004
               -34.84 |                  -35
 1.2345678901234e+200 | 1.2345678901234e+200
 1.2345678901234e-200 |                    0
(5 rows)

-- avoid bit-exact output here because operations may not be bit-exact.
SET extra_float_digits = 0;
-- square root
SELECT sqrt(float8 '64') AS eight;
 eight 
-------
     8
(1 row)

SELECT |/ float8 '64' AS eight;
 eight 
-------
     8
(1 row)

-- power
SELECT power(float8 '144', float8 '0.5');
 power 
-------
    12
(1 row)

SELECT power(float8 '1', float8 'NaN');
 power 
-------
     1
(1 row)

SELECT power(float8 'NaN', float8 '0');
 power 
-------
     1
(1 row)

SELECT power(float8 'inf', float8 '0');
 power 
-------
     1
(1 row)

SELECT power(float8 '-inf', float8 '0');
 power 
-------
     1
(1 row)

SELECT power(float8 '0', float8 'inf');
 power 
-------
     0
(1 row)

SELECT power(float8 '0', float8 '-inf');
ERROR:  zero raised to a negative power is undefined
SELECT power(float8 '1', float8 'inf');
 power 
-------
     1
(1 row)

SELECT power(float8 '1', float8 '-inf');
 power 
-------
     1
(1 row)

SELECT power(float8 '-1', float8 'inf');
 power 
-------
     1
(1 row)

SELECT power(float8 '-1', float8 '-inf');
 power 
-------
     1
(1 row)

SELECT power(float8 '0.1', float8 'inf');
 power 
-------
     0
(1 row)

SELECT power(float8 '-0.1', float8 'inf');
 power 
-------
     0
(1 row)

SELECT power(float8 '1.1', float8 '-inf');
 power 
-------
     0
(1 row)

SELECT power(float8 '-1.1', float8 '-inf');
 power 
-------
     0
(1 row)

SELECT power(float8 'inf', float8 '-2');
 power 
-------
     0
(1 row)

SELECT power(float8 'inf', float8 '-inf');
 power 
-------
     0
(1 row)

-- Intel's icc misoptimizes the code that controls the sign of this result,
-- even with -mp1.  Pending a fix for that, only test for "is it zero".
SELECT power(float8 '-inf', float8 '-2') = '0';
 ?column? 
----------
 t
(1 row)

SELECT power(float8 '-inf', float8 '-3');
 power 
-------
    -0
(1 row)

SELECT power(float8 '-inf', float8 '3.5');
ERROR:  a negative number raised to a non-integer power yields a complex result
SELECT power(float8 '-inf', float8 '-inf');
 power 
-------
     0
(1 row)

SELECT * FROM FLOAT8_TBL;
          f1          
----------------------
                    0
               1004.3
               -34.84
 1.2345678901234e+200
 1.2345678901234e-200
(5 rows)

SELECT f.f1 * '1e200' from FLOAT8_TBL f;
ERROR:  value out of range: overflow
SELECT f.f1 ^ '1e200' from FLOAT8_TBL f;
ERROR:  value out of range: overflow
SELECT 0 ^ 0 + 0 ^ 1 + 0 ^ 0.0 + 0 ^ 0.5;
 ?column? 
----------
        2
(1 row)

SELECT ln(f.f1) from FLOAT8_TBL f where f.f1 = '0.0' ;
ERROR:  cannot take logarithm of zero
SELECT ln(f.f1) from FLOAT8_TBL f where f.f1 < '0.0' ;
ERROR:  cannot take logarithm of a negative number
SELECT f.f1 / '0.0' from FLOAT8_TBL f;
ERROR:  division by zero
SELECT asinh(float8 '1');
       asinh       
-------------------
 0.881373587019543
(1 row)

SELECT tanh(float8 'infinity');
 tanh 
------
    1
(1 row)

SELECT tanh(float8 '-infinity');
 tanh 
------
   -1
(1 row)

-- acosh(Inf) should be Inf, but some mingw versions produce NaN, so skip test
-- SELECT acosh(float8 'infinity');
SELECT acosh(float8 '-infinity');
ERROR:  input is out of range
SELECT atanh(float8 'infinity');
ERROR:  input is out of range
SELECT atanh(float8 '-infinity');
ERROR:  input is out of range
RESET extra_float_digits;
-- test for over- and underflow
INSERT INTO FLOAT8_TBL(f1) VALUES ('10e400');
ERROR:  "10e400" is out of range for type double precision
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('10e400');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e400');
ERROR:  "-10e400" is out of range for type double precision
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e400');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('10e-400');
ERROR:  "10e-400" is out of range for type double precision
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('10e-400');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e-400');
ERROR:  "-10e-400" is out of range for type double precision
LINE 1: INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e-400');
                                           ^
INSERT INTO FLOAT8_TBL(f1) VALUES ('0.0');
INSERT INTO FLOAT8_TBL(f1) VALUES ('-34.84');
INSERT INTO FLOAT8_TBL(f1) VALUES ('-1004.30');
INSERT INTO FLOAT8_TBL(f1) VALUES ('-1.2345678901234e+200');
INSERT INTO FLOAT8_TBL(f1) VALUES ('-1.2345678901234e-200');
-- test edge-case coercions to integer
SELECT '32767.4'::float8::int2;
 int2  
-------
 32767
(1 row)

SELECT '32767.6'::float8::int2;
ERROR:  smallint out of range
SELECT '-32768.4'::float8::int2;
  int2  
--------
 -32768
(1 row)

SELECT '-32768.6'::float8::int2;
ERROR:  smallint out of range
SELECT '2147483647.4'::float8::int4;
    int4    
------------
 2147483647
(1 row)

SELECT '2147483647.6'::float8::int4;
ERROR:  integer out of range
SELECT '-2147483648.4'::float8::int4;
    int4     
-------------
 -2147483648
(1 row)

SELECT '-2147483648.6'::float8::int4;
ERROR:  integer out of range
SELECT '9223372036854773760'::float8::int8;
        int8         
---------------------
 9223372036854773760
(1 row)

SELECT '9223372036854775807'::float8::int8;
ERROR:  bigint out of range
SELECT '-9223372036854775808.5'::float8::int8;
         int8         
----------------------
 -9223372036854775808
(1 row)

SELECT '-9223372036854780000'::float8::int8;
ERROR:  bigint out of range
