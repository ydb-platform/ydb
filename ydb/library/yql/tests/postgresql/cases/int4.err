<sql-statement>
--
-- INT4
--
CREATE TABLE INT4_TBL(f1 int4);
</sql-statement>
<sql-statement>
INSERT INTO INT4_TBL(f1) VALUES ('   0  ');
</sql-statement>
<sql-statement>
INSERT INTO INT4_TBL(f1) VALUES ('123456     ');
</sql-statement>
<sql-statement>
INSERT INTO INT4_TBL(f1) VALUES ('    -123456');
</sql-statement>
<sql-statement>
INSERT INTO INT4_TBL(f1) VALUES ('34.5');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO INT4_TBL(f1) VALUES ('34.5');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type integer: "34.5"

        	INSERT INTO INT4_TBL(f1) VALUES ('34.5');
	^
<sql-statement>
-- largest and smallest values
INSERT INTO INT4_TBL(f1) VALUES ('2147483647');
</sql-statement>
<sql-statement>
INSERT INTO INT4_TBL(f1) VALUES ('-2147483647');
</sql-statement>
<sql-statement>
-- bad input values -- should give errors
INSERT INTO INT4_TBL(f1) VALUES ('1000000000000');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	-- bad input values -- should give errors
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  value "1000000000000" is out of range for type integer

        	-- bad input values -- should give errors
	^
<sql-statement>
INSERT INTO INT4_TBL(f1) VALUES ('asdf');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO INT4_TBL(f1) VALUES ('asdf');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type integer: "asdf"

        	INSERT INTO INT4_TBL(f1) VALUES ('asdf');
	^
<sql-statement>
INSERT INTO INT4_TBL(f1) VALUES ('     ');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO INT4_TBL(f1) VALUES ('     ');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type integer: "     "

        	INSERT INTO INT4_TBL(f1) VALUES ('     ');
	^
<sql-statement>
INSERT INTO INT4_TBL(f1) VALUES ('   asdf   ');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO INT4_TBL(f1) VALUES ('   asdf   ');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type integer: "   asdf   "

        	INSERT INTO INT4_TBL(f1) VALUES ('   asdf   ');
	^
<sql-statement>
INSERT INTO INT4_TBL(f1) VALUES ('- 1234');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO INT4_TBL(f1) VALUES ('- 1234');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type integer: "- 1234"

        	INSERT INTO INT4_TBL(f1) VALUES ('- 1234');
	^
<sql-statement>
INSERT INTO INT4_TBL(f1) VALUES ('123       5');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO INT4_TBL(f1) VALUES ('123       5');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type integer: "123       5"

        	INSERT INTO INT4_TBL(f1) VALUES ('123       5');
	^
<sql-statement>
INSERT INTO INT4_TBL(f1) VALUES ('');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtFill!
    	INSERT INTO INT4_TBL(f1) VALUES ('');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type integer: ""

        	INSERT INTO INT4_TBL(f1) VALUES ('');
	^
<sql-statement>
SELECT * FROM INT4_TBL;
</sql-statement>
<sql-statement>
SELECT i.* FROM INT4_TBL i WHERE i.f1 <> int2 '0';
</sql-statement>
<sql-statement>
SELECT i.* FROM INT4_TBL i WHERE i.f1 <> int4 '0';
</sql-statement>
<sql-statement>
SELECT i.* FROM INT4_TBL i WHERE i.f1 = int2 '0';
</sql-statement>
<sql-statement>
SELECT i.* FROM INT4_TBL i WHERE i.f1 = int4 '0';
</sql-statement>
<sql-statement>
SELECT i.* FROM INT4_TBL i WHERE i.f1 < int2 '0';
</sql-statement>
<sql-statement>
SELECT i.* FROM INT4_TBL i WHERE i.f1 < int4 '0';
</sql-statement>
<sql-statement>
SELECT i.* FROM INT4_TBL i WHERE i.f1 <= int2 '0';
</sql-statement>
<sql-statement>
SELECT i.* FROM INT4_TBL i WHERE i.f1 <= int4 '0';
</sql-statement>
<sql-statement>
SELECT i.* FROM INT4_TBL i WHERE i.f1 > int2 '0';
</sql-statement>
<sql-statement>
SELECT i.* FROM INT4_TBL i WHERE i.f1 > int4 '0';
</sql-statement>
<sql-statement>
SELECT i.* FROM INT4_TBL i WHERE i.f1 >= int2 '0';
</sql-statement>
<sql-statement>
SELECT i.* FROM INT4_TBL i WHERE i.f1 >= int4 '0';
</sql-statement>
<sql-statement>
-- positive odds
SELECT i.* FROM INT4_TBL i WHERE (i.f1 % int2 '2') = int2 '1';
</sql-statement>
<sql-statement>
-- any evens
SELECT i.* FROM INT4_TBL i WHERE (i.f1 % int4 '2') = int2 '0';
</sql-statement>
<sql-statement>
SELECT i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtMap!
    	SELECT i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i;
	^
<sql-statement>
SELECT i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i
WHERE abs(f1) < 1073741824;
</sql-statement>
<sql-statement>
SELECT i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtMap!
    	SELECT i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i;
	^
<sql-statement>
SELECT i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i
WHERE abs(f1) < 1073741824;
</sql-statement>
<sql-statement>
SELECT i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtMap!
    	SELECT i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i;
	^
<sql-statement>
SELECT i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i
WHERE f1 < 2147483646;
</sql-statement>
<sql-statement>
SELECT i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtMap!
    	SELECT i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i;
	^
<sql-statement>
SELECT i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i
WHERE f1 < 2147483646;
</sql-statement>
<sql-statement>
SELECT i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtMap!
    	SELECT i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i;
	^
<sql-statement>
SELECT i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i
WHERE f1 > -2147483647;
</sql-statement>
<sql-statement>
SELECT i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtMap!
    	SELECT i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i;
	^
<sql-statement>
SELECT i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i
WHERE f1 > -2147483647;
</sql-statement>
<sql-statement>
SELECT i.f1, i.f1 / int2 '2' AS x FROM INT4_TBL i;
</sql-statement>
<sql-statement>
SELECT i.f1, i.f1 / int4 '2' AS x FROM INT4_TBL i;
</sql-statement>
<sql-statement>
--
-- more complex expressions
--
-- variations on unary minus parsing
SELECT -2+3 AS one;
</sql-statement>
<sql-statement>
SELECT 4-2 AS two;
</sql-statement>
<sql-statement>
SELECT 2- -1 AS three;
</sql-statement>
<sql-statement>
SELECT 2 - -2 AS four;
</sql-statement>
<sql-statement>
SELECT int2 '2' * int2 '2' = int2 '16' / int2 '4' AS true;
</sql-statement>
<sql-statement>
SELECT int4 '2' * int2 '2' = int2 '16' / int4 '4' AS true;
</sql-statement>
<sql-statement>
SELECT int2 '2' * int4 '2' = int4 '16' / int2 '4' AS true;
</sql-statement>
<sql-statement>
SELECT int4 '1000' < int4 '999' AS false;
</sql-statement>
<sql-statement>
SELECT 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 AS ten;
</sql-statement>
<sql-statement>
SELECT 2 + 2 / 2 AS three;
</sql-statement>
<sql-statement>
SELECT (2 + 2) / 2 AS two;
</sql-statement>
<sql-statement>
-- corner case
SELECT (-1::int4<<31)::text;
</sql-statement>
<sql-statement>
SELECT ((-1::int4<<31)+1)::text;
</sql-statement>
<sql-statement>
-- check sane handling of INT_MIN overflow cases
SELECT (-2147483648)::int4 * (-1)::int4;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- check sane handling of INT_MIN overflow cases
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	-- check sane handling of INT_MIN overflow cases
	^
<sql-statement>
SELECT (-2147483648)::int4 / (-1)::int4;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT (-2147483648)::int4 / (-1)::int4;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT (-2147483648)::int4 / (-1)::int4;
	^
<sql-statement>
SELECT (-2147483648)::int4 % (-1)::int4;
</sql-statement>
<sql-statement>
SELECT (-2147483648)::int4 * (-1)::int2;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT (-2147483648)::int4 * (-1)::int2;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT (-2147483648)::int4 * (-1)::int2;
	^
<sql-statement>
SELECT (-2147483648)::int4 / (-1)::int2;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT (-2147483648)::int4 / (-1)::int2;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT (-2147483648)::int4 / (-1)::int2;
	^
<sql-statement>
SELECT (-2147483648)::int4 % (-1)::int2;
</sql-statement>
<sql-statement>
-- check rounding when casting from float
SELECT x, x::int4 AS int4_value
FROM (VALUES (-2.5::float8),
             (-1.5::float8),
             (-0.5::float8),
             (0.0::float8),
             (0.5::float8),
             (1.5::float8),
             (2.5::float8)) t(x);
</sql-statement>
<sql-statement>
-- check rounding when casting from numeric
SELECT x, x::int4 AS int4_value
FROM (VALUES (-2.5::numeric),
             (-1.5::numeric),
             (-0.5::numeric),
             (0.0::numeric),
             (0.5::numeric),
             (1.5::numeric),
             (2.5::numeric)) t(x);
</sql-statement>
<sql-statement>
-- test gcd()
SELECT a, b, gcd(a, b), gcd(a, -b), gcd(b, a), gcd(-b, a)
FROM (VALUES (0::int4, 0::int4),
             (0::int4, 6410818::int4),
             (61866666::int4, 6410818::int4),
             (-61866666::int4, 6410818::int4),
             ((-2147483648)::int4, 1::int4),
             ((-2147483648)::int4, 2147483647::int4),
             ((-2147483648)::int4, 1073741824::int4)) AS v(a, b);
</sql-statement>
<sql-statement>
SELECT gcd((-2147483648)::int4, 0::int4); -- overflow
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT gcd((-2147483648)::int4, 0::int4); -- overflow
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT gcd((-2147483648)::int4, 0::int4); -- overflow
	^
<sql-statement>
SELECT gcd((-2147483648)::int4, (-2147483648)::int4); -- overflow
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT gcd((-2147483648)::int4, (-2147483648)::int4); -- overflow
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT gcd((-2147483648)::int4, (-2147483648)::int4); -- overflow
	^
<sql-statement>
-- test lcm()
SELECT a, b, lcm(a, b), lcm(a, -b), lcm(b, a), lcm(-b, a)
FROM (VALUES (0::int4, 0::int4),
             (0::int4, 42::int4),
             (42::int4, 42::int4),
             (330::int4, 462::int4),
             (-330::int4, 462::int4),
             ((-2147483648)::int4, 0::int4)) AS v(a, b);
</sql-statement>
<sql-statement>
SELECT lcm((-2147483648)::int4, 1::int4); -- overflow
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT lcm((-2147483648)::int4, 1::int4); -- overflow
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT lcm((-2147483648)::int4, 1::int4); -- overflow
	^
<sql-statement>
SELECT lcm(2147483647::int4, 2147483646::int4); -- overflow
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT lcm(2147483647::int4, 2147483646::int4); -- overflow
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  integer out of range

        	SELECT lcm(2147483647::int4, 2147483646::int4); -- overflow
	^
