<sql-statement>
-- Strings.
SELECT '""'::json;				-- OK.
</sql-statement>
<sql-statement>
SELECT $$''$$::json;			-- ERROR, single quotes are not allowed
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT $$''$$::json;			-- ERROR, single quotes are not allowed
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Token "'" is invalid.
CONTEXT:  JSON data, line 1: '...

        	SELECT $$''$$::json;			-- ERROR, single quotes are not allowed
	^
<sql-statement>
SELECT '"abc"'::json;			-- OK
</sql-statement>
<sql-statement>
SELECT '"abc'::json;			-- ERROR, quotes not closed
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '"abc'::json;			-- ERROR, quotes not closed
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Token ""abc" is invalid.
CONTEXT:  JSON data, line 1: "abc

        	SELECT '"abc'::json;			-- ERROR, quotes not closed
	^
<sql-statement>
SELECT '"abc
def"'::json;					-- ERROR, unescaped newline in string constant
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '"abc
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Character with value 0x0a must be escaped.
CONTEXT:  JSON data, line 1: "abc

        	SELECT '"abc
	^
<sql-statement>
SELECT '"\n\"\\"'::json;		-- OK, legal escapes
</sql-statement>
<sql-statement>
SELECT '"\v"'::json;			-- ERROR, not a valid JSON escape
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '"\v"'::json;			-- ERROR, not a valid JSON escape
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Escape sequence "\v" is invalid.
CONTEXT:  JSON data, line 1: "\v...

        	SELECT '"\v"'::json;			-- ERROR, not a valid JSON escape
	^
<sql-statement>
-- see json_encoding test for input with unicode escapes
-- Numbers.
SELECT '1'::json;				-- OK
</sql-statement>
<sql-statement>
SELECT '0'::json;				-- OK
</sql-statement>
<sql-statement>
SELECT '01'::json;				-- ERROR, not valid according to JSON spec
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '01'::json;				-- ERROR, not valid according to JSON spec
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Token "01" is invalid.
CONTEXT:  JSON data, line 1: 01

        	SELECT '01'::json;				-- ERROR, not valid according to JSON spec
	^
<sql-statement>
SELECT '0.1'::json;				-- OK
</sql-statement>
<sql-statement>
SELECT '9223372036854775808'::json;	-- OK, even though it's too large for int8
</sql-statement>
<sql-statement>
SELECT '1e100'::json;			-- OK
</sql-statement>
<sql-statement>
SELECT '1.3e100'::json;			-- OK
</sql-statement>
<sql-statement>
SELECT '1f2'::json;				-- ERROR
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '1f2'::json;				-- ERROR
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Token "1f2" is invalid.
CONTEXT:  JSON data, line 1: 1f2

        	SELECT '1f2'::json;				-- ERROR
	^
<sql-statement>
SELECT '0.x1'::json;			-- ERROR
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '0.x1'::json;			-- ERROR
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Token "0.x1" is invalid.
CONTEXT:  JSON data, line 1: 0.x1

        	SELECT '0.x1'::json;			-- ERROR
	^
<sql-statement>
SELECT '1.3ex100'::json;		-- ERROR
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '1.3ex100'::json;		-- ERROR
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Token "1.3ex100" is invalid.
CONTEXT:  JSON data, line 1: 1.3ex100

        	SELECT '1.3ex100'::json;		-- ERROR
	^
<sql-statement>
-- Arrays.
SELECT '[]'::json;				-- OK
</sql-statement>
<sql-statement>
SELECT '[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'::json;  -- OK
</sql-statement>
<sql-statement>
SELECT '[1,2]'::json;			-- OK
</sql-statement>
<sql-statement>
SELECT '[1,2,]'::json;			-- ERROR, trailing comma
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '[1,2,]'::json;			-- ERROR, trailing comma
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Expected JSON value, but found "]".
CONTEXT:  JSON data, line 1: [1,2,]

        	SELECT '[1,2,]'::json;			-- ERROR, trailing comma
	^
<sql-statement>
SELECT '[1,2'::json;			-- ERROR, no closing bracket
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '[1,2'::json;			-- ERROR, no closing bracket
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: [1,2

        	SELECT '[1,2'::json;			-- ERROR, no closing bracket
	^
<sql-statement>
SELECT '[1,[2]'::json;			-- ERROR, no closing bracket
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '[1,[2]'::json;			-- ERROR, no closing bracket
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: [1,[2]

        	SELECT '[1,[2]'::json;			-- ERROR, no closing bracket
	^
<sql-statement>
-- Objects.
SELECT '{}'::json;				-- OK
</sql-statement>
<sql-statement>
SELECT '{"abc"}'::json;			-- ERROR, no value
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '{"abc"}'::json;			-- ERROR, no value
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Expected ":", but found "}".
CONTEXT:  JSON data, line 1: {"abc"}

        	SELECT '{"abc"}'::json;			-- ERROR, no value
	^
<sql-statement>
SELECT '{"abc":1}'::json;		-- OK
</sql-statement>
<sql-statement>
SELECT '{1:"abc"}'::json;		-- ERROR, keys must be strings
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '{1:"abc"}'::json;		-- ERROR, keys must be strings
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Expected string or "}", but found "1".
CONTEXT:  JSON data, line 1: {1...

        	SELECT '{1:"abc"}'::json;		-- ERROR, keys must be strings
	^
<sql-statement>
SELECT '{"abc",1}'::json;		-- ERROR, wrong separator
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '{"abc",1}'::json;		-- ERROR, wrong separator
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Expected ":", but found ",".
CONTEXT:  JSON data, line 1: {"abc",...

        	SELECT '{"abc",1}'::json;		-- ERROR, wrong separator
	^
<sql-statement>
SELECT '{"abc"=1}'::json;		-- ERROR, totally wrong separator
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '{"abc"=1}'::json;		-- ERROR, totally wrong separator
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Token "=" is invalid.
CONTEXT:  JSON data, line 1: {"abc"=...

        	SELECT '{"abc"=1}'::json;		-- ERROR, totally wrong separator
	^
<sql-statement>
SELECT '{"abc"::1}'::json;		-- ERROR, another wrong separator
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '{"abc"::1}'::json;		-- ERROR, another wrong separator
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Expected JSON value, but found ":".
CONTEXT:  JSON data, line 1: {"abc"::...

        	SELECT '{"abc"::1}'::json;		-- ERROR, another wrong separator
	^
<sql-statement>
SELECT '{"abc":1,"def":2,"ghi":[3,4],"hij":{"klm":5,"nop":[6]}}'::json; -- OK
</sql-statement>
<sql-statement>
SELECT '{"abc":1:2}'::json;		-- ERROR, colon in wrong spot
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '{"abc":1:2}'::json;		-- ERROR, colon in wrong spot
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Expected "," or "}", but found ":".
CONTEXT:  JSON data, line 1: {"abc":1:...

        	SELECT '{"abc":1:2}'::json;		-- ERROR, colon in wrong spot
	^
<sql-statement>
SELECT '{"abc":1,3}'::json;		-- ERROR, no value
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '{"abc":1,3}'::json;		-- ERROR, no value
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Expected string, but found "3".
CONTEXT:  JSON data, line 1: {"abc":1,3...

        	SELECT '{"abc":1,3}'::json;		-- ERROR, no value
	^
<sql-statement>
-- Recursion.
SET max_stack_depth = '100kB';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: VariableSetStmt, not supported name: max_stack_depth
    	-- Recursion.
	^
<sql-statement>
SELECT repeat('[', 10000)::json;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT repeat('[', 10000)::json;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  stack depth limit exceeded
HINT:  Increase the configuration parameter "max_stack_depth" (currently 100kB), after ensuring the platform's stack depth limit is adequate.

        	SELECT repeat('[', 10000)::json;
	^
<sql-statement>
SELECT repeat('{"a":', 10000)::json;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT repeat('{"a":', 10000)::json;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  stack depth limit exceeded
HINT:  Increase the configuration parameter "max_stack_depth" (currently 100kB), after ensuring the platform's stack depth limit is adequate.

        	SELECT repeat('{"a":', 10000)::json;
	^
<sql-statement>
RESET max_stack_depth;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: VariableSetStmt, not supported kind: 4
    	RESET max_stack_depth;
	^
<sql-statement>
-- Miscellaneous stuff.
SELECT 'true'::json;			-- OK
</sql-statement>
<sql-statement>
SELECT 'false'::json;			-- OK
</sql-statement>
<sql-statement>
SELECT 'null'::json;			-- OK
</sql-statement>
<sql-statement>
SELECT ' true '::json;			-- OK, even with extra whitespace
</sql-statement>
<sql-statement>
SELECT 'true false'::json;		-- ERROR, too many values
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT 'true false'::json;		-- ERROR, too many values
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Expected end of input, but found "false".
CONTEXT:  JSON data, line 1: true false

        	SELECT 'true false'::json;		-- ERROR, too many values
	^
<sql-statement>
SELECT 'true, false'::json;		-- ERROR, too many values
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT 'true, false'::json;		-- ERROR, too many values
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Expected end of input, but found ",".
CONTEXT:  JSON data, line 1: true,...

        	SELECT 'true, false'::json;		-- ERROR, too many values
	^
<sql-statement>
SELECT 'truf'::json;			-- ERROR, not a keyword
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT 'truf'::json;			-- ERROR, not a keyword
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Token "truf" is invalid.
CONTEXT:  JSON data, line 1: truf

        	SELECT 'truf'::json;			-- ERROR, not a keyword
	^
<sql-statement>
SELECT 'trues'::json;			-- ERROR, not a keyword
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT 'trues'::json;			-- ERROR, not a keyword
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Token "trues" is invalid.
CONTEXT:  JSON data, line 1: trues

        	SELECT 'trues'::json;			-- ERROR, not a keyword
	^
<sql-statement>
SELECT ''::json;				-- ERROR, no value
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT ''::json;				-- ERROR, no value
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 

        	SELECT ''::json;				-- ERROR, no value
	^
<sql-statement>
SELECT '    '::json;			-- ERROR, no value
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '    '::json;			-- ERROR, no value
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1:     

        	SELECT '    '::json;			-- ERROR, no value
	^
<sql-statement>
-- Multi-line JSON input to check ERROR reporting
SELECT '{
		"one": 1,
		"two":"two",
		"three":
		true}'::json; -- OK
</sql-statement>
<sql-statement>
SELECT '{
		"one": 1,
		"two":,"two",  -- ERROR extraneous comma before field "two"
		"three":
		true}'::json;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '{
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Expected JSON value, but found ",".
CONTEXT:  JSON data, line 3: 		"two":,...

        	SELECT '{
	^
<sql-statement>
SELECT '{
		"one": 1,
		"two":"two",
		"averyveryveryveryveryveryveryveryveryverylongfieldname":}'::json;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT '{
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  invalid input syntax for type json
DETAIL:  Expected JSON value, but found "}".
CONTEXT:  JSON data, line 4: ...yveryveryveryveryveryveryveryverylongfieldname":}

        	SELECT '{
	^
<sql-statement>
-- ERROR missing value for last field
--constructors
-- array_to_json
SELECT array_to_json(array(select 1 as a));
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:4:22: Error: SublinkExpr: unsupported link type: 6
    	SELECT array_to_json(array(select 1 as a));
	                     ^
<sql-statement>
SELECT array_to_json(array_agg(q),false) from (select x as b, x * 2 as c from generate_series(1,3) x) q;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem
    	SELECT array_to_json(array_agg(q),false) from (select x as b, x * 2 as c from generate_series(1,3) x) q;
	^
        -stdin-:<main>:1:32: Error: No such column: q
        	SELECT array_to_json(array_agg(q),false) from (select x as b, x * 2 as c from generate_series(1,3) x) q;
	                               ^
<sql-statement>
SELECT array_to_json(array_agg(q),true) from (select x as b, x * 2 as c from generate_series(1,3) x) q;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem
    	SELECT array_to_json(array_agg(q),true) from (select x as b, x * 2 as c from generate_series(1,3) x) q;
	^
        -stdin-:<main>:1:32: Error: No such column: q
        	SELECT array_to_json(array_agg(q),true) from (select x as b, x * 2 as c from generate_series(1,3) x) q;
	                               ^
<sql-statement>
SELECT array_to_json(array_agg(q),false)
  FROM ( SELECT $$a$$ || x AS b, y AS c,
               ARRAY[ROW(x.*,ARRAY[1,2,3]),
               ROW(y.*,ARRAY[4,5,6])] AS z
         FROM generate_series(1,2) x,
              generate_series(4,5) y) q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:3:16: Error: alternative is not implemented yet : 138
    	               ARRAY[ROW(x.*,ARRAY[1,2,3]),
	               ^
<sql-statement>
SELECT array_to_json(array_agg(x),false) from generate_series(5,10) x;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	SELECT array_to_json(array_agg(x),false) from generate_series(5,10) x;
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	SELECT array_to_json(array_agg(x),false) from generate_series(5,10) x;
	       ^
            -stdin-:<main>:1:22: Error: At function: PgAgg
            	SELECT array_to_json(array_agg(x),false) from generate_series(5,10) x;
	                     ^
                -stdin-:<main>:1:22: Error: Unable to find an overload for aggregate array_agg with given argument types: (int4)
                	SELECT array_to_json(array_agg(x),false) from generate_series(5,10) x;
	                     ^
<sql-statement>
SELECT array_to_json('{{1,5},{99,100}}'::int[]);
</sql-statement>
<sql-statement>
-- row_to_json
SELECT row_to_json(row(1,'foo'));
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:2:8: Error: alternative is not implemented yet : 138
    	SELECT row_to_json(row(1,'foo'));
	       ^
<sql-statement>
SELECT row_to_json(q)
FROM (SELECT $$a$$ || x AS b,
         y AS c,
         ARRAY[ROW(x.*,ARRAY[1,2,3]),
               ROW(y.*,ARRAY[4,5,6])] AS z
      FROM generate_series(1,2) x,
           generate_series(4,5) y) q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:4:10: Error: alternative is not implemented yet : 138
    	         ARRAY[ROW(x.*,ARRAY[1,2,3]),
	         ^
<sql-statement>
SELECT row_to_json(q,true)
FROM (SELECT $$a$$ || x AS b,
         y AS c,
         ARRAY[ROW(x.*,ARRAY[1,2,3]),
               ROW(y.*,ARRAY[4,5,6])] AS z
      FROM generate_series(1,2) x,
           generate_series(4,5) y) q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:4:10: Error: alternative is not implemented yet : 138
    	         ARRAY[ROW(x.*,ARRAY[1,2,3]),
	         ^
<sql-statement>
CREATE TEMP TABLE rows AS
SELECT x, 'txt' || x as y
FROM generate_series(1,3) AS x;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RawStmt: alternative is not implemented yet : 277
    	CREATE TEMP TABLE rows AS
	^
<sql-statement>
SELECT row_to_json(q,true)
FROM rows q;
</sql-statement>
-stdin-:<main>: Fatal: Table metadata loading

    -stdin-:<main>: Fatal: ydb/library/yql/providers/yt/gateway/file/yql_yt_file_services.cpp:44: Table not found: plato.rows
    
<sql-statement>
SELECT row_to_json(row((select array_agg(x) as d from generate_series(5,10) x)),false);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: alternative is not implemented yet : 138
    	SELECT row_to_json(row((select array_agg(x) as d from generate_series(5,10) x)),false);
	       ^
<sql-statement>
-- anyarray column
analyze rows;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RawStmt: alternative is not implemented yet : 275
    	-- anyarray column
	^
<sql-statement>
select attname, to_json(histogram_bounds) histogram_bounds
from pg_stats
where tablename = 'rows' and
      schemaname = pg_my_temp_schema()::regnamespace::text
order by 1;
</sql-statement>
-stdin-:<main>: Fatal: Table metadata loading

    -stdin-:<main>: Fatal: ydb/library/yql/providers/yt/gateway/file/yql_yt_file_services.cpp:44: Table not found: plato.pg_stats
    
<sql-statement>
-- to_json, timestamps
select to_json(timestamp '2014-05-28 12:22:35.614298');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	-- to_json, timestamps
	^
        -stdin-:<main>:2:8: Error: At function: PgCall
        	select to_json(timestamp '2014-05-28 12:22:35.614298');
	       ^
            -stdin-:<main>:2:8: Error: Unable to find an overload for proc to_json with given argument types: (timestamp)
            	select to_json(timestamp '2014-05-28 12:22:35.614298');
	       ^
<sql-statement>
BEGIN;
</sql-statement>
<sql-statement>
SET LOCAL TIME ZONE 10.5;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: VariableSetStmt, not supported name: timezone
    	SET LOCAL TIME ZONE 10.5;
	^
<sql-statement>
select to_json(timestamptz '2014-05-28 12:22:35.614298-04');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select to_json(timestamptz '2014-05-28 12:22:35.614298-04');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select to_json(timestamptz '2014-05-28 12:22:35.614298-04');
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc to_json with given argument types: (timestamptz)
            	select to_json(timestamptz '2014-05-28 12:22:35.614298-04');
	       ^
<sql-statement>
SET LOCAL TIME ZONE -8;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: VariableSetStmt, not supported name: timezone
    	SET LOCAL TIME ZONE -8;
	^
<sql-statement>
select to_json(timestamptz '2014-05-28 12:22:35.614298-04');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select to_json(timestamptz '2014-05-28 12:22:35.614298-04');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select to_json(timestamptz '2014-05-28 12:22:35.614298-04');
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc to_json with given argument types: (timestamptz)
            	select to_json(timestamptz '2014-05-28 12:22:35.614298-04');
	       ^
<sql-statement>
COMMIT;
</sql-statement>
<sql-statement>
select to_json(date '2014-05-28');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select to_json(date '2014-05-28');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select to_json(date '2014-05-28');
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc to_json with given argument types: (date)
            	select to_json(date '2014-05-28');
	       ^
<sql-statement>
select to_json(date 'Infinity');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select to_json(date 'Infinity');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select to_json(date 'Infinity');
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc to_json with given argument types: (date)
            	select to_json(date 'Infinity');
	       ^
<sql-statement>
select to_json(date '-Infinity');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select to_json(date '-Infinity');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select to_json(date '-Infinity');
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc to_json with given argument types: (date)
            	select to_json(date '-Infinity');
	       ^
<sql-statement>
select to_json(timestamp 'Infinity');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select to_json(timestamp 'Infinity');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select to_json(timestamp 'Infinity');
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc to_json with given argument types: (timestamp)
            	select to_json(timestamp 'Infinity');
	       ^
<sql-statement>
select to_json(timestamp '-Infinity');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select to_json(timestamp '-Infinity');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select to_json(timestamp '-Infinity');
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc to_json with given argument types: (timestamp)
            	select to_json(timestamp '-Infinity');
	       ^
<sql-statement>
select to_json(timestamptz 'Infinity');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select to_json(timestamptz 'Infinity');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select to_json(timestamptz 'Infinity');
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc to_json with given argument types: (timestamptz)
            	select to_json(timestamptz 'Infinity');
	       ^
<sql-statement>
select to_json(timestamptz '-Infinity');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select to_json(timestamptz '-Infinity');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select to_json(timestamptz '-Infinity');
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc to_json with given argument types: (timestamptz)
            	select to_json(timestamptz '-Infinity');
	       ^
<sql-statement>
--json_agg
SELECT json_agg(q)
  FROM ( SELECT $$a$$ || x AS b, y AS c,
               ARRAY[ROW(x.*,ARRAY[1,2,3]),
               ROW(y.*,ARRAY[4,5,6])] AS z
         FROM generate_series(1,2) x,
              generate_series(4,5) y) q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:4:16: Error: alternative is not implemented yet : 138
    	               ARRAY[ROW(x.*,ARRAY[1,2,3]),
	               ^
<sql-statement>
SELECT json_agg(q ORDER BY x, y)
  FROM rows q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported agg_order
    	SELECT json_agg(q ORDER BY x, y)
	       ^
<sql-statement>
UPDATE rows SET x = NULL WHERE x = 1;
</sql-statement>
-stdin-:<main>: Fatal: Pre type annotation

    -stdin-:<main>: Fatal: tools/enum_parser/enum_serialization_runtime/enum_runtime.cpp:70: Key 'pg_update' not found in enum NYql::EYtSettingType. Valid options are: 'initial', 'infer_scheme', 'force_infer_schema', 'do_not_fail_on_invalid_schema', 'direct_read', 'view', 'mode', 'scheme', 'weak_concat', 'anonymous', 'with_qb', 'inline', 'sample', 'joinLabel', 'ignore_non_existing', 'warn_non_existing', 'xlock', 'unordered', 'nonUnique', 'userschema', 'usercolumns', 'statcolumns', 'syscolumns', 'ignoretypev3', 'memUsage', 'itemsCount', 'rowFactor', 'ordered', 'keyFilter', 'keyFilter2', 'take', 'skip', 'limit', 'sortLimitBy', 'sortBy', 'reduceBy', 'reduceFilterBy', 'forceTransform', 'weakFields', 'sharded', 'combineChunks', 'jobCount', 'joinReduce', 'firstAsPrimary', 'flow', 'keepSorted', 'keySwitch', 'uniqueBy', 'opHash', 'mapOutputType', 'reduceInputType', 'noDq', 'split', 'compression_codec', 'erasure_codec', 'expiration', 'replication_factor', 'user_attrs', 'media', 'primary_medium', 'keep_meta', 'monotonic_keys'. 
    
<sql-statement>
SELECT json_agg(q ORDER BY x NULLS FIRST, y)
  FROM rows q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported agg_order
    	SELECT json_agg(q ORDER BY x NULLS FIRST, y)
	       ^
<sql-statement>
-- non-numeric output
SELECT row_to_json(q)
FROM (SELECT 'NaN'::float8 AS "float8field") q;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem
    	-- non-numeric output
	^
        -stdin-:<main>:2:20: Error: No such column: q
        	SELECT row_to_json(q)
	                   ^
<sql-statement>
SELECT row_to_json(q)
FROM (SELECT 'Infinity'::float8 AS "float8field") q;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem
    	SELECT row_to_json(q)
	^
        -stdin-:<main>:1:20: Error: No such column: q
        	SELECT row_to_json(q)
	                   ^
<sql-statement>
SELECT row_to_json(q)
FROM (SELECT '-Infinity'::float8 AS "float8field") q;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem
    	SELECT row_to_json(q)
	^
        -stdin-:<main>:1:20: Error: No such column: q
        	SELECT row_to_json(q)
	                   ^
<sql-statement>
-- json input
SELECT row_to_json(q)
FROM (SELECT '{"a":1,"b": [2,3,4,"d","e","f"],"c":{"p":1,"q":2}}'::json AS "jsonfield") q;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem
    	-- json input
	^
        -stdin-:<main>:2:20: Error: No such column: q
        	SELECT row_to_json(q)
	                   ^
<sql-statement>
-- json extraction functions
CREATE TEMP TABLE test_json (
       json_type text,
       test_json json
);
</sql-statement>
<sql-statement>
INSERT INTO test_json VALUES
('scalar','"a scalar"'),
('array','["zero", "one","two",null,"four","five", [1,2,3],{"f1":9}]'),
('object','{"field1":"val1","field2":"val2","field3":null, "field4": 4, "field5": [1,2,3], "field6": {"f1":9}}');
</sql-statement>
<sql-statement>
SELECT test_json -> 'x'
FROM test_json
WHERE json_type = 'scalar';
</sql-statement>
<sql-statement>
SELECT test_json -> 'x'
FROM test_json
WHERE json_type = 'array';
</sql-statement>
<sql-statement>
SELECT test_json -> 'x'
FROM test_json
WHERE json_type = 'object';
</sql-statement>
<sql-statement>
SELECT test_json->'field2'
FROM test_json
WHERE json_type = 'object';
</sql-statement>
<sql-statement>
SELECT test_json->>'field2'
FROM test_json
WHERE json_type = 'object';
</sql-statement>
<sql-statement>
SELECT test_json -> 2
FROM test_json
WHERE json_type = 'scalar';
</sql-statement>
<sql-statement>
SELECT test_json -> 2
FROM test_json
WHERE json_type = 'array';
</sql-statement>
<sql-statement>
SELECT test_json -> -1
FROM test_json
WHERE json_type = 'array';
</sql-statement>
<sql-statement>
SELECT test_json -> 2
FROM test_json
WHERE json_type = 'object';
</sql-statement>
<sql-statement>
SELECT test_json->>2
FROM test_json
WHERE json_type = 'array';
</sql-statement>
<sql-statement>
SELECT test_json ->> 6 FROM test_json WHERE json_type = 'array';
</sql-statement>
<sql-statement>
SELECT test_json ->> 7 FROM test_json WHERE json_type = 'array';
</sql-statement>
<sql-statement>
SELECT test_json ->> 'field4' FROM test_json WHERE json_type = 'object';
</sql-statement>
<sql-statement>
SELECT test_json ->> 'field5' FROM test_json WHERE json_type = 'object';
</sql-statement>
<sql-statement>
SELECT test_json ->> 'field6' FROM test_json WHERE json_type = 'object';
</sql-statement>
<sql-statement>
SELECT json_object_keys(test_json)
FROM test_json
WHERE json_type = 'scalar';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: Generator functions are not allowed in: SELECT
    	SELECT json_object_keys(test_json)
	       ^
<sql-statement>
SELECT json_object_keys(test_json)
FROM test_json
WHERE json_type = 'array';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: Generator functions are not allowed in: SELECT
    	SELECT json_object_keys(test_json)
	       ^
<sql-statement>
SELECT json_object_keys(test_json)
FROM test_json
WHERE json_type = 'object';
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: Generator functions are not allowed in: SELECT
    	SELECT json_object_keys(test_json)
	       ^
<sql-statement>
-- test extending object_keys resultset - initial resultset size is 256
select count(*) from
    (select json_object_keys(json_object(array_agg(g)))
     from (select unnest(array['f'||n,n::text])as g
           from generate_series(1,300) as n) x ) y;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:4:19: Error: Generator functions are not allowed in: SELECT
    	     from (select unnest(array['f'||n,n::text])as g
	                  ^
<sql-statement>
-- nulls
select (test_json->'field3') is null as expect_false
from test_json
where json_type = 'object';
</sql-statement>
<sql-statement>
select (test_json->>'field3') is null as expect_true
from test_json
where json_type = 'object';
</sql-statement>
<sql-statement>
select (test_json->3) is null as expect_false
from test_json
where json_type = 'array';
</sql-statement>
<sql-statement>
select (test_json->>3) is null as expect_true
from test_json
where json_type = 'array';
</sql-statement>
<sql-statement>
-- corner cases
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json -> null::text;
</sql-statement>
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json -> null::int;
</sql-statement>
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json -> 1;
</sql-statement>
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json -> -1;
</sql-statement>
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json -> 'z';
</sql-statement>
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json -> '';
</sql-statement>
<sql-statement>
select '[{"b": "c"}, {"b": "cc"}]'::json -> 1;
</sql-statement>
<sql-statement>
select '[{"b": "c"}, {"b": "cc"}]'::json -> 3;
</sql-statement>
<sql-statement>
select '[{"b": "c"}, {"b": "cc"}]'::json -> 'z';
</sql-statement>
<sql-statement>
select '{"a": "c", "b": null}'::json -> 'b';
</sql-statement>
<sql-statement>
select '"foo"'::json -> 1;
</sql-statement>
<sql-statement>
select '"foo"'::json -> 'z';
</sql-statement>
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json ->> null::text;
</sql-statement>
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json ->> null::int;
</sql-statement>
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json ->> 1;
</sql-statement>
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json ->> 'z';
</sql-statement>
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json ->> '';
</sql-statement>
<sql-statement>
select '[{"b": "c"}, {"b": "cc"}]'::json ->> 1;
</sql-statement>
<sql-statement>
select '[{"b": "c"}, {"b": "cc"}]'::json ->> 3;
</sql-statement>
<sql-statement>
select '[{"b": "c"}, {"b": "cc"}]'::json ->> 'z';
</sql-statement>
<sql-statement>
select '{"a": "c", "b": null}'::json ->> 'b';
</sql-statement>
<sql-statement>
select '"foo"'::json ->> 1;
</sql-statement>
<sql-statement>
select '"foo"'::json ->> 'z';
</sql-statement>
<sql-statement>
-- array length
SELECT json_array_length('[1,2,3,{"f1":1,"f2":[5,6]},4]');
</sql-statement>
<sql-statement>
SELECT json_array_length('[]');
</sql-statement>
<sql-statement>
SELECT json_array_length('{"f1":1,"f2":[5,6]}');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT json_array_length('{"f1":1,"f2":[5,6]}');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  cannot get array length of a non-array

        	SELECT json_array_length('{"f1":1,"f2":[5,6]}');
	^
<sql-statement>
SELECT json_array_length('4');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	SELECT json_array_length('4');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  cannot get array length of a scalar

        	SELECT json_array_length('4');
	^
<sql-statement>
-- each
select json_each('{"f1":[1,2,3],"f2":{"f3":1},"f4":null}');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:2:8: Error: Generator functions are not allowed in: SELECT
    	select json_each('{"f1":[1,2,3],"f2":{"f3":1},"f4":null}');
	       ^
<sql-statement>
select * from json_each('{"f1":[1,2,3],"f2":{"f3":1},"f4":null,"f5":99,"f6":"stringy"}') q;
</sql-statement>
<sql-statement>
select json_each_text('{"f1":[1,2,3],"f2":{"f3":1},"f4":null,"f5":"null"}');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: Generator functions are not allowed in: SELECT
    	select json_each_text('{"f1":[1,2,3],"f2":{"f3":1},"f4":null,"f5":"null"}');
	       ^
<sql-statement>
select * from json_each_text('{"f1":[1,2,3],"f2":{"f3":1},"f4":null,"f5":99,"f6":"stringy"}') q;
</sql-statement>
<sql-statement>
-- extract_path, extract_path_as_text
select json_extract_path('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f4','f6');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	-- extract_path, extract_path_as_text
	^
        -stdin-:<main>:2:8: Error: At function: PgCall
        	select json_extract_path('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f4','f6');
	       ^
            -stdin-:<main>:2:8: Error: No such proc: json_extract_path
            	select json_extract_path('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f4','f6');
	       ^
<sql-statement>
select json_extract_path('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f2');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select json_extract_path('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f2');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select json_extract_path('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f2');
	       ^
            -stdin-:<main>:1:8: Error: No such proc: json_extract_path
            	select json_extract_path('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f2');
	       ^
<sql-statement>
select json_extract_path('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',0::text);
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select json_extract_path('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',0::text);
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select json_extract_path('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',0::text);
	       ^
            -stdin-:<main>:1:8: Error: No such proc: json_extract_path
            	select json_extract_path('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',0::text);
	       ^
<sql-statement>
select json_extract_path('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',1::text);
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select json_extract_path('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',1::text);
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select json_extract_path('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',1::text);
	       ^
            -stdin-:<main>:1:8: Error: No such proc: json_extract_path
            	select json_extract_path('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',1::text);
	       ^
<sql-statement>
select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f4','f6');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f4','f6');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f4','f6');
	       ^
            -stdin-:<main>:1:8: Error: No such proc: json_extract_path_text
            	select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f4','f6');
	       ^
<sql-statement>
select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f2');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f2');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f2');
	       ^
            -stdin-:<main>:1:8: Error: No such proc: json_extract_path_text
            	select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}','f2');
	       ^
<sql-statement>
select json_extract_path_text('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',0::text);
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select json_extract_path_text('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',0::text);
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select json_extract_path_text('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',0::text);
	       ^
            -stdin-:<main>:1:8: Error: No such proc: json_extract_path_text
            	select json_extract_path_text('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',0::text);
	       ^
<sql-statement>
select json_extract_path_text('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',1::text);
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select json_extract_path_text('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',1::text);
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select json_extract_path_text('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',1::text);
	       ^
            -stdin-:<main>:1:8: Error: No such proc: json_extract_path_text
            	select json_extract_path_text('{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}','f2',1::text);
	       ^
<sql-statement>
-- extract_path nulls
select json_extract_path('{"f2":{"f3":1},"f4":{"f5":null,"f6":"stringy"}}','f4','f5') is null as expect_false;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	-- extract_path nulls
	^
        -stdin-:<main>:2:87: Error: At function: ToPg, At function: Not, At function: Exists
        	select json_extract_path('{"f2":{"f3":1},"f4":{"f5":null,"f6":"stringy"}}','f4','f5') is null as expect_false;
	                                                                                      ^
            -stdin-:<main>:2:8: Error: At function: PgCall
            	select json_extract_path('{"f2":{"f3":1},"f4":{"f5":null,"f6":"stringy"}}','f4','f5') is null as expect_false;
	       ^
                -stdin-:<main>:2:8: Error: No such proc: json_extract_path
                	select json_extract_path('{"f2":{"f3":1},"f4":{"f5":null,"f6":"stringy"}}','f4','f5') is null as expect_false;
	       ^
<sql-statement>
select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":null,"f6":"stringy"}}','f4','f5') is null as expect_true;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":null,"f6":"stringy"}}','f4','f5') is null as expect_true;
	^
        -stdin-:<main>:1:92: Error: At function: ToPg, At function: Not, At function: Exists
        	select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":null,"f6":"stringy"}}','f4','f5') is null as expect_true;
	                                                                                           ^
            -stdin-:<main>:1:8: Error: At function: PgCall
            	select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":null,"f6":"stringy"}}','f4','f5') is null as expect_true;
	       ^
                -stdin-:<main>:1:8: Error: No such proc: json_extract_path_text
                	select json_extract_path_text('{"f2":{"f3":1},"f4":{"f5":null,"f6":"stringy"}}','f4','f5') is null as expect_true;
	       ^
<sql-statement>
select json_extract_path('{"f2":{"f3":1},"f4":[0,1,2,null]}','f4','3') is null as expect_false;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select json_extract_path('{"f2":{"f3":1},"f4":[0,1,2,null]}','f4','3') is null as expect_false;
	^
        -stdin-:<main>:1:72: Error: At function: ToPg, At function: Not, At function: Exists
        	select json_extract_path('{"f2":{"f3":1},"f4":[0,1,2,null]}','f4','3') is null as expect_false;
	                                                                       ^
            -stdin-:<main>:1:8: Error: At function: PgCall
            	select json_extract_path('{"f2":{"f3":1},"f4":[0,1,2,null]}','f4','3') is null as expect_false;
	       ^
                -stdin-:<main>:1:8: Error: No such proc: json_extract_path
                	select json_extract_path('{"f2":{"f3":1},"f4":[0,1,2,null]}','f4','3') is null as expect_false;
	       ^
<sql-statement>
select json_extract_path_text('{"f2":{"f3":1},"f4":[0,1,2,null]}','f4','3') is null as expect_true;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select json_extract_path_text('{"f2":{"f3":1},"f4":[0,1,2,null]}','f4','3') is null as expect_true;
	^
        -stdin-:<main>:1:77: Error: At function: ToPg, At function: Not, At function: Exists
        	select json_extract_path_text('{"f2":{"f3":1},"f4":[0,1,2,null]}','f4','3') is null as expect_true;
	                                                                            ^
            -stdin-:<main>:1:8: Error: At function: PgCall
            	select json_extract_path_text('{"f2":{"f3":1},"f4":[0,1,2,null]}','f4','3') is null as expect_true;
	       ^
                -stdin-:<main>:1:8: Error: No such proc: json_extract_path_text
                	select json_extract_path_text('{"f2":{"f3":1},"f4":[0,1,2,null]}','f4','3') is null as expect_true;
	       ^
<sql-statement>
-- extract_path operators
select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f4','f6'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	-- extract_path operators
	^
        -stdin-:<main>:2:61: Error: At function: PgOp
        	select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f4','f6'];
	                                                            ^
            -stdin-:<main>:2:61: Error: No such operator: #>
            	select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f4','f6'];
	                                                            ^
<sql-statement>
select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f2'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f2'];
	^
        -stdin-:<main>:1:61: Error: At function: PgOp
        	select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f2'];
	                                                            ^
            -stdin-:<main>:1:61: Error: No such operator: #>
            	select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f2'];
	                                                            ^
<sql-statement>
select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f2','0'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f2','0'];
	^
        -stdin-:<main>:1:61: Error: At function: PgOp
        	select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f2','0'];
	                                                            ^
            -stdin-:<main>:1:61: Error: No such operator: #>
            	select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f2','0'];
	                                                            ^
<sql-statement>
select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f2','1'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f2','1'];
	^
        -stdin-:<main>:1:61: Error: At function: PgOp
        	select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f2','1'];
	                                                            ^
            -stdin-:<main>:1:61: Error: No such operator: #>
            	select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>array['f2','1'];
	                                                            ^
<sql-statement>
select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f4','f6'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f4','f6'];
	^
        -stdin-:<main>:1:61: Error: At function: PgOp
        	select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f4','f6'];
	                                                            ^
            -stdin-:<main>:1:61: Error: No such operator: #>>
            	select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f4','f6'];
	                                                            ^
<sql-statement>
select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f2'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f2'];
	^
        -stdin-:<main>:1:61: Error: At function: PgOp
        	select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f2'];
	                                                            ^
            -stdin-:<main>:1:61: Error: No such operator: #>>
            	select '{"f2":{"f3":1},"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f2'];
	                                                            ^
<sql-statement>
select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f2','0'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f2','0'];
	^
        -stdin-:<main>:1:61: Error: At function: PgOp
        	select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f2','0'];
	                                                            ^
            -stdin-:<main>:1:61: Error: No such operator: #>>
            	select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f2','0'];
	                                                            ^
<sql-statement>
select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f2','1'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f2','1'];
	^
        -stdin-:<main>:1:61: Error: At function: PgOp
        	select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f2','1'];
	                                                            ^
            -stdin-:<main>:1:61: Error: No such operator: #>>
            	select '{"f2":["f3",1],"f4":{"f5":99,"f6":"stringy"}}'::json#>>array['f2','1'];
	                                                            ^
<sql-statement>
-- corner cases for same
select '{"a": {"b":{"c": "foo"}}}'::json #> '{}';
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	-- corner cases for same
	^
        -stdin-:<main>:2:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #> '{}';
	                                         ^
            -stdin-:<main>:2:42: Error: No such operator: #>
            	select '{"a": {"b":{"c": "foo"}}}'::json #> '{}';
	                                         ^
<sql-statement>
select '[1,2,3]'::json #> '{}';
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '[1,2,3]'::json #> '{}';
	^
        -stdin-:<main>:1:24: Error: At function: PgOp
        	select '[1,2,3]'::json #> '{}';
	                       ^
            -stdin-:<main>:1:24: Error: No such operator: #>
            	select '[1,2,3]'::json #> '{}';
	                       ^
<sql-statement>
select '"foo"'::json #> '{}';
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '"foo"'::json #> '{}';
	^
        -stdin-:<main>:1:22: Error: At function: PgOp
        	select '"foo"'::json #> '{}';
	                     ^
            -stdin-:<main>:1:22: Error: No such operator: #>
            	select '"foo"'::json #> '{}';
	                     ^
<sql-statement>
select '42'::json #> '{}';
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '42'::json #> '{}';
	^
        -stdin-:<main>:1:19: Error: At function: PgOp
        	select '42'::json #> '{}';
	                  ^
            -stdin-:<main>:1:19: Error: No such operator: #>
            	select '42'::json #> '{}';
	                  ^
<sql-statement>
select 'null'::json #> '{}';
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select 'null'::json #> '{}';
	^
        -stdin-:<main>:1:21: Error: At function: PgOp
        	select 'null'::json #> '{}';
	                    ^
            -stdin-:<main>:1:21: Error: No such operator: #>
            	select 'null'::json #> '{}';
	                    ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #> array['a'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>
            	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a'];
	                                         ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #> array['a', null];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a', null];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a', null];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>
            	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a', null];
	                                         ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #> array['a', ''];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a', ''];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a', ''];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>
            	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a', ''];
	                                         ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','b'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','b'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','b'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>
            	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','b'];
	                                         ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','b','c'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','b','c'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','b','c'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>
            	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','b','c'];
	                                         ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','b','c','d'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','b','c','d'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','b','c','d'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>
            	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','b','c','d'];
	                                         ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','z','c'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','z','c'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','z','c'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>
            	select '{"a": {"b":{"c": "foo"}}}'::json #> array['a','z','c'];
	                                         ^
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #> array['a','1','b'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #> array['a','1','b'];
	^
        -stdin-:<main>:1:49: Error: At function: PgOp
        	select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #> array['a','1','b'];
	                                                ^
            -stdin-:<main>:1:49: Error: No such operator: #>
            	select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #> array['a','1','b'];
	                                                ^
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #> array['a','z','b'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #> array['a','z','b'];
	^
        -stdin-:<main>:1:49: Error: At function: PgOp
        	select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #> array['a','z','b'];
	                                                ^
            -stdin-:<main>:1:49: Error: No such operator: #>
            	select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #> array['a','z','b'];
	                                                ^
<sql-statement>
select '[{"b": "c"}, {"b": "cc"}]'::json #> array['1','b'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '[{"b": "c"}, {"b": "cc"}]'::json #> array['1','b'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '[{"b": "c"}, {"b": "cc"}]'::json #> array['1','b'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>
            	select '[{"b": "c"}, {"b": "cc"}]'::json #> array['1','b'];
	                                         ^
<sql-statement>
select '[{"b": "c"}, {"b": "cc"}]'::json #> array['z','b'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '[{"b": "c"}, {"b": "cc"}]'::json #> array['z','b'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '[{"b": "c"}, {"b": "cc"}]'::json #> array['z','b'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>
            	select '[{"b": "c"}, {"b": "cc"}]'::json #> array['z','b'];
	                                         ^
<sql-statement>
select '[{"b": "c"}, {"b": null}]'::json #> array['1','b'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '[{"b": "c"}, {"b": null}]'::json #> array['1','b'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '[{"b": "c"}, {"b": null}]'::json #> array['1','b'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>
            	select '[{"b": "c"}, {"b": null}]'::json #> array['1','b'];
	                                         ^
<sql-statement>
select '"foo"'::json #> array['z'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '"foo"'::json #> array['z'];
	^
        -stdin-:<main>:1:22: Error: At function: PgOp
        	select '"foo"'::json #> array['z'];
	                     ^
            -stdin-:<main>:1:22: Error: No such operator: #>
            	select '"foo"'::json #> array['z'];
	                     ^
<sql-statement>
select '42'::json #> array['f2'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '42'::json #> array['f2'];
	^
        -stdin-:<main>:1:19: Error: At function: PgOp
        	select '42'::json #> array['f2'];
	                  ^
            -stdin-:<main>:1:19: Error: No such operator: #>
            	select '42'::json #> array['f2'];
	                  ^
<sql-statement>
select '42'::json #> array['0'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '42'::json #> array['0'];
	^
        -stdin-:<main>:1:19: Error: At function: PgOp
        	select '42'::json #> array['0'];
	                  ^
            -stdin-:<main>:1:19: Error: No such operator: #>
            	select '42'::json #> array['0'];
	                  ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #>> '{}';
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #>> '{}';
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #>> '{}';
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>>
            	select '{"a": {"b":{"c": "foo"}}}'::json #>> '{}';
	                                         ^
<sql-statement>
select '[1,2,3]'::json #>> '{}';
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '[1,2,3]'::json #>> '{}';
	^
        -stdin-:<main>:1:24: Error: At function: PgOp
        	select '[1,2,3]'::json #>> '{}';
	                       ^
            -stdin-:<main>:1:24: Error: No such operator: #>>
            	select '[1,2,3]'::json #>> '{}';
	                       ^
<sql-statement>
select '"foo"'::json #>> '{}';
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '"foo"'::json #>> '{}';
	^
        -stdin-:<main>:1:22: Error: At function: PgOp
        	select '"foo"'::json #>> '{}';
	                     ^
            -stdin-:<main>:1:22: Error: No such operator: #>>
            	select '"foo"'::json #>> '{}';
	                     ^
<sql-statement>
select '42'::json #>> '{}';
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '42'::json #>> '{}';
	^
        -stdin-:<main>:1:19: Error: At function: PgOp
        	select '42'::json #>> '{}';
	                  ^
            -stdin-:<main>:1:19: Error: No such operator: #>>
            	select '42'::json #>> '{}';
	                  ^
<sql-statement>
select 'null'::json #>> '{}';
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select 'null'::json #>> '{}';
	^
        -stdin-:<main>:1:21: Error: At function: PgOp
        	select 'null'::json #>> '{}';
	                    ^
            -stdin-:<main>:1:21: Error: No such operator: #>>
            	select 'null'::json #>> '{}';
	                    ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>>
            	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a'];
	                                         ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a', null];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a', null];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a', null];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>>
            	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a', null];
	                                         ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a', ''];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a', ''];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a', ''];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>>
            	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a', ''];
	                                         ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','b'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','b'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','b'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>>
            	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','b'];
	                                         ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','b','c'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','b','c'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','b','c'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>>
            	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','b','c'];
	                                         ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','b','c','d'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','b','c','d'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','b','c','d'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>>
            	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','b','c','d'];
	                                         ^
<sql-statement>
select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','z','c'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','z','c'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','z','c'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>>
            	select '{"a": {"b":{"c": "foo"}}}'::json #>> array['a','z','c'];
	                                         ^
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #>> array['a','1','b'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #>> array['a','1','b'];
	^
        -stdin-:<main>:1:49: Error: At function: PgOp
        	select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #>> array['a','1','b'];
	                                                ^
            -stdin-:<main>:1:49: Error: No such operator: #>>
            	select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #>> array['a','1','b'];
	                                                ^
<sql-statement>
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #>> array['a','z','b'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #>> array['a','z','b'];
	^
        -stdin-:<main>:1:49: Error: At function: PgOp
        	select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #>> array['a','z','b'];
	                                                ^
            -stdin-:<main>:1:49: Error: No such operator: #>>
            	select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json #>> array['a','z','b'];
	                                                ^
<sql-statement>
select '[{"b": "c"}, {"b": "cc"}]'::json #>> array['1','b'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '[{"b": "c"}, {"b": "cc"}]'::json #>> array['1','b'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '[{"b": "c"}, {"b": "cc"}]'::json #>> array['1','b'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>>
            	select '[{"b": "c"}, {"b": "cc"}]'::json #>> array['1','b'];
	                                         ^
<sql-statement>
select '[{"b": "c"}, {"b": "cc"}]'::json #>> array['z','b'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '[{"b": "c"}, {"b": "cc"}]'::json #>> array['z','b'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '[{"b": "c"}, {"b": "cc"}]'::json #>> array['z','b'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>>
            	select '[{"b": "c"}, {"b": "cc"}]'::json #>> array['z','b'];
	                                         ^
<sql-statement>
select '[{"b": "c"}, {"b": null}]'::json #>> array['1','b'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '[{"b": "c"}, {"b": null}]'::json #>> array['1','b'];
	^
        -stdin-:<main>:1:42: Error: At function: PgOp
        	select '[{"b": "c"}, {"b": null}]'::json #>> array['1','b'];
	                                         ^
            -stdin-:<main>:1:42: Error: No such operator: #>>
            	select '[{"b": "c"}, {"b": null}]'::json #>> array['1','b'];
	                                         ^
<sql-statement>
select '"foo"'::json #>> array['z'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '"foo"'::json #>> array['z'];
	^
        -stdin-:<main>:1:22: Error: At function: PgOp
        	select '"foo"'::json #>> array['z'];
	                     ^
            -stdin-:<main>:1:22: Error: No such operator: #>>
            	select '"foo"'::json #>> array['z'];
	                     ^
<sql-statement>
select '42'::json #>> array['f2'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '42'::json #>> array['f2'];
	^
        -stdin-:<main>:1:19: Error: At function: PgOp
        	select '42'::json #>> array['f2'];
	                  ^
            -stdin-:<main>:1:19: Error: No such operator: #>>
            	select '42'::json #>> array['f2'];
	                  ^
<sql-statement>
select '42'::json #>> array['0'];
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select '42'::json #>> array['0'];
	^
        -stdin-:<main>:1:19: Error: At function: PgOp
        	select '42'::json #>> array['0'];
	                  ^
            -stdin-:<main>:1:19: Error: No such operator: #>>
            	select '42'::json #>> array['0'];
	                  ^
<sql-statement>
-- array_elements
select json_array_elements('[1,true,[1,[2,3]],null,{"f1":1,"f2":[7,8,9]},false,"stringy"]');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:2:8: Error: Generator functions are not allowed in: SELECT
    	select json_array_elements('[1,true,[1,[2,3]],null,{"f1":1,"f2":[7,8,9]},false,"stringy"]');
	       ^
<sql-statement>
select * from json_array_elements('[1,true,[1,[2,3]],null,{"f1":1,"f2":[7,8,9]},false,"stringy"]') q;
</sql-statement>
<sql-statement>
select json_array_elements_text('[1,true,[1,[2,3]],null,{"f1":1,"f2":[7,8,9]},false,"stringy"]');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: Generator functions are not allowed in: SELECT
    	select json_array_elements_text('[1,true,[1,[2,3]],null,{"f1":1,"f2":[7,8,9]},false,"stringy"]');
	       ^
<sql-statement>
select * from json_array_elements_text('[1,true,[1,[2,3]],null,{"f1":1,"f2":[7,8,9]},false,"stringy"]') q;
</sql-statement>
<sql-statement>
-- populate_record
create type jpop as (a text, b int, c timestamp);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RawStmt: alternative is not implemented yet : 314
    	-- populate_record
	^
<sql-statement>
CREATE DOMAIN js_int_not_null  AS int     NOT NULL;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RawStmt: alternative is not implemented yet : 272
    	CREATE DOMAIN js_int_not_null  AS int     NOT NULL;
	^
<sql-statement>
CREATE DOMAIN js_int_array_1d  AS int[]   CHECK(array_length(VALUE, 1) = 3);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RawStmt: alternative is not implemented yet : 272
    	CREATE DOMAIN js_int_array_1d  AS int[]   CHECK(array_length(VALUE, 1) = 3);
	^
<sql-statement>
CREATE DOMAIN js_int_array_2d  AS int[][] CHECK(array_length(VALUE, 2) = 3);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RawStmt: alternative is not implemented yet : 272
    	CREATE DOMAIN js_int_array_2d  AS int[][] CHECK(array_length(VALUE, 2) = 3);
	^
<sql-statement>
create type j_unordered_pair as (x int, y int);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RawStmt: alternative is not implemented yet : 314
    	create type j_unordered_pair as (x int, y int);
	^
<sql-statement>
create domain j_ordered_pair as j_unordered_pair check((value).x <= (value).y);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RawStmt: alternative is not implemented yet : 272
    	create domain j_ordered_pair as j_unordered_pair check((value).x <= (value).y);
	^
<sql-statement>
CREATE TYPE jsrec AS (
	i	int,
	ia	_int4,
	ia1	int[],
	ia2	int[][],
	ia3	int[][][],
	ia1d	js_int_array_1d,
	ia2d	js_int_array_2d,
	t	text,
	ta	text[],
	c	char(10),
	ca	char(10)[],
	ts	timestamp,
	js	json,
	jsb	jsonb,
	jsa	json[],
	rec	jpop,
	reca	jpop[]
);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RawStmt: alternative is not implemented yet : 314
    	CREATE TYPE jsrec AS (
	^
<sql-statement>
CREATE TYPE jsrec_i_not_null AS (
	i	js_int_not_null
);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RawStmt: alternative is not implemented yet : 314
    	CREATE TYPE jsrec_i_not_null AS (
	^
<sql-statement>
select * from json_populate_record(null::jpop,'{"a":"blurfl","x":43.2}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:42: Error: Unknown type: jpop
    	select * from json_populate_record(null::jpop,'{"a":"blurfl","x":43.2}') q;
	                                         ^
<sql-statement>
select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{"a":"blurfl","x":43.2}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:70: Error: alternative is not implemented yet : 138
    	select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{"a":"blurfl","x":43.2}') q;
	                                                                     ^
<sql-statement>
select * from json_populate_record(null::jpop,'{"a":"blurfl","x":43.2}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:42: Error: Unknown type: jpop
    	select * from json_populate_record(null::jpop,'{"a":"blurfl","x":43.2}') q;
	                                         ^
<sql-statement>
select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{"a":"blurfl","x":43.2}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:70: Error: alternative is not implemented yet : 138
    	select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{"a":"blurfl","x":43.2}') q;
	                                                                     ^
<sql-statement>
select * from json_populate_record(null::jpop,'{"a":[100,200,false],"x":43.2}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:42: Error: Unknown type: jpop
    	select * from json_populate_record(null::jpop,'{"a":[100,200,false],"x":43.2}') q;
	                                         ^
<sql-statement>
select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{"a":[100,200,false],"x":43.2}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:70: Error: alternative is not implemented yet : 138
    	select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{"a":[100,200,false],"x":43.2}') q;
	                                                                     ^
<sql-statement>
select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{"c":[100,200,false],"x":43.2}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:70: Error: alternative is not implemented yet : 138
    	select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{"c":[100,200,false],"x":43.2}') q;
	                                                                     ^
<sql-statement>
select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:70: Error: alternative is not implemented yet : 138
    	select * from json_populate_record(row('x',3,'2012-12-31 15:30:56')::jpop,'{}') q;
	                                                                     ^
<sql-statement>
SELECT i FROM json_populate_record(NULL::jsrec_i_not_null, '{"x": 43.2}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:42: Error: Unknown type: jsrec_i_not_null
    	SELECT i FROM json_populate_record(NULL::jsrec_i_not_null, '{"x": 43.2}') q;
	                                         ^
<sql-statement>
SELECT i FROM json_populate_record(NULL::jsrec_i_not_null, '{"i": null}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:42: Error: Unknown type: jsrec_i_not_null
    	SELECT i FROM json_populate_record(NULL::jsrec_i_not_null, '{"i": null}') q;
	                                         ^
<sql-statement>
SELECT i FROM json_populate_record(NULL::jsrec_i_not_null, '{"i": 12345}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:42: Error: Unknown type: jsrec_i_not_null
    	SELECT i FROM json_populate_record(NULL::jsrec_i_not_null, '{"i": 12345}') q;
	                                         ^
<sql-statement>
SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": null}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": null}') q;
	                                          ^
<sql-statement>
SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": 123}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": 123}') q;
	                                          ^
<sql-statement>
SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": [1, "2", null, 4]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": [1, "2", null, 4]}') q;
	                                          ^
<sql-statement>
SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": [[1, 2], [3, 4]]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": [[1, 2], [3, 4]]}') q;
	                                          ^
<sql-statement>
SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": [[1], 2]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": [[1], 2]}') q;
	                                          ^
<sql-statement>
SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": [[1], [2, 3]]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": [[1], [2, 3]]}') q;
	                                          ^
<sql-statement>
SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": "{1,2,3}"}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ia FROM json_populate_record(NULL::jsrec, '{"ia": "{1,2,3}"}') q;
	                                          ^
<sql-statement>
SELECT ia1 FROM json_populate_record(NULL::jsrec, '{"ia1": null}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia1 FROM json_populate_record(NULL::jsrec, '{"ia1": null}') q;
	                                           ^
<sql-statement>
SELECT ia1 FROM json_populate_record(NULL::jsrec, '{"ia1": 123}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia1 FROM json_populate_record(NULL::jsrec, '{"ia1": 123}') q;
	                                           ^
<sql-statement>
SELECT ia1 FROM json_populate_record(NULL::jsrec, '{"ia1": [1, "2", null, 4]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia1 FROM json_populate_record(NULL::jsrec, '{"ia1": [1, "2", null, 4]}') q;
	                                           ^
<sql-statement>
SELECT ia1 FROM json_populate_record(NULL::jsrec, '{"ia1": [[1, 2, 3]]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia1 FROM json_populate_record(NULL::jsrec, '{"ia1": [[1, 2, 3]]}') q;
	                                           ^
<sql-statement>
SELECT ia1d FROM json_populate_record(NULL::jsrec, '{"ia1d": null}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jsrec
    	SELECT ia1d FROM json_populate_record(NULL::jsrec, '{"ia1d": null}') q;
	                                            ^
<sql-statement>
SELECT ia1d FROM json_populate_record(NULL::jsrec, '{"ia1d": 123}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jsrec
    	SELECT ia1d FROM json_populate_record(NULL::jsrec, '{"ia1d": 123}') q;
	                                            ^
<sql-statement>
SELECT ia1d FROM json_populate_record(NULL::jsrec, '{"ia1d": [1, "2", null, 4]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jsrec
    	SELECT ia1d FROM json_populate_record(NULL::jsrec, '{"ia1d": [1, "2", null, 4]}') q;
	                                            ^
<sql-statement>
SELECT ia1d FROM json_populate_record(NULL::jsrec, '{"ia1d": [1, "2", null]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jsrec
    	SELECT ia1d FROM json_populate_record(NULL::jsrec, '{"ia1d": [1, "2", null]}') q;
	                                            ^
<sql-statement>
SELECT ia2 FROM json_populate_record(NULL::jsrec, '{"ia2": [1, "2", null, 4]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia2 FROM json_populate_record(NULL::jsrec, '{"ia2": [1, "2", null, 4]}') q;
	                                           ^
<sql-statement>
SELECT ia2 FROM json_populate_record(NULL::jsrec, '{"ia2": [[1, 2], [null, 4]]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia2 FROM json_populate_record(NULL::jsrec, '{"ia2": [[1, 2], [null, 4]]}') q;
	                                           ^
<sql-statement>
SELECT ia2 FROM json_populate_record(NULL::jsrec, '{"ia2": [[], []]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia2 FROM json_populate_record(NULL::jsrec, '{"ia2": [[], []]}') q;
	                                           ^
<sql-statement>
SELECT ia2 FROM json_populate_record(NULL::jsrec, '{"ia2": [[1, 2], [3]]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia2 FROM json_populate_record(NULL::jsrec, '{"ia2": [[1, 2], [3]]}') q;
	                                           ^
<sql-statement>
SELECT ia2 FROM json_populate_record(NULL::jsrec, '{"ia2": [[1, 2], 3, 4]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia2 FROM json_populate_record(NULL::jsrec, '{"ia2": [[1, 2], 3, 4]}') q;
	                                           ^
<sql-statement>
SELECT ia2d FROM json_populate_record(NULL::jsrec, '{"ia2d": [[1, "2"], [null, 4]]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jsrec
    	SELECT ia2d FROM json_populate_record(NULL::jsrec, '{"ia2d": [[1, "2"], [null, 4]]}') q;
	                                            ^
<sql-statement>
SELECT ia2d FROM json_populate_record(NULL::jsrec, '{"ia2d": [[1, "2", 3], [null, 5, 6]]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jsrec
    	SELECT ia2d FROM json_populate_record(NULL::jsrec, '{"ia2d": [[1, "2", 3], [null, 5, 6]]}') q;
	                                            ^
<sql-statement>
SELECT ia3 FROM json_populate_record(NULL::jsrec, '{"ia3": [1, "2", null, 4]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia3 FROM json_populate_record(NULL::jsrec, '{"ia3": [1, "2", null, 4]}') q;
	                                           ^
<sql-statement>
SELECT ia3 FROM json_populate_record(NULL::jsrec, '{"ia3": [[1, 2], [null, 4]]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia3 FROM json_populate_record(NULL::jsrec, '{"ia3": [[1, 2], [null, 4]]}') q;
	                                           ^
<sql-statement>
SELECT ia3 FROM json_populate_record(NULL::jsrec, '{"ia3": [ [[], []], [[], []], [[], []] ]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia3 FROM json_populate_record(NULL::jsrec, '{"ia3": [ [[], []], [[], []], [[], []] ]}') q;
	                                           ^
<sql-statement>
SELECT ia3 FROM json_populate_record(NULL::jsrec, '{"ia3": [ [[1, 2]], [[3, 4]] ]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia3 FROM json_populate_record(NULL::jsrec, '{"ia3": [ [[1, 2]], [[3, 4]] ]}') q;
	                                           ^
<sql-statement>
SELECT ia3 FROM json_populate_record(NULL::jsrec, '{"ia3": [ [[1, 2], [3, 4]], [[5, 6], [7, 8]] ]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia3 FROM json_populate_record(NULL::jsrec, '{"ia3": [ [[1, 2], [3, 4]], [[5, 6], [7, 8]] ]}') q;
	                                           ^
<sql-statement>
SELECT ia3 FROM json_populate_record(NULL::jsrec, '{"ia3": [ [[1, 2], [3, 4]], [[5, 6], [7, 8], [9, 10]] ]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT ia3 FROM json_populate_record(NULL::jsrec, '{"ia3": [ [[1, 2], [3, 4]], [[5, 6], [7, 8], [9, 10]] ]}') q;
	                                           ^
<sql-statement>
SELECT ta FROM json_populate_record(NULL::jsrec, '{"ta": null}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ta FROM json_populate_record(NULL::jsrec, '{"ta": null}') q;
	                                          ^
<sql-statement>
SELECT ta FROM json_populate_record(NULL::jsrec, '{"ta": 123}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ta FROM json_populate_record(NULL::jsrec, '{"ta": 123}') q;
	                                          ^
<sql-statement>
SELECT ta FROM json_populate_record(NULL::jsrec, '{"ta": [1, "2", null, 4]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ta FROM json_populate_record(NULL::jsrec, '{"ta": [1, "2", null, 4]}') q;
	                                          ^
<sql-statement>
SELECT ta FROM json_populate_record(NULL::jsrec, '{"ta": [[1, 2, 3], {"k": "v"}]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ta FROM json_populate_record(NULL::jsrec, '{"ta": [[1, 2, 3], {"k": "v"}]}') q;
	                                          ^
<sql-statement>
SELECT c FROM json_populate_record(NULL::jsrec, '{"c": null}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:42: Error: Unknown type: jsrec
    	SELECT c FROM json_populate_record(NULL::jsrec, '{"c": null}') q;
	                                         ^
<sql-statement>
SELECT c FROM json_populate_record(NULL::jsrec, '{"c": "aaa"}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:42: Error: Unknown type: jsrec
    	SELECT c FROM json_populate_record(NULL::jsrec, '{"c": "aaa"}') q;
	                                         ^
<sql-statement>
SELECT c FROM json_populate_record(NULL::jsrec, '{"c": "aaaaaaaaaa"}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:42: Error: Unknown type: jsrec
    	SELECT c FROM json_populate_record(NULL::jsrec, '{"c": "aaaaaaaaaa"}') q;
	                                         ^
<sql-statement>
SELECT c FROM json_populate_record(NULL::jsrec, '{"c": "aaaaaaaaaaaaa"}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:42: Error: Unknown type: jsrec
    	SELECT c FROM json_populate_record(NULL::jsrec, '{"c": "aaaaaaaaaaaaa"}') q;
	                                         ^
<sql-statement>
SELECT ca FROM json_populate_record(NULL::jsrec, '{"ca": null}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ca FROM json_populate_record(NULL::jsrec, '{"ca": null}') q;
	                                          ^
<sql-statement>
SELECT ca FROM json_populate_record(NULL::jsrec, '{"ca": 123}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ca FROM json_populate_record(NULL::jsrec, '{"ca": 123}') q;
	                                          ^
<sql-statement>
SELECT ca FROM json_populate_record(NULL::jsrec, '{"ca": [1, "2", null, 4]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ca FROM json_populate_record(NULL::jsrec, '{"ca": [1, "2", null, 4]}') q;
	                                          ^
<sql-statement>
SELECT ca FROM json_populate_record(NULL::jsrec, '{"ca": ["aaaaaaaaaaaaaaaa"]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ca FROM json_populate_record(NULL::jsrec, '{"ca": ["aaaaaaaaaaaaaaaa"]}') q;
	                                          ^
<sql-statement>
SELECT ca FROM json_populate_record(NULL::jsrec, '{"ca": [[1, 2, 3], {"k": "v"}]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT ca FROM json_populate_record(NULL::jsrec, '{"ca": [[1, 2, 3], {"k": "v"}]}') q;
	                                          ^
<sql-statement>
SELECT js FROM json_populate_record(NULL::jsrec, '{"js": null}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT js FROM json_populate_record(NULL::jsrec, '{"js": null}') q;
	                                          ^
<sql-statement>
SELECT js FROM json_populate_record(NULL::jsrec, '{"js": true}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT js FROM json_populate_record(NULL::jsrec, '{"js": true}') q;
	                                          ^
<sql-statement>
SELECT js FROM json_populate_record(NULL::jsrec, '{"js": 123.45}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT js FROM json_populate_record(NULL::jsrec, '{"js": 123.45}') q;
	                                          ^
<sql-statement>
SELECT js FROM json_populate_record(NULL::jsrec, '{"js": "123.45"}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT js FROM json_populate_record(NULL::jsrec, '{"js": "123.45"}') q;
	                                          ^
<sql-statement>
SELECT js FROM json_populate_record(NULL::jsrec, '{"js": "abc"}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT js FROM json_populate_record(NULL::jsrec, '{"js": "abc"}') q;
	                                          ^
<sql-statement>
SELECT js FROM json_populate_record(NULL::jsrec, '{"js": [123, "123", null, {"key": "value"}]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT js FROM json_populate_record(NULL::jsrec, '{"js": [123, "123", null, {"key": "value"}]}') q;
	                                          ^
<sql-statement>
SELECT js FROM json_populate_record(NULL::jsrec, '{"js": {"a": "bbb", "b": null, "c": 123.45}}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:43: Error: Unknown type: jsrec
    	SELECT js FROM json_populate_record(NULL::jsrec, '{"js": {"a": "bbb", "b": null, "c": 123.45}}') q;
	                                          ^
<sql-statement>
SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": null}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": null}') q;
	                                           ^
<sql-statement>
SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": true}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": true}') q;
	                                           ^
<sql-statement>
SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": 123.45}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": 123.45}') q;
	                                           ^
<sql-statement>
SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": "123.45"}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": "123.45"}') q;
	                                           ^
<sql-statement>
SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": "abc"}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": "abc"}') q;
	                                           ^
<sql-statement>
SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": [123, "123", null, {"key": "value"}]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": [123, "123", null, {"key": "value"}]}') q;
	                                           ^
<sql-statement>
SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": {"a": "bbb", "b": null, "c": 123.45}}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT jsb FROM json_populate_record(NULL::jsrec, '{"jsb": {"a": "bbb", "b": null, "c": 123.45}}') q;
	                                           ^
<sql-statement>
SELECT jsa FROM json_populate_record(NULL::jsrec, '{"jsa": null}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT jsa FROM json_populate_record(NULL::jsrec, '{"jsa": null}') q;
	                                           ^
<sql-statement>
SELECT jsa FROM json_populate_record(NULL::jsrec, '{"jsa": 123}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT jsa FROM json_populate_record(NULL::jsrec, '{"jsa": 123}') q;
	                                           ^
<sql-statement>
SELECT jsa FROM json_populate_record(NULL::jsrec, '{"jsa": [1, "2", null, 4]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT jsa FROM json_populate_record(NULL::jsrec, '{"jsa": [1, "2", null, 4]}') q;
	                                           ^
<sql-statement>
SELECT jsa FROM json_populate_record(NULL::jsrec, '{"jsa": ["aaa", null, [1, 2, "3", {}], { "k" : "v" }]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT jsa FROM json_populate_record(NULL::jsrec, '{"jsa": ["aaa", null, [1, 2, "3", {}], { "k" : "v" }]}') q;
	                                           ^
<sql-statement>
SELECT rec FROM json_populate_record(NULL::jsrec, '{"rec": 123}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT rec FROM json_populate_record(NULL::jsrec, '{"rec": 123}') q;
	                                           ^
<sql-statement>
SELECT rec FROM json_populate_record(NULL::jsrec, '{"rec": [1, 2]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT rec FROM json_populate_record(NULL::jsrec, '{"rec": [1, 2]}') q;
	                                           ^
<sql-statement>
SELECT rec FROM json_populate_record(NULL::jsrec, '{"rec": {"a": "abc", "c": "01.02.2003", "x": 43.2}}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT rec FROM json_populate_record(NULL::jsrec, '{"rec": {"a": "abc", "c": "01.02.2003", "x": 43.2}}') q;
	                                           ^
<sql-statement>
SELECT rec FROM json_populate_record(NULL::jsrec, '{"rec": "(abc,42,01.02.2003)"}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:44: Error: Unknown type: jsrec
    	SELECT rec FROM json_populate_record(NULL::jsrec, '{"rec": "(abc,42,01.02.2003)"}') q;
	                                           ^
<sql-statement>
SELECT reca FROM json_populate_record(NULL::jsrec, '{"reca": 123}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jsrec
    	SELECT reca FROM json_populate_record(NULL::jsrec, '{"reca": 123}') q;
	                                            ^
<sql-statement>
SELECT reca FROM json_populate_record(NULL::jsrec, '{"reca": [1, 2]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jsrec
    	SELECT reca FROM json_populate_record(NULL::jsrec, '{"reca": [1, 2]}') q;
	                                            ^
<sql-statement>
SELECT reca FROM json_populate_record(NULL::jsrec, '{"reca": [{"a": "abc", "b": 456}, null, {"c": "01.02.2003", "x": 43.2}]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jsrec
    	SELECT reca FROM json_populate_record(NULL::jsrec, '{"reca": [{"a": "abc", "b": 456}, null, {"c": "01.02.2003", "x": 43.2}]}') q;
	                                            ^
<sql-statement>
SELECT reca FROM json_populate_record(NULL::jsrec, '{"reca": ["(abc,42,01.02.2003)"]}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jsrec
    	SELECT reca FROM json_populate_record(NULL::jsrec, '{"reca": ["(abc,42,01.02.2003)"]}') q;
	                                            ^
<sql-statement>
SELECT reca FROM json_populate_record(NULL::jsrec, '{"reca": "{\"(abc,42,01.02.2003)\"}"}') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jsrec
    	SELECT reca FROM json_populate_record(NULL::jsrec, '{"reca": "{\"(abc,42,01.02.2003)\"}"}') q;
	                                            ^
<sql-statement>
SELECT rec FROM json_populate_record(
	row(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
		row('x',3,'2012-12-31 15:30:56')::jpop,NULL)::jsrec,
	'{"rec": {"a": "abc", "c": "01.02.2003", "x": 43.2}}'
) q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:3:49: Error: alternative is not implemented yet : 138
    			row('x',3,'2012-12-31 15:30:56')::jpop,NULL)::jsrec,
	                                                ^
<sql-statement>
-- anonymous record type
SELECT json_populate_record(null::record, '{"x": 0, "y": 1}');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	-- anonymous record type
	^
        -stdin-:<main>:2:8: Error: At function: PgCall
        	SELECT json_populate_record(null::record, '{"x": 0, "y": 1}');
	       ^
            -stdin-:<main>:2:8: Error: Unable to find an overload for proc json_populate_record with given argument types: (record,unknown)
            	SELECT json_populate_record(null::record, '{"x": 0, "y": 1}');
	       ^
<sql-statement>
SELECT json_populate_record(row(1,2), '{"f1": 0, "f2": 1}');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: alternative is not implemented yet : 138
    	SELECT json_populate_record(row(1,2), '{"f1": 0, "f2": 1}');
	       ^
<sql-statement>
SELECT * FROM
  json_populate_record(null::record, '{"x": 776}') AS (x int, y int);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	SELECT * FROM
	^
<sql-statement>
-- composite domain
SELECT json_populate_record(null::j_ordered_pair, '{"x": 0, "y": 1}');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:2:35: Error: Unknown type: j_ordered_pair
    	SELECT json_populate_record(null::j_ordered_pair, '{"x": 0, "y": 1}');
	                                  ^
<sql-statement>
SELECT json_populate_record(row(1,2)::j_ordered_pair, '{"x": 0}');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:39: Error: alternative is not implemented yet : 138
    	SELECT json_populate_record(row(1,2)::j_ordered_pair, '{"x": 0}');
	                                      ^
<sql-statement>
SELECT json_populate_record(row(1,2)::j_ordered_pair, '{"x": 1, "y": 0}');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:39: Error: alternative is not implemented yet : 138
    	SELECT json_populate_record(row(1,2)::j_ordered_pair, '{"x": 1, "y": 0}');
	                                      ^
<sql-statement>
-- populate_recordset
select * from json_populate_recordset(null::jpop,'[{"a":"blurfl","x":43.2},{"b":3,"c":"2012-01-20 10:42:53"}]') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:2:45: Error: Unknown type: jpop
    	select * from json_populate_recordset(null::jpop,'[{"a":"blurfl","x":43.2},{"b":3,"c":"2012-01-20 10:42:53"}]') q;
	                                            ^
<sql-statement>
select * from json_populate_recordset(row('def',99,null)::jpop,'[{"a":"blurfl","x":43.2},{"b":3,"c":"2012-01-20 10:42:53"}]') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:59: Error: alternative is not implemented yet : 138
    	select * from json_populate_recordset(row('def',99,null)::jpop,'[{"a":"blurfl","x":43.2},{"b":3,"c":"2012-01-20 10:42:53"}]') q;
	                                                          ^
<sql-statement>
select * from json_populate_recordset(null::jpop,'[{"a":"blurfl","x":43.2},{"b":3,"c":"2012-01-20 10:42:53"}]') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jpop
    	select * from json_populate_recordset(null::jpop,'[{"a":"blurfl","x":43.2},{"b":3,"c":"2012-01-20 10:42:53"}]') q;
	                                            ^
<sql-statement>
select * from json_populate_recordset(row('def',99,null)::jpop,'[{"a":"blurfl","x":43.2},{"b":3,"c":"2012-01-20 10:42:53"}]') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:59: Error: alternative is not implemented yet : 138
    	select * from json_populate_recordset(row('def',99,null)::jpop,'[{"a":"blurfl","x":43.2},{"b":3,"c":"2012-01-20 10:42:53"}]') q;
	                                                          ^
<sql-statement>
select * from json_populate_recordset(row('def',99,null)::jpop,'[{"a":[100,200,300],"x":43.2},{"a":{"z":true},"b":3,"c":"2012-01-20 10:42:53"}]') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:59: Error: alternative is not implemented yet : 138
    	select * from json_populate_recordset(row('def',99,null)::jpop,'[{"a":[100,200,300],"x":43.2},{"a":{"z":true},"b":3,"c":"2012-01-20 10:42:53"}]') q;
	                                                          ^
<sql-statement>
select * from json_populate_recordset(row('def',99,null)::jpop,'[{"c":[100,200,300],"x":43.2},{"a":{"z":true},"b":3,"c":"2012-01-20 10:42:53"}]') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:59: Error: alternative is not implemented yet : 138
    	select * from json_populate_recordset(row('def',99,null)::jpop,'[{"c":[100,200,300],"x":43.2},{"a":{"z":true},"b":3,"c":"2012-01-20 10:42:53"}]') q;
	                                                          ^
<sql-statement>
create type jpop2 as (a int, b json, c int, d int);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RawStmt: alternative is not implemented yet : 314
    	create type jpop2 as (a int, b json, c int, d int);
	^
<sql-statement>
select * from json_populate_recordset(null::jpop2, '[{"a":2,"c":3,"b":{"z":4},"d":6}]') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jpop2
    	select * from json_populate_recordset(null::jpop2, '[{"a":2,"c":3,"b":{"z":4},"d":6}]') q;
	                                            ^
<sql-statement>
select * from json_populate_recordset(null::jpop,'[{"a":"blurfl","x":43.2},{"b":3,"c":"2012-01-20 10:42:53"}]') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jpop
    	select * from json_populate_recordset(null::jpop,'[{"a":"blurfl","x":43.2},{"b":3,"c":"2012-01-20 10:42:53"}]') q;
	                                            ^
<sql-statement>
select * from json_populate_recordset(row('def',99,null)::jpop,'[{"a":"blurfl","x":43.2},{"b":3,"c":"2012-01-20 10:42:53"}]') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:59: Error: alternative is not implemented yet : 138
    	select * from json_populate_recordset(row('def',99,null)::jpop,'[{"a":"blurfl","x":43.2},{"b":3,"c":"2012-01-20 10:42:53"}]') q;
	                                                          ^
<sql-statement>
select * from json_populate_recordset(row('def',99,null)::jpop,'[{"a":[100,200,300],"x":43.2},{"a":{"z":true},"b":3,"c":"2012-01-20 10:42:53"}]') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:59: Error: alternative is not implemented yet : 138
    	select * from json_populate_recordset(row('def',99,null)::jpop,'[{"a":[100,200,300],"x":43.2},{"a":{"z":true},"b":3,"c":"2012-01-20 10:42:53"}]') q;
	                                                          ^
<sql-statement>
-- anonymous record type
SELECT json_populate_recordset(null::record, '[{"x": 0, "y": 1}]');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:2:8: Error: Generator functions are not allowed in: SELECT
    	SELECT json_populate_recordset(null::record, '[{"x": 0, "y": 1}]');
	       ^
<sql-statement>
SELECT json_populate_recordset(row(1,2), '[{"f1": 0, "f2": 1}]');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: Generator functions are not allowed in: SELECT
    	SELECT json_populate_recordset(row(1,2), '[{"f1": 0, "f2": 1}]');
	       ^
<sql-statement>
SELECT i, json_populate_recordset(row(i,50), '[{"f1":"42"},{"f2":"43"}]')
FROM (VALUES (1),(2)) v(i);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:11: Error: Generator functions are not allowed in: SELECT
    	SELECT i, json_populate_recordset(row(i,50), '[{"f1":"42"},{"f2":"43"}]')
	          ^
<sql-statement>
SELECT * FROM
  json_populate_recordset(null::record, '[{"x": 776}]') AS (x int, y int);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	SELECT * FROM
	^
<sql-statement>
-- empty array is a corner case
SELECT json_populate_recordset(null::record, '[]');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:2:8: Error: Generator functions are not allowed in: SELECT
    	SELECT json_populate_recordset(null::record, '[]');
	       ^
<sql-statement>
SELECT json_populate_recordset(row(1,2), '[]');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: Generator functions are not allowed in: SELECT
    	SELECT json_populate_recordset(row(1,2), '[]');
	       ^
<sql-statement>
SELECT * FROM json_populate_recordset(NULL::jpop,'[]') q;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:45: Error: Unknown type: jpop
    	SELECT * FROM json_populate_recordset(NULL::jpop,'[]') q;
	                                            ^
<sql-statement>
SELECT * FROM
  json_populate_recordset(null::record, '[]') AS (x int, y int);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	SELECT * FROM
	^
<sql-statement>
-- composite domain
SELECT json_populate_recordset(null::j_ordered_pair, '[{"x": 0, "y": 1}]');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:2:8: Error: Generator functions are not allowed in: SELECT
    	SELECT json_populate_recordset(null::j_ordered_pair, '[{"x": 0, "y": 1}]');
	       ^
<sql-statement>
SELECT json_populate_recordset(row(1,2)::j_ordered_pair, '[{"x": 0}, {"y": 3}]');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: Generator functions are not allowed in: SELECT
    	SELECT json_populate_recordset(row(1,2)::j_ordered_pair, '[{"x": 0}, {"y": 3}]');
	       ^
<sql-statement>
SELECT json_populate_recordset(row(1,2)::j_ordered_pair, '[{"x": 1, "y": 0}]');
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: Generator functions are not allowed in: SELECT
    	SELECT json_populate_recordset(row(1,2)::j_ordered_pair, '[{"x": 1, "y": 0}]');
	       ^
<sql-statement>
-- negative cases where the wrong record type is supplied
select * from json_populate_recordset(row(0::int),'[{"a":"1","b":"2"},{"a":"3"}]') q (a text, b text);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	-- negative cases where the wrong record type is supplied
	^
<sql-statement>
select * from json_populate_recordset(row(0::int,0::int),'[{"a":"1","b":"2"},{"a":"3"}]') q (a text, b text);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_populate_recordset(row(0::int,0::int),'[{"a":"1","b":"2"},{"a":"3"}]') q (a text, b text);
	^
<sql-statement>
select * from json_populate_recordset(row(0::int,0::int,0::int),'[{"a":"1","b":"2"},{"a":"3"}]') q (a text, b text);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_populate_recordset(row(0::int,0::int,0::int),'[{"a":"1","b":"2"},{"a":"3"}]') q (a text, b text);
	^
<sql-statement>
select * from json_populate_recordset(row(1000000000::int,50::int),'[{"b":"2"},{"a":"3"}]') q (a text, b text);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_populate_recordset(row(1000000000::int,50::int),'[{"b":"2"},{"a":"3"}]') q (a text, b text);
	^
<sql-statement>
-- test type info caching in json_populate_record()
CREATE TEMP TABLE jspoptest (js json);
</sql-statement>
<sql-statement>
INSERT INTO jspoptest
SELECT '{
	"jsa": [1, "2", null, 4],
	"rec": {"a": "abc", "c": "01.02.2003", "x": 43.2},
	"reca": [{"a": "abc", "b": 456}, null, {"c": "01.02.2003", "x": 43.2}]
}'::json
FROM generate_series(1, 3);
</sql-statement>
<sql-statement>
SELECT (json_populate_record(NULL::jsrec, js)).* FROM jspoptest;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: alternative is not implemented yet : 360
    	SELECT (json_populate_record(NULL::jsrec, js)).* FROM jspoptest;
	^
<sql-statement>
DROP TYPE jsrec;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: DropStmt: alternative is not implemented yet : 373
    	DROP TYPE jsrec;
	^
<sql-statement>
DROP TYPE jsrec_i_not_null;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: DropStmt: alternative is not implemented yet : 373
    	DROP TYPE jsrec_i_not_null;
	^
<sql-statement>
DROP DOMAIN js_int_not_null;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: DropStmt: alternative is not implemented yet : 373
    	DROP DOMAIN js_int_not_null;
	^
<sql-statement>
DROP DOMAIN js_int_array_1d;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: DropStmt: alternative is not implemented yet : 373
    	DROP DOMAIN js_int_array_1d;
	^
<sql-statement>
DROP DOMAIN js_int_array_2d;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: DropStmt: alternative is not implemented yet : 373
    	DROP DOMAIN js_int_array_2d;
	^
<sql-statement>
DROP DOMAIN j_ordered_pair;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: DropStmt: alternative is not implemented yet : 373
    	DROP DOMAIN j_ordered_pair;
	^
<sql-statement>
DROP TYPE j_unordered_pair;
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: DropStmt: alternative is not implemented yet : 373
    	DROP TYPE j_unordered_pair;
	^
<sql-statement>
--json_typeof() function
select value, json_typeof(value)
  from (values (json '123.4'),
               (json '-1'),
               (json '"foo"'),
               (json 'true'),
               (json 'false'),
               (json 'null'),
               (json '[1, 2, 3]'),
               (json '[]'),
               (json '{"x":"foo", "y":123}'),
               (json '{}'),
               (NULL::json))
      as data(value);
</sql-statement>
<sql-statement>
-- json_build_array, json_build_object, json_object_agg
SELECT json_build_array('a',1,'b',1.2,'c',true,'d',null,'e',json '{"x": 3, "y": [1,2,3]}');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	-- json_build_array, json_build_object, json_object_agg
	^
        -stdin-:<main>:2:8: Error: At function: PgCall
        	SELECT json_build_array('a',1,'b',1.2,'c',true,'d',null,'e',json '{"x": 3, "y": [1,2,3]}');
	       ^
            -stdin-:<main>:2:8: Error: Unable to find an overload for proc json_build_array with given argument types: (unknown,int4,unknown,numeric,unknown,bool,unknown,unknown,unknown,json)
            	SELECT json_build_array('a',1,'b',1.2,'c',true,'d',null,'e',json '{"x": 3, "y": [1,2,3]}');
	       ^
<sql-statement>
SELECT json_build_array('a', NULL); -- ok
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	SELECT json_build_array('a', NULL); -- ok
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	SELECT json_build_array('a', NULL); -- ok
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc json_build_array with given argument types: (unknown,unknown)
            	SELECT json_build_array('a', NULL); -- ok
	       ^
<sql-statement>
SELECT json_build_array(VARIADIC NULL::text[]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_array(VARIADIC NULL::text[]); -- ok
	       ^
<sql-statement>
SELECT json_build_array(VARIADIC '{}'::text[]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_array(VARIADIC '{}'::text[]); -- ok
	       ^
<sql-statement>
SELECT json_build_array(VARIADIC '{a,b,c}'::text[]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_array(VARIADIC '{a,b,c}'::text[]); -- ok
	       ^
<sql-statement>
SELECT json_build_array(VARIADIC ARRAY['a', NULL]::text[]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_array(VARIADIC ARRAY['a', NULL]::text[]); -- ok
	       ^
<sql-statement>
SELECT json_build_array(VARIADIC '{1,2,3,4}'::text[]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_array(VARIADIC '{1,2,3,4}'::text[]); -- ok
	       ^
<sql-statement>
SELECT json_build_array(VARIADIC '{1,2,3,4}'::int[]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_array(VARIADIC '{1,2,3,4}'::int[]); -- ok
	       ^
<sql-statement>
SELECT json_build_array(VARIADIC '{{1,4},{2,5},{3,6}}'::int[][]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_array(VARIADIC '{{1,4},{2,5},{3,6}}'::int[][]); -- ok
	       ^
<sql-statement>
SELECT json_build_object('a',1,'b',1.2,'c',true,'d',null,'e',json '{"x": 3, "y": [1,2,3]}');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	SELECT json_build_object('a',1,'b',1.2,'c',true,'d',null,'e',json '{"x": 3, "y": [1,2,3]}');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	SELECT json_build_object('a',1,'b',1.2,'c',true,'d',null,'e',json '{"x": 3, "y": [1,2,3]}');
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc json_build_object with given argument types: (unknown,int4,unknown,numeric,unknown,bool,unknown,unknown,unknown,json)
            	SELECT json_build_object('a',1,'b',1.2,'c',true,'d',null,'e',json '{"x": 3, "y": [1,2,3]}');
	       ^
<sql-statement>
SELECT json_build_object(
       'a', json_build_object('b',false,'c',99),
       'd', json_build_object('e',array[9,8,7]::int[],
           'f', (select row_to_json(r) from ( select relkind, oid::regclass as name from pg_class where relname = 'pg_class') r)));
</sql-statement>
-stdin-:<main>: Fatal: Table metadata loading

    -stdin-:<main>: Fatal: ydb/library/yql/providers/yt/gateway/file/yql_yt_file_services.cpp:44: Table not found: plato.pg_class
    
<sql-statement>
SELECT json_build_object('{a,b,c}'::text[]); -- error
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	SELECT json_build_object('{a,b,c}'::text[]); -- error
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	SELECT json_build_object('{a,b,c}'::text[]); -- error
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc json_build_object with given argument types: (_text)
            	SELECT json_build_object('{a,b,c}'::text[]); -- error
	       ^
<sql-statement>
SELECT json_build_object('{a,b,c}'::text[], '{d,e,f}'::text[]); -- error, key cannot be array
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	SELECT json_build_object('{a,b,c}'::text[], '{d,e,f}'::text[]); -- error, key cannot be array
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	SELECT json_build_object('{a,b,c}'::text[], '{d,e,f}'::text[]); -- error, key cannot be array
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc json_build_object with given argument types: (_text,_text)
            	SELECT json_build_object('{a,b,c}'::text[], '{d,e,f}'::text[]); -- error, key cannot be array
	       ^
<sql-statement>
SELECT json_build_object('a', 'b', 'c'); -- error
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	SELECT json_build_object('a', 'b', 'c'); -- error
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	SELECT json_build_object('a', 'b', 'c'); -- error
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc json_build_object with given argument types: (unknown,unknown,unknown)
            	SELECT json_build_object('a', 'b', 'c'); -- error
	       ^
<sql-statement>
SELECT json_build_object(NULL, 'a'); -- error, key cannot be NULL
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	SELECT json_build_object(NULL, 'a'); -- error, key cannot be NULL
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	SELECT json_build_object(NULL, 'a'); -- error, key cannot be NULL
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc json_build_object with given argument types: (unknown,unknown)
            	SELECT json_build_object(NULL, 'a'); -- error, key cannot be NULL
	       ^
<sql-statement>
SELECT json_build_object('a', NULL); -- ok
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	SELECT json_build_object('a', NULL); -- ok
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	SELECT json_build_object('a', NULL); -- ok
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc json_build_object with given argument types: (unknown,unknown)
            	SELECT json_build_object('a', NULL); -- ok
	       ^
<sql-statement>
SELECT json_build_object(VARIADIC NULL::text[]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_object(VARIADIC NULL::text[]); -- ok
	       ^
<sql-statement>
SELECT json_build_object(VARIADIC '{}'::text[]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_object(VARIADIC '{}'::text[]); -- ok
	       ^
<sql-statement>
SELECT json_build_object(VARIADIC '{a,b,c}'::text[]); -- error
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_object(VARIADIC '{a,b,c}'::text[]); -- error
	       ^
<sql-statement>
SELECT json_build_object(VARIADIC ARRAY['a', NULL]::text[]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_object(VARIADIC ARRAY['a', NULL]::text[]); -- ok
	       ^
<sql-statement>
SELECT json_build_object(VARIADIC ARRAY[NULL, 'a']::text[]); -- error, key cannot be NULL
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_object(VARIADIC ARRAY[NULL, 'a']::text[]); -- error, key cannot be NULL
	       ^
<sql-statement>
SELECT json_build_object(VARIADIC '{1,2,3,4}'::text[]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_object(VARIADIC '{1,2,3,4}'::text[]); -- ok
	       ^
<sql-statement>
SELECT json_build_object(VARIADIC '{1,2,3,4}'::int[]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_object(VARIADIC '{1,2,3,4}'::int[]); -- ok
	       ^
<sql-statement>
SELECT json_build_object(VARIADIC '{{1,4},{2,5},{3,6}}'::int[][]); -- ok
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:8: Error: FuncCall: unsupported func_variadic
    	SELECT json_build_object(VARIADIC '{{1,4},{2,5},{3,6}}'::int[][]); -- ok
	       ^
<sql-statement>
-- empty objects/arrays
SELECT json_build_array();
</sql-statement>
<sql-statement>
SELECT json_build_object();
</sql-statement>
<sql-statement>
-- make sure keys are quoted
SELECT json_build_object(1,2);
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	-- make sure keys are quoted
	^
        -stdin-:<main>:2:8: Error: At function: PgCall
        	SELECT json_build_object(1,2);
	       ^
            -stdin-:<main>:2:8: Error: Unable to find an overload for proc json_build_object with given argument types: (int4,int4)
            	SELECT json_build_object(1,2);
	       ^
<sql-statement>
-- keys must be scalar and not null
SELECT json_build_object(null,2);
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	-- keys must be scalar and not null
	^
        -stdin-:<main>:2:8: Error: At function: PgCall
        	SELECT json_build_object(null,2);
	       ^
            -stdin-:<main>:2:8: Error: Unable to find an overload for proc json_build_object with given argument types: (unknown,int4)
            	SELECT json_build_object(null,2);
	       ^
<sql-statement>
SELECT json_build_object(r,2) FROM (SELECT 1 AS a, 2 AS b) r;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem
    	SELECT json_build_object(r,2) FROM (SELECT 1 AS a, 2 AS b) r;
	^
        -stdin-:<main>:1:26: Error: No such column: r
        	SELECT json_build_object(r,2) FROM (SELECT 1 AS a, 2 AS b) r;
	                         ^
<sql-statement>
SELECT json_build_object(json '{"a":1,"b":2}', 3);
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	SELECT json_build_object(json '{"a":1,"b":2}', 3);
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	SELECT json_build_object(json '{"a":1,"b":2}', 3);
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc json_build_object with given argument types: (json,int4)
            	SELECT json_build_object(json '{"a":1,"b":2}', 3);
	       ^
<sql-statement>
SELECT json_build_object('{1,2,3}'::int[], 3);
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	SELECT json_build_object('{1,2,3}'::int[], 3);
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	SELECT json_build_object('{1,2,3}'::int[], 3);
	       ^
            -stdin-:<main>:1:8: Error: Unable to find an overload for proc json_build_object with given argument types: (_int4,int4)
            	SELECT json_build_object('{1,2,3}'::int[], 3);
	       ^
<sql-statement>
CREATE TEMP TABLE foo (serial_num int, name text, type text);
</sql-statement>
<sql-statement>
INSERT INTO foo VALUES (847001,'t15','GE1043');
</sql-statement>
<sql-statement>
INSERT INTO foo VALUES (847002,'t16','GE1043');
</sql-statement>
<sql-statement>
INSERT INTO foo VALUES (847003,'sub-alpha','GESS90');
</sql-statement>
<sql-statement>
SELECT json_build_object('turbines',json_object_agg(serial_num,json_build_object('name',name,'type',type)))
FROM foo;
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	SELECT json_build_object('turbines',json_object_agg(serial_num,json_build_object('name',name,'type',type)))
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	SELECT json_build_object('turbines',json_object_agg(serial_num,json_build_object('name',name,'type',type)))
	       ^
            -stdin-:<main>:1:37: Error: At function: PgAgg
            	SELECT json_build_object('turbines',json_object_agg(serial_num,json_build_object('name',name,'type',type)))
	                                    ^
                -stdin-:<main>:1:64: Error: At function: PgCall
                	SELECT json_build_object('turbines',json_object_agg(serial_num,json_build_object('name',name,'type',type)))
	                                                               ^
                    -stdin-:<main>:1:64: Error: Unable to find an overload for proc json_build_object with given argument types: (unknown,text,unknown,text)
                    	SELECT json_build_object('turbines',json_object_agg(serial_num,json_build_object('name',name,'type',type)))
	                                                               ^
<sql-statement>
SELECT json_object_agg(name, type) FROM foo;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtMapReduce!
    	SELECT json_object_agg(name, type) FROM foo;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  field name must not be null

        	SELECT json_object_agg(name, type) FROM foo;
	^
<sql-statement>
INSERT INTO foo VALUES (999999, NULL, 'bar');
</sql-statement>
<sql-statement>
SELECT json_object_agg(name, type) FROM foo;
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: YtMapReduce!
    	SELECT json_object_agg(name, type) FROM foo;
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  field name must not be null

        	SELECT json_object_agg(name, type) FROM foo;
	^
<sql-statement>
-- json_object
-- empty object, one dimension
SELECT json_object('{}');
</sql-statement>
<sql-statement>
-- empty object, two dimensions
SELECT json_object('{}', '{}');
</sql-statement>
<sql-statement>
-- one dimension
SELECT json_object('{a,1,b,2,3,NULL,"d e f","a b c"}');
</sql-statement>
<sql-statement>
-- same but with two dimensions
SELECT json_object('{{a,1},{b,2},{3,NULL},{"d e f","a b c"}}');
</sql-statement>
<sql-statement>
-- odd number error
SELECT json_object('{a,b,c}');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- odd number error
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  array must have even number of elements

        	-- odd number error
	^
<sql-statement>
-- one column error
SELECT json_object('{{a},{b}}');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- one column error
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  array must have two columns

        	-- one column error
	^
<sql-statement>
-- too many columns error
SELECT json_object('{{a,b,c},{b,c,d}}');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- too many columns error
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  array must have two columns

        	-- too many columns error
	^
<sql-statement>
-- too many dimensions error
SELECT json_object('{{{a,b},{c,d}},{{b,c},{d,e}}}');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- too many dimensions error
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  wrong number of array subscripts

        	-- too many dimensions error
	^
<sql-statement>
--two argument form of json_object
select json_object('{a,b,c,"d e f"}','{1,2,3,"a b c"}');
</sql-statement>
<sql-statement>
-- too many dimensions
SELECT json_object('{{a,1},{b,2},{3,NULL},{"d e f","a b c"}}', '{{a,1},{b,2},{3,NULL},{"d e f","a b c"}}');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- too many dimensions
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  wrong number of array subscripts

        	-- too many dimensions
	^
<sql-statement>
-- mismatched dimensions
select json_object('{a,b,c,"d e f",g}','{1,2,3,"a b c"}');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- mismatched dimensions
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  mismatched array dimensions

        	-- mismatched dimensions
	^
<sql-statement>
select json_object('{a,b,c,"d e f"}','{1,2,3,"a b c",g}');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_object('{a,b,c,"d e f"}','{1,2,3,"a b c",g}');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  mismatched array dimensions

        	select json_object('{a,b,c,"d e f"}','{1,2,3,"a b c",g}');
	^
<sql-statement>
-- null key error
select json_object('{a,b,NULL,"d e f"}','{1,2,3,"a b c"}');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- null key error
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  null value not allowed for object key

        	-- null key error
	^
<sql-statement>
-- empty key is allowed
select json_object('{a,b,"","d e f"}','{1,2,3,"a b c"}');
</sql-statement>
<sql-statement>
-- json_to_record and json_to_recordset
select * from json_to_record('{"a":1,"b":"foo","c":"bar"}')
    as x(a int, b text, d text);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	-- json_to_record and json_to_recordset
	^
<sql-statement>
select * from json_to_recordset('[{"a":1,"b":"foo","d":false},{"a":2,"b":"bar","c":true}]')
    as x(a int, b text, c boolean);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_recordset('[{"a":1,"b":"foo","d":false},{"a":2,"b":"bar","c":true}]')
	^
<sql-statement>
select * from json_to_recordset('[{"a":1,"b":{"d":"foo"},"c":true},{"a":2,"c":false,"b":{"d":"bar"}}]')
    as x(a int, b json, c boolean);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_recordset('[{"a":1,"b":{"d":"foo"},"c":true},{"a":2,"c":false,"b":{"d":"bar"}}]')
	^
<sql-statement>
select *, c is null as c_is_null
from json_to_record('{"a":1, "b":{"c":16, "d":2}, "x":8, "ca": ["1 2", 3], "ia": [[1,2],[3,4]], "r": {"a": "aaa", "b": 123}}'::json)
    as t(a int, b json, c text, x int, ca char(5)[], ia int[][], r jpop);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select *, c is null as c_is_null
	^
<sql-statement>
select *, c is null as c_is_null
from json_to_recordset('[{"a":1, "b":{"c":16, "d":2}, "x":8}]'::json)
    as t(a int, b json, c text, x int);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select *, c is null as c_is_null
	^
<sql-statement>
select * from json_to_record('{"ia": null}') as x(ia _int4);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"ia": null}') as x(ia _int4);
	^
<sql-statement>
select * from json_to_record('{"ia": 123}') as x(ia _int4);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"ia": 123}') as x(ia _int4);
	^
<sql-statement>
select * from json_to_record('{"ia": [1, "2", null, 4]}') as x(ia _int4);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"ia": [1, "2", null, 4]}') as x(ia _int4);
	^
<sql-statement>
select * from json_to_record('{"ia": [[1, 2], [3, 4]]}') as x(ia _int4);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"ia": [[1, 2], [3, 4]]}') as x(ia _int4);
	^
<sql-statement>
select * from json_to_record('{"ia": [[1], 2]}') as x(ia _int4);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"ia": [[1], 2]}') as x(ia _int4);
	^
<sql-statement>
select * from json_to_record('{"ia": [[1], [2, 3]]}') as x(ia _int4);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"ia": [[1], [2, 3]]}') as x(ia _int4);
	^
<sql-statement>
select * from json_to_record('{"ia2": [1, 2, 3]}') as x(ia2 int[][]);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"ia2": [1, 2, 3]}') as x(ia2 int[][]);
	^
<sql-statement>
select * from json_to_record('{"ia2": [[1, 2], [3, 4]]}') as x(ia2 int4[][]);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"ia2": [[1, 2], [3, 4]]}') as x(ia2 int4[][]);
	^
<sql-statement>
select * from json_to_record('{"ia2": [[[1], [2], [3]]]}') as x(ia2 int4[][]);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"ia2": [[[1], [2], [3]]]}') as x(ia2 int4[][]);
	^
<sql-statement>
select * from json_to_record('{"out": {"key": 1}}') as x(out json);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"out": {"key": 1}}') as x(out json);
	^
<sql-statement>
select * from json_to_record('{"out": [{"key": 1}]}') as x(out json);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"out": [{"key": 1}]}') as x(out json);
	^
<sql-statement>
select * from json_to_record('{"out": "{\"key\": 1}"}') as x(out json);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"out": "{\"key\": 1}"}') as x(out json);
	^
<sql-statement>
select * from json_to_record('{"out": {"key": 1}}') as x(out jsonb);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"out": {"key": 1}}') as x(out jsonb);
	^
<sql-statement>
select * from json_to_record('{"out": [{"key": 1}]}') as x(out jsonb);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"out": [{"key": 1}]}') as x(out jsonb);
	^
<sql-statement>
select * from json_to_record('{"out": "{\"key\": 1}"}') as x(out jsonb);
</sql-statement>
-stdin-:<main>: Error: Parse Sql

    -stdin-:<main>:1:1: Error: RangeFunction: unsupported coldeflist
    	select * from json_to_record('{"out": "{\"key\": 1}"}') as x(out jsonb);
	^
<sql-statement>
-- json_strip_nulls
select json_strip_nulls(null);
</sql-statement>
<sql-statement>
select json_strip_nulls('1');
</sql-statement>
<sql-statement>
select json_strip_nulls('"a string"');
</sql-statement>
<sql-statement>
select json_strip_nulls('null');
</sql-statement>
<sql-statement>
select json_strip_nulls('[1,2,null,3,4]');
</sql-statement>
<sql-statement>
select json_strip_nulls('{"a":1,"b":null,"c":[2,null,3],"d":{"e":4,"f":null}}');
</sql-statement>
<sql-statement>
select json_strip_nulls('[1,{"a":1,"b":null,"c":2},3]');
</sql-statement>
<sql-statement>
-- an empty object is not null and should not be stripped
select json_strip_nulls('{"a": {"b": null, "c": null}, "d": {} }');
</sql-statement>
<sql-statement>
-- json to tsvector
select to_tsvector('{"a": "aaa bbb ddd ccc", "b": ["eee fff ggg"], "c": {"d": "hhh iii"}}'::json);
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- json to tsvector
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration isn't set

        	-- json to tsvector
	^
<sql-statement>
-- json to tsvector with config
select to_tsvector('simple', '{"a": "aaa bbb ddd ccc", "b": ["eee fff ggg"], "c": {"d": "hhh iii"}}'::json);
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- json to tsvector with config
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "simple" does not exist

        	-- json to tsvector with config
	^
<sql-statement>
-- json to tsvector with stop words
select to_tsvector('english', '{"a": "aaa in bbb ddd ccc", "b": ["the eee fff ggg"], "c": {"d": "hhh. iii"}}'::json);
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- json to tsvector with stop words
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	-- json to tsvector with stop words
	^
<sql-statement>
-- json to tsvector with numeric values
select to_tsvector('english', '{"a": "aaa in bbb ddd ccc", "b": 123, "c": 456}'::json);
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- json to tsvector with numeric values
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	-- json to tsvector with numeric values
	^
<sql-statement>
-- json_to_tsvector
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"all"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- json_to_tsvector
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	-- json_to_tsvector
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"key"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"key"');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"key"');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"string"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"string"');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"string"');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"numeric"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"numeric"');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"numeric"');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"boolean"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"boolean"');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"boolean"');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '["string", "numeric"]');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '["string", "numeric"]');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '["string", "numeric"]');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"all"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"all"');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"all"');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"key"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"key"');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"key"');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"string"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"string"');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"string"');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"numeric"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"numeric"');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"numeric"');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"boolean"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"boolean"');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '"boolean"');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '["string", "numeric"]');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '["string", "numeric"]');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '["string", "numeric"]');
	^
<sql-statement>
-- to_tsvector corner cases
select to_tsvector('""'::json);
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- to_tsvector corner cases
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration isn't set

        	-- to_tsvector corner cases
	^
<sql-statement>
select to_tsvector('{}'::json);
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select to_tsvector('{}'::json);
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration isn't set

        	select to_tsvector('{}'::json);
	^
<sql-statement>
select to_tsvector('[]'::json);
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select to_tsvector('[]'::json);
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration isn't set

        	select to_tsvector('[]'::json);
	^
<sql-statement>
select to_tsvector('null'::json);
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select to_tsvector('null'::json);
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration isn't set

        	select to_tsvector('null'::json);
	^
<sql-statement>
-- json_to_tsvector corner cases
select json_to_tsvector('""'::json, '"all"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	-- json_to_tsvector corner cases
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration isn't set

        	-- json_to_tsvector corner cases
	^
<sql-statement>
select json_to_tsvector('{}'::json, '"all"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('{}'::json, '"all"');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration isn't set

        	select json_to_tsvector('{}'::json, '"all"');
	^
<sql-statement>
select json_to_tsvector('[]'::json, '"all"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('[]'::json, '"all"');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration isn't set

        	select json_to_tsvector('[]'::json, '"all"');
	^
<sql-statement>
select json_to_tsvector('null'::json, '"all"');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('null'::json, '"all"');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration isn't set

        	select json_to_tsvector('null'::json, '"all"');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '""');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '""');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '""');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '{}');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '{}');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '{}');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '[]');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '[]');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '[]');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, 'null');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, 'null');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, 'null');
	^
<sql-statement>
select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '["all", null]');
</sql-statement>
-stdin-:<main>: Fatal: Execution

    -stdin-:<main>:1:1: Fatal: Execution of node: Result
    	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '["all", null]');
	^
        -stdin-:<main>:1:1: Fatal: ERROR:  text search configuration "english" does not exist

        	select json_to_tsvector('english', '{"a": "aaa in bbb", "b": 123, "c": 456, "d": true, "f": false, "g": null}'::json, '["all", null]');
	^
<sql-statement>
-- ts_headline for json
select ts_headline('{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'));
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	-- ts_headline for json
	^
        -stdin-:<main>:2:8: Error: At function: PgCall
        	select ts_headline('{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'));
	       ^
            -stdin-:<main>:2:121: Error: At function: PgCall
            	select ts_headline('{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'));
	                                                                                                                        ^
                -stdin-:<main>:2:121: Error: No such proc: tsquery
                	select ts_headline('{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'));
	                                                                                                                        ^
<sql-statement>
select ts_headline('english', '{"a": "aaa bbb", "b": {"c": "ccc ddd fff"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'));
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select ts_headline('english', '{"a": "aaa bbb", "b": {"c": "ccc ddd fff"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'));
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select ts_headline('english', '{"a": "aaa bbb", "b": {"c": "ccc ddd fff"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'));
	       ^
            -stdin-:<main>:1:113: Error: At function: PgCall
            	select ts_headline('english', '{"a": "aaa bbb", "b": {"c": "ccc ddd fff"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'));
	                                                                                                                ^
                -stdin-:<main>:1:113: Error: No such proc: tsquery
                	select ts_headline('english', '{"a": "aaa bbb", "b": {"c": "ccc ddd fff"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'));
	                                                                                                                ^
<sql-statement>
select ts_headline('{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select ts_headline('{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select ts_headline('{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >');
	       ^
            -stdin-:<main>:1:121: Error: At function: PgCall
            	select ts_headline('{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >');
	                                                                                                                        ^
                -stdin-:<main>:1:121: Error: No such proc: tsquery
                	select ts_headline('{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >');
	                                                                                                                        ^
<sql-statement>
select ts_headline('english', '{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >');
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select ts_headline('english', '{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >');
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select ts_headline('english', '{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >');
	       ^
            -stdin-:<main>:1:132: Error: At function: PgCall
            	select ts_headline('english', '{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >');
	                                                                                                                                   ^
                -stdin-:<main>:1:132: Error: No such proc: tsquery
                	select ts_headline('english', '{"a": "aaa bbb", "b": {"c": "ccc ddd fff", "c1": "ccc1 ddd1"}, "d": ["ggg hhh", "iii jjj"]}'::json, tsquery('bbb & ddd & hhh'), 'StartSel = <, StopSel = >');
	                                                                                                                                   ^
<sql-statement>
-- corner cases for ts_headline with json
select ts_headline('null'::json, tsquery('aaa & bbb'));
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	-- corner cases for ts_headline with json
	^
        -stdin-:<main>:2:8: Error: At function: PgCall
        	select ts_headline('null'::json, tsquery('aaa & bbb'));
	       ^
            -stdin-:<main>:2:34: Error: At function: PgCall
            	select ts_headline('null'::json, tsquery('aaa & bbb'));
	                                 ^
                -stdin-:<main>:2:34: Error: No such proc: tsquery
                	select ts_headline('null'::json, tsquery('aaa & bbb'));
	                                 ^
<sql-statement>
select ts_headline('{}'::json, tsquery('aaa & bbb'));
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select ts_headline('{}'::json, tsquery('aaa & bbb'));
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select ts_headline('{}'::json, tsquery('aaa & bbb'));
	       ^
            -stdin-:<main>:1:32: Error: At function: PgCall
            	select ts_headline('{}'::json, tsquery('aaa & bbb'));
	                               ^
                -stdin-:<main>:1:32: Error: No such proc: tsquery
                	select ts_headline('{}'::json, tsquery('aaa & bbb'));
	                               ^
<sql-statement>
select ts_headline('[]'::json, tsquery('aaa & bbb'));
</sql-statement>
-stdin-:<main>: Error: Type annotation

    -stdin-:<main>:1:1: Error: At function: RemovePrefixMembers, At function: PgSelect, At function: PgSetItem, At function: PgResultItem
    	select ts_headline('[]'::json, tsquery('aaa & bbb'));
	^
        -stdin-:<main>:1:8: Error: At function: PgCall
        	select ts_headline('[]'::json, tsquery('aaa & bbb'));
	       ^
            -stdin-:<main>:1:32: Error: At function: PgCall
            	select ts_headline('[]'::json, tsquery('aaa & bbb'));
	                               ^
                -stdin-:<main>:1:32: Error: No such proc: tsquery
                	select ts_headline('[]'::json, tsquery('aaa & bbb'));
	                               ^
