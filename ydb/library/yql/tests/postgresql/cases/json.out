-- Strings.
SELECT '""'::json;				-- OK.
 json 
------
 ""
(1 row)

SELECT $$''$$::json;			-- ERROR, single quotes are not allowed
ERROR:  invalid input syntax for type json
LINE 1: SELECT $$''$$::json;
               ^
DETAIL:  Token "'" is invalid.
CONTEXT:  JSON data, line 1: '...
SELECT '"abc"'::json;			-- OK
 json  
-------
 "abc"
(1 row)

SELECT '"abc'::json;			-- ERROR, quotes not closed
ERROR:  invalid input syntax for type json
LINE 1: SELECT '"abc'::json;
               ^
DETAIL:  Token ""abc" is invalid.
CONTEXT:  JSON data, line 1: "abc
SELECT '"abc
def"'::json;					-- ERROR, unescaped newline in string constant
ERROR:  invalid input syntax for type json
LINE 1: SELECT '"abc
               ^
DETAIL:  Character with value 0x0a must be escaped.
CONTEXT:  JSON data, line 1: "abc
SELECT '"\n\"\\"'::json;		-- OK, legal escapes
   json   
----------
 "\n\"\\"
(1 row)

SELECT '"\v"'::json;			-- ERROR, not a valid JSON escape
ERROR:  invalid input syntax for type json
LINE 1: SELECT '"\v"'::json;
               ^
DETAIL:  Escape sequence "\v" is invalid.
CONTEXT:  JSON data, line 1: "\v...
-- see json_encoding test for input with unicode escapes
-- Numbers.
SELECT '1'::json;				-- OK
 json 
------
 1
(1 row)

SELECT '0'::json;				-- OK
 json 
------
 0
(1 row)

SELECT '01'::json;				-- ERROR, not valid according to JSON spec
ERROR:  invalid input syntax for type json
LINE 1: SELECT '01'::json;
               ^
DETAIL:  Token "01" is invalid.
CONTEXT:  JSON data, line 1: 01
SELECT '0.1'::json;				-- OK
 json 
------
 0.1
(1 row)

SELECT '9223372036854775808'::json;	-- OK, even though it's too large for int8
        json         
---------------------
 9223372036854775808
(1 row)

SELECT '1e100'::json;			-- OK
 json  
-------
 1e100
(1 row)

SELECT '1.3e100'::json;			-- OK
  json   
---------
 1.3e100
(1 row)

SELECT '1f2'::json;				-- ERROR
ERROR:  invalid input syntax for type json
LINE 1: SELECT '1f2'::json;
               ^
DETAIL:  Token "1f2" is invalid.
CONTEXT:  JSON data, line 1: 1f2
SELECT '0.x1'::json;			-- ERROR
ERROR:  invalid input syntax for type json
LINE 1: SELECT '0.x1'::json;
               ^
DETAIL:  Token "0.x1" is invalid.
CONTEXT:  JSON data, line 1: 0.x1
SELECT '1.3ex100'::json;		-- ERROR
ERROR:  invalid input syntax for type json
LINE 1: SELECT '1.3ex100'::json;
               ^
DETAIL:  Token "1.3ex100" is invalid.
CONTEXT:  JSON data, line 1: 1.3ex100
-- Arrays.
SELECT '[]'::json;				-- OK
 json 
------
 []
(1 row)

SELECT '[1,2]'::json;			-- OK
 json  
-------
 [1,2]
(1 row)

SELECT '[1,2,]'::json;			-- ERROR, trailing comma
ERROR:  invalid input syntax for type json
LINE 1: SELECT '[1,2,]'::json;
               ^
DETAIL:  Expected JSON value, but found "]".
CONTEXT:  JSON data, line 1: [1,2,]
SELECT '[1,2'::json;			-- ERROR, no closing bracket
ERROR:  invalid input syntax for type json
LINE 1: SELECT '[1,2'::json;
               ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: [1,2
SELECT '[1,[2]'::json;			-- ERROR, no closing bracket
ERROR:  invalid input syntax for type json
LINE 1: SELECT '[1,[2]'::json;
               ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: [1,[2]
-- Objects.
SELECT '{}'::json;				-- OK
 json 
------
 {}
(1 row)

SELECT '{"abc"}'::json;			-- ERROR, no value
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc"}'::json;
               ^
DETAIL:  Expected ":", but found "}".
CONTEXT:  JSON data, line 1: {"abc"}
SELECT '{"abc":1}'::json;		-- OK
   json    
-----------
 {"abc":1}
(1 row)

SELECT '{1:"abc"}'::json;		-- ERROR, keys must be strings
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{1:"abc"}'::json;
               ^
DETAIL:  Expected string or "}", but found "1".
CONTEXT:  JSON data, line 1: {1...
SELECT '{"abc",1}'::json;		-- ERROR, wrong separator
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc",1}'::json;
               ^
DETAIL:  Expected ":", but found ",".
CONTEXT:  JSON data, line 1: {"abc",...
SELECT '{"abc"=1}'::json;		-- ERROR, totally wrong separator
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc"=1}'::json;
               ^
DETAIL:  Token "=" is invalid.
CONTEXT:  JSON data, line 1: {"abc"=...
SELECT '{"abc"::1}'::json;		-- ERROR, another wrong separator
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc"::1}'::json;
               ^
DETAIL:  Expected JSON value, but found ":".
CONTEXT:  JSON data, line 1: {"abc"::...
SELECT '{"abc":1,"def":2,"ghi":[3,4],"hij":{"klm":5,"nop":[6]}}'::json; -- OK
                          json                           
---------------------------------------------------------
 {"abc":1,"def":2,"ghi":[3,4],"hij":{"klm":5,"nop":[6]}}
(1 row)

SELECT '{"abc":1:2}'::json;		-- ERROR, colon in wrong spot
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc":1:2}'::json;
               ^
DETAIL:  Expected "," or "}", but found ":".
CONTEXT:  JSON data, line 1: {"abc":1:...
SELECT '{"abc":1,3}'::json;		-- ERROR, no value
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc":1,3}'::json;
               ^
DETAIL:  Expected string, but found "3".
CONTEXT:  JSON data, line 1: {"abc":1,3...
SELECT repeat('[', 10000)::json;
ERROR:  stack depth limit exceeded
HINT:  Increase the configuration parameter "max_stack_depth" (currently 100kB), after ensuring the platform's stack depth limit is adequate.
SELECT repeat('{"a":', 10000)::json;
ERROR:  stack depth limit exceeded
HINT:  Increase the configuration parameter "max_stack_depth" (currently 100kB), after ensuring the platform's stack depth limit is adequate.
-- Miscellaneous stuff.
SELECT 'true'::json;			-- OK
 json 
------
 true
(1 row)

SELECT 'false'::json;			-- OK
 json  
-------
 false
(1 row)

SELECT 'null'::json;			-- OK
 json 
------
 null
(1 row)

SELECT ' true '::json;			-- OK, even with extra whitespace
  json  
--------
  true 
(1 row)

SELECT 'true false'::json;		-- ERROR, too many values
ERROR:  invalid input syntax for type json
LINE 1: SELECT 'true false'::json;
               ^
DETAIL:  Expected end of input, but found "false".
CONTEXT:  JSON data, line 1: true false
SELECT 'true, false'::json;		-- ERROR, too many values
ERROR:  invalid input syntax for type json
LINE 1: SELECT 'true, false'::json;
               ^
DETAIL:  Expected end of input, but found ",".
CONTEXT:  JSON data, line 1: true,...
SELECT 'truf'::json;			-- ERROR, not a keyword
ERROR:  invalid input syntax for type json
LINE 1: SELECT 'truf'::json;
               ^
DETAIL:  Token "truf" is invalid.
CONTEXT:  JSON data, line 1: truf
SELECT 'trues'::json;			-- ERROR, not a keyword
ERROR:  invalid input syntax for type json
LINE 1: SELECT 'trues'::json;
               ^
DETAIL:  Token "trues" is invalid.
CONTEXT:  JSON data, line 1: trues
SELECT ''::json;				-- ERROR, no value
ERROR:  invalid input syntax for type json
LINE 1: SELECT ''::json;
               ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
SELECT '    '::json;			-- ERROR, no value
ERROR:  invalid input syntax for type json
LINE 1: SELECT '    '::json;
               ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1:     
SELECT '{
		"one": 1,
		"two":,"two",  -- ERROR extraneous comma before field "two"
		"three":
		true}'::json;
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{
               ^
DETAIL:  Expected JSON value, but found ",".
CONTEXT:  JSON data, line 3: 		"two":,...
SELECT '{
		"one": 1,
		"two":"two",
		"averyveryveryveryveryveryveryveryveryverylongfieldname":}'::json;
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{
               ^
DETAIL:  Expected JSON value, but found "}".
CONTEXT:  JSON data, line 4: ...yveryveryveryveryveryveryveryverylongfieldname":}
SELECT array_to_json('{{1,5},{99,100}}'::int[]);
  array_to_json   
------------------
 [[1,5],[99,100]]
(1 row)

BEGIN;
COMMIT;
-- json extraction functions
CREATE TEMP TABLE test_json (
       json_type text,
       test_json json
);
INSERT INTO test_json VALUES
('scalar','"a scalar"'),
('array','["zero", "one","two",null,"four","five", [1,2,3],{"f1":9}]'),
('object','{"field1":"val1","field2":"val2","field3":null, "field4": 4, "field5": [1,2,3], "field6": {"f1":9}}');
