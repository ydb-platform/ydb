-- Strings.
SELECT '""'::json;				-- OK.
 json 
------
 ""
(1 row)

SELECT $$''$$::json;			-- ERROR, single quotes are not allowed
ERROR:  invalid input syntax for type json
LINE 1: SELECT $$''$$::json;
               ^
DETAIL:  Token "'" is invalid.
CONTEXT:  JSON data, line 1: '...
SELECT '"abc"'::json;			-- OK
 json  
-------
 "abc"
(1 row)

SELECT '"abc'::json;			-- ERROR, quotes not closed
ERROR:  invalid input syntax for type json
LINE 1: SELECT '"abc'::json;
               ^
DETAIL:  Token ""abc" is invalid.
CONTEXT:  JSON data, line 1: "abc
SELECT '"abc
def"'::json;					-- ERROR, unescaped newline in string constant
ERROR:  invalid input syntax for type json
LINE 1: SELECT '"abc
               ^
DETAIL:  Character with value 0x0a must be escaped.
CONTEXT:  JSON data, line 1: "abc
SELECT '"\n\"\\"'::json;		-- OK, legal escapes
   json   
----------
 "\n\"\\"
(1 row)

SELECT '"\v"'::json;			-- ERROR, not a valid JSON escape
ERROR:  invalid input syntax for type json
LINE 1: SELECT '"\v"'::json;
               ^
DETAIL:  Escape sequence "\v" is invalid.
CONTEXT:  JSON data, line 1: "\v...
-- see json_encoding test for input with unicode escapes
-- Numbers.
SELECT '1'::json;				-- OK
 json 
------
 1
(1 row)

SELECT '0'::json;				-- OK
 json 
------
 0
(1 row)

SELECT '01'::json;				-- ERROR, not valid according to JSON spec
ERROR:  invalid input syntax for type json
LINE 1: SELECT '01'::json;
               ^
DETAIL:  Token "01" is invalid.
CONTEXT:  JSON data, line 1: 01
SELECT '0.1'::json;				-- OK
 json 
------
 0.1
(1 row)

SELECT '9223372036854775808'::json;	-- OK, even though it's too large for int8
        json         
---------------------
 9223372036854775808
(1 row)

SELECT '1e100'::json;			-- OK
 json  
-------
 1e100
(1 row)

SELECT '1.3e100'::json;			-- OK
  json   
---------
 1.3e100
(1 row)

SELECT '1f2'::json;				-- ERROR
ERROR:  invalid input syntax for type json
LINE 1: SELECT '1f2'::json;
               ^
DETAIL:  Token "1f2" is invalid.
CONTEXT:  JSON data, line 1: 1f2
SELECT '0.x1'::json;			-- ERROR
ERROR:  invalid input syntax for type json
LINE 1: SELECT '0.x1'::json;
               ^
DETAIL:  Token "0.x1" is invalid.
CONTEXT:  JSON data, line 1: 0.x1
SELECT '1.3ex100'::json;		-- ERROR
ERROR:  invalid input syntax for type json
LINE 1: SELECT '1.3ex100'::json;
               ^
DETAIL:  Token "1.3ex100" is invalid.
CONTEXT:  JSON data, line 1: 1.3ex100
-- Arrays.
SELECT '[]'::json;				-- OK
 json 
------
 []
(1 row)

SELECT '[1,2]'::json;			-- OK
 json  
-------
 [1,2]
(1 row)

SELECT '[1,2,]'::json;			-- ERROR, trailing comma
ERROR:  invalid input syntax for type json
LINE 1: SELECT '[1,2,]'::json;
               ^
DETAIL:  Expected JSON value, but found "]".
CONTEXT:  JSON data, line 1: [1,2,]
SELECT '[1,2'::json;			-- ERROR, no closing bracket
ERROR:  invalid input syntax for type json
LINE 1: SELECT '[1,2'::json;
               ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: [1,2
SELECT '[1,[2]'::json;			-- ERROR, no closing bracket
ERROR:  invalid input syntax for type json
LINE 1: SELECT '[1,[2]'::json;
               ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: [1,[2]
-- Objects.
SELECT '{}'::json;				-- OK
 json 
------
 {}
(1 row)

SELECT '{"abc"}'::json;			-- ERROR, no value
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc"}'::json;
               ^
DETAIL:  Expected ":", but found "}".
CONTEXT:  JSON data, line 1: {"abc"}
SELECT '{"abc":1}'::json;		-- OK
   json    
-----------
 {"abc":1}
(1 row)

SELECT '{1:"abc"}'::json;		-- ERROR, keys must be strings
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{1:"abc"}'::json;
               ^
DETAIL:  Expected string or "}", but found "1".
CONTEXT:  JSON data, line 1: {1...
SELECT '{"abc",1}'::json;		-- ERROR, wrong separator
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc",1}'::json;
               ^
DETAIL:  Expected ":", but found ",".
CONTEXT:  JSON data, line 1: {"abc",...
SELECT '{"abc"=1}'::json;		-- ERROR, totally wrong separator
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc"=1}'::json;
               ^
DETAIL:  Token "=" is invalid.
CONTEXT:  JSON data, line 1: {"abc"=...
SELECT '{"abc"::1}'::json;		-- ERROR, another wrong separator
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc"::1}'::json;
               ^
DETAIL:  Expected JSON value, but found ":".
CONTEXT:  JSON data, line 1: {"abc"::...
SELECT '{"abc":1,"def":2,"ghi":[3,4],"hij":{"klm":5,"nop":[6]}}'::json; -- OK
                          json                           
---------------------------------------------------------
 {"abc":1,"def":2,"ghi":[3,4],"hij":{"klm":5,"nop":[6]}}
(1 row)

SELECT '{"abc":1:2}'::json;		-- ERROR, colon in wrong spot
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc":1:2}'::json;
               ^
DETAIL:  Expected "," or "}", but found ":".
CONTEXT:  JSON data, line 1: {"abc":1:...
SELECT '{"abc":1,3}'::json;		-- ERROR, no value
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc":1,3}'::json;
               ^
DETAIL:  Expected string, but found "3".
CONTEXT:  JSON data, line 1: {"abc":1,3...
-- Miscellaneous stuff.
SELECT 'true'::json;			-- OK
 json 
------
 true
(1 row)

SELECT 'false'::json;			-- OK
 json  
-------
 false
(1 row)

SELECT 'null'::json;			-- OK
 json 
------
 null
(1 row)

SELECT ' true '::json;			-- OK, even with extra whitespace
  json  
--------
  true 
(1 row)

SELECT 'true false'::json;		-- ERROR, too many values
ERROR:  invalid input syntax for type json
LINE 1: SELECT 'true false'::json;
               ^
DETAIL:  Expected end of input, but found "false".
CONTEXT:  JSON data, line 1: true false
SELECT 'true, false'::json;		-- ERROR, too many values
ERROR:  invalid input syntax for type json
LINE 1: SELECT 'true, false'::json;
               ^
DETAIL:  Expected end of input, but found ",".
CONTEXT:  JSON data, line 1: true,...
SELECT 'truf'::json;			-- ERROR, not a keyword
ERROR:  invalid input syntax for type json
LINE 1: SELECT 'truf'::json;
               ^
DETAIL:  Token "truf" is invalid.
CONTEXT:  JSON data, line 1: truf
SELECT 'trues'::json;			-- ERROR, not a keyword
ERROR:  invalid input syntax for type json
LINE 1: SELECT 'trues'::json;
               ^
DETAIL:  Token "trues" is invalid.
CONTEXT:  JSON data, line 1: trues
SELECT ''::json;				-- ERROR, no value
ERROR:  invalid input syntax for type json
LINE 1: SELECT ''::json;
               ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
SELECT '    '::json;			-- ERROR, no value
ERROR:  invalid input syntax for type json
LINE 1: SELECT '    '::json;
               ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1:     
SELECT '{
		"one": 1,
		"two":,"two",  -- ERROR extraneous comma before field "two"
		"three":
		true}'::json;
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{
               ^
DETAIL:  Expected JSON value, but found ",".
CONTEXT:  JSON data, line 3: 		"two":,...
SELECT '{
		"one": 1,
		"two":"two",
		"averyveryveryveryveryveryveryveryveryverylongfieldname":}'::json;
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{
               ^
DETAIL:  Expected JSON value, but found "}".
CONTEXT:  JSON data, line 4: ...yveryveryveryveryveryveryveryverylongfieldname":}
SELECT array_to_json('{{1,5},{99,100}}'::int[]);
  array_to_json   
------------------
 [[1,5],[99,100]]
(1 row)

BEGIN;
COMMIT;
-- json extraction functions
CREATE TEMP TABLE test_json (
       json_type text,
       test_json json
);
INSERT INTO test_json VALUES
('scalar','"a scalar"'),
('array','["zero", "one","two",null,"four","five", [1,2,3],{"f1":9}]'),
('object','{"field1":"val1","field2":"val2","field3":null, "field4": 4, "field5": [1,2,3], "field6": {"f1":9}}');
-- corner cases
select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json -> null::text;
 ?column? 
----------
 
(1 row)

select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json -> null::int;
 ?column? 
----------
 
(1 row)

select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json -> 1;
 ?column? 
----------
 
(1 row)

select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json -> -1;
 ?column? 
----------
 
(1 row)

select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json -> 'z';
 ?column? 
----------
 
(1 row)

select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json -> '';
 ?column? 
----------
 
(1 row)

select '[{"b": "c"}, {"b": "cc"}]'::json -> 1;
  ?column?   
-------------
 {"b": "cc"}
(1 row)

select '[{"b": "c"}, {"b": "cc"}]'::json -> 3;
 ?column? 
----------
 
(1 row)

select '[{"b": "c"}, {"b": "cc"}]'::json -> 'z';
 ?column? 
----------
 
(1 row)

select '{"a": "c", "b": null}'::json -> 'b';
 ?column? 
----------
 null
(1 row)

select '"foo"'::json -> 1;
 ?column? 
----------
 
(1 row)

select '"foo"'::json -> 'z';
 ?column? 
----------
 
(1 row)

select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json ->> null::text;
 ?column? 
----------
 
(1 row)

select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json ->> null::int;
 ?column? 
----------
 
(1 row)

select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json ->> 1;
 ?column? 
----------
 
(1 row)

select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json ->> 'z';
 ?column? 
----------
 
(1 row)

select '{"a": [{"b": "c"}, {"b": "cc"}]}'::json ->> '';
 ?column? 
----------
 
(1 row)

select '[{"b": "c"}, {"b": "cc"}]'::json ->> 1;
  ?column?   
-------------
 {"b": "cc"}
(1 row)

select '[{"b": "c"}, {"b": "cc"}]'::json ->> 3;
 ?column? 
----------
 
(1 row)

select '[{"b": "c"}, {"b": "cc"}]'::json ->> 'z';
 ?column? 
----------
 
(1 row)

select '{"a": "c", "b": null}'::json ->> 'b';
 ?column? 
----------
 
(1 row)

select '"foo"'::json ->> 1;
 ?column? 
----------
 
(1 row)

select '"foo"'::json ->> 'z';
 ?column? 
----------
 
(1 row)

-- array length
SELECT json_array_length('[1,2,3,{"f1":1,"f2":[5,6]},4]');
 json_array_length 
-------------------
                 5
(1 row)

SELECT json_array_length('[]');
 json_array_length 
-------------------
                 0
(1 row)

SELECT json_array_length('{"f1":1,"f2":[5,6]}');
ERROR:  cannot get array length of a non-array
SELECT json_array_length('4');
ERROR:  cannot get array length of a scalar
select * from json_each('{"f1":[1,2,3],"f2":{"f3":1},"f4":null,"f5":99,"f6":"stringy"}') q;
 key |   value   
-----+-----------
 f1  | [1,2,3]
 f2  | {"f3":1}
 f4  | null
 f5  | 99
 f6  | "stringy"
(5 rows)

select * from json_each_text('{"f1":[1,2,3],"f2":{"f3":1},"f4":null,"f5":99,"f6":"stringy"}') q;
 key |  value   
-----+----------
 f1  | [1,2,3]
 f2  | {"f3":1}
 f4  | 
 f5  | 99
 f6  | stringy
(5 rows)

select * from json_array_elements('[1,true,[1,[2,3]],null,{"f1":1,"f2":[7,8,9]},false,"stringy"]') q;
         value         
-----------------------
 1
 true
 [1,[2,3]]
 null
 {"f1":1,"f2":[7,8,9]}
 false
 "stringy"
(7 rows)

select * from json_array_elements_text('[1,true,[1,[2,3]],null,{"f1":1,"f2":[7,8,9]},false,"stringy"]') q;
         value         
-----------------------
 1
 true
 [1,[2,3]]
 
 {"f1":1,"f2":[7,8,9]}
 false
 stringy
(7 rows)

-- test type info caching in json_populate_record()
CREATE TEMP TABLE jspoptest (js json);
INSERT INTO jspoptest
SELECT '{
	"jsa": [1, "2", null, 4],
	"rec": {"a": "abc", "c": "01.02.2003", "x": 43.2},
	"reca": [{"a": "abc", "b": 456}, null, {"c": "01.02.2003", "x": 43.2}]
}'::json
FROM generate_series(1, 3);
--json_typeof() function
select value, json_typeof(value)
  from (values (json '123.4'),
               (json '-1'),
               (json '"foo"'),
               (json 'true'),
               (json 'false'),
               (json 'null'),
               (json '[1, 2, 3]'),
               (json '[]'),
               (json '{"x":"foo", "y":123}'),
               (json '{}'),
               (NULL::json))
      as data(value);
        value         | json_typeof 
----------------------+-------------
 123.4                | number
 -1                   | number
 "foo"                | string
 true                 | boolean
 false                | boolean
 null                 | null
 [1, 2, 3]            | array
 []                   | array
 {"x":"foo", "y":123} | object
 {}                   | object
                      | 
(11 rows)

-- empty objects/arrays
SELECT json_build_array();
 json_build_array 
------------------
 []
(1 row)

SELECT json_build_object();
 json_build_object 
-------------------
 {}
(1 row)

CREATE TEMP TABLE foo (serial_num int, name text, type text);
INSERT INTO foo VALUES (847001,'t15','GE1043');
INSERT INTO foo VALUES (847002,'t16','GE1043');
INSERT INTO foo VALUES (847003,'sub-alpha','GESS90');
INSERT INTO foo VALUES (999999, NULL, 'bar');
SELECT json_object_agg(name, type) FROM foo;
ERROR:  field name must not be null
-- json_object
-- empty object, one dimension
SELECT json_object('{}');
 json_object 
-------------
 {}
(1 row)

-- empty object, two dimensions
SELECT json_object('{}', '{}');
 json_object 
-------------
 {}
(1 row)

-- one dimension
SELECT json_object('{a,1,b,2,3,NULL,"d e f","a b c"}');
                      json_object                      
-------------------------------------------------------
 {"a" : "1", "b" : "2", "3" : null, "d e f" : "a b c"}
(1 row)

-- same but with two dimensions
SELECT json_object('{{a,1},{b,2},{3,NULL},{"d e f","a b c"}}');
                      json_object                      
-------------------------------------------------------
 {"a" : "1", "b" : "2", "3" : null, "d e f" : "a b c"}
(1 row)

-- odd number error
SELECT json_object('{a,b,c}');
ERROR:  array must have even number of elements
-- one column error
SELECT json_object('{{a},{b}}');
ERROR:  array must have two columns
-- too many columns error
SELECT json_object('{{a,b,c},{b,c,d}}');
ERROR:  array must have two columns
-- too many dimensions error
SELECT json_object('{{{a,b},{c,d}},{{b,c},{d,e}}}');
ERROR:  wrong number of array subscripts
--two argument form of json_object
select json_object('{a,b,c,"d e f"}','{1,2,3,"a b c"}');
                     json_object                      
------------------------------------------------------
 {"a" : "1", "b" : "2", "c" : "3", "d e f" : "a b c"}
(1 row)

-- too many dimensions
SELECT json_object('{{a,1},{b,2},{3,NULL},{"d e f","a b c"}}', '{{a,1},{b,2},{3,NULL},{"d e f","a b c"}}');
ERROR:  wrong number of array subscripts
-- mismatched dimensions
select json_object('{a,b,c,"d e f",g}','{1,2,3,"a b c"}');
ERROR:  mismatched array dimensions
select json_object('{a,b,c,"d e f"}','{1,2,3,"a b c",g}');
ERROR:  mismatched array dimensions
-- null key error
select json_object('{a,b,NULL,"d e f"}','{1,2,3,"a b c"}');
ERROR:  null value not allowed for object key
-- empty key is allowed
select json_object('{a,b,"","d e f"}','{1,2,3,"a b c"}');
                     json_object                     
-----------------------------------------------------
 {"a" : "1", "b" : "2", "" : "3", "d e f" : "a b c"}
(1 row)

-- json_strip_nulls
select json_strip_nulls(null);
 json_strip_nulls 
------------------
 
(1 row)

select json_strip_nulls('1');
 json_strip_nulls 
------------------
 1
(1 row)

select json_strip_nulls('"a string"');
 json_strip_nulls 
------------------
 "a string"
(1 row)

select json_strip_nulls('null');
 json_strip_nulls 
------------------
 null
(1 row)

select json_strip_nulls('[1,2,null,3,4]');
 json_strip_nulls 
------------------
 [1,2,null,3,4]
(1 row)

select json_strip_nulls('{"a":1,"b":null,"c":[2,null,3],"d":{"e":4,"f":null}}');
          json_strip_nulls          
------------------------------------
 {"a":1,"c":[2,null,3],"d":{"e":4}}
(1 row)

select json_strip_nulls('[1,{"a":1,"b":null,"c":2},3]');
  json_strip_nulls   
---------------------
 [1,{"a":1,"c":2},3]
(1 row)

-- an empty object is not null and should not be stripped
select json_strip_nulls('{"a": {"b": null, "c": null}, "d": {} }');
 json_strip_nulls 
------------------
 {"a":{},"d":{}}
(1 row)

