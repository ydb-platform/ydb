-- Strings.
SELECT '""'::jsonb;				-- OK.
 jsonb 
-------
 ""
(1 row)

SELECT $$''$$::jsonb;			-- ERROR, single quotes are not allowed
ERROR:  invalid input syntax for type json
LINE 1: SELECT $$''$$::jsonb;
               ^
DETAIL:  Token "'" is invalid.
CONTEXT:  JSON data, line 1: '...
SELECT '"abc"'::jsonb;			-- OK
 jsonb 
-------
 "abc"
(1 row)

SELECT '"abc'::jsonb;			-- ERROR, quotes not closed
ERROR:  invalid input syntax for type json
LINE 1: SELECT '"abc'::jsonb;
               ^
DETAIL:  Token ""abc" is invalid.
CONTEXT:  JSON data, line 1: "abc
SELECT '"abc
def"'::jsonb;					-- ERROR, unescaped newline in string constant
ERROR:  invalid input syntax for type json
LINE 1: SELECT '"abc
               ^
DETAIL:  Character with value 0x0a must be escaped.
CONTEXT:  JSON data, line 1: "abc
SELECT '"\n\"\\"'::jsonb;		-- OK, legal escapes
  jsonb   
----------
 "\n\"\\"
(1 row)

SELECT '"\v"'::jsonb;			-- ERROR, not a valid JSON escape
ERROR:  invalid input syntax for type json
LINE 1: SELECT '"\v"'::jsonb;
               ^
DETAIL:  Escape sequence "\v" is invalid.
CONTEXT:  JSON data, line 1: "\v...
-- see json_encoding test for input with unicode escapes
-- Numbers.
SELECT '1'::jsonb;				-- OK
 jsonb 
-------
 1
(1 row)

SELECT '0'::jsonb;				-- OK
 jsonb 
-------
 0
(1 row)

SELECT '01'::jsonb;				-- ERROR, not valid according to JSON spec
ERROR:  invalid input syntax for type json
LINE 1: SELECT '01'::jsonb;
               ^
DETAIL:  Token "01" is invalid.
CONTEXT:  JSON data, line 1: 01
SELECT '0.1'::jsonb;				-- OK
 jsonb 
-------
 0.1
(1 row)

SELECT '9223372036854775808'::jsonb;	-- OK, even though it's too large for int8
        jsonb        
---------------------
 9223372036854775808
(1 row)

SELECT '1f2'::jsonb;				-- ERROR
ERROR:  invalid input syntax for type json
LINE 1: SELECT '1f2'::jsonb;
               ^
DETAIL:  Token "1f2" is invalid.
CONTEXT:  JSON data, line 1: 1f2
SELECT '0.x1'::jsonb;			-- ERROR
ERROR:  invalid input syntax for type json
LINE 1: SELECT '0.x1'::jsonb;
               ^
DETAIL:  Token "0.x1" is invalid.
CONTEXT:  JSON data, line 1: 0.x1
SELECT '1.3ex100'::jsonb;		-- ERROR
ERROR:  invalid input syntax for type json
LINE 1: SELECT '1.3ex100'::jsonb;
               ^
DETAIL:  Token "1.3ex100" is invalid.
CONTEXT:  JSON data, line 1: 1.3ex100
-- Arrays.
SELECT '[]'::jsonb;				-- OK
 jsonb 
-------
 []
(1 row)

SELECT '[1,2]'::jsonb;			-- OK
 jsonb  
--------
 [1, 2]
(1 row)

SELECT '[1,2,]'::jsonb;			-- ERROR, trailing comma
ERROR:  invalid input syntax for type json
LINE 1: SELECT '[1,2,]'::jsonb;
               ^
DETAIL:  Expected JSON value, but found "]".
CONTEXT:  JSON data, line 1: [1,2,]
SELECT '[1,2'::jsonb;			-- ERROR, no closing bracket
ERROR:  invalid input syntax for type json
LINE 1: SELECT '[1,2'::jsonb;
               ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: [1,2
SELECT '[1,[2]'::jsonb;			-- ERROR, no closing bracket
ERROR:  invalid input syntax for type json
LINE 1: SELECT '[1,[2]'::jsonb;
               ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: [1,[2]
-- Objects.
SELECT '{}'::jsonb;				-- OK
 jsonb 
-------
 {}
(1 row)

SELECT '{"abc"}'::jsonb;			-- ERROR, no value
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc"}'::jsonb;
               ^
DETAIL:  Expected ":", but found "}".
CONTEXT:  JSON data, line 1: {"abc"}
SELECT '{"abc":1}'::jsonb;		-- OK
   jsonb    
------------
 {"abc": 1}
(1 row)

SELECT '{1:"abc"}'::jsonb;		-- ERROR, keys must be strings
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{1:"abc"}'::jsonb;
               ^
DETAIL:  Expected string or "}", but found "1".
CONTEXT:  JSON data, line 1: {1...
SELECT '{"abc",1}'::jsonb;		-- ERROR, wrong separator
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc",1}'::jsonb;
               ^
DETAIL:  Expected ":", but found ",".
CONTEXT:  JSON data, line 1: {"abc",...
SELECT '{"abc"=1}'::jsonb;		-- ERROR, totally wrong separator
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc"=1}'::jsonb;
               ^
DETAIL:  Token "=" is invalid.
CONTEXT:  JSON data, line 1: {"abc"=...
SELECT '{"abc"::1}'::jsonb;		-- ERROR, another wrong separator
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc"::1}'::jsonb;
               ^
DETAIL:  Expected JSON value, but found ":".
CONTEXT:  JSON data, line 1: {"abc"::...
SELECT '{"abc":1,"def":2,"ghi":[3,4],"hij":{"klm":5,"nop":[6]}}'::jsonb; -- OK
                               jsonb                                
--------------------------------------------------------------------
 {"abc": 1, "def": 2, "ghi": [3, 4], "hij": {"klm": 5, "nop": [6]}}
(1 row)

SELECT '{"abc":1:2}'::jsonb;		-- ERROR, colon in wrong spot
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc":1:2}'::jsonb;
               ^
DETAIL:  Expected "," or "}", but found ":".
CONTEXT:  JSON data, line 1: {"abc":1:...
SELECT '{"abc":1,3}'::jsonb;		-- ERROR, no value
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{"abc":1,3}'::jsonb;
               ^
DETAIL:  Expected string, but found "3".
CONTEXT:  JSON data, line 1: {"abc":1,3...
SELECT repeat('[', 10000)::jsonb;
ERROR:  stack depth limit exceeded
HINT:  Increase the configuration parameter "max_stack_depth" (currently 100kB), after ensuring the platform's stack depth limit is adequate.
SELECT repeat('{"a":', 10000)::jsonb;
ERROR:  stack depth limit exceeded
HINT:  Increase the configuration parameter "max_stack_depth" (currently 100kB), after ensuring the platform's stack depth limit is adequate.
-- Miscellaneous stuff.
SELECT 'true'::jsonb;			-- OK
 jsonb 
-------
 true
(1 row)

SELECT 'false'::jsonb;			-- OK
 jsonb 
-------
 false
(1 row)

SELECT 'null'::jsonb;			-- OK
 jsonb 
-------
 null
(1 row)

SELECT ' true '::jsonb;			-- OK, even with extra whitespace
 jsonb 
-------
 true
(1 row)

SELECT 'true false'::jsonb;		-- ERROR, too many values
ERROR:  invalid input syntax for type json
LINE 1: SELECT 'true false'::jsonb;
               ^
DETAIL:  Expected end of input, but found "false".
CONTEXT:  JSON data, line 1: true false
SELECT 'true, false'::jsonb;		-- ERROR, too many values
ERROR:  invalid input syntax for type json
LINE 1: SELECT 'true, false'::jsonb;
               ^
DETAIL:  Expected end of input, but found ",".
CONTEXT:  JSON data, line 1: true,...
SELECT 'truf'::jsonb;			-- ERROR, not a keyword
ERROR:  invalid input syntax for type json
LINE 1: SELECT 'truf'::jsonb;
               ^
DETAIL:  Token "truf" is invalid.
CONTEXT:  JSON data, line 1: truf
SELECT 'trues'::jsonb;			-- ERROR, not a keyword
ERROR:  invalid input syntax for type json
LINE 1: SELECT 'trues'::jsonb;
               ^
DETAIL:  Token "trues" is invalid.
CONTEXT:  JSON data, line 1: trues
SELECT ''::jsonb;				-- ERROR, no value
ERROR:  invalid input syntax for type json
LINE 1: SELECT ''::jsonb;
               ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
SELECT '    '::jsonb;			-- ERROR, no value
ERROR:  invalid input syntax for type json
LINE 1: SELECT '    '::jsonb;
               ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1:     
-- Multi-line JSON input to check ERROR reporting
SELECT '{
		"one": 1,
		"two":"two",
		"three":
		true}'::jsonb; -- OK
                  jsonb                  
-----------------------------------------
 {"one": 1, "two": "two", "three": true}
(1 row)

SELECT '{
		"one": 1,
		"two":,"two",  -- ERROR extraneous comma before field "two"
		"three":
		true}'::jsonb;
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{
               ^
DETAIL:  Expected JSON value, but found ",".
CONTEXT:  JSON data, line 3: 		"two":,...
SELECT '{
		"one": 1,
		"two":"two",
		"averyveryveryveryveryveryveryveryveryverylongfieldname":}'::jsonb;
ERROR:  invalid input syntax for type json
LINE 1: SELECT '{
               ^
DETAIL:  Expected JSON value, but found "}".
CONTEXT:  JSON data, line 4: ...yveryveryveryveryveryveryveryverylongfieldname":}
-- ERROR missing value for last field
-- make sure jsonb is passed through json generators without being escaped
SELECT array_to_json(ARRAY [jsonb '{"a":1}', jsonb '{"b":[2,3]}']);
      array_to_json       
--------------------------
 [{"a": 1},{"b": [2, 3]}]
(1 row)

BEGIN;
COMMIT;
-- jsonb extraction functions
CREATE TEMP TABLE test_jsonb (
       json_type text,
       test_json jsonb
);
INSERT INTO test_jsonb VALUES
('scalar','"a scalar"'),
('array','["zero", "one","two",null,"four","five", [1,2,3],{"f1":9}]'),
('object','{"field1":"val1","field2":"val2","field3":null, "field4": 4, "field5": [1,2,3], "field6": {"f1":9}}');
