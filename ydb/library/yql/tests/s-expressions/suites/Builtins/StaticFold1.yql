(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let table1map (Map table1 (lambda '(row0) (block '(
    (let init_fun (lambda '(a) (Concat a (String '"->"))))
    (let concat_all (lambda '(struct) (StaticFold1 struct init_fun (lambda '(a b) (Concat a b)))))
    (let row (Struct))
    (let result_empty (Apply concat_all row))
    (let row (AddMember row 'key (Member row0 'key)))
    (let result_1 (Apply concat_all row))
    (let row (AddMember row 'subkey (Member row0 'subkey)))
    (let row (AddMember row 'value (Member row0 'value)))
    (let result (Apply concat_all row))
    (let row1 (Struct))
    (let row1 (AddMember row1 'result result))
    (let row1 (AddMember row1 'result_empty result_empty))
    (let row1 (AddMember row1 'result_1 result_1))
    (return row1)
)))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) table1map '('('mode 'append))))
(let world (Commit! world mr_sink))
(return world)
)
