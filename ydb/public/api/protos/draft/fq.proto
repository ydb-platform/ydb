syntax = "proto3";
option cc_enable_arenas = true;

package FederatedQuery;
option java_package = "com.yandex.query";
option java_outer_classname = "FederatedQueryProtos";

import "ydb/public/api/protos/annotations/sensitive.proto";
import "ydb/public/api/protos/annotations/validation.proto";
import "ydb/public/api/protos/ydb_operation.proto";
import "ydb/public/api/protos/ydb_value.proto";
import "ydb/public/api/protos/ydb_issue_message.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

////////////////////////////////////////////////////////////

// === Query API ===

// Header: ydb-fq-project => yandexcloud://cloud_id/folder_id

message Acl {
    enum Visibility {
        VISIBILITY_UNSPECIFIED = 0;
        PRIVATE = 1; // Visibility only for the creator of the entity
        SCOPE = 2; // Visibility for subjects within scope
    }
    Visibility visibility = 1;
}

message Limits {
    int64 vcpu_rate_limit = 1 [(Ydb.value) = ">= 0"]; // 0.01 vcpu per second
    int64 flow_rate_limit = 2 [(Ydb.value) = ">= 0"]; // Bytes per second
    int64 vcpu_time_limit = 3 [(Ydb.value) = ">= 0"]; // Milliseconds per second

    // Used only for analytics queries
    int64 max_result_size = 4 [(Ydb.value) = ">= 0"]; // Bytes
    int64 max_result_rows = 5 [(Ydb.value) = ">= 0"]; // Count

    // Common limits
    int64 memory_limit = 6 [(Ydb.value) = ">= 0"]; // Bytes
    google.protobuf.Duration result_ttl = 7;
    oneof timeout {
        google.protobuf.Duration execution_timeout = 8;
        google.protobuf.Timestamp execution_deadline = 9;
    }
}

enum ExecuteMode {
    EXECUTE_MODE_UNSPECIFIED = 0;
    SAVE = 1; // Save a query without changing its state
    PARSE = 2; // Parse the query
    COMPILE = 3; // Parse and compile the query
    VALIDATE = 4; // Parse, compile and validate the query
    EXPLAIN = 5; // High-level query plan that specifies only physical operations and non-temporary table names
    RUN = 6; // Do all the previous + execution of the query
}

enum QueryAction {
    QUERY_ACTION_UNSPECIFIED = 0;
    PAUSE = 1; // Pause the query, with the possibility of its quick resumption
    PAUSE_GRACEFULLY = 2; // Similar to PAUSE, only suspends the query allowing it to pause in checkpoint. Can work for a long time
    ABORT = 3; // Stop the query
    ABORT_GRACEFULLY = 4; // Similar to ABORT, only stops the query in checkpoint
    RESUME = 5; // Resumes the execution of the query. Works only for PAUSE queries
}

enum StateLoadMode {
    STATE_LOAD_MODE_UNSPECIFIED = 0;
    EMPTY = 1; // Start the query with an empty state
    FROM_LAST_CHECKPOINT = 2; // Start the query with the state that is saved in the last checkpoint
}

// For streaming queries only
message StreamingDisposition {
    message FromTime {
        google.protobuf.Timestamp timestamp = 1;
    }

    message TimeAgo {
        google.protobuf.Duration duration = 1;
    }

    message FromLastCheckpoint {
        // By default if new query streams set doesn't equal to old query streams set,
        // error will occur and query won't be allowed to load offsets for streams for the last checkpoint.
        // If this flag is set all offsets that can be matched with previous query checkpoint will be matched.
        // Others will use "fresh" streaming disposition.
        bool force = 1;
    }

    oneof disposition {
        google.protobuf.Empty oldest = 1; // Start processing with the oldest offset
        google.protobuf.Empty fresh = 2; // Start processing with the fresh offset
        FromTime from_time = 3; // Start processing with offset from the specified time
        TimeAgo time_ago = 4; // Start processing with offset some time ago
        FromLastCheckpoint from_last_checkpoint = 5; // Start processing with offset which corresponds to the last checkpoint
    }
}

// Query information that the subject can change
message QueryContent {
    enum QueryType {
        QUERY_TYPE_UNSPECIFIED = 0;
        ANALYTICS = 1; // Analytical query (used for analytical data processing for example to work with YDB, ClickHouse, ...)
        STREAMING = 2; // Streaming query (used for streaming data processing, such as working with YDS)
    }

    enum QuerySyntax {
        QUERY_SYNTAX_UNSPECIFIED = 0;
        YQL_V1 = 1; // YQL version 1
        PG = 2; // PostgresQL
    }

    QueryType type = 1;
    string name = 2 [(Ydb.length).le = 1024];
    Acl acl = 3;
    Limits limits = 4;
    string text = 5 [(Ydb.length).range = {min: 1, max: 102400}]; // The text of the query itself
    bool automatic = 6; // Is used for queries that are created by automatic systems (robots, jdbc driver, ...)
    string description = 7 [(Ydb.length).le = 10240]; // Description of the query, there can be any text
    // Specified settings for query's executor
    // Well known settings are:
    // "executor" - type of executor for this query
    map<string, string> execution_settings = 10 [(Ydb.map_key).length.range = {min: 1, max: 100}, (Ydb.length).le = 4096];
    // Syntax of the text
    // By default it is "yql", but additional syntax "pg" (PostreSQL SQL frontend) is supported as well
    QuerySyntax syntax = 11;
}

message CommonMeta {
    string id = 1 [(Ydb.length).range = {min: 1, max: 1024}];
    string created_by = 2 [(Ydb.length).range = {min: 1, max: 1024}];
    string modified_by = 3 [(Ydb.length).range = {min: 1, max: 1024}];
    google.protobuf.Timestamp created_at = 4;
    google.protobuf.Timestamp modified_at = 5;
    int64 revision = 6 [(Ydb.value) = ">= 0"]; // Entity version, increases with each change
}

message QueryMeta {
    enum ComputeStatus {
        COMPUTE_STATUS_UNSPECIFIED = 0;
        STARTING = 1; // Start execution of the action on query
        ABORTED_BY_USER = 2; // Query aborted by user
        ABORTED_BY_SYSTEM = 3; // Query aborted by system
        ABORTING_BY_USER = 4; // Query aborting by user
        ABORTING_BY_SYSTEM = 5; // Query aborting by system
        RESUMING = 6; // Resuming query execution from PAUSED status
        RUNNING = 7; // Query started for execution
        COMPLETED = 8; // Query completed successfully
        COMPLETING = 12; // Finalizing query before become COMPLETED
        FAILED = 9; // Query completed with errors
        FAILING = 13; // Finalizing query before become FAILED
        PAUSED = 11; // Query paused
        PAUSING = 10; // Query starts pausing
    }

    CommonMeta common = 1;
    // Timeline (submitted_at <= started_at <= finished_at)
    //  sumbitted_at
    //             \ -> started_at
    //                              \ -> finished_at
    google.protobuf.Timestamp submitted_at = 14; // Time when the query was queued for execution
    google.protobuf.Timestamp started_at = 2; // Start time of query execution
    google.protobuf.Timestamp finished_at = 3; // Query completition time
    ExecuteMode execute_mode = 4;
    ComputeStatus status = 5;
    int64 last_job_query_revision = 6;
    string last_job_id = 7;
    google.protobuf.Timestamp expire_at = 8;
    google.protobuf.Timestamp result_expire_at = 9;
    string started_by = 10;
    oneof action {
        string aborted_by = 11;
        string paused_by = 12;
    }
    // One of the versions of this query has fully saved checkpoint.
    // If this flag is not set streaming disposition mode "from last checkpoint" can't be used.
    bool has_saved_checkpoints = 13;
}

message BriefQuery {
    QueryContent.QueryType type = 1;
    string name = 2 [(Ydb.length).le = 1024];
    QueryMeta meta = 3;
    Acl.Visibility visibility = 4;
    bool automatic = 5;
}

message QueryPlan {
    string json = 1; // No validation because generated on server side
}

message QueryAst {
    string data = 1;
}

message ResultSetMeta {
    repeated Ydb.Column column = 1;
    int64 rows_count = 2 [(Ydb.value) = ">= 0"];
    bool truncated = 3;
}

message Query {
    QueryMeta meta = 1;
    QueryContent content = 2;
    QueryPlan plan = 3;
    repeated Ydb.Issue.IssueMessage issue = 4;
    repeated Ydb.Issue.IssueMessage transient_issue = 5;
    QueryStatistics statistics = 6;
    repeated ResultSetMeta result_set_meta = 7;
    QueryAst ast = 8;
}

message QueryStatistics {
    string json = 1; // No validation because generated on server side
}

// Create a new query
message CreateQueryRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    QueryContent content = 2;
    ExecuteMode execute_mode = 3;
    StreamingDisposition disposition = 4;
    string idempotency_key = 5 [(Ydb.length).le = 1024];
}

message CreateQueryResponse {
    Ydb.Operations.Operation operation = 1; // CreateQueryResult
}

message CreateQueryResult {
    string query_id = 1 [(Ydb.length).le = 1024];
}

enum AutomaticType {
    AUTOMATIC_TYPE_UNSPECIFIED = 0;
    AUTOMATIC = 1;
    NOT_AUTOMATIC = 2;
}

// Getting brief information about queries
message ListQueriesRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string page_token = 2 [(Ydb.length).le = 1024];
    int32 limit = 3 [(Ydb.value) = "[1; 100]"];

    message Filter {
        QueryContent.QueryType query_type = 1;
        repeated QueryMeta.ComputeStatus status = 2 [(Ydb.size).le = 20];
        repeated ExecuteMode mode = 3 [(Ydb.size).le = 20];
        string name = 4 [(Ydb.length).le = 1024]; // queries whose name contains the filter.name substring
        bool created_by_me = 5;
        Acl.Visibility visibility = 6;
        AutomaticType automatic = 7;
    }
    Filter filter = 4;
}

message ListQueriesResponse {
    Ydb.Operations.Operation operation = 1; // ListQueriesResult
}

message ListQueriesResult {
    repeated BriefQuery query = 1;
    string next_page_token = 2 [(Ydb.length).le = 1024];
}

// Getting complete information about the query
message DescribeQueryRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string query_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
}

message DescribeQueryResponse {
    Ydb.Operations.Operation operation = 1; // DescribeQueryResult
}

message DescribeQueryResult {
    Query query = 1;
}

// Getting status of the query
message GetQueryStatusRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string query_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
}

message GetQueryStatusResponse {
    Ydb.Operations.Operation operation = 1; // GetQueryStatusResult
}

message GetQueryStatusResult {
    QueryMeta.ComputeStatus status = 1;
    int64 meta_revision = 2;
}

// Complete removal of query. Recovery of the query after this operation is not possible
message DeleteQueryRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string query_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
    int64 previous_revision = 3 [(Ydb.value) = ">= 0"];
    string idempotency_key = 4 [(Ydb.length).le = 1024];
}

message DeleteQueryResponse {
    Ydb.Operations.Operation operation = 1; // DeleteQueryResult
}

message DeleteQueryResult {
}

// Change query information with launch policy option. All fields must be filled in the request. The query changes completely
message ModifyQueryRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string query_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
    QueryContent content = 3;
    ExecuteMode execute_mode = 4;
    StreamingDisposition disposition = 5;
    StateLoadMode state_load_mode = 6;
    int64 previous_revision = 7 [(Ydb.value) = ">= 0"];
    string idempotency_key = 8 [(Ydb.length).le = 1024];
}

message ModifyQueryResponse {
    Ydb.Operations.Operation operation = 1; // ModifyQueryResult
}

message ModifyQueryResult {
}

// Managing query status (pause, abort, resume, ...)
message ControlQueryRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string query_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
    QueryAction action = 3;
    int64 previous_revision = 4 [(Ydb.value) = ">= 0"];
    string idempotency_key = 5 [(Ydb.length).le = 1024];
}

message ControlQueryResponse {
    Ydb.Operations.Operation operation = 1; // ControlQueryResult
}

message ControlQueryResult {
}

// === Job API ===

message BriefJob {
    CommonMeta meta = 1;
    QueryMeta query_meta = 3;
    string query_name = 9;
    Acl.Visibility visibility = 10;
    bool automatic = 11;
    google.protobuf.Timestamp expire_at = 12;
}

message Job {
    CommonMeta meta = 1;
    string text = 2;
    QueryMeta query_meta = 3;
    QueryPlan plan = 4;
    repeated Ydb.Issue.IssueMessage issue = 5;
    QueryStatistics statistics = 6;
    repeated ResultSetMeta result_set_meta = 7;
    QueryAst ast = 8;
    string query_name = 9;
    Acl acl = 10;
    bool automatic = 11;
    google.protobuf.Timestamp expire_at = 12;
    QueryContent.QuerySyntax syntax = 13;
}

// Information about recent query runs
message ListJobsRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string page_token = 2 [(Ydb.length).le = 1024];
    int32 limit = 3 [(Ydb.value) = "[1; 100]"];
    string query_id = 5; // deprecated

    message Filter {
        string query_id = 1 [(Ydb.length).le = 1024];
        bool created_by_me = 2;
    }
    Filter filter = 4;
}

message ListJobsResponse {
    Ydb.Operations.Operation operation = 1; // ListJobsResult
}

message ListJobsResult {
    repeated BriefJob job = 1;
    string next_page_token = 2 [(Ydb.length).le = 1024];
}

// Getting information about the job
message DescribeJobRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string job_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
}

message DescribeJobResponse {
    Ydb.Operations.Operation operation = 1; // DescribeJobResult
}

message DescribeJobResult {
    Job job = 1;
}

// === Connection API ===

message CurrentIAMTokenAuth {
}

message NoneAuth {
}

message ServiceAccountAuth {
    string id = 1 [(Ydb.length).le = 1024];
}

message IamAuth {
    oneof identity {
        CurrentIAMTokenAuth current_iam = 1;
        ServiceAccountAuth service_account = 2;
        NoneAuth none = 3;
    }
}

message DataStreams {
    string database_id = 1 [(Ydb.length).le = 1024];
    IamAuth auth = 2;

    // for internal usage
    string endpoint = 3 [(Ydb.length).le = 1024];
    string database = 4 [(Ydb.length).le = 1024];
    bool secure = 5;
}

message Monitoring {
    string project = 1 [(Ydb.length).le = 200];
    string cluster = 2 [(Ydb.length).le = 200];
    IamAuth auth = 3;
}

message YdbDatabase {
    string database_id = 1 [(Ydb.length).le = 1024];
    IamAuth auth = 2;

    // for internal usage
    string endpoint = 3 [(Ydb.length).le = 1024];
    string database = 4 [(Ydb.length).le = 1024];
    bool secure = 5;
}

message ClickHouseCluster {
    string database_id = 1 [(Ydb.length).le = 1024];
    string database_name = 8 [(Ydb.length).le = 1024];
    string login = 2 [(Ydb.length).le = 1024, (Ydb.sensitive) = true];
    string password = 3 [(Ydb.length).le = 1024, (Ydb.sensitive) = true];
    IamAuth auth = 4;

    // for internal usage
    string host = 5 [(Ydb.length).le = 1024];
    int32 port = 6 [(Ydb.value) = "[0; 65536]"];
    bool secure = 7;
}

message ObjectStorageConnection {
    string bucket = 1 [(Ydb.length).le = 1024];
    IamAuth auth = 2;
}

message PostgreSQLCluster {
    string database_id = 1 [(Ydb.length).le = 1024];
    string database_name = 8 [(Ydb.length).le = 1024];
    string login = 2 [(Ydb.length).le = 1024, (Ydb.sensitive) = true];
    string password = 3 [(Ydb.length).le = 1024, (Ydb.sensitive) = true];
    string schema = 9 [(Ydb.length).le = 1024];
    IamAuth auth = 4;

    // Just for the sake of simmetry with existing ClickHouse code
    string host = 5 [(Ydb.length).le = 1024];
    int32 port = 6 [(Ydb.value) = "[0; 65536]"];
    bool secure = 7;
}

message ConnectionSetting {
    enum ConnectionType {
        CONNECTION_TYPE_UNSPECIFIED = 0;
        YDB_DATABASE = 1;
        CLICKHOUSE_CLUSTER = 2;
        DATA_STREAMS = 3;
        OBJECT_STORAGE = 4;
        MONITORING = 5;
        POSTGRESQL_CLUSTER = 6;
    }

    oneof connection {
        YdbDatabase ydb_database = 1;
        ClickHouseCluster clickhouse_cluster = 2;
        DataStreams data_streams = 3;
        ObjectStorageConnection object_storage = 4;
        Monitoring monitoring = 5;
        PostgreSQLCluster postgresql_cluster = 6;
    }
}

message ConnectionContent {
    string name = 1 [(Ydb.length).range = {min: 1, max: 1024}];
    ConnectionSetting setting = 2;
    Acl acl = 3;
    string description = 4 [(Ydb.length).le = 10240];
}

message Connection {
    ConnectionContent content = 1;
    CommonMeta meta = 2;
}

// Create a new connection
message CreateConnectionRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    ConnectionContent content = 2;
    string idempotency_key = 3 [(Ydb.length).le = 1024];
}

message CreateConnectionResponse {
    Ydb.Operations.Operation operation = 1; // CreateConnectionResult
}

message CreateConnectionResult {
    string connection_id = 1 [(Ydb.length).range = {min: 1, max: 1024}];
}

// Getting information about connections
message ListConnectionsRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string page_token = 2 [(Ydb.length).le = 1024];
    int32 limit = 3 [(Ydb.value) = "[1; 100]"];

    message Filter {
        string name = 1 [(Ydb.length).le = 1024]; // connections whose name contains the filter.name substring
        bool created_by_me = 2;
        ConnectionSetting.ConnectionType connection_type = 3;
        Acl.Visibility visibility = 4;
    }
    Filter filter = 4;
}

message ListConnectionsResponse {
    Ydb.Operations.Operation operation = 1; // ListConnectionsResult
}

message ListConnectionsResult {
    repeated Connection connection = 1;
    string next_page_token = 2 [(Ydb.length).le = 1024];
}

// Getting information about the connection
message DescribeConnectionRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string connection_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
}

message DescribeConnectionResponse {
    Ydb.Operations.Operation operation = 1; // DescribeConnectionResult
}

message DescribeConnectionResult {
    Connection connection = 1;
}

// Change connection information. All fields must be filled in the request. The connection changes completely
message ModifyConnectionRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string connection_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
    ConnectionContent content = 3;
    int64 previous_revision = 4 [(Ydb.value) = ">= 0"];
    string idempotency_key = 5 [(Ydb.length).le = 1024];
}

message ModifyConnectionResponse {
    Ydb.Operations.Operation operation = 1; // ModifyConnectionResult
}

message ModifyConnectionResult {
}

// Complete removal of connection. Recovery of the connection after this operation is not possible
message DeleteConnectionRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string connection_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
    int64 previous_revision = 3 [(Ydb.value) = ">= 0"];
    string idempotency_key = 4 [(Ydb.length).le = 1024];
}

message DeleteConnectionResponse {
    Ydb.Operations.Operation operation = 1; // DeleteConnectionResult
}

message DeleteConnectionResult {
}

message TestConnectionRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    ConnectionSetting setting = 2;
}

message TestConnectionResponse {
    Ydb.Operations.Operation operation = 1; // TestConnectionResult
}

message TestConnectionResult {
}

// ResultSet API

// Getting the result of the query execution
message GetResultDataRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string query_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
    int32 result_set_index = 3 [(Ydb.value) = ">= 0"];
    int64 offset = 4 [(Ydb.value) = ">= 0"];
    int64 limit = 5 [(Ydb.value) = "[1; 1000]"];
}

message GetResultDataResponse {
    Ydb.Operations.Operation operation = 1; // GetResultDataResult
}

message GetResultDataResult {
    Ydb.ResultSet result_set = 1;
}

// Binding API

message Schema {
    repeated Ydb.Column column = 1 [(Ydb.size).le = 1000];
}

message DataStreamsBinding {
    string stream_name = 1 [(Ydb.length).range = {min: 1, max: 1024}];
    string format = 2 [(Ydb.length).le = 1024];
    string compression = 3 [(Ydb.length).le = 1024];
    Schema schema = 4;
    map<string, string> format_setting = 5 [(Ydb.size).le = 100];
}

message ObjectStorageBinding {
    message Subset {
        string path_pattern = 1 [(Ydb.length).range = {min: 1, max: 1024}];
        string format = 2 [(Ydb.length).le = 1024];
        map<string, string> format_setting = 3 [(Ydb.size).le = 100];
        string compression = 4 [(Ydb.length).le = 1024];
        Schema schema = 5;

        /*
        Partition projection is used to speed up the processing of highly partitioned
        storages and automate the management of partitions. In partition projection, partition values and
        locations are calculated from configuration rather than read from an object storage. Depending on the
        specific characteristics of the query and underlying data, partition projection can significantly
        reduce query execution time if it uses partitioning constraints on partition metadata retrieval. Similar
        functionality is implemented in Athena: https://docs.aws.amazon.com/athena/latest/ug/partition-projection.html
        Only enum, integer and date types are supported for path generation. When using projection, there must
        be at least one element in partitioned_by. This behavior is introduced for symmetric query usage and
        compatibility with Athena behavior.

        Example:
        projection = {
            "projection.enabled" : "true", // used to enable and disable partitioning
            "projection.city.type" : "enum", // to generate the city column, the enum type will be used (enumeration of objects separated by commas)
            "projection.city.values" : "Washington,Roma", // column values city Washington or Roma
            "projection.code.type" : "enum", // to generate the code column, the enum type will be used (enumeration of objects separated by commas)
            "projection.code.values" : "0,1", // column values code 0 or 1
            "storage.location.template" : "/${city}/${code}/${device_id}" // the template to which the generated values will be substituted
        }
        partitioned_by = [ "city", "device_id" ] // a subset of columns that are included in partitioning
        - If storage.location.template and partitioned_by are specified together, then the rule from storage.location.template will be used.
        - If only partitioned_by is specified, then the Hive Metastore format will be used for storage.location.template: "/city=${city}/device_id=${device_id}"
        The list of paths that correspond to described projection and partitioned_by values are:
        "/Washington/0/${device_id}", "/Washington/1/${device_id}", "/Roma/0/${device_id}", "/Roma/1/${device_id}"
        */
        map<string, string> projection = 6;

        /*
        By separating the data, it is possible to limit the amount of data scanned by each query, thereby improving
        performance and reducing costs. Therefore, user data is partition by key (in practice, this is a partition by time).
        The partitioned_by defines the keys on which to partition data. The columns described in partitioned_by
        must be specified in the schema. If projection is not specified, the template will be generated according to
        partitioned_by. Similar functionality is implemented in Athena: https://docs.aws.amazon.com/athena/latest/ug/partitions.html

        Example:
        partitioned_by = [ "city", "code", "device_id" ]
        The corresponding storage.location.template will be as follows:
        "/city=${city}/code=${code}/device_id=${device_id}"
        */
        repeated string partitioned_by = 7;
    }

    repeated Subset subset = 1;
}

message BindingSetting {
    enum BindingType {
        BINDING_TYPE_UNSPECIFIED = 0;
        DATA_STREAMS = 1;
        OBJECT_STORAGE = 2;
    }

    oneof binding {
        DataStreamsBinding data_streams = 1;
        ObjectStorageBinding object_storage = 2;
    }
}

message BriefBinding {
    string name = 1 [(Ydb.length).range = {min: 1, max: 1024}];
    string connection_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
    CommonMeta meta = 3;
    BindingSetting.BindingType type = 4;
    Acl.Visibility visibility = 5;
}

message BindingContent {
    string name = 1 [(Ydb.length).range = {min: 1, max: 1024}];
    string connection_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
    BindingSetting setting = 3;
    Acl acl = 4;
    string description = 5 [(Ydb.length).le = 10240];
}

message Binding {
    BindingContent content = 1;
    CommonMeta meta = 2;
}

// Create a new binding
message CreateBindingRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    BindingContent content = 2;
    string idempotency_key = 3 [(Ydb.length).le = 1024];
}

message CreateBindingResponse {
    Ydb.Operations.Operation operation = 1; // CreateBindingResult
}

message CreateBindingResult {
    string binding_id = 1 [(Ydb.length).range = {min: 1, max: 1024}];
}

// Getting information about bindings
message ListBindingsRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string page_token = 2 [(Ydb.length).le = 1024];
    int32 limit = 3 [(Ydb.value) = "[1; 100]"];

    message Filter {
        string connection_id = 1 [(Ydb.length).le = 1024];
        string name = 2 [(Ydb.length).le = 1024]; // bindings whose name contains the filter.name substring
        bool created_by_me = 3;
        Acl.Visibility visibility = 4;
    }
    Filter filter = 4;
}

message ListBindingsResponse {
    Ydb.Operations.Operation operation = 1; // ListBindingsResult
}

message ListBindingsResult {
    repeated BriefBinding binding = 1;
    string next_page_token = 2 [(Ydb.length).le = 1024];
}

// Getting information about the binding
message DescribeBindingRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string binding_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
}

message DescribeBindingResponse {
    Ydb.Operations.Operation operation = 1; // DescribeBindingResult
}

message DescribeBindingResult {
    Binding binding = 1;
}

// Change binding information. All fields must be filled in the request. The binding changes completely
message ModifyBindingRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string binding_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
    BindingContent content = 3;
    int64 previous_revision = 4 [(Ydb.value) = ">= 0"];
    string idempotency_key = 5 [(Ydb.length).le = 1024];
}

message ModifyBindingResponse {
    Ydb.Operations.Operation operation = 1; // ModifyBindingResult
}

message ModifyBindingResult {
}

// Complete removal of binding. Recovery of the binding after this operation is not possible
message DeleteBindingRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    string binding_id = 2 [(Ydb.length).range = {min: 1, max: 1024}];
    int64 previous_revision = 3 [(Ydb.value) = ">= 0"];
    string idempotency_key = 4 [(Ydb.length).le = 1024];
}

message DeleteBindingResponse {
    Ydb.Operations.Operation operation = 1; // DeleteBindingResult
}

message DeleteBindingResult {
}
