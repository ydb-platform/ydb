syntax = "proto3";
option cc_enable_arenas = true;

package Ydb.LogStore;
option java_package = "com.yandex.ydb.logstore";
option java_outer_classname = "LogStoreProtos";

import "ydb/public/api/protos/ydb_operation.proto";
import "ydb/public/api/protos/ydb_value.proto";
import "ydb/public/api/protos/ydb_scheme.proto";
import "ydb/public/api/protos/ydb_table.proto";
import "google/protobuf/empty.proto";

message Compression {
    enum Codec {
        CODEC_UNSPECIFIED = 0;
        CODEC_PLAIN = 1;
        CODEC_LZ4 = 2;
        CODEC_ZSTD = 3;
    }

    Codec compression_codec = 1;
    int32 compression_level = 2;
}

enum ShardingHashType {
    HASH_TYPE_UNSPECIFIED   = 0x0000;
    HASH_TYPE_MODULO_N      = 0x0001; // hash(sharding_columns) % N
    HASH_TYPE_LOGS_SPECIAL  = 0x0002;
    HASH_TYPE_CONSISTENCY_64= 0x0004;
}

message ColumnMeta {
    string name = 1;
    Type type = 2;
    //Compression compression = 3; Not implemented
}

message Schema {
    repeated ColumnMeta columns = 1;    // Columns (name, type)
    repeated string primary_key = 2;    // List of columns used as primary key
    Compression default_compression = 3; // LZ4 with default compression level if not specified
}

message SchemaPreset {
    string name = 1;
    Schema schema = 2;
}

// Named storage configuration Tier based on
message TierConfig {
    string name = 1;
    Compression compression = 2;
    //string external_storage = 3; Not implemented
}

// A storage layer that implements logic: keep fresh data, evict stale data to the next tier.
message Tier {
    string name = 1; // A link to the TierConfig
    Ydb.Table.TtlSettings eviction = 2; // When to evict data to the next tier (or remove if none)
}

message TieringSettings {
    optional string tiering_id = 2;
}

message CreateLogStoreRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    string path = 2;        // Full path
    uint32 shards_count = 3;
    repeated SchemaPreset schema_presets = 4;
}

message CreateLogStoreResponse {
    Ydb.Operations.Operation operation = 1;
}

message DescribeLogStoreRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    string path = 2;        // Full path
}

message DescribeLogStoreResult {
    Ydb.Scheme.Entry self = 1;  // Description of scheme object

    uint32 shards_count = 2;
    repeated SchemaPreset schema_presets = 3;
    repeated TierConfig tiers = 4;
}

message DescribeLogStoreResponse {
    // Holds DescribeLogStoreResult in case of successful call
    Ydb.Operations.Operation operation = 1;
}

message DropLogStoreRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    string path = 2;        // Full path
}

message DropLogStoreResponse {
    Ydb.Operations.Operation operation = 1;
}

message AlterLogStoreRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    string path = 2;        // Full path

    oneof schema_preset_modification {
        SchemaPreset set_schema_preset = 3;
        string drop_schema_preset = 4;
    }

    oneof tier_modification {
        TierConfig set_tier = 5;
        string drop_tier = 6;
    }
}

message AlterLogStoreResponse {
    Ydb.Operations.Operation operation = 1;
}

message CreateLogTableRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    string path = 2;        // Full path
    oneof schema_specification {
        string schema_preset_name = 3;          // From LogStore
        Schema schema = 4;
    };
    oneof ttl_specification {
        Ydb.Table.TtlSettings ttl_settings = 5;
        TieringSettings tiering_settings = 6;
    };

    // Specifies the desired number of ColumnShards for this table
    uint32 shards_count = 7;
    repeated string sharding_columns = 8;
    ShardingHashType sharding_type = 9;
    uint32 active_shards_count = 10; // optional parameter for HASH_TYPE_LOGS_SPECIAL
}

message CreateLogTableResponse {
    Ydb.Operations.Operation operation = 1;
}

message DescribeLogTableRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    string path = 2;        // Full path
}

message DescribeLogTableResult {
    Ydb.Scheme.Entry self = 1;  // Description of scheme object

    string schema_preset_name = 2;
    Schema schema = 3;
    oneof ttl_specification {
        Ydb.Table.TtlSettings ttl_settings = 5;
        TieringSettings tiering_settings = 4;
    }

    // Specifies the desired number of ColumnShards for this table
    uint32 shards_count = 6;
    repeated string sharding_columns = 7;
    ShardingHashType sharding_type = 8;
    uint32 active_shards_count = 9;
}

message DescribeLogTableResponse {
    // Holds DescribeLogTableResult in case of successful call
    Ydb.Operations.Operation operation = 1;
}

message DropLogTableRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    string path = 2;        // Full path
}

message DropLogTableResponse {
    Ydb.Operations.Operation operation = 1;
}

message AlterLogTableRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    string path = 2;        // Full path

    oneof ttl_action {
        google.protobuf.Empty drop_ttl_settings = 3;
        Ydb.Table.TtlSettings set_ttl_settings = 4;
        TieringSettings set_tiering_settings = 5;
        google.protobuf.Empty drop_tiering_settings = 6;
    }
}

message AlterLogTableResponse {
    Ydb.Operations.Operation operation = 1;
}
