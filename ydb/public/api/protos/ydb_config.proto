syntax = "proto3";
option cc_enable_arenas = true;

package Ydb.Config;

option java_package = "com.yandex.ydb.config.proto";
option java_outer_classname = "ConfigProtos";
option java_multiple_files = true;

import "ydb/public/api/protos/ydb_operation.proto";
import "google/protobuf/empty.proto";

// Main config is "the" main config used for configuring everyting
// For most installations this config is enough, because it
//     allows database administrator to configure all entites:
//     whole cluster, database, specific node(s), etc.
message MainConfigIdentity {}

// Storage config allows administrator separate management of
//      storage/infrastructure part from main/application part
//      it is useful on large clusters, where enumeration of all
//      physical machines takes too much space and make it inconvenient
//      to store and manage this configuration data together with other
message StorageConfigIdentity {}

// Database config allows to manage specific parts of configuration
//         by database administrators themself. It mostly applies to
//         feature flags enabled on particular database
// This type of config is disabled by default and can be enabled
//      in configuration
message DatabaseConfigIdentity {
    string database = 1;
}

// Representation of config metadata.
// Uniquely identifies config.
// Used to describe what config user want to change or receive.
message ConfigIdentity {
    // Current config version
    uint64 version = 1;

    // Identifier of the cluster
    string cluster = 2;

    // Config type with attached identity data specific for particular type
    // List of config types may be extended in future
    oneof type {
        MainConfigIdentity main = 3;
        StorageConfigIdentity storage = 4;
        DatabaseConfigIdentity database = 5;
    }
}

message ReplaceConfigRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    message ConfigBundle {
        optional string main_config = 1;
        optional string storage_config = 2;
    }

    oneof action {
        // Replaces config on cluster.
        // By default awaits config with matching metadata (kind MainConfig, right cluster and version + 1)
        string replace = 2;

        // Replaces storage and/or main configs on cluster in dedicated storage config mode
        // By default awaits either MainConfig or StorageConfig or both with matching metadata
        ConfigBundle replace_with_dedicated_storage_section = 3;

        // Replaces storage and main configs on cluster in single config mode **AND** enables dedicated storage config mode
        // By default awaits MainConfig and StorageConfig with matching metadata
        ConfigBundle replace_enable_dedicated_storage_section = 4;

        // Replaces main config on cluster in single config mode **AND** disables dedicated storage config mode
        // By default awaits MainConfig with matching metadata
        string replace_disable_dedicated_storage_section = 5;
    }

    // Try to apply config(s) without making real changes
    // Exact data returned and checks done are implementation defined
    // Now renders final configs for all labels and makes basic validity checks
    // All errors returned as issues in response
    bool dry_run = 6;

    // Allows to apply config with fields unknown to config parser
    // It is useful when user need to try some new experimental flag, then rollback to previous version
    //    and want to update existing config keeping flag from newer version in config
    // All unknown fields still reported in result as warnings
    bool allow_unknown_fields = 7;

    // Allows to apply config with incorrect metadata
    // Metadata of stored config after this call will be replaced with correct one
    // Exact set of excluded checks is implementation defined, this flag
    //    may ignore additional checks in future
    // BEWARE: with this flag set user can apply config on wrong cluster
    //         or overwrite other users changes in case of race
    // Behaviour identical to deprecated DynConfig.SetConfig() call
    bool bypass_checks = 8;
}

message ReplaceConfigResponse {
    Ydb.Operations.Operation operation = 1;
}

message ReplaceConfigResult {}

message FetchConfigRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    // Settings for mode "all"
    // In this mode server will return all configs to user
    // There are additional settings allowing to transform configs in server answer
    message FetchModeAll {
        // Use this option to somehow transform main config
        // Currently used to automatically derive detached StorageSection from MainConfig
        //     or vice versa
        oneof config_transform {
            // Optionally may be set to explicitly tell "do not transform anything"
            google.protobuf.Empty none = 1;

            // Fetch will return MainConfig and StorageConfig derived from MainConfig
            //    by detaching storage config
            // (MainConfig) -> (MainConfig*, StorageConfig)
            // MainConfig with asterisk means MainConfig with excluded storage-related sections
            google.protobuf.Empty detach_storage_config_section = 2;

            // Fetch will return MainConfig derived from MainConfig and StorageConfig
            //    by attaching storage config to main config
            // (MainConfig*, StorageConfig) -> (MainConfig)
            // MainConfig with asterisk means MainConfig with excluded storage-related sections
            google.protobuf.Empty attach_storage_config_section = 3;
        }
    }

    // Settings for mode "by identity"
    // In this mode server will return all configs with identites which are exactly match to identites in request
    // If there is no matching identity on server the identity will be skipped
    message FetchModeByIdentity {
        // List of configs to fetch
        repeated ConfigIdentity identity = 1;
    }

    // Depending on mode Fetch will return different set of configs
    // List of modes may be extended in future
    oneof mode {
        // Fetch all configs from cluster
        FetchModeAll all = 2;

        // Fetch all configs with matching identities
        FetchModeByIdentity target = 3;
    }
}

message FetchConfigResponse {
    Ydb.Operations.Operation operation = 1;
}

// Config with attached identity
// Allows to operate on on configs without necessary parsing config metadta field
// For example filtering out fetch result based on some specific rules
message ConfigEntry {
    ConfigIdentity identity = 1;
    string config = 2;
}

message FetchConfigResult {
    repeated ConfigEntry config = 1;
}

message BootstrapClusterRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    // This field used to make this request indempotent
    // Must be set to arbitrary **unique** string
    string self_assembly_uuid = 2;
}

message BootstrapClusterResponse {
    Ydb.Operations.Operation operation = 1;
}

message BootstrapClusterResult {}
