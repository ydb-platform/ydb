syntax = "proto3";
option cc_enable_arenas = true;

import "ydb/public/api/protos/annotations/validation.proto";
import "ydb/public/api/protos/ydb_export.proto";
import "ydb/public/api/protos/ydb_operation.proto";

import "google/protobuf/timestamp.proto";

package Ydb.Import;
option java_package = "com.yandex.ydb.import_";

/// Common
message ImportProgress {
    enum Progress {
        PROGRESS_UNSPECIFIED = 0;
        PROGRESS_PREPARING = 1;
        PROGRESS_TRANSFER_DATA = 2;
        PROGRESS_BUILD_INDEXES = 3;
        PROGRESS_DONE = 4;
        PROGRESS_CANCELLATION = 5;
        PROGRESS_CANCELLED = 6;
        PROGRESS_CREATE_CHANGEFEEDS = 7;
    }
}

message ImportItemProgress {
    uint32 parts_total = 1;
    uint32 parts_completed = 2;
    google.protobuf.Timestamp start_time = 3;
    google.protobuf.Timestamp end_time = 4;
}

/// S3
message ImportFromS3Settings {
    enum Scheme {
        UNSPECIFIED = 0;
        HTTP = 1;
        HTTPS = 2;
    }

    message Item {
        oneof Source {
            /* YDB database objects in S3 are stored in one or more S3 objects (see ydb_export.proto).
            The S3 object name begins with a prefix, followed by:
                * '/data_PartNumber', where 'PartNumber' represents the index of the part, starting at zero;
                * '/scheme.pb' - object with information about scheme, indexes, etc;
                * '/permissions.pb' - object with information about ACL and owner.
            */

            // The S3 object prefix can be either provided explicitly
            string source_prefix = 1;

            // Or, if the export contains the database objects list, you may specify the database object name, and the S3 prefix will be looked up in the database objects list by the import procedure
            string source_path = 3;
        }

        // Database path to a database object to import the item to
        // Resolved relative to the default destination_path
        // May be omitted if the item's source_path is specified, in this case will be taken equal to it
        string destination_path = 2;
    }

    string endpoint = 1 [(required) = true];
    Scheme scheme = 2; // HTTPS if not specified
    string bucket = 3 [(required) = true];
    string access_key = 4 [(required) = true];
    string secret_key = 5 [(required) = true];
    repeated Item items = 6; // Empty collection means import of all export objects
    string description = 7 [(length).le = 128];
    uint32 number_of_retries = 8;

    // Region to use in requests
    string region = 9;

    // disables virtual hosting style buckets aws s3 feature
    // it changes the way bucket appended to url. e.g. https//bucket_name.example.com/ vs https://example.com/bucket_name
    // details: https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html
    // it is especially useful for custom s3 implementations
    bool disable_virtual_addressing = 10;

    // Prevent importing of ACL and owner. If true, objects are created with empty ACL
    // and their owner will be the user who started the import.
    bool no_acl = 11;

    // Skip checksum validation during import
    bool skip_checksum_validation = 12;

    // A default path prefix for all items,
    // determines that the import works with the list of objects in the SchemaMapping file.
    // Must be provided to import an encrypted export.
    string source_prefix = 13;

    // Destination path to restore paths inside database
    // Default value is database root
    string destination_path = 14;

    // Settings how data is encrypted.
    // If encryption_settings field is not specified,
    // the resulting data is considered not encrypted.
    Ydb.Export.EncryptionSettings encryption_settings = 15;
}

message ImportFromS3Result {
}

message ImportFromS3Metadata {
    ImportFromS3Settings settings = 1;
    ImportProgress.Progress progress = 2;
    repeated ImportItemProgress items_progress = 3;
}

message ImportFromS3Request {
    Ydb.Operations.OperationParams operation_params = 1;
    ImportFromS3Settings settings = 2 [(required) = true];
}

message ImportFromS3Response {
    // operation.result = ImportFromS3Result
    // operation.metadata = ImportFromS3Metadata
    Ydb.Operations.Operation operation = 1;
}

/// Data
message YdbDumpFormat {
    repeated string columns = 1;
}

message ImportDataResult {
}

message ImportDataRequest {
    Ydb.Operations.OperationParams operation_params = 1;
    // Full path to table
    string path = 2;
    // Data serialized in the selected format. Restrictions:
    // - sorted by primary key;
    // - all keys must be from the same partition;
    // - table has no global secondary indexes;
    // - size of serialized data is limited to 16 MB.
    bytes data = 3 [(length).le = 16777216];
    oneof format {
        // Result of `ydb tools dump`
        YdbDumpFormat ydb_dump = 4;
    }
}

message ImportDataResponse {
    // operation.result = ImportDataResult
    Ydb.Operations.Operation operation = 1;
}
