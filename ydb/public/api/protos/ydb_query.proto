syntax = "proto3";
option cc_enable_arenas = true;

package Ydb.Query;
option java_package = "com.yandex.ydb.query";
option java_outer_classname = "QueryProtos";

import "google/protobuf/duration.proto";

import "ydb/public/api/protos/annotations/validation.proto";
import "ydb/public/api/protos/ydb_issue_message.proto";
import "ydb/public/api/protos/ydb_operation.proto";
import "ydb/public/api/protos/ydb_query_stats.proto";
import "ydb/public/api/protos/ydb_status_codes.proto";
import "ydb/public/api/protos/ydb_value.proto";

message CreateSessionRequest {
}

message CreateSessionResponse {
    StatusIds.StatusCode status = 1;
    repeated Ydb.Issue.IssueMessage issues = 2;

    // Identifier of created session
    string session_id = 3 [(Ydb.length).le = 1024];

    // Identifier node where session was created
    int64 node_id = 4 [(Ydb.value) = ">= 0"];
}

message DeleteSessionRequest {
    // Identifier of session to delete (required)
    string session_id = 1 [(Ydb.length).le = 1024];
}

message DeleteSessionResponse {
    StatusIds.StatusCode status = 1;
    repeated Ydb.Issue.IssueMessage issues = 2;
}

message AttachSessionRequest {
    // Identifier of session to attach (required)
    string session_id = 1 [(Ydb.length).le = 1024];
}

message SessionState {
    StatusIds.StatusCode status = 1;
    repeated Ydb.Issue.IssueMessage issues = 2;
}

message SerializableModeSettings {
}

message OnlineModeSettings {
    bool allow_inconsistent_reads = 1;
}

message StaleModeSettings {
}


message SnapshotModeSettings {
}


message TransactionSettings {
    oneof tx_mode {
        SerializableModeSettings serializable_read_write = 1;
        OnlineModeSettings online_read_only = 2;
        StaleModeSettings stale_read_only = 3;
        SnapshotModeSettings snapshot_read_only = 4;
    }
}

message TransactionControl {
    oneof tx_selector {
        string tx_id = 1 [(Ydb.length).le = 1024];
        TransactionSettings begin_tx = 2;
    }

    bool commit_tx = 10;
}

message BeginTransactionRequest {
    // Session identifier (required)
    string session_id = 1 [(Ydb.length).le = 1024];
    TransactionSettings tx_settings = 2;
}

message TransactionMeta {
    // Transaction identifier
    string id = 1 [(Ydb.length).le = 1024];
}

message BeginTransactionResponse {
    StatusIds.StatusCode status = 1;
    repeated Ydb.Issue.IssueMessage issues = 2;

    TransactionMeta tx_meta = 3;
}

message CommitTransactionRequest {
    // Session identifier (required)
    string session_id = 1 [(Ydb.length).le = 1024];
    // Transaction identifier (required)
    string tx_id = 2 [(Ydb.length).le = 1024];
}

message CommitTransactionResponse {
    StatusIds.StatusCode status = 1;
    repeated Ydb.Issue.IssueMessage issues = 2;
}

message RollbackTransactionRequest {
    // Session identifier (required)
    string session_id = 1 [(Ydb.length).le = 1024];
    // Transaction identifier (required)
    string tx_id = 2 [(Ydb.length).le = 1024];
}

message RollbackTransactionResponse {
    StatusIds.StatusCode status = 1;
    repeated Ydb.Issue.IssueMessage issues = 2;
}

enum Syntax {
    SYNTAX_UNSPECIFIED = 0;
    SYNTAX_YQL_V1 = 1; // YQL
    SYNTAX_PG = 2; // PostgresQL
}

message QueryContent {
    Syntax syntax = 1;
    string text = 2;
}

enum ExecMode {
    EXEC_MODE_UNSPECIFIED = 0;
    EXEC_MODE_PARSE = 10;
    EXEC_MODE_VALIDATE = 20;
    EXEC_MODE_EXPLAIN = 30;
    reserved 40; // EXEC_MODE_PREPARE
    EXEC_MODE_EXECUTE = 50;
}

enum StatsMode {
    STATS_MODE_UNSPECIFIED = 0;
    STATS_MODE_NONE = 10;       // Stats collection is disabled
    STATS_MODE_BASIC = 20;      // Aggregated stats of reads, updates and deletes per table
    STATS_MODE_FULL = 30;       // Add execution stats and plan on top of STATS_MODE_BASIC
    STATS_MODE_PROFILE = 40;    // Detailed execution stats including stats for individual tasks and channels
}

message ExecuteQueryRequest {
    // Session identifier (required)
    string session_id = 1 [(Ydb.length).le = 1024];
    ExecMode exec_mode = 2;
    TransactionControl tx_control = 3;

    oneof query {
        QueryContent query_content = 4;
    }

    map<string, TypedValue> parameters = 6;
    StatsMode stats_mode = 7;

    // For queries with multiple result sets, some of them may be computed concurrently.
    // If true, parts of different results sets may be interleaved in response stream.
    bool concurrent_result_sets = 8;
}

message ResultSetMeta {
    repeated Ydb.Column columns = 1;

    // TODO: Remove.
    bool truncated = 2;
}

message ExecuteQueryResponsePart {
    StatusIds.StatusCode status = 1;
    repeated Ydb.Issue.IssueMessage issues = 2;

    // Index of current result set
    int64 result_set_index = 3 [(Ydb.value) = ">= 0"];
    // Result set part
    Ydb.ResultSet result_set = 4;

    reserved 5; // tx_meta
    reserved 6; // result_sets_meta

    // Execution statistics (last part only)
    Ydb.TableStats.QueryStats exec_stats = 7;
}

message VersionedScriptId {
    // Script id
    string id = 1 [(Ydb.length).le = 1024];

    // Script revision.
    // If specified in method parameters, the real script revision
    // before modification will be compared with this revision
    // and request will be cancelled if they don't match.
    int64 revision = 2 [(Ydb.value) = ">= 0"];
}

message ExecuteScriptRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    // Session identifier. If empty, implicit session is created for script execution.
    string session_id = 2 [(Ydb.length).le = 1024];
    ExecMode exec_mode = 3;

    oneof script {
        QueryContent script_content = 4;
        VersionedScriptId script_id = 5;
    }

    map<string, TypedValue> parameters = 6;

    bool persistent = 7; // TODO: Persistent execution / persistent results?
    string execution_name = 8 [(Ydb.length).le = 1024];
    StatsMode stats_mode = 9;
    map<string, string> attributes = 10 [(map_key).length.range = {min: 1, max: 100}, (length).range = {min: 1, max: 4096}];

    // After script execution operation finishes, TTL will start counting.
    // After this TTL the results will be removed from database.
    google.protobuf.Duration results_ttl = 11;
}

enum ExecStatus {
    EXEC_STATUS_UNSPECIFIED = 0;
    EXEC_STATUS_STARTING = 10;
    EXEC_STATUS_ABORTED = 20;
    EXEC_STATUS_CANCELLED = 30;
    EXEC_STATUS_COMPLETED = 40;
    EXEC_STATUS_FAILED = 50;
}

message ExecuteScriptMetadata {
    string execution_id = 1 [(Ydb.length).le = 1024];
    ExecStatus exec_status = 2;

    QueryContent script_content = 3;
    VersionedScriptId script_id = 4;

    map<string, string> attributes = 5 [(map_key).length.range = {min: 1, max: 100}, (length).range = {min: 1, max: 4096}];
    repeated ResultSetMeta result_sets_meta = 6;

    ExecMode exec_mode = 7;
    // Execution statistics
    Ydb.TableStats.QueryStats exec_stats = 8;
}

message FetchScriptResultsRequest {
    oneof execution {
        string execution_id = 1 [(Ydb.length).le = 1024];
        string operation_id = 5 [(Ydb.length).le = 1024];
    }

    int64 result_set_id = 6;

    string fetch_token = 2 [(Ydb.length).le = 1024];
    int64 rows_limit = 4 [(Ydb.value) = ">= 0"];
}

message FetchScriptResultsResponse {
    StatusIds.StatusCode status = 1;
    repeated Ydb.Issue.IssueMessage issues = 2;

    int64 result_set_index = 3 [(Ydb.value) = ">= 0"];
    Ydb.ResultSet result_set = 4;

    string next_fetch_token = 5 [(Ydb.length).le = 1024];
}

message Script {
    VersionedScriptId script_id = 1;
    QueryContent script_content = 2;
}

message SaveScriptRequest {
    VersionedScriptId script_id = 1; // If specified, set new content to existing script
    QueryContent script_content = 2;
}

message SaveScriptResponse {
    StatusIds.StatusCode status = 1;
    repeated Ydb.Issue.IssueMessage issues = 2;

    VersionedScriptId script_id = 3;
}

message ListScriptsRequest {
    string page_token = 1 [(Ydb.length).le = 1024];
    int64 page_size = 2 [(Ydb.value) = ">= 0"];
}

message ListScriptsResponse {
    StatusIds.StatusCode status = 1;
    repeated Ydb.Issue.IssueMessage issues = 2;

    repeated Script scripts = 3;
    string next_page_token = 4 [(Ydb.length).le = 1024];
}

message DeleteScriptRequest {
    VersionedScriptId script_id = 1;
}

message DeleteScriptResponse {
    StatusIds.StatusCode status = 1;
    repeated Ydb.Issue.IssueMessage issues = 2;
}
