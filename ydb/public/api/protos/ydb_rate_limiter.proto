syntax = "proto3";
option cc_enable_arenas = true;

package Ydb.RateLimiter;

option java_package = "com.yandex.ydb.rate_limiter";
option java_outer_classname = "RateLimiterProtos";
option java_multiple_files = true;

import "ydb/public/api/protos/annotations/validation.proto";
import "ydb/public/api/protos/ydb_operation.proto";

import "google/protobuf/struct.proto";

//
// Rate Limiter control API.
//

//
// Resource properties.
//

message MeteringConfig {
    // Meter consumed resources and send billing metrics.
    // Default value is false (not inherited).
    bool enabled = 1;

    // Period to report consumption history from clients to kesus
    // Default value is inherited from parent or equals 5000 ms for root.
    uint64 report_period_ms = 2;

    // Consumption history period that is sent in one message to metering actor.
    // Default value is inherited from parent or equals 1000 ms for root.
    uint64 meter_period_ms = 3;

    // Time window to collect data from every client.
    // Any client metering message that is `collect_period` late is discarded (not metered or billed).
    // Default value is inherited from parent or equals 30 seconds for root.
    uint64 collect_period_sec = 4;

    // Provisioned consumption limit in units per second.
    // Effective value is limited by corresponding `max_units_per_second`.
    // Default value is 0 (not inherited).
    double provisioned_units_per_second = 5;

    // Provisioned allowed burst equals `provisioned_coefficient * provisioned_units_per_second` units.
    // Effective value is limited by corresponding PrefetchCoefficient.
    // Default value is inherited from parent or equals 60 for root.
    double provisioned_coefficient = 6;

    // On-demand allowed burst equals `overshoot_coefficient * prefetch_coefficient * max_units_per_second` units.
    // Should be greater or equal to 1.0
    // Default value is inherited from parent or equals 1.1 for root
    double overshoot_coefficient = 7;

    // Billing metric description.
    message Metric {
        // Send this metric to billing.
        // Default value is false (not inherited).
        bool enabled = 1;

        // Billing metric period (aligned to hour boundary).
        // Default value is inherited from parent or equals 60 seconds for root.
        uint64 billing_period_sec = 2;

        // Billing metric JSON fields (inherited from parent if not set)
        google.protobuf.Struct metric_fields = 10;
    }

    // Consumption within provisioned limit.
    // Informative metric that should be sent to billing (not billed).
    Metric provisioned = 8;

    // Consumption that exceeds provisioned limit is billed as on-demand.
    Metric on_demand = 9;

    // Consumption that exceeds even on-demand limit.
    // Normally it is free and should not be billed.
    Metric overshoot = 10;
}

message ReplicatedBucketSettings {
    // Interval between syncs from kesus and between consumption reports in Ms
    // Default value equals 5000 ms and not inherited
    optional uint64 report_interval_ms = 1 [(Ydb.value) = "> 0"];
}

// Settings for hierarchical deficit round robin (HDRR) algorithm.
message HierarchicalDrrSettings {
    // Resource consumption speed limit.
    // Value is required for root resource.
    // 0 is equivalent to not set.
    // Must be nonnegative.
    double max_units_per_second = 1;

    // Maximum burst size of resource consumption across the whole cluster
    // divided by max_units_per_second.
    // Default value is 1.
    // This means that maximum burst size might be equal to max_units_per_second.
    // 0 is equivalent to not set.
    // Must be nonnegative.
    double max_burst_size_coefficient = 2;

    // Prefetch in local bucket up to prefetch_coefficient*max_units_per_second units (full size).
    // Default value is inherited from parent or 0.2 for root.
    // Disables prefetching if any negative value is set
    // (It is useful to avoid bursts in case of large number of local buckets).
    double prefetch_coefficient = 3;

    // Prefetching starts if there is less than prefetch_watermark fraction of full local bucket left.
    // Default value is inherited from parent or 0.75 for root.
    // Must be nonnegative and less than or equal to 1.
    double prefetch_watermark = 4;

    // NOTE: This API is experimental
    // Prevents bucket from going too deep in negative values. If somebody reports value that will exceed
    // this limit the final amount in bucket will be equal to this limit
    // Should be negative value
    // Unset means no limit
    optional double immediately_fill_up_to = 5 [(Ydb.value) = "< 0"];

    // NOTE: This API is experimental
    // Behavior of leafs in tree
    // Not inherited
    oneof leaf_behavior {
        // Make leafs behave as single bucket replicated from kesus
        ReplicatedBucketSettings replicated_bucket = 6;
    }
}

// Rate limiter resource description.
message Resource {
    // Resource path. Elements are separated by slash.
    // The first symbol is not slash.
    // The first element is root resource name.
    // Resource path is the path of resource inside coordination node.
    string resource_path = 1;

    oneof type {
        // Settings for Hierarchical DRR algorithm.
        HierarchicalDrrSettings hierarchical_drr = 2;
    }

    MeteringConfig metering_config = 3;
}

//
// CreateResource method.
//

message CreateResourceRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    // Path of a coordination node.
    string coordination_node_path = 2;

    // Resource properties.
    Resource resource = 3;
}

message CreateResourceResponse {
    // Holds CreateResourceResult in case of successful call.
    Ydb.Operations.Operation operation = 1;
}

message CreateResourceResult {
}

//
// AlterResource method.
//

message AlterResourceRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    // Path of a coordination node.
    string coordination_node_path = 2;

    // New resource properties.
    Resource resource = 3;
}

message AlterResourceResponse {
    // Holds AlterResourceResult in case of successful call.
    Ydb.Operations.Operation operation = 1;
}

message AlterResourceResult {
}

//
// DropResource method.
//

message DropResourceRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    // Path of a coordination node.
    string coordination_node_path = 2;

    // Path of resource inside a coordination node.
    string resource_path = 3;
}

message DropResourceResponse {
    // Holds DropResourceResult in case of successful call.
    Ydb.Operations.Operation operation = 1;
}

message DropResourceResult {
}

//
// ListResources method.
//

message ListResourcesRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    // Path of a coordination node.
    string coordination_node_path = 2;

    // Path of resource inside a coordination node.
    // May be empty.
    // In that case all root resources will be listed.
    string resource_path = 3;

    // List resources recursively.
    bool recursive = 4;
}

message ListResourcesResponse {
    // Holds ListResourcesResult in case of successful call.
    Ydb.Operations.Operation operation = 1;
}

message ListResourcesResult {
    repeated string resource_paths = 1;
}

//
// DescribeResource method.
//

message DescribeResourceRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    // Path of a coordination node.
    string coordination_node_path = 2;

    // Path of resource inside a coordination node.
    string resource_path = 3;
}

message DescribeResourceResponse {
    // Holds DescribeResourceResult in case of successful call.
    Ydb.Operations.Operation operation = 1;
}

message DescribeResourceResult {
    Resource resource = 1;
}

//
// AcquireResource method.
//

message AcquireResourceRequest {
    Ydb.Operations.OperationParams operation_params = 1;

    // Path of a coordination node.
    string coordination_node_path = 2;

    // Path of resource inside a coordination node.
    string resource_path = 3;

    oneof units {
        // Request resource's units for usage.
        uint64 required = 4;

        // Actually used resource's units by client.
        uint64 used = 5;
    }
}

message AcquireResourceResponse {
    // Holds AcquireResourceResult in case of successful call.
    Ydb.Operations.Operation operation = 1;
}

message AcquireResourceResult {
}
