--
-- JOIN
-- Test JOIN clauses
--

-- Skipped tests in this suite
-- statement skipped in subquery : (Can't do subquery after in predicate)
-- statement skipped Natural join : (Natural join is not supported yet)
-- statement skipped subquery in where
-- statement skipped conjunction of predicates


statement ok
CREATE TABLE tenk1 (
 unique1 int32,
 unique2 int32,
 two int32,
 four int32,
 ten int32,
 twenty int32,
 hundred int32,
 thousand int32,
 twothousand int32,
 fivethous int32,
 tenthous int32,
 odd int32,
 even int32,
 stringu1 string,
 stringu2 string,
 string4 string,
 PRIMARY KEY (unique1, unique2)
);

statement import table data
insert into tenk1 (unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4) values postgres/data/tenk.data

statement ok
CREATE TABLE int4_tbl(f1 int32, primary key(f1));


statement ok
INSERT INTO int4_tbl(f1) VALUES (0);

statement ok
INSERT INTO int4_tbl(f1) VALUES (123456);

statement ok
INSERT INTO int4_tbl(f1) VALUES (-123456);

statement ok
INSERT INTO int4_tbl(f1) VALUES (2147483647);

statement ok
INSERT INTO int4_tbl(f1) VALUES (-2147483647);

statement ok
CREATE TABLE int8_tbl(q1 int64, q2 int64, primary key(q1, q2));


statement ok
INSERT INTO int8_tbl (q1, q2) VALUES(123, 456);

statement ok
INSERT INTO int8_tbl (q1, q2) VALUES(123, 4567890123456789);

statement ok
INSERT INTO int8_tbl (q1, q2) VALUES(4567890123456789, 123);

statement ok
INSERT INTO int8_tbl (q1, q2) VALUES(4567890123456789, 4567890123456789);

statement ok
INSERT INTO int8_tbl (q1, q2) VALUES(4567890123456789, -4567890123456789);

--
-- regression test: check for bug with propagation of implied equality
-- to outside an IN
--

statement skipped in subquery
select count(*) from tenk1 a where unique1 in
  (select unique1 from tenk1 b join tenk1 c using (unique1)
   where b.unique2 = 42);
-------
 count
-------
 1

--
-- regression test: check for failure to generate a plan with multiple
-- degenerate IN clauses
--

statement skipped in subquery
select count(*) from tenk1 x where
  x.unique1 in (select a.f1 from int4_tbl a,float8_tbl b where a.f1=b.f1) and
  x.unique1 = 0 and
  x.unique1 in (select aa.f1 from int4_tbl aa,float8_tbl bb where aa.f1=bb.f1);
-------
 count
-------
 1

--
-- regression test: check handling of empty-FROM subquery underneath outer join
--

statement query
select i1.q1 as i1q1, i1.q2 as i1q2, i2.q1 as i2q1, i2.q2 as i2q2, i2.x as i2x from int8_tbl as i1 left join (
  select q1, q2, x from int8_tbl as i2 join
  (select 123 as x) as ss on i2.q1 = ss.x) as i2
on i1.q2 = i2.q2
order by i1q1, i1q2


--
-- regression test: check a case where we formerly missed including an EC
-- enforcement clause because it was expected to be handled at scan level
--

statement query
select a.f1 as af1, b.f1 as bf1, t.thousand as tthousand, t.tenthous as ttenthous from
  tenk1 as t cross join
  (select sum(f1)+1 as f1 from int4_tbl as i4a) as a cross join
  (select sum(f1) as f1 from int4_tbl as i4b) as b
where b.f1 = t.thousand and a.f1 = b.f1 and (a.f1+b.f1+999) = t.tenthous;



statement query
select count(*) as count from tenk1 as a join tenk1 as b
  on a.hundred = b.thousand
where (b.fivethous % 10) < 10;


--
-- regression test for improper extraction of OR indexqual conditions
-- (as seen in early 8.3.x releases)
--

statement query
select a.unique2 as a_unique2, a.ten as a_ten, b.tenthous as b_tenthous, b.unique2 as b_unique2, b.hundred as b_hundred
from tenk1 as a left join tenk1 as b on a.unique2 = b.tenthous
where a.unique1 = 42 and
      ((b.unique2 is null and a.ten = 2) or b.hundred = 3);

--
-- test case where a PlaceHolderVar is used as a nestloop parameter
-- needs a fix: CBO generates a different plan that is valid, however rule based optimizer breaks: https://github.com/ydb-platform/ydb/issues/6371
--

statement query
PRAGMA ydb.CostBasedOptimizationLevel='0';
SELECT qq, unique1
FROM (
 select * from
  ( SELECT COALESCE(q1, 0) AS qq FROM int8_tbl as a ) AS ss1
  FULL OUTER JOIN
  ( SELECT COALESCE(q2, -1) AS qq FROM int8_tbl as b ) AS ss2
  USING (qq)
) as qr
INNER JOIN tenk1 as c ON qr.qq = c.unique2
order by qq


--
-- test case where a PlaceHolderVar is propagated into a subquery
--

statement skipped subquery in where
select * from
  int8_tbl t1 left join
  (select q1 as x, 42 as y from int8_tbl t2) ss
  on t1.q2 = ss.x
where
  1 = (select 1 from int8_tbl t3 where ss.y is not null limit 1)
order by 1,2;
-------------------------------------------------------------
 q1               | q2               | x                | y
------------------+------------------+------------------+----
 123              | 4567890123456789 | 4567890123456789 | 42
 123              | 4567890123456789 | 4567890123456789 | 42
 123              | 4567890123456789 | 4567890123456789 | 42
 4567890123456789 | 123              | 123              | 42
 4567890123456789 | 123              | 123              | 42
 4567890123456789 | 4567890123456789 | 4567890123456789 | 42
 4567890123456789 | 4567890123456789 | 4567890123456789 | 42
 4567890123456789 | 4567890123456789 | 4567890123456789 | 42

--
-- test the corner cases FULL JOIN ON TRUE and FULL JOIN ON FALSE
--

--
-- test a corner case in which we shouldn't apply the star-schema optimization
--

statement ok
create table ononequery1(
  x1 int,
  x2 int,
  primary key(x1, x2)
);
create table ononequery2(
  y1 int,
  y2 int,
  primary key(y1, y2)
);


statement ok
insert into ononequery1 (x1, x2) values (1, 0);

statement ok
insert into ononequery2 (y1, y2) values (3, 1);

statement query
select t1.unique2 as unique2, t1.stringu1 as stringu1, t2.unique1 as unique1, t2.stringu2 as stringu2 from
  tenk1 as t1
  inner join (
    select * from int4_tbl as i1
    left join (select v1.x2 as x2, v2.y1 as y1, 11 AS d1
               from ononequery1 as v1
               left join ononequery2 as v2
               on v1.x1 = v2.y2) as subq1
    on (i1.f1 = subq1.x2)
  ) as subq1
  on (t1.unique2 = subq1.d1)
  left join tenk1 as t2
  on (subq1.y1 = t2.unique1)
where t1.unique2 < 42 and t1.stringu1 > t2.stringu2;

statement skipped conjunction of predicates
select * from tenk1 a join tenk1 b on
  (a.unique1 = 1 and b.unique1 = 2) or (a.unique2 = 3 and b.hundred = 4);

statement skipped conjunction of predicates
select * from tenk1 a join tenk1 b on
  (a.unique1 = 1 and b.unique1 = 2) or (a.unique2 = 3 and b.ten = 4);

statement skipped conjunction of predicates
select * from tenk1 a join tenk1 b on
  (a.unique1 = 1 and b.unique1 = 2) or
  ((a.unique2 = 3 or a.unique2 = 7) and b.hundred = 4);

--
-- test placement of movable quals in a parameterized join tree
--

statement query
select count(*) as cnt from tenk1 as t1 left join
  (select t2.hundred as hundred, t3.ten as ten from tenk1 as t2 join tenk1 as t3 on t2.thousand = t3.unique2) as subq
  on t1.hundred = subq.hundred and t1.ten = subq.ten
where t1.unique1 = 1;

statement query
select count(*) as cnt from tenk1 as t1 left join
  (
      select t2.hundred as hundred, t2.ten as t2ten, t3.ten as t3ten
      from tenk1 as t2 join tenk1 as t3 on t2.thousand = t3.unique2
  ) as qr
on t1.hundred = qr.hundred and t1.ten = qr.t3ten - qr.t2ten;

statement skipped conjunction of predicates
select b.unique1 from
  tenk1 a join tenk1 b on a.unique1 = b.unique2
  left join tenk1 c on b.unique1 = 42 and c.thousand = a.thousand
  join int4_tbl i1 on b.thousand = f1
  right join int4_tbl i2 on i2.f1 = b.tenthous
  order by 1;
---------
 unique1
---------
 0

statement query
select unique1, q1, fault from
(
  select unique1, q1, coalesce(unique1, -1) + q1 as fault
  from int8_tbl left join tenk1 on (int8_tbl.q2 = tenk1.unique2)
) as ss
where fault = 122
order by fault;

--
-- test handling of potential equivalence clauses above outer joins
--

statement query
select q1, unique2, thousand, hundred
  from int8_tbl as a left join tenk1 as b on a.q1 = b.unique2
  where coalesce(thousand,123) = q1 and q1 = coalesce(hundred,123);

statement query
select f1, unique2, case when unique2 is null then f1 else 0 end
  from int4_tbl as a left join tenk1 as b on a.f1 = b.unique2
  where (case when unique2 is null then f1 else 0 end) = 0;

--
-- another case with equivalence clauses above outer joins (bug #8591)
--

statement query
select
  b.unique1 as unique1, coalesce(b.b_twothousand, b.a_twothousand) as coalesce
from (
   select b.twothousand as b_twothousand, a.twothousand as a_twothousand, a.unique1 as unique1, a.unique2 as unique2
   from tenk1 as a left join tenk1 as b on b.thousand = a.unique1
) as b
left join tenk1 as c on c.unique2 = coalesce(b.b_twothousand, b.a_twothousand)
where b.unique2 < 10 and coalesce(b.b_twothousand, b.a_twothousand) = 44;

--
-- check handling of join aliases when flattening multiple levels of subquery
--

statement query
select foo1.join_key as foo1_id, foo3.join_key AS foo3_id, bug_field from
  (select 0 as join_key union all select 1 as join_key) as foo1
left join
  (select foo2.join_key as join_key, bug_field from
    (select ss1.join_key, ss1.bug_field from
      (select f1 as join_key, 666 as bug_field from int4_tbl as i1) as ss1
    ) as foo2
   left join
    (select unique2 as join_key from tenk1 as i2) as ss2
   on foo2.join_key = ss2.join_key
  ) as foo3
using (join_key);


--
-- test successful handling of full join underneath left join (bug #14105)
--

statement query
select xx.id as id, unique1, unique2, two, four, ten,  twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4 from
  (select 1 as id) as xx
  left join
    (select * from tenk1 as a1 full join (select 1 as id) as yy on (a1.unique1 = yy.id)) as yy
  on (xx.id = coalesce(yy.id));

--
-- test ability to push constants through outer join clauses
--

statement query
select even, ten from int4_tbl as a left join tenk1 as b on a.f1 = b.unique2 where f1 = 0;

statement query
select count(*) as cnt from tenk1 as a full join tenk1 as b using(unique2) where b.unique2 = 42;


