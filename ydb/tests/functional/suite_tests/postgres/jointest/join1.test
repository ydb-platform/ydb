statement ok
CREATE TABLE J1_TBL (
  i integer,
  j integer,
  t string,
  primary key(i, j, t)
);

statement ok
CREATE TABLE J2_TBL (
  i integer,
  k integer,
  primary key(i, k)
);

statement ok
INSERT INTO J1_TBL (i, j, t) VALUES (1, 4, 'one');

statement ok
INSERT INTO J1_TBL (i, j, t) VALUES (2, 3, 'two');

statement ok
INSERT INTO J1_TBL (i, j, t) VALUES (3, 2, 'three');

statement ok
INSERT INTO J1_TBL (i, j, t) VALUES (4, 1, 'four');

statement ok
INSERT INTO J1_TBL (i, j, t) VALUES (5, 0, 'five');

statement ok
INSERT INTO J1_TBL (i, j, t) VALUES (6, 6, 'six');

statement ok
INSERT INTO J1_TBL (i, j, t) VALUES (7, 7, 'seven');

statement ok
INSERT INTO J1_TBL (i, j, t) VALUES (8, 8, 'eight');

statement ok
INSERT INTO J1_TBL (i, j, t) VALUES (0, NULL, 'zero');

statement ok
INSERT INTO J1_TBL (i, j, t) VALUES (NULL, NULL, 'null');

statement skipped_cs ok
INSERT INTO J1_TBL (i, j, t) VALUES (NULL, 0, 'zero');

statement ok
INSERT INTO J2_TBL (i, k) VALUES (1, -1);

statement ok
INSERT INTO J2_TBL (i, k) VALUES (2, 2);

statement ok
INSERT INTO J2_TBL (i, k) VALUES (3, -3);

statement ok
INSERT INTO J2_TBL (i, k) VALUES (2, 4);

statement ok
INSERT INTO J2_TBL (i, k) VALUES (5, -5);

statement error
INSERT INTO J2_TBL (i, k) VALUES (5, -5);

statement ok
INSERT INTO J2_TBL (i, k) VALUES (0, NULL);

statement skipped_cs ok
INSERT INTO J2_TBL (i, k) VALUES (NULL, NULL);

statement skipped_cs ok
INSERT INTO J2_TBL (i, k) VALUES (NULL, 0);


statement query
SELECT t1.a as a, t2.e as e FROM (
  select i as a, j as b, t as c from J1_TBL) as t1
  cross join
  (select i as d, k as e from J2_TBL) as t2
WHERE t1.a = t2.d
order by a, e

--
--
-- Inner joins (equi-joins)
--
--
--
-- Inner joins (equi-joins) with USING clause
-- The USING syntax changes the shape of the resulting table
-- by including a column in the USING clause only once in the result.
--
-- Inner equi-join on specified column

statement query
SELECT J1_TBL.i as i, j, t, k
  FROM J1_TBL INNER JOIN J2_TBL USING (i)
  ORDER BY i, j, t, k;

statement query
SELECT J1_TBL.i as i, j, t, k
  FROM J1_TBL JOIN J2_TBL USING (i)
  ORDER BY i, j, t, k

statement skipped_cs query
SELECT t1.b as b, t1.a as a, c, t2.a as a2  FROM (
  select i as a, j as b, t as c from J1_TBL) as t1
  JOIN (select i as a, k as b from J2_TBL) as t2 USING (b)
  ORDER BY b, a

--
-- NATURAL JOIN
-- Inner equi-join on all columns with the same name
--
-- Non implemented

statement skipped Natural join
SELECT i, j, t, k
  FROM J1_TBL NATURAL JOIN J2_TBL;
--------------------
 i | j | t     | k
---+---+-------+----
 0 |   | zero  |
 1 | 4 | one   | -1
 2 | 3 | two   | 2
 2 | 3 | two   | 4
 3 | 2 | three | -3
 5 | 0 | five  | -5
 5 | 0 | five  | -5

statement skipped Natural join
SELECT '' AS "xxx", *
  FROM J1_TBL t1 (a, b, c) NATURAL JOIN J2_TBL t2 (a, d);
--------------------
 a | b | c     | d
---+---+-------+----
 0 |   | zero  |
 1 | 4 | one   | -1
 2 | 3 | two   | 2
 2 | 3 | two   | 4
 3 | 2 | three | -3
 5 | 0 | five  | -5
 5 | 0 | five  | -5

statement skipped Natural join
SELECT '' AS "xxx", *
  FROM J1_TBL t1 (a, b, c) NATURAL JOIN J2_TBL t2 (d, a);
------------------
 a | b | c    | d
---+---+------+---
 0 |   | zero |
 2 | 3 | two  | 2
 4 | 1 | four | 2
-- mismatch number of columns
-- currently, Postgres will fill in with underlying names

statement skipped Natural join
SELECT '' AS "xxx", *
  FROM J1_TBL t1 (a, b) NATURAL JOIN J2_TBL t2 (a);
--------------------
 a | b | t     | k
---+---+-------+----
 0 |   | zero  |
 1 | 4 | one   | -1
 2 | 3 | two   | 2
 2 | 3 | two   | 4
 3 | 2 | three | -3
 5 | 0 | five  | -5
 5 | 0 | five  | -5

--
-- Inner joins (equi-joins)
--

statement query
SELECT J1_TBL.i as i, j, t, k
  FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i = J2_TBL.i)
ORDER BY i, j, t, k;

statement skipped_cs query
SELECT J1_TBL.i as i, j, t, k
  FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i = J2_TBL.k)
ORDER BY i;

statement error JOIN ON expression must be a conjunction of equality predicates
SELECT J1_TBL.i as i1, J2_TBL.i as i2, j, t, k
  FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i <= J2_TBL.k);
-----------------------
--
-- Outer joins
-- Note that OUTER is a noise word
--

statement skipped_cs query
SELECT J1_TBL.i as i, j, t, k
  FROM J1_TBL LEFT OUTER JOIN J2_TBL USING (i)
  ORDER BY i, j, k, t;

statement skipped_cs query
SELECT J1_TBL.i as i, j, t, k
  FROM J1_TBL LEFT JOIN J2_TBL USING (i)
  ORDER BY i, j, k, t;

statement skipped_cs query
SELECT J2_TBL.i as i, j, t, k
  FROM J1_TBL RIGHT OUTER JOIN J2_TBL USING (i)
  ORDER BY i, j, t, k

statement skipped_cs query
SELECT J2_TBL.i as i, j, t, k
  FROM J1_TBL RIGHT JOIN J2_TBL USING (i)
  ORDER BY i, j, t, k

statement skipped_cs query
SELECT J1_TBL.i as i, j, t, k
  FROM J1_TBL FULL OUTER JOIN J2_TBL USING (i)
  ORDER BY i, k, t;

statement skipped_cs query
SELECT J1_TBL.i as i, j, t, k
  FROM J1_TBL FULL JOIN J2_TBL USING (i)
  ORDER BY i, k, t, j;

statement query
SELECT J1_TBL.i as i, j, t, k
  FROM J1_TBL LEFT JOIN J2_TBL USING (i) WHERE (k = 1);

statement query
SELECT J1_TBL.i as i, j, t, k
  FROM J1_TBL LEFT JOIN J2_TBL USING (i)
where (J1_TBL.i = 1)

statement ok
DROP TABLE J1_TBL;
DROP TABLE J2_TBL;

