

--
-- More complicated constructs
--
--
-- Multiway full join
--

statement ok
CREATE TABLE t1 (name string, n INTEGER, primary key(name, n));
CREATE TABLE t2 (name string, n INTEGER, primary key(name, n));
CREATE TABLE t3 (name string, n INTEGER, primary key(name, n));

statement ok
INSERT INTO t1 (name, n) VALUES ( 'bb', 11 );

statement ok
INSERT INTO t2 (name, n) VALUES ( 'bb', 12 );

statement ok
INSERT INTO t2 (name, n) VALUES ( 'cc', 22 );

statement ok
INSERT INTO t2 (name, n) VALUES ( 'ee', 42 );

statement ok
INSERT INTO t3 (name, n) VALUES ( 'bb', 13 );

statement ok
INSERT INTO t3 (name, n) VALUES ( 'cc', 23 );

statement ok
INSERT INTO t3 (name, n) VALUES ( 'dd', 33 );

statement query
select IF(SQ.name is Null, t3.name, SQ.name) as name,
SQ.n1 as n1, SQ.n2 as n2, t3.n as n3
FROM t3 FULL JOIN
(SELECT IF(t2.name is Null, t1.name, t2.name) as name, t1.n as n1, t2.n as n2
  FROM t1 FULL JOIN t2 using(name)) as SQ USING(name)
order by name

--
-- Test interactions of join syntax and subqueries
--
-- Basic cases (we expect planner to pull up the subquery here)

statement query
SELECT s2.name as name, s2.n as n2, s3.n as n3 FROM
(SELECT * FROM t2) as s2
INNER JOIN
(SELECT * FROM t3) as s3
USING (name)
order by name

statement query
SELECT s2.name as name, s2.n as n2, s3.n as n3 FROM
(SELECT * FROM t2) as s2
LEFT JOIN
(SELECT * FROM t3) as s3
USING (name)
order by name

statement query
SELECT IF(s3.name is not Null, s3.name, s2.name) as name, s2.n as n2, s3.n as n3 FROM
(SELECT * FROM t2) as s2
FULL JOIN
(SELECT * FROM t3) as s3
USING (name)
order by name

-- Cases with non-nullable expressions in subquery results;
-- make sure these go to null as expected

statement skipped Natural join
SELECT * FROM
(SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2
NATURAL INNER JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3;
----------------------------------
 name | s2_n | s2_2 | s3_n | s3_2
------+------+------+------+------
 bb   | 12   | 2    | 13   | 3
 cc   | 22   | 2    | 23   | 3

statement skipped Natural join
SELECT * FROM
(SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2
NATURAL LEFT JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3;
----------------------------------
 name | s2_n | s2_2 | s3_n | s3_2
------+------+------+------+------
 bb   | 12   | 2    | 13   | 3
 cc   | 22   | 2    | 23   | 3
 ee   | 42   | 2    |      |

statement skipped Natural join
SELECT * FROM
(SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2
NATURAL FULL JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3;
----------------------------------
 name | s2_n | s2_2 | s3_n | s3_2
------+------+------+------+------
 bb   | 12   | 2    | 13   | 3
 cc   | 22   | 2    | 23   | 3
 dd   |      |      | 33   | 3
 ee   | 42   | 2    |      |

statement skipped Natural join
SELECT * FROM
(SELECT name, n as s1_n, 1 as s1_1 FROM t1) as s1
NATURAL INNER JOIN
(SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2
NATURAL INNER JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3;
------------------------------------------------
 name | s1_n | s1_1 | s2_n | s2_2 | s3_n | s3_2
------+------+------+------+------+------+------
 bb   | 11   | 1    | 12   | 2    | 13   | 3

statement skipped Natural join
SELECT * FROM
(SELECT name, n as s1_n, 1 as s1_1 FROM t1) as s1
NATURAL FULL JOIN
(SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2
NATURAL FULL JOIN
(SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3;
------------------------------------------------
 name | s1_n | s1_1 | s2_n | s2_2 | s3_n | s3_2
------+------+------+------+------+------+------
 bb   | 11   | 1    | 12   | 2    | 13   | 3
 cc   |      |      | 22   | 2    | 23   | 3
 dd   |      |      |      |      | 33   | 3
 ee   |      |      | 42   | 2    |      |

statement skipped Natural join
SELECT * FROM
(SELECT name, n as s1_n FROM t1) as s1
NATURAL FULL JOIN
  (SELECT * FROM
    (SELECT name, n as s2_n FROM t2) as s2
    NATURAL FULL JOIN
    (SELECT name, n as s3_n FROM t3) as s3
  ) ss2;
---------------------------
 name | s1_n | s2_n | s3_n
------+------+------+------
 bb   | 11   | 12   | 13
 cc   |      | 22   | 23
 dd   |      |      | 33
 ee   |      | 42   |

statement skipped Natural join
SELECT * FROM
(SELECT name, n as s1_n FROM t1) as s1
NATURAL FULL JOIN
  (SELECT * FROM
    (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2
    NATURAL FULL JOIN
    (SELECT name, n as s3_n FROM t3) as s3
  ) ss2;
----------------------------------
 name | s1_n | s2_n | s2_2 | s3_n
------+------+------+------+------
 bb   | 11   | 12   | 2    | 13
 cc   |      | 22   | 2    | 23
 dd   |      |      |      | 33
 ee   |      | 42   | 2    |

statement ok
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;

-- Test for propagation of nullability constraints into sub-joins

statement ok
create table x (x1 int, x2 int, primary key(x1, x2));

statement ok
insert into x (x1, x2) values (1,11);

statement ok
insert into x (x1, x2) values (2,22);

statement ok
insert into x (x1, x2) values (3,null);

statement ok
insert into x (x1, x2) values (4,44);

statement ok
insert into x (x1, x2) values (5,null);

statement ok
create table y (y1 int, y2 int, primary key(y1, y2));

statement ok
insert into y (y1, y2) values (1,111);

statement ok
insert into y (y1, y2) values (2,222);

statement ok
insert into y (y1, y2) values (3,333);

statement ok
insert into y (y1, y2) values (4,null);

statement query
select * from x
order by x1, x2

statement query
select * from y
order by y1, y2;

statement query
select x1, x2, y1, y2 from x left join y on (x.x1 = y.y1)
where x2 is not null
order by x1, x2, y1, y2

statement query
select x1, x2, y1, y2 from x left join y on (x.x1 = y.y1)
where y2 is not null
order by x1, x2, y1, y2

statement query
select x1, x2, y1, y2, xx1, xx2 from
(select x1, x2, y1, y2 from x left join y on (x.x1 = y.y1)) as x
left join (select x1 as xx1, x2 as xx2 from x) as xx
on (x.x1 = xx.xx1) order by x1;

statement query
select x1, x2, y1, y2, xx1, xx2 from
(select x1, x2, y1, y2 from x left join y on (x.x1 = y.y1)) as x
left join (select x1 as xx1, x2 as xx2 from x) as xx
on (x.x1 = xx.xx1) where x2 is not null order by x1;

statement query
select x1, x2, y1, y2, xx1, xx2 from
(select x1, x2, y1, y2 from x left join y on (x.x1 = y.y1)) as x
left join (select x1 as xx1, x2 as xx2 from x) as xx
on (x.x1 = xx.xx1) where y2 is not null order by x1;

statement query
select x1, x2, y1, y2, xx1, xx2 from
(select x1, x2, y1, y2 from x left join y on (x.x1 = y.y1)) as x
left join (select x1 as xx1, x2 as xx2 from x) as xx
on (x.x1 = xx.xx1) where xx2 is not null order by x1;


statement ok
DROP TABLE x;
DROP TABLE y;

