--
-- nested nestloops can require nested PlaceHolderVars
--

statement ok
create table nt1 (
  id int,
  a1 bool,
  a2 bool,
  primary key (id)
);
create table nt2 (
  id int,
  nt1_id int,
  b1 bool,
  b2 bool,
  primary key(id)
);
create table nt3 (
  id int,
  nt2_id int,
  c1 bool,
  primary key(id)
);

statement ok
insert into nt1 (id, a1, a2) values (1,true,true);

statement ok
insert into nt1 (id, a1, a2) values (2,true,false);

statement ok
insert into nt1 (id, a1, a2) values (3,false,false);

statement ok
insert into nt2 (id, nt1_id, b1, b2) values (1,1,true,true);

statement ok
insert into nt2 (id, nt1_id, b1, b2) values (2,2,true,false);

statement ok
insert into nt2 (id, nt1_id, b1, b2) values (3,3,false,false);

statement ok
insert into nt3 (id, nt2_id, c1) values (1,1,true);

statement ok
insert into nt3 (id, nt2_id, c1) values (2,2,false);

statement ok
insert into nt3 (id, nt2_id, c1) values (3,3,true);

statement query
select nt3.id as id
from nt3 as nt3
  left join
    (select nt2.*, (nt2.b1 and ss1.a3) AS b3
     from nt2 as nt2
       left join
         (select nt1.*, (nt1.id is not null) as a3 from nt1) as ss1
         on ss1.id = nt2.nt1_id
    ) as ss2
    on ss2.id = nt3.nt2_id
where nt3.id = 1 and ss2.b3;

--
-- test incorrect handling of placeholders that only appear in targetlists,
-- per bug #6154
--

statement query
SELECT sub1.key1 as key1, sub2.key3 as key3, sub2.value2 as value2, sub2.value3 as value3 FROM
( SELECT 1 as key1 ) as sub1
LEFT JOIN
( SELECT sub3.key3 as key3, sub4.value2 as value2, COALESCE(sub4.value2, 66) as value3 FROM
    ( SELECT 1 as key3 ) as sub3
    LEFT JOIN
    ( SELECT sub5.key5 as key5, COALESCE(sub6.value1, 1) as value2 FROM
        ( SELECT 1 as key5 ) as sub5
        LEFT JOIN
        ( SELECT 2 as key6, 42 as value1 ) as sub6
        ON sub5.key5 = sub6.key6
    ) as sub4
    ON sub4.key5 = sub3.key3
) as sub2
ON sub1.key1 = sub2.key3;

-- test the path using join aliases, too

statement query
SELECT sub1.key1 as key1, sub2.key3 as key3, sub2.value2 as value2, sub2.value3 as value3 FROM
( SELECT 1 as key1 ) as sub1
LEFT JOIN
( SELECT sub3.key3 as key3, value2, COALESCE(value2, 66) as value3 FROM
    ( SELECT 1 as key3 ) as sub3
    LEFT JOIN
    ( SELECT sub5.key5 as key5, COALESCE(sub6.value1, 1) as value2 FROM
        ( SELECT 1 as key5 ) as sub5
        LEFT JOIN
        ( SELECT 2 as key6, 42 as value1 ) as sub6
        ON sub5.key5 = sub6.key6
    ) as sub4
    ON sub4.key5 = sub3.key3
) as sub2
ON sub1.key1 = sub2.key3;


--
-- test incorrect failure to NULL pulled-up subexpressions
--

statement ok
create table a (
    code String,
    primary key(code)
);

statement ok
create table b (
    a String,
    num integer,
    primary key(a, num)
);

statement ok
create table c (
    name String,
    a String,
    primary key(name)
);

statement ok
insert into a (code) values ('p');

statement ok
insert into a (code) values ('q');

statement ok
insert into b (a, num) values ('p', 1);

statement ok
insert into b (a, num) values ('p', 2);

statement ok
insert into c (name, a) values ('A', 'p');

statement ok
insert into c (name, a) values ('B', 'q');

statement ok
insert into c (name, a) values ('C', null);

statement query
select c.name as name, ss.code as code, ss.b_cnt as b_cnt, ss.const as const
from c left join
  (select a.code as code, coalesce(b_grp.cnt, 0) as b_cnt, -1 as const
   from a left join
     (select count(1) as cnt, b.a from b group by b.a) as b_grp
     on a.code = b_grp.a
  ) as ss
  on (c.a = ss.code)
order by name;


--
-- test for sane behavior with noncanonical merge clauses, per bug #4926
--

statement ok
create table tqa (i integer, primary key(i));
create table tqb (x integer, y integer, primary key(x, y));

statement query
select * from tqa left join tqb on tqa.i = tqb.x and tqa.i = tqb.y and tqb.x = tqa.i;

--
-- regression test for improper pushing of constants across outer-join clauses
-- (as seen in early 8.2.x releases)
--

statement ok
create table zt1 (f1 int, primary key(f1));
create table zt2 (f2 int, primary key(f2));
create table zt3 (f3 int, primary key(f3));

insert into zt1 (f1) values(53);


statement ok
insert into zt2 (f2) values(53);


statement query
select f2, f3, f1 from
  zt2 left join zt3 on zt2.f2 = zt3.f3
      left join zt1 on zt3.f3 = zt1.f1
where zt2.f2 = 53;


-
-- regression test for problems of the sort depicted in bug #3494
--

statement ok
create table tt5 (f1 int, f2 int, primary key(f1, f2));
create table tt6 (f1 int, f2 int, primary key(f1, f2));


statement ok
insert into tt5 (f1, f2) values (1, 10);

statement ok
insert into tt5 (f1, f2) values (1, 11);

statement ok
insert into tt6 (f1, f2) values (1, 9);

statement ok
insert into tt6 (f1, f2) values (1, 2);

statement ok
insert into tt6 (f1, f2) values (2, 9);

statement query
select tt5.f1 as f15, tt5.f2 as f25, tt6.f1 as f16, tt6.f2 as f26 from tt5 cross join tt6 where tt5.f1 = tt6.f1 and tt5.f1 = tt5.f2 - tt6.f2;

--
-- regression test for 8.1 merge right join bug
--

statement ok
CREATE TABLE tt1 ( tt1_id int32, joincol int32, primary key(tt1_id, joincol));


statement ok
INSERT INTO tt1 (tt1_id, joincol) VALUES (1, 11);

statement ok
INSERT INTO tt1 (tt1_id, joincol) VALUES (2, NULL);


statement ok
CREATE TABLE tt2 ( tt2_id int32, joincol int32, primary key(tt2_id, joincol));


statement ok
UPSERT INTO tt2 (tt2_id, joincol) VALUES (21, 11);

statement ok
UPSERT INTO tt2 (tt2_id, joincol) VALUES (22, 11);


statement query
select  tt1_id, tt1.joincol as joincol, tt2_id
from tt1 left join tt2 on tt1.joincol = tt2.joincol
order by tt1_id, joincol, tt2_id;

statement query
select  tt1_id, tt1.joincol as joincol, tt2_id
from tt2 right join tt1 on tt1.joincol = tt2.joincol
order by tt1_id, joincol, tt2_id;

statement ok
CREATE TABLE qrt1 (a int, b int, primary key(a, b));
CREATE TABLE qrt2 (a int, b int, primary key(a, b));
CREATE TABLE qrt3 (x int, y int, primary key(x, y));


statement ok
INSERT INTO qrt1 (a, b) VALUES (5, 10);

statement ok
INSERT INTO qrt1 (a, b) VALUES (15, 20);

statement ok
INSERT INTO qrt1 (a, b) VALUES (100, 100);

statement ok
INSERT INTO qrt1 (a, b) VALUES (200, 1000);

statement ok
INSERT INTO qrt2 (a, b) VALUES (200, 2000);

statement ok
INSERT INTO qrt3 (x, y) VALUES (5, 20);

statement ok
INSERT INTO qrt3 (x, y) VALUES (6, 7);

statement ok
INSERT INTO qrt3 (x, y) VALUES (7, 8);

statement ok
INSERT INTO qrt3 (x, y) VALUES (500, 100);

statement ok
DELETE FROM qrt3 WHERE qrt3.x = 5;

statement query
SELECT * FROM qrt3;

statement ok
DELETE FROM qrt3 WHERE qrt3.x = 500;

statement query
SELECT * FROM qrt3;

statement ok
DELETE FROM qrt3 WHERE qrt3.x > 0;

statement query
SELECT * FROM qrt3;

-- Test join against inheritance tree

statement ok
insert into qrt2 (a, b) values (200, 2001);

statement query
select qrt1.a as a1, qrt1.b as b1, qrt2.a as a2, qrt2.b as b2 from qrt1 left join qrt2 on (qrt1.a = qrt2.a)
order by a1, b2

