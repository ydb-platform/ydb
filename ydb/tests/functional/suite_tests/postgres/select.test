statement ok
CREATE TABLE onek (
 unique1 int32 not null,
 unique2 int32 not null,
 two int32,
 four int32,
 ten int32,
 twenty int32,
 hundred int32,
 thousand int32,
 twothousand int32,
 fivethous int32,
 tenthous int32,
 odd int32,
 even int32,
 stringu1 string,
 stringu2 string,
 string4 string,
 PRIMARY KEY (unique1, unique2)
)
partition by hash(unique1,unique2) with(store=column)
;

statement ok
CREATE TABLE int8_tbl(q1 int64, q2 int64, primary key(q1, q2));

statement ok
INSERT INTO int8_tbl (q1, q2) VALUES(123, 456);

statement ok
INSERT INTO int8_tbl (q1, q2) VALUES(123, 4567890123456789);

statement ok
INSERT INTO int8_tbl (q1, q2) VALUES(4567890123456789, 123);

statement ok
INSERT INTO int8_tbl (q1, q2) VALUES(4567890123456789, 4567890123456789);

statement ok
INSERT INTO int8_tbl (q1, q2) VALUES(4567890123456789, -4567890123456789);


statement ok
CREATE TABLE onek2 (
 unique1 int32,
 unique2 int32,
 two int32,
 four int32,
 ten int32,
 twenty int32,
 hundred int32,
 thousand int32,
 twothousand int32,
 fivethous int32,
 tenthous int32,
 odd int32,
 even int32,
 stringu1 string,
 stringu2 string,
 string4 string,
 PRIMARY KEY (unique1, unique2)
);

statement import table data
insert into onek (unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4) values postgres/data/onek.data

statement ok
upsert into onek2 (select * from onek);


statement query
SELECT unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4 FROM onek
   WHERE onek.unique1 < 10
   ORDER BY onek.unique1;

statement query
SELECT onek.unique1, onek.stringu1 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 DESC;

statement query
SELECT onek.unique1, onek.stringu1 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY stringu1 ASC;

statement query
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY string4 ASC, unique1 DESC;

statement query
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY string4 DESC, unique1 ASC;

statement query
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 DESC, string4 ASC;

statement query
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 ASC, string4 DESC;


statement query
SELECT unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4 FROM onek2
ORDER BY unique1
LIMIT 10;

statement query
SELECT onek2.unique1, onek2.stringu1 FROM onek2
    WHERE onek2.unique1 < 20
    ORDER BY unique1 DESC;

statement query
SELECT onek2.unique1, onek2.stringu1 FROM onek2
   WHERE onek2.unique1 > 980;

statement ok
CREATE TABLE tmp (
 two int32,
 ten int32,
 stringu1 string,
 string4 string,
 PRIMARY KEY (two, ten, stringu1, string4)
);

statement ok
upsert into tmp (SELECT two, stringu1, ten, string4 FROM onek);

--
-- Test some cases involving whole-row Var referencing a subquery
--

statement query
select foo from (select 1 as foo) as foo;

--
-- Test VALUES lists
--

statement query
select
unique1, unique2, two, four, ten, twenty,
hundred, thousand, twothousand, fivethous,
tenthous, odd, even, stringu1, stringu2, string4, i, j
from onek cross join (select 147 as i, 'RFAAAA' as j union all select 931 as i, 'VJAAAA' as j) as v
WHERE onek.unique1 = v.i and onek.stringu1 = v.j;

-- a more complex case
-- looks like we're coding lisp :-)
select * from onek,
  (values ((select i from
    (values(10000), (2), (389), (1000), (2000), ((select 10029))) as foo(i)
    order by i asc limit 1))) bar (i)
  where onek.unique1 = bar.i;
----------------------------------------------------------------------------------------------------------------------------------------------------------
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 | i
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------+---
 2       | 326     | 0   | 2    | 2   | 2      | 2       | 2        | 2           | 2         | 2        | 4   | 5    | CAAAAA   | OMAAAA   | OOOOxx  | 2

statement skipped
select * from onek
    where (unique1,ten) in (values (1,1), (20,0), (99,9), (17,99))
    order by unique1;
------------------------------------------------------------------------------------------------------------------------------------------------------
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
 1       | 214     | 1   | 1    | 1   | 1      | 1       | 1        | 1           | 1         | 1        | 2   | 3    | BAAAAA   | GIAAAA   | OOOOxx
 20      | 306     | 0   | 0    | 0   | 0      | 0       | 20       | 20          | 20        | 20       | 0   | 1    | UAAAAA   | ULAAAA   | OOOOxx
 99      | 101     | 1   | 3    | 9   | 19     | 9       | 99       | 99          | 99        | 99       | 18  | 19   | VDAAAA   | XDAAAA   | HHHHxx

statement query
select 1, 2 union all select 3, 4+4 union all select 7, 77.7
order by column0

statement query
SELECT 2+2, 57
UNION ALL
select q1 as column0, q2 as column1 from int8_tbl
order by column0, column1

--
-- Test ORDER BY options
--

statement ok
CREATE TABLE foo (f1 int, primary key(f1));

statement ok
INSERT INTO foo (f1) VALUES (42),(3),(10),(7),(null),(1);

statement query
SELECT 1 as x, f1 FROM foo ORDER BY f1;

statement query
SELECT 1 as x, f1 FROM foo ORDER BY f1 ASC;


statement skipped
SELECT 1 as x, f1 FROM foo ORDER BY f1 NULLS FIRST;
-------
x | f1
-------
1 |
1 | 1
1 | 3
1 | 7
1 | 10
1 | 42

statement query
SELECT 1 as x, f1 FROM foo ORDER BY f1 DESC;

statement skipped
SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;
----
 f1
----
 42
 10
 7
 3
 1


statement query
select unique1, unique2, two, four, ten, twenty,
       hundred, thousand, twothousand, fivethous,
       tenthous, odd, even, stringu1, stringu2, string4
from onek2 where unique2 = 11 and stringu1 = 'ATAAAA';


statement query
select unique2 from onek2 where unique2 = 11 and stringu1 = 'ATAAAA';

statement query
select unique1, unique2, two, four, ten, twenty,
       hundred, thousand, twothousand, fivethous,
       tenthous, odd, even, stringu1, stringu2, string4
from onek2 where unique2 = 11 and stringu1 < 'B';

statement query
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B';

statement skipped query
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B' for update;
---------
 unique2
---------
 11

statement query
select unique2 from onek2 where unique2 = 11 and stringu1 < 'C';

statement query
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B';

statement query
select unique1, unique2 from onek2
  where (unique2 = 11 or unique1 = 0) and stringu1 < 'B'
order by unique2;


statement query
select unique1, unique2 from onek2
  where (unique2 = 11 and stringu1 < 'B') or unique1 = 0
order by unique2;

--
-- Test some corner cases that have been known to confuse the planner
--
-- ORDER BY on a constant doesn't really need any sorting

statement query
SELECT 1 AS x ORDER BY x;

-- But ORDER BY on a set-valued expression does

statement skipped
create function sillysrf(int) returns setof int as
  'values (1),(10),(2),($1)' language sql immutable;
select sillysrf(42);
----------
 sillysrf
----------
 1
 10
 2
 42

statement skipped
select sillysrf(-1) order by 1;
----------
 sillysrf
----------
 -1
 1
 2
 10

statement skipped
drop function sillysrf(int);
-- X = X isn't a no-op, it's effectively X IS NOT NULL assuming = is strict
-- (see bug #5084)

statement query
select * from (select 2 as k union all select Cast(null as Int32) as k union all select 1 as k) as v where k = k order by k;


