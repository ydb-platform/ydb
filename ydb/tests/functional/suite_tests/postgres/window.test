--
--

statement ok
CREATE TABLE empsalary (
    depname String,
    empno Int64,
    salary Int64,
    enroll_date Uint64,
    primary key(empno)
);

statement ok
INSERT INTO empsalary (depname, empno, salary, enroll_date) VALUES
('develop', 10, 5200, DateTime::ToMicroseconds(Date('2007-08-01'))),
('sales', 1, 5000, DateTime::ToMicroseconds(Date('2006-10-01'))),
('personnel', 5, 3500, DateTime::ToMicroseconds(Date('2007-12-10'))),
('sales', 4, 4800, DateTime::ToMicroseconds(Date('2007-08-08'))),
('personnel', 2, 3900, DateTime::ToMicroseconds(Date('2006-12-23'))),
('develop', 7, 4200, DateTime::ToMicroseconds(Date('2008-01-01'))),
('develop', 9, 4500, DateTime::ToMicroseconds(Date('2008-01-01'))),
('sales', 3, 4800, DateTime::ToMicroseconds(Date('2007-08-01'))),
('develop', 8, 6000, DateTime::ToMicroseconds(Date('2006-10-01'))),
('develop', 11, 5200, DateTime::ToMicroseconds(Date('2007-08-15')));

statement query
select depname, empno, salary, FIRST_VALUE(nsum) OVER q as sum FROM (
    SELECT depname, empno, salary, SUM(salary) OVER w as nsum FROM empsalary
    WINDOW w AS (
        PARTITION BY depname
        ORDER BY salary DESC
    )
)
WINDOW q AS (
    PARTITION BY depname
    ORDER BY nsum DESC
)
ORDER BY depname, salary, empno

statement query
SELECT depname, empno, salary, rank() OVER w as rank FROM empsalary
WINDOW w AS (
    PARTITION BY depname ORDER BY salary
)
ORDER BY depname, rank, empno

statement query
SELECT depname, empno, salary, dense_rank() OVER w as rank FROM empsalary
WINDOW w AS (
    PARTITION BY depname ORDER BY salary
)
ORDER BY depname, rank, empno

statement skipped query
SELECT four, ten, SUM(SUM(four)) OVER (PARTITION BY four), AVG(ten) FROM tenk1
GROUP BY four, ten ORDER BY four, ten;
--------------------------------------------
 four | ten | sum  | avg
------+-----+------+------------------------
 0    | 0   | 0    | 0.00000000000000000000
 0    | 2   | 0    | 2.0000000000000000
 0    | 4   | 0    | 4.0000000000000000
 0    | 6   | 0    | 6.0000000000000000
 0    | 8   | 0    | 8.0000000000000000
 1    | 1   | 2500 | 1.00000000000000000000
 1    | 3   | 2500 | 3.0000000000000000
 1    | 5   | 2500 | 5.0000000000000000
 1    | 7   | 2500 | 7.0000000000000000
 1    | 9   | 2500 | 9.0000000000000000
 2    | 0   | 5000 | 0.00000000000000000000
 2    | 2   | 5000 | 2.0000000000000000
 2    | 4   | 5000 | 4.0000000000000000
 2    | 6   | 5000 | 6.0000000000000000
 2    | 8   | 5000 | 8.0000000000000000
 3    | 1   | 7500 | 1.00000000000000000000
 3    | 3   | 7500 | 3.0000000000000000
 3    | 5   | 7500 | 5.0000000000000000
 3    | 7   | 7500 | 7.0000000000000000
 3    | 9   | 7500 | 9.0000000000000000

statement skipped query
SELECT depname, empno, salary, sum(salary) OVER w FROM empsalary WINDOW w AS (PARTITION BY depname);
------------------------------------
 depname   | empno | salary | sum
-----------+-------+--------+-------
 develop   | 11    | 5200   | 25100
 develop   | 7     | 4200   | 25100
 develop   | 9     | 4500   | 25100
 develop   | 8     | 6000   | 25100
 develop   | 10    | 5200   | 25100
 personnel | 5     | 3500   | 7400
 personnel | 2     | 3900   | 7400
 sales     | 3     | 4800   | 14600
 sales     | 1     | 5000   | 14600
 sales     | 4     | 4800   | 14600

statement query
SELECT depname, empno, salary, rank() OVER w as rank FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary) ORDER BY rank, empno;

statement skipped query
SELECT COUNT(*) OVER () FROM tenk1 WHERE unique2 < 10;
-------
 count
-------
 10
 10
 10
 10
 10
 10
 10
 10
 10
 10

statement skipped query
SELECT COUNT(*) OVER w FROM tenk1 WHERE unique2 < 10 WINDOW w AS ();
-------
 count
-------
 10
 10
 10
 10
 10
 10
 10
 10
 10
 10

statement skipped query
SELECT four FROM tenk1 WHERE FALSE WINDOW w AS (PARTITION BY ten);
------
 four
------

statement skipped query
SELECT sum(four) OVER (PARTITION BY ten ORDER BY unique2) AS sum_1, ten, four FROM tenk1 WHERE unique2 < 10;
--------------------
 sum_1 | ten | four
-------+-----+------
 0     | 0   | 0
 0     | 0   | 0
 2     | 0   | 2
 3     | 1   | 3
 4     | 1   | 1
 5     | 1   | 1
 3     | 3   | 3
 0     | 4   | 0
 1     | 7   | 1
 1     | 9   | 1

statement skipped query
SELECT row_number() OVER (ORDER BY unique2) FROM tenk1 WHERE unique2 < 10;
------------
 row_number
------------
 1
 2
 3
 4
 5
 6
 7
 8
 9
 10

statement skipped query
SELECT rank() OVER (PARTITION BY four ORDER BY ten) AS rank_1, ten, four FROM tenk1 WHERE unique2 < 10;
---------------------
 rank_1 | ten | four
--------+-----+------
 1      | 0   | 0
 1      | 0   | 0
 3      | 4   | 0
 1      | 1   | 1
 1      | 1   | 1
 3      | 7   | 1
 4      | 9   | 1
 1      | 0   | 2
 1      | 1   | 3
 2      | 3   | 3

statement skipped query
SELECT dense_rank() OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10;
-------------------------
 dense_rank | ten | four
------------+-----+------
 1          | 0   | 0
 1          | 0   | 0
 2          | 4   | 0
 1          | 1   | 1
 1          | 1   | 1
 2          | 7   | 1
 3          | 9   | 1
 1          | 0   | 2
 1          | 1   | 3
 2          | 3   | 3

statement skipped query
SELECT percent_rank() OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10;
--------------------------------
 percent_rank      | ten | four
-------------------+-----+------
 0                 | 0   | 0
 0                 | 0   | 0
 1                 | 4   | 0
 0                 | 1   | 1
 0                 | 1   | 1
 0.666666666666667 | 7   | 1
 1                 | 9   | 1
 0                 | 0   | 2
 0                 | 1   | 3
 1                 | 3   | 3

statement skipped query
SELECT cume_dist() OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10;
--------------------------------
 cume_dist         | ten | four
-------------------+-----+------
 0.666666666666667 | 0   | 0
 0.666666666666667 | 0   | 0
 1                 | 4   | 0
 0.5               | 1   | 1
 0.5               | 1   | 1
 0.75              | 7   | 1
 1                 | 9   | 1
 1                 | 0   | 2
 0.5               | 1   | 3
 1                 | 3   | 3

statement skipped query
SELECT ntile(3) OVER (ORDER BY ten, four), ten, four FROM tenk1 WHERE unique2 < 10;
--------------------
 ntile | ten | four
-------+-----+------
 1     | 0   | 0
 1     | 0   | 0
 1     | 0   | 2
 1     | 1   | 1
 2     | 1   | 1
 2     | 1   | 3
 2     | 3   | 3
 3     | 4   | 0
 3     | 7   | 1
 3     | 9   | 1

statement skipped query
SELECT ntile(NULL) OVER (ORDER BY ten, four), ten, four FROM tenk1 LIMIT 2;
--------------------
 ntile | ten | four
-------+-----+------
       | 0   | 0
       | 0   | 0

statement skipped query
SELECT lag(ten) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10;
------------------
 lag | ten | four
-----+-----+------
     | 0   | 0
 0   | 0   | 0
 0   | 4   | 0
     | 1   | 1
 1   | 1   | 1
 1   | 7   | 1
 7   | 9   | 1
     | 0   | 2
     | 1   | 3
 1   | 3   | 3

statement skipped query
SELECT lag(ten, four) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10;
------------------
 lag | ten | four
-----+-----+------
 0   | 0   | 0
 0   | 0   | 0
 4   | 4   | 0
     | 1   | 1
 1   | 1   | 1
 1   | 7   | 1
 7   | 9   | 1
     | 0   | 2
     | 1   | 3
     | 3   | 3

statement skipped query
SELECT lag(ten, four, 0) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10;
------------------
 lag | ten | four
-----+-----+------
 0   | 0   | 0
 0   | 0   | 0
 4   | 4   | 0
 0   | 1   | 1
 1   | 1   | 1
 1   | 7   | 1
 7   | 9   | 1
 0   | 0   | 2
 0   | 1   | 3
 0   | 3   | 3

statement skipped query
SELECT lead(ten) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10;
-------------------
 lead | ten | four
------+-----+------
 0    | 0   | 0
 4    | 0   | 0
      | 4   | 0
 1    | 1   | 1
 7    | 1   | 1
 9    | 7   | 1
      | 9   | 1
      | 0   | 2
 3    | 1   | 3
      | 3   | 3

statement skipped query
SELECT lead(ten * 2, 1) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10;
-------------------
 lead | ten | four
------+-----+------
 0    | 0   | 0
 8    | 0   | 0
      | 4   | 0
 2    | 1   | 1
 14   | 1   | 1
 18   | 7   | 1
      | 9   | 1
      | 0   | 2
 6    | 1   | 3
      | 3   | 3

statement skipped query
SELECT lead(ten * 2, 1, -1) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10;
-------------------
 lead | ten | four
------+-----+------
 0    | 0   | 0
 8    | 0   | 0
 -1   | 4   | 0
 2    | 1   | 1
 14   | 1   | 1
 18   | 7   | 1
 -1   | 9   | 1
 -1   | 0   | 2
 6    | 1   | 3
 -1   | 3   | 3

statement skipped query
SELECT first_value(ten) OVER (PARTITION BY four ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10;
--------------------------
 first_value | ten | four
-------------+-----+------
 0           | 0   | 0
 0           | 0   | 0
 0           | 4   | 0
 1           | 1   | 1
 1           | 1   | 1
 1           | 7   | 1
 1           | 9   | 1
 0           | 0   | 2
 1           | 1   | 3
 1           | 3   | 3

statement skipped query
SELECT last_value(four) OVER (ORDER BY ten), ten, four FROM tenk1 WHERE unique2 < 10;
-------------------------
 last_value | ten | four
------------+-----+------
 0          | 0   | 0
 0          | 0   | 2
 0          | 0   | 0
 1          | 1   | 1
 1          | 1   | 3
 1          | 1   | 1
 3          | 3   | 3
 0          | 4   | 0
 1          | 7   | 1
 1          | 9   | 1

statement skipped query
SELECT last_value(ten) OVER (PARTITION BY four), ten, four FROM
	(SELECT * FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten)s
	ORDER BY four, ten;
-------------------------
 last_value | ten | four
------------+-----+------
 4          | 0   | 0
 4          | 0   | 0
 4          | 4   | 0
 9          | 1   | 1
 9          | 1   | 1
 9          | 7   | 1
 9          | 9   | 1
 0          | 0   | 2
 3          | 1   | 3
 3          | 3   | 3

statement skipped query
SELECT nth_value(ten, four + 1) OVER (PARTITION BY four), ten, four
	FROM (SELECT * FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten)s;
------------------------
 nth_value | ten | four
-----------+-----+------
 0         | 0   | 0
 0         | 0   | 0
 0         | 4   | 0
 1         | 1   | 1
 1         | 1   | 1
 1         | 7   | 1
 1         | 9   | 1
           | 0   | 2
           | 1   | 3
           | 3   | 3

statement skipped query
SELECT ten, two, sum(hundred) AS gsum, sum(sum(hundred)) OVER (PARTITION BY two ORDER BY ten) AS wsum
FROM tenk1 GROUP BY ten, two;
----------------------------
 ten | two | gsum  | wsum
-----+-----+-------+--------
 0   | 0   | 45000 | 45000
 2   | 0   | 47000 | 92000
 4   | 0   | 49000 | 141000
 6   | 0   | 51000 | 192000
 8   | 0   | 53000 | 245000
 1   | 1   | 46000 | 46000
 3   | 1   | 48000 | 94000
 5   | 1   | 50000 | 144000
 7   | 1   | 52000 | 196000
 9   | 1   | 54000 | 250000

statement skipped query
SELECT count(*) OVER (PARTITION BY four), four FROM (SELECT * FROM tenk1 WHERE two = 1)s WHERE unique2 < 10;
--------------
 count | four
-------+------
 4     | 1
 4     | 1
 4     | 1
 4     | 1
 2     | 3
 2     | 3

statement skipped query
SELECT (count(*) OVER (PARTITION BY four ORDER BY ten) +
  sum(hundred) OVER (PARTITION BY four ORDER BY ten))::varchar AS cntsum
  FROM tenk1 WHERE unique2 < 10;
--------
 cntsum
--------
 22
 22
 87
 24
 24
 82
 92
 51
 92
 136

statement skipped query
SELECT * FROM(
  SELECT count(*) OVER (PARTITION BY four ORDER BY ten) +
    sum(hundred) OVER (PARTITION BY two ORDER BY ten) AS total,
    count(*) OVER (PARTITION BY four ORDER BY ten) AS fourcount,
    sum(hundred) OVER (PARTITION BY two ORDER BY ten) AS twosum
    FROM tenk1
)sub
WHERE total <> fourcount + twosum;
----------------------------
 total | fourcount | twosum
-------+-----------+--------

statement skipped query
SELECT avg(four) OVER (PARTITION BY four ORDER BY thousand / 100) FROM tenk1 WHERE unique2 < 10;
------------------------
 avg
------------------------
 0.00000000000000000000
 0.00000000000000000000
 0.00000000000000000000
 1.00000000000000000000
 1.00000000000000000000
 1.00000000000000000000
 1.00000000000000000000
 2.0000000000000000
 3.0000000000000000
 3.0000000000000000

statement skipped query
SELECT ten, two, sum(hundred) AS gsum, sum(sum(hundred)) OVER win AS wsum
FROM tenk1 GROUP BY ten, two WINDOW win AS (PARTITION BY two ORDER BY ten);
----------------------------
 ten | two | gsum  | wsum
-----+-----+-------+--------
 0   | 0   | 45000 | 45000
 2   | 0   | 47000 | 92000
 4   | 0   | 49000 | 141000
 6   | 0   | 51000 | 192000
 8   | 0   | 53000 | 245000
 1   | 1   | 46000 | 46000
 3   | 1   | 48000 | 94000
 5   | 1   | 50000 | 144000
 7   | 1   | 52000 | 196000
 9   | 1   | 54000 | 250000

statement query
SELECT sum(salary) as sum1,
	row_number() OVER w1 as row_number,
	sum(sum(salary)) OVER w2 as sum2
FROM empsalary
GROUP BY depname
WINDOW w1 AS (ORDER BY depname), w2 AS (ORDER BY depname DESC)
ORDER by row_number desc

statement query
SELECT sum(salary) OVER w1, count(*) OVER w2 as count
FROM empsalary
WINDOW w1 AS (ORDER BY salary), w2 AS (ORDER BY salary);

statement skipped query
SELECT lead(ten, (SELECT two FROM tenk1 WHERE s.unique2 = unique2)) OVER (PARTITION BY four ORDER BY ten)
FROM tenk1 s WHERE unique2 < 10;
------
 lead
------
 0
 0
 4
 1
 7
 9

    0
    3


statement skipped query
SELECT count(*) OVER (PARTITION BY four) FROM (SELECT * FROM tenk1 WHERE FALSE)s;
-------
 count
-------

statement skipped_cs query
SELECT sum(salary) OVER w, rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary DESC);

statement skipped query
SELECT empno, depname, salary, bonus, depadj, MIN(bonus) OVER (ORDER BY empno), MAX(depadj) OVER () FROM(
	SELECT *,
		CASE WHEN enroll_date < '2008-01-01' THEN 2008 - extract(YEAR FROM enroll_date) END * 500 AS bonus,
		CASE WHEN
			AVG(salary) OVER (PARTITION BY depname) < salary
		THEN 200 END AS depadj FROM empsalary
)s;
----------------------------------------------------------
 empno | depname   | salary | bonus | depadj | min  | max
-------+-----------+--------+-------+--------+------+-----
 1     | sales     | 5000   | 1000  | 200    | 1000 | 200
 2     | personnel | 3900   | 1000  | 200    | 1000 | 200
 3     | sales     | 4800   | 500   |        | 500  | 200
 4     | sales     | 4800   | 500   |        | 500  | 200
 5     | personnel | 3500   | 500   |        | 500  | 200
 7     | develop   | 4200   |       |        | 500  | 200
 8     | develop   | 6000   | 1000  | 200    | 500  | 200
 9     | develop   | 4500   |       |        | 500  | 200
 10    | develop   | 5200   | 500   | 200    | 500  | 200
 11    | develop   | 5200   | 500   | 200    | 500  | 200

statement skipped query
SELECT SUM(COUNT(f1)) OVER () FROM int4_tbl WHERE f1=42;
-----
 sum
-----
 0

statement skipped query
select ten,
  sum(unique1) + sum(unique2) as res,
  rank() over (order by sum(unique1) + sum(unique2)) as rank
from tenk1
group by ten order by ten;
-----------------------
 ten | res      | rank
-----+----------+------
 0   | 9976146  | 4
 1   | 10114187 | 9
 2   | 10059554 | 8
 3   | 9878541  | 1
 4   | 9881005  | 2
 5   | 9981670  | 5
 6   | 9947099  | 3
 7   | 10120309 | 10
 8   | 9991305  | 6
 9   | 10040184 | 7

explain (costs off)
statement skipped query
select first_value(max(x)) over (), y
  from (select unique1 as x, ten+four as y from tenk1) ss
  group by y;
---------------------------------
 QUERYPLAN
---------------------------------
 WindowAgg
 ->HashAggregate
 GroupKey:(tenk1.ten+tenk1.four)
 ->SeqScanontenk1

statement skipped query
SELECT four, ten,
	sum(ten) over (partition by four order by ten),
	last_value(ten) over (partition by four order by ten)
FROM (select distinct ten, four from tenk1) ss;
-------------------------------
 four | ten | sum | last_value
------+-----+-----+------------
 0    | 0   | 0   | 0
 0    | 2   | 2   | 2
 0    | 4   | 6   | 4
 0    | 6   | 12  | 6
 0    | 8   | 20  | 8
 1    | 1   | 1   | 1
 1    | 3   | 4   | 3
 1    | 5   | 9   | 5
 1    | 7   | 16  | 7
 1    | 9   | 25  | 9
 2    | 0   | 0   | 0
 2    | 2   | 2   | 2
 2    | 4   | 6   | 4
 2    | 6   | 12  | 6
 2    | 8   | 20  | 8
 3    | 1   | 1   | 1
 3    | 3   | 4   | 3
 3    | 5   | 9   | 5
 3    | 7   | 16  | 7
 3    | 9   | 25  | 9

statement skipped query
SELECT four, ten,
	sum(ten) over (partition by four order by ten range between unbounded preceding and current row),
	last_value(ten) over (partition by four order by ten range between unbounded preceding and current row)
FROM (select distinct ten, four from tenk1) ss;
-------------------------------
 four | ten | sum | last_value
------+-----+-----+------------
 0    | 0   | 0   | 0
 0    | 2   | 2   | 2
 0    | 4   | 6   | 4
 0    | 6   | 12  | 6
 0    | 8   | 20  | 8
 1    | 1   | 1   | 1
 1    | 3   | 4   | 3
 1    | 5   | 9   | 5
 1    | 7   | 16  | 7
 1    | 9   | 25  | 9
 2    | 0   | 0   | 0
 2    | 2   | 2   | 2
 2    | 4   | 6   | 4
 2    | 6   | 12  | 6
 2    | 8   | 20  | 8
 3    | 1   | 1   | 1
 3    | 3   | 4   | 3
 3    | 5   | 9   | 5
 3    | 7   | 16  | 7
 3    | 9   | 25  | 9

statement skipped query
SELECT four, ten,
	sum(ten) over (partition by four order by ten range between unbounded preceding and unbounded following),
	last_value(ten) over (partition by four order by ten range between unbounded preceding and unbounded following)
FROM (select distinct ten, four from tenk1) ss;
-------------------------------
 four | ten | sum | last_value
------+-----+-----+------------
 0    | 0   | 20  | 8
 0    | 2   | 20  | 8
 0    | 4   | 20  | 8
 0    | 6   | 20  | 8
 0    | 8   | 20  | 8
 1    | 1   | 25  | 9
 1    | 3   | 25  | 9
 1    | 5   | 25  | 9
 1    | 7   | 25  | 9
 1    | 9   | 25  | 9
 2    | 0   | 20  | 8
 2    | 2   | 20  | 8
 2    | 4   | 20  | 8
 2    | 6   | 20  | 8
 2    | 8   | 20  | 8
 3    | 1   | 25  | 9
 3    | 3   | 25  | 9
 3    | 5   | 25  | 9
 3    | 7   | 25  | 9
 3    | 9   | 25  | 9

statement skipped query
SELECT four, ten/4 as two,
	sum(ten/4) over (partition by four order by ten/4 range between unbounded preceding and current row),
	last_value(ten/4) over (partition by four order by ten/4 range between unbounded preceding and current row)
FROM (select distinct ten, four from tenk1) ss;
-------------------------------
 four | two | sum | last_value
------+-----+-----+------------
 0    | 0   | 0   | 0
 0    | 0   | 0   | 0
 0    | 1   | 2   | 1
 0    | 1   | 2   | 1
 0    | 2   | 4   | 2
 1    | 0   | 0   | 0
 1    | 0   | 0   | 0
 1    | 1   | 2   | 1
 1    | 1   | 2   | 1
 1    | 2   | 4   | 2
 2    | 0   | 0   | 0
 2    | 0   | 0   | 0
 2    | 1   | 2   | 1
 2    | 1   | 2   | 1
 2    | 2   | 4   | 2
 3    | 0   | 0   | 0
 3    | 0   | 0   | 0
 3    | 1   | 2   | 1
 3    | 1   | 2   | 1
 3    | 2   | 4   | 2

statement skipped query
SELECT four, ten/4 as two,
	sum(ten/4) over (partition by four order by ten/4 rows between unbounded preceding and current row),
	last_value(ten/4) over (partition by four order by ten/4 rows between unbounded preceding and current row)
FROM (select distinct ten, four from tenk1) ss;
-------------------------------
 four | two | sum | last_value
------+-----+-----+------------
 0    | 0   | 0   | 0
 0    | 0   | 0   | 0
 0    | 1   | 1   | 1
 0    | 1   | 2   | 1
 0    | 2   | 4   | 2
 1    | 0   | 0   | 0
 1    | 0   | 0   | 0
 1    | 1   | 1   | 1
 1    | 1   | 2   | 1
 1    | 2   | 4   | 2
 2    | 0   | 0   | 0
 2    | 0   | 0   | 0
 2    | 1   | 1   | 1
 2    | 1   | 2   | 1
 2    | 2   | 4   | 2
 3    | 0   | 0   | 0
 3    | 0   | 0   | 0
 3    | 1   | 1   | 1
 3    | 1   | 2   | 1
 3    | 2   | 4   | 2

statement skipped query
SELECT sum(unique1) over (order by four range between current row and unbounded following),
	unique1, four
FROM tenk1 WHERE unique1 < 10;
----------------------
 sum | unique1 | four
-----+---------+------
 45  | 0       | 0
 45  | 8       | 0
 45  | 4       | 0
 33  | 5       | 1
 33  | 9       | 1
 33  | 1       | 1
 18  | 6       | 2
 18  | 2       | 2
 10  | 3       | 3
 10  | 7       | 3

statement skipped query
SELECT sum(unique1) over (rows between current row and unbounded following),
	unique1, four
FROM tenk1 WHERE unique1 < 10;
----------------------
 sum | unique1 | four
-----+---------+------
 45  | 4       | 0
 41  | 2       | 2
 39  | 1       | 1
 38  | 6       | 2
 32  | 9       | 1
 23  | 8       | 0
 15  | 5       | 1
 10  | 3       | 3
 7   | 7       | 3
 0   | 0       | 0

statement skipped query
SELECT sum(unique1) over (rows between 2 preceding and 2 following),
	unique1, four
FROM tenk1 WHERE unique1 < 10;
----------------------
 sum | unique1 | four
-----+---------+------
 7   | 4       | 0
 13  | 2       | 2
 22  | 1       | 1
 26  | 6       | 2
 29  | 9       | 1
 31  | 8       | 0
 32  | 5       | 1
 23  | 3       | 3
 15  | 7       | 3
 10  | 0       | 0

statement skipped query
SELECT sum(unique1) over (rows between 2 preceding and 1 preceding),
	unique1, four
FROM tenk1 WHERE unique1 < 10;
----------------------
 sum | unique1 | four
-----+---------+------
     | 4       | 0
 4   | 2       | 2
 6   | 1       | 1
 3   | 6       | 2
 7   | 9       | 1
 15  | 8       | 0
 17  | 5       | 1
 13  | 3       | 3
 8   | 7       | 3
 10  | 0       | 0

statement skipped query
SELECT sum(unique1) over (rows between 1 following and 3 following),
	unique1, four
FROM tenk1 WHERE unique1 < 10;
----------------------
 sum | unique1 | four
-----+---------+------
 9   | 4       | 0
 16  | 2       | 2
 23  | 1       | 1
 22  | 6       | 2
 16  | 9       | 1
 15  | 8       | 0
 10  | 5       | 1
 7   | 3       | 3
 0   | 7       | 3
     | 0       | 0

statement skipped query
SELECT sum(unique1) over (rows between unbounded preceding and 1 following),
	unique1, four
FROM tenk1 WHERE unique1 < 10;
----------------------
 sum | unique1 | four
-----+---------+------
 6   | 4       | 0
 7   | 2       | 2
 13  | 1       | 1
 22  | 6       | 2
 30  | 9       | 1
 35  | 8       | 0
 38  | 5       | 1
 45  | 3       | 3
 45  | 7       | 3
 45  | 0       | 0

statement skipped query
SELECT sum(unique1) over (w range between current row and unbounded following),
	unique1, four
FROM tenk1 WHERE unique1 < 10 WINDOW w AS (order by four);
----------------------
 sum | unique1 | four
-----+---------+------
 45  | 0       | 0
 45  | 8       | 0
 45  | 4       | 0
 33  | 5       | 1
 33  | 9       | 1
 33  | 1       | 1
 18  | 6       | 2
 18  | 2       | 2
 10  | 3       | 3
 10  | 7       | 3

statement skipped query
SELECT sum(unique1) over (order by four range between 2::int8 preceding and 1::int2 preceding),
	unique1, four
FROM tenk1 WHERE unique1 < 10;
ERROR:  RANGE PRECEDING is only supported with UNBOUNDED
LINE 1: SELECT sum(unique1) over (order by four range between 2::int...
                                                ^
SELECT first_value(unique1) over w,
	nth_value(unique1, 2) over w AS nth_2,
	last_value(unique1) over w, unique1, four
FROM tenk1 WHERE unique1 < 10
WINDOW w AS (order by four range between current row and unbounded following);
---------------------------------------------------
 first_value | nth_2 | last_value | unique1 | four
-------------+-------+------------+---------+------
 0           | 8     | 7          | 0       | 0
 0           | 8     | 7          | 8       | 0
 0           | 8     | 7          | 4       | 0
 5           | 9     | 7          | 5       | 1
 5           | 9     | 7          | 9       | 1
 5           | 9     | 7          | 1       | 1
 6           | 2     | 7          | 6       | 2
 6           | 2     | 7          | 2       | 2
 3           | 7     | 7          | 3       | 3
 3           | 7     | 7          | 7       | 3

statement skipped query
SELECT sum(unique1) over
	(order by unique1
	 rows (SELECT unique1 FROM tenk1 ORDER BY unique1 LIMIT 1) + 1 PRECEDING),
	unique1
FROM tenk1 WHERE unique1 < 10;
---------------
 sum | unique1
-----+---------
 0   | 0
 1   | 1
 3   | 2
 5   | 3
 7   | 4
 9   | 5
 11  | 6
 13  | 7
 15  | 8
 17  | 9

CREATE TEMP VIEW v_window AS
	SELECT i, sum(i) over (order by i rows between 1 preceding and 1 following) as sum_rows
	FROM generate_series(1, 10) i;
statement skipped query
SELECT * FROM v_window;
---------------
 i  | sum_rows
----+----------
 1  | 3
 2  | 6
 3  | 9
 4  | 12
 5  | 15
 6  | 18
 7  | 21
 8  | 24
 9  | 27
 10 | 19

statement skipped query
SELECT pg_get_viewdef('v_window');
-----------------------------------------------------------------------
 pg_get_viewdef
-----------------------------------------------------------------------
 SELECTi.i,+
 sum(i.i)OVER(ORDERBYi.iROWSBETWEEN1PRECEDINGAND1FOLLOWING)ASsum_rows+
 FROMgenerate_series(1,10)i(i);

statement skipped query
SELECT count(*) OVER (PARTITION BY four) FROM (SELECT * FROM tenk1 UNION ALL SELECT * FROM tenk2)s LIMIT 0;
-------
 count
-------

statement skipped query
SELECT rank() OVER (ORDER BY length('abc'));
------
 rank
------
 1

statement skipped query
SELECT rank() OVER (ORDER BY rank() OVER (ORDER BY random()));
ERROR:  window functions are not allowed in window definitions
LINE 1: SELECT rank() OVER (ORDER BY rank() OVER (ORDER BY random())...
                                     ^
SELECT * FROM empsalary WHERE row_number() OVER (ORDER BY salary) < 10;
ERROR:  window functions are not allowed in WHERE
LINE 1: SELECT * FROM empsalary WHERE row_number() OVER (ORDER BY sa...
                                      ^
SELECT * FROM empsalary INNER JOIN tenk1 ON row_number() OVER (ORDER BY salary) < 10;
ERROR:  window functions are not allowed in JOIN conditions
LINE 1: SELECT * FROM empsalary INNER JOIN tenk1 ON row_number() OVE...
                                                    ^
SELECT rank() OVER (ORDER BY 1), count(*) FROM empsalary GROUP BY 1;
ERROR:  window functions are not allowed in GROUP BY
LINE 1: SELECT rank() OVER (ORDER BY 1), count(*) FROM empsalary GRO...
               ^
SELECT * FROM rank() OVER (ORDER BY random());
ERROR:  syntax error at or near "ORDER"
LINE 1: SELECT * FROM rank() OVER (ORDER BY random());
                                   ^
DELETE FROM empsalary WHERE (rank() OVER (ORDER BY random())) > 10;
ERROR:  window functions are not allowed in WHERE
LINE 1: DELETE FROM empsalary WHERE (rank() OVER (ORDER BY random())...
                                     ^
DELETE FROM empsalary RETURNING rank() OVER (ORDER BY random());
ERROR:  window functions are not allowed in RETURNING
LINE 1: DELETE FROM empsalary RETURNING rank() OVER (ORDER BY random...
                                        ^
SELECT count(*) OVER w FROM tenk1 WINDOW w AS (ORDER BY unique1), w AS (ORDER BY unique1);
ERROR:  window "w" is already defined
LINE 1: ...w FROM tenk1 WINDOW w AS (ORDER BY unique1), w AS (ORDER BY ...
                                                             ^
SELECT rank() OVER (PARTITION BY four, ORDER BY ten) FROM tenk1;
ERROR:  syntax error at or near "ORDER"
LINE 1: SELECT rank() OVER (PARTITION BY four, ORDER BY ten) FROM te...
                                               ^
SELECT count() OVER () FROM tenk1;
ERROR:  count(*) must be used to call a parameterless aggregate function
LINE 1: SELECT count() OVER () FROM tenk1;
               ^
SELECT generate_series(1, 100) OVER () FROM empsalary;
ERROR:  OVER specified, but generate_series is not a window function nor an aggregate function
LINE 1: SELECT generate_series(1, 100) OVER () FROM empsalary;
               ^
SELECT ntile(0) OVER (ORDER BY ten), ten, four FROM tenk1;
ERROR:  argument of ntile must be greater than zero
SELECT nth_value(four, 0) OVER (ORDER BY ten), ten, four FROM tenk1;
ERROR:  argument of nth_value must be greater than zero
SELECT sum(salary), row_number() OVER (ORDER BY depname), sum(
    sum(salary) FILTER (WHERE enroll_date > '2007-01-01')
) FILTER (WHERE depname <> 'sales') OVER (ORDER BY depname DESC) AS "filtered_sum",
    depname
FROM empsalary GROUP BY depname;
-----------------------------------------------
 sum   | row_number | filtered_sum | depname
-------+------------+--------------+-----------
 14600 | 3          |              | sales
 7400  | 2          | 3500         | personnel
 25100 | 1          | 22600        | develop

EXPLAIN (COSTS OFF)
statement skipped query
SELECT * FROM
  (SELECT depname,
          sum(salary) OVER (PARTITION BY depname) depsalary,
          min(salary) OVER (PARTITION BY depname || 'A', depname) depminsalary
   FROM empsalary) emp
WHERE depname = 'sales';
----------------------------------------
 QUERYPLAN
----------------------------------------
 SubqueryScanonemp
 ->WindowAgg
 ->Sort
 SortKey:(((empsalary.depname)::text
 ->WindowAgg
 ->SeqScanonempsalary
 Filter:((depname)::text='sales'::text)

EXPLAIN (COSTS OFF)
statement skipped query
SELECT * FROM
  (SELECT depname,
          sum(salary) OVER (PARTITION BY enroll_date) enroll_salary,
          min(salary) OVER (PARTITION BY depname) depminsalary
   FROM empsalary) emp
WHERE depname = 'sales';
--------------------------------------------
 QUERYPLAN
--------------------------------------------
 SubqueryScanonemp
 Filter:((emp.depname)::text='sales'::text)
 ->WindowAgg
 ->Sort
 SortKey:empsalary.depname
 ->WindowAgg
 ->Sort
 SortKey:empsalary.enroll_date
 ->SeqScanonempsalary

DROP TABLE empsalary;
CREATE FUNCTION nth_value_def(val anyelement, n integer = 1) RETURNS anyelement
  LANGUAGE internal WINDOW IMMUTABLE STRICT AS 'window_nth_value';
statement skipped query
SELECT nth_value_def(n := 2, val := ten) OVER (PARTITION BY four), ten, four
  FROM (SELECT * FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten) s;
----------------------------
 nth_value_def | ten | four
---------------+-----+------
 0             | 0   | 0
 0             | 0   | 0
 0             | 4   | 0
 1             | 1   | 1
 1             | 1   | 1
 1             | 7   | 1
 1             | 9   | 1
               | 0   | 2
 3             | 1   | 3
 3             | 3   | 3

statement skipped query
SELECT nth_value_def(ten) OVER (PARTITION BY four), ten, four
  FROM (SELECT * FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten) s;
----------------------------
 nth_value_def | ten | four
---------------+-----+------
 0             | 0   | 0
 0             | 0   | 0
 0             | 4   | 0
 1             | 1   | 1
 1             | 1   | 1
 1             | 7   | 1
 1             | 9   | 1
 0             | 0   | 2
 1             | 1   | 3
 1             | 3   | 3

--
--
CREATE FUNCTION logging_sfunc_nonstrict(text, anyelement) RETURNS text AS
$$ SELECT COALESCE($1, '') || '*' || quote_nullable($2) $$
LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION logging_msfunc_nonstrict(text, anyelement) RETURNS text AS
$$ SELECT COALESCE($1, '') || '+' || quote_nullable($2) $$
LANGUAGE SQL IMMUTABLE;
CREATE FUNCTION logging_minvfunc_nonstrict(text, anyelement) RETURNS text AS
$$ SELECT $1 || '-' || quote_nullable($2) $$
LANGUAGE SQL IMMUTABLE;
CREATE AGGREGATE logging_agg_nonstrict (anyelement)
(
	stype = text,
	sfunc = logging_sfunc_nonstrict,
	mstype = text,
	msfunc = logging_msfunc_nonstrict,
	minvfunc = logging_minvfunc_nonstrict
);
CREATE AGGREGATE logging_agg_nonstrict_initcond (anyelement)
(
	stype = text,
	sfunc = logging_sfunc_nonstrict,
	mstype = text,
	msfunc = logging_msfunc_nonstrict,
	minvfunc = logging_minvfunc_nonstrict,
	initcond = 'I',
	minitcond = 'MI'
);
CREATE FUNCTION logging_sfunc_strict(text, anyelement) RETURNS text AS
$$ SELECT $1 || '*' || quote_nullable($2) $$
LANGUAGE SQL STRICT IMMUTABLE;
CREATE FUNCTION logging_msfunc_strict(text, anyelement) RETURNS text AS
$$ SELECT $1 || '+' || quote_nullable($2) $$
LANGUAGE SQL STRICT IMMUTABLE;
CREATE FUNCTION logging_minvfunc_strict(text, anyelement) RETURNS text AS
$$ SELECT $1 || '-' || quote_nullable($2) $$
LANGUAGE SQL STRICT IMMUTABLE;
CREATE AGGREGATE logging_agg_strict (text)
(
	stype = text,
	sfunc = logging_sfunc_strict,
	mstype = text,
	msfunc = logging_msfunc_strict,
	minvfunc = logging_minvfunc_strict
);
CREATE AGGREGATE logging_agg_strict_initcond (anyelement)
(
	stype = text,
	sfunc = logging_sfunc_strict,
	mstype = text,
	msfunc = logging_msfunc_strict,
	minvfunc = logging_minvfunc_strict,
	initcond = 'I',
	minitcond = 'MI'
);
statement skipped query
SELECT
	p::text || ',' || i::text || ':' || COALESCE(v::text, 'NULL') AS row,
	logging_agg_nonstrict(v) over wnd as nstrict,
	logging_agg_nonstrict_initcond(v) over wnd as nstrict_init,
	logging_agg_strict(v::text) over wnd as strict,
	logging_agg_strict_initcond(v) over wnd as strict_init
FROM (VALUES
	(1, 1, NULL),
	(1, 2, 'a'),
	(1, 3, 'b'),
	(1, 4, NULL),
	(1, 5, NULL),
	(1, 6, 'c'),
	(2, 1, NULL),
	(2, 2, 'x'),
	(3, 1, 'z')
) AS t(p, i, v)
WINDOW wnd AS (PARTITION BY P ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
ORDER BY p, i;
-----------------------------------------------------------------------------------------------------------------------------------------
 row      | nstrict                                       | nstrict_init                                    | strict    | strict_init
----------+-----------------------------------------------+-------------------------------------------------+-----------+----------------
 1,1:NULL | +NULL                                         | MI+NULL                                         |           | MI
 1,2:a    | +NULL+'a'                                     | MI+NULL+'a'                                     | a         | MI+'a'
 1,3:b    | +NULL+'a'-NULL+'b'                            | MI+NULL+'a'-NULL+'b'                            | a+'b'     | MI+'a'+'b'
 1,4:NULL | +NULL+'a'-NULL+'b'-'a'+NULL                   | MI+NULL+'a'-NULL+'b'-'a'+NULL                   | a+'b'-'a' | MI+'a'+'b'-'a'
 1,5:NULL | +NULL+'a'-NULL+'b'-'a'+NULL-'b'+NULL          | MI+NULL+'a'-NULL+'b'-'a'+NULL-'b'+NULL          |           | MI
 1,6:c    | +NULL+'a'-NULL+'b'-'a'+NULL-'b'+NULL-NULL+'c' | MI+NULL+'a'-NULL+'b'-'a'+NULL-'b'+NULL-NULL+'c' | c         | MI+'c'
 2,1:NULL | +NULL                                         | MI+NULL                                         |           | MI
 2,2:x    | +NULL+'x'                                     | MI+NULL+'x'                                     | x         | MI+'x'
 3,1:z    | +'z'                                          | MI+'z'                                          | z         | MI+'z'

statement skipped query
SELECT
	p::text || ',' || i::text || ':' ||
		CASE WHEN f THEN COALESCE(v::text, 'NULL') ELSE '-' END as row,
	logging_agg_nonstrict(v) filter(where f) over wnd as nstrict_filt,
	logging_agg_nonstrict_initcond(v) filter(where f) over wnd as nstrict_init_filt,
	logging_agg_strict(v::text) filter(where f) over wnd as strict_filt,
	logging_agg_strict_initcond(v) filter(where f) over wnd as strict_init_filt
FROM (VALUES
	(1, 1, true,  NULL),
	(1, 2, false, 'a'),
	(1, 3, true,  'b'),
	(1, 4, false, NULL),
	(1, 5, false, NULL),
	(1, 6, false, 'c'),
	(2, 1, false, NULL),
	(2, 2, true,  'x'),
	(3, 1, true,  'z')
) AS t(p, i, f, v)
WINDOW wnd AS (PARTITION BY p ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
ORDER BY p, i;
------------------------------------------------------------------------------
 row      | nstrict_filt | nstrict_init_filt | strict_filt | strict_init_filt
----------+--------------+-------------------+-------------+------------------
 1,1:NULL | +NULL        | MI+NULL           |             | MI
 1,2:-    | +NULL        | MI+NULL           |             | MI
 1,3:b    | +'b'         | MI+'b'            | b           | MI+'b'
 1,4:-    | +'b'         | MI+'b'            | b           | MI+'b'
 1,5:-    |              | MI                |             | MI
 1,6:-    |              | MI                |             | MI
 2,1:-    |              | MI                |             | MI
 2,2:x    | +'x'         | MI+'x'            | x           | MI+'x'
 3,1:z    | +'z'         | MI+'z'            | z           | MI+'z'

statement skipped query
SELECT
	i::text || ':' || COALESCE(v::text, 'NULL') as row,
	logging_agg_strict(v::text)
		over wnd as inverse,
	logging_agg_strict(v::text || CASE WHEN random() < 0 then '?' ELSE '' END)
		over wnd as noinverse
FROM (VALUES
	(1, 'a'),
	(2, 'b'),
	(3, 'c')
) AS t(i, v)
WINDOW wnd AS (ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
ORDER BY i;
---------------------------------
 row | inverse       | noinverse
-----+---------------+-----------
 1:a | a             | a
 2:b | a+'b'         | a*'b'
 3:c | a+'b'-'a'+'c' | b*'c'

statement skipped query
SELECT
	i::text || ':' || COALESCE(v::text, 'NULL') as row,
	logging_agg_strict(v::text) filter(where true)
		over wnd as inverse,
	logging_agg_strict(v::text) filter(where random() >= 0)
		over wnd as noinverse
FROM (VALUES
	(1, 'a'),
	(2, 'b'),
	(3, 'c')
) AS t(i, v)
WINDOW wnd AS (ORDER BY i ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
ORDER BY i;
---------------------------------
 row | inverse       | noinverse
-----+---------------+-----------
 1:a | a             | a
 2:b | a+'b'         | a*'b'
 3:c | a+'b'-'a'+'c' | b*'c'

statement skipped query
SELECT
	logging_agg_strict(v::text) OVER wnd
FROM (VALUES
	(1, 'a'),
	(2, 'b'),
	(3, 'c')
) AS t(i, v)
WINDOW wnd AS (ORDER BY i ROWS BETWEEN CURRENT ROW AND CURRENT ROW)
ORDER BY i;
--------------------
 logging_agg_strict
--------------------
 a
 b
 c

CREATE FUNCTION sum_int_randrestart_minvfunc(int4, int4) RETURNS int4 AS
$$ SELECT CASE WHEN random() < 0.2 THEN NULL ELSE $1 - $2 END $$
LANGUAGE SQL STRICT;
CREATE AGGREGATE sum_int_randomrestart (int4)
(
	stype = int4,
	sfunc = int4pl,
	mstype = int4,
	msfunc = int4pl,
	minvfunc = sum_int_randrestart_minvfunc
);
WITH
vs AS (
	SELECT i, (random() * 100)::int4 AS v
	FROM generate_series(1, 100) AS i
),
sum_following AS (
	SELECT i, SUM(v) OVER
		(ORDER BY i DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS s
	FROM vs
)
statement skipped query
SELECT DISTINCT
	sum_following.s = sum_int_randomrestart(v) OVER fwd AS eq1,
	-sum_following.s = sum_int_randomrestart(-v) OVER fwd AS eq2,
	100*3+(vs.i-1)*3 = length(logging_agg_nonstrict(''::text) OVER fwd) AS eq3
FROM vs
JOIN sum_following ON sum_following.i = vs.i
WINDOW fwd AS (
	ORDER BY vs.i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
);
--------------------
 eq1  | eq2  | eq3
------+------+------
 True | True | True

--
--
statement skipped query
SELECT i,AVG(v::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v);
------------------------
 i | avg
---+--------------------
 1 | 1.5000000000000000
 2 | 2.0000000000000000
 3 |
 4 |

statement skipped query
SELECT i,AVG(v::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v);
------------------------
 i | avg
---+--------------------
 1 | 1.5000000000000000
 2 | 2.0000000000000000
 3 |
 4 |

statement skipped query
SELECT i,AVG(v::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v);
------------------------
 i | avg
---+--------------------
 1 | 1.5000000000000000
 2 | 2.0000000000000000
 3 |
 4 |

statement skipped query
SELECT i,AVG(v::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1.5),(2,2.5),(3,NULL),(4,NULL)) t(i,v);
------------------------
 i | avg
---+--------------------
 1 | 2.0000000000000000
 2 | 2.5000000000000000
 3 |
 4 |

statement skipped query
SELECT i,AVG(v::interval) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,'1 sec'),(2,'2 sec'),(3,NULL),(4,NULL)) t(i,v);
--------------
 i | avg
---+----------
 1 | @1.5secs
 2 | @2secs
 3 |
 4 |

statement skipped query
SELECT i,SUM(v::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v);
---------
 i | sum
---+-----
 1 | 3
 2 | 2
 3 |
 4 |

statement skipped query
SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v);
---------
 i | sum
---+-----
 1 | 3
 2 | 2
 3 |
 4 |

statement skipped query
SELECT i,SUM(v::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v);
---------
 i | sum
---+-----
 1 | 3
 2 | 2
 3 |
 4 |

statement skipped query
SELECT i,SUM(v::money) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,'1.10'),(2,'2.20'),(3,NULL),(4,NULL)) t(i,v);
-----------
 i | sum
---+-------
 1 | $3.30
 2 | $2.20
 3 |
 4 |

statement skipped query
SELECT i,SUM(v::interval) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,'1 sec'),(2,'2 sec'),(3,NULL),(4,NULL)) t(i,v);
------------
 i | sum
---+--------
 1 | @3secs
 2 | @2secs
 3 |
 4 |

statement skipped query
SELECT i,SUM(v::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1.1),(2,2.2),(3,NULL),(4,NULL)) t(i,v);
---------
 i | sum
---+-----
 1 | 3.3
 2 | 2.2
 3 |
 4 |

statement skipped query
SELECT SUM(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1.01),(2,2),(3,3)) v(i,n);
------
 sum
------
 6.01
 5
 3

statement skipped query
SELECT i,COUNT(v) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v);
-----------
 i | count
---+-------
 1 | 2
 2 | 1
 3 | 0
 4 | 0

statement skipped query
SELECT i,COUNT(*) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v);
-----------
 i | count
---+-------
 1 | 4
 2 | 3
 3 | 2
 4 | 1

statement skipped query
SELECT VAR_POP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
-----------------------
 var_pop
-----------------------
 21704.000000000000
 13868.750000000000
 11266.666666666667
 4225.0000000000000000
 0

statement skipped query
SELECT VAR_POP(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
-----------------------
 var_pop
-----------------------
 21704.000000000000
 13868.750000000000
 11266.666666666667
 4225.0000000000000000
 0

statement skipped query
SELECT VAR_POP(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
-----------------------
 var_pop
-----------------------
 21704.000000000000
 13868.750000000000
 11266.666666666667
 4225.0000000000000000
 0

statement skipped query
SELECT VAR_POP(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
-----------------------
 var_pop
-----------------------
 21704.000000000000
 13868.750000000000
 11266.666666666667
 4225.0000000000000000
 0

statement skipped query
SELECT VAR_SAMP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
-----------------------
 var_samp
-----------------------
 27130.000000000000
 18491.666666666667
 16900.000000000000
 8450.0000000000000000


statement skipped query
SELECT VAR_SAMP(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
-----------------------
 var_samp
-----------------------
 27130.000000000000
 18491.666666666667
 16900.000000000000
 8450.0000000000000000


statement skipped query
SELECT VAR_SAMP(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
-----------------------
 var_samp
-----------------------
 27130.000000000000
 18491.666666666667
 16900.000000000000
 8450.0000000000000000


statement skipped query
SELECT VAR_SAMP(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
-----------------------
 var_samp
-----------------------
 27130.000000000000
 18491.666666666667
 16900.000000000000
 8450.0000000000000000


statement skipped query
SELECT VARIANCE(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
-----------------------
 variance
-----------------------
 27130.000000000000
 18491.666666666667
 16900.000000000000
 8450.0000000000000000


statement skipped query
SELECT VARIANCE(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
-----------------------
 variance
-----------------------
 27130.000000000000
 18491.666666666667
 16900.000000000000
 8450.0000000000000000


statement skipped query
SELECT VARIANCE(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
-----------------------
 variance
-----------------------
 27130.000000000000
 18491.666666666667
 16900.000000000000
 8450.0000000000000000


statement skipped query
SELECT VARIANCE(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
-----------------------
 variance
-----------------------
 27130.000000000000
 18491.666666666667
 16900.000000000000
 8450.0000000000000000


statement skipped query
SELECT STDDEV_POP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n);
---------------------
 stddev_pop
---------------------
 147.322774885623
 147.322774885623
 117.765657133139
 106.144555520604
 65.0000000000000000
 0

statement skipped query
SELECT STDDEV_POP(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n);
---------------------
 stddev_pop
---------------------
 147.322774885623
 147.322774885623
 117.765657133139
 106.144555520604
 65.0000000000000000
 0

statement skipped query
SELECT STDDEV_POP(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n);
---------------------
 stddev_pop
---------------------
 147.322774885623
 147.322774885623
 117.765657133139
 106.144555520604
 65.0000000000000000
 0

statement skipped query
SELECT STDDEV_POP(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n);
---------------------
 stddev_pop
---------------------
 147.322774885623
 147.322774885623
 117.765657133139
 106.144555520604
 65.0000000000000000
 0

statement skipped query
SELECT STDDEV_SAMP(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n);
---------------------
 stddev_samp
---------------------
 164.711869639076
 164.711869639076
 135.984067694222
 130.000000000000
 91.9238815542511782


statement skipped query
SELECT STDDEV_SAMP(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n);
---------------------
 stddev_samp
---------------------
 164.711869639076
 164.711869639076
 135.984067694222
 130.000000000000
 91.9238815542511782


statement skipped query
SELECT STDDEV_SAMP(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n);
---------------------
 stddev_samp
---------------------
 164.711869639076
 164.711869639076
 135.984067694222
 130.000000000000
 91.9238815542511782


statement skipped query
SELECT STDDEV_SAMP(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(1,NULL),(2,600),(3,470),(4,170),(5,430),(6,300)) r(i,n);
---------------------
 stddev_samp
---------------------
 164.711869639076
 164.711869639076
 135.984067694222
 130.000000000000
 91.9238815542511782


statement skipped query
SELECT STDDEV(n::bigint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
---------------------
 stddev
---------------------
 164.711869639076
 164.711869639076
 135.984067694222
 130.000000000000
 91.9238815542511782


statement skipped query
SELECT STDDEV(n::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
---------------------
 stddev
---------------------
 164.711869639076
 164.711869639076
 135.984067694222
 130.000000000000
 91.9238815542511782


statement skipped query
SELECT STDDEV(n::smallint) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
---------------------
 stddev
---------------------
 164.711869639076
 164.711869639076
 135.984067694222
 130.000000000000
 91.9238815542511782


statement skipped query
SELECT STDDEV(n::numeric) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM (VALUES(0,NULL),(1,600),(2,470),(3,170),(4,430),(5,300)) r(i,n);
---------------------
 stddev
---------------------
 164.711869639076
 164.711869639076
 135.984067694222
 130.000000000000
 91.9238815542511782


statement skipped query
SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND CURRENT ROW)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v);
---------
 i | sum
---+-----
 1 | 1
 2 | 2
 3 |
 4 |

statement skipped query
SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,NULL),(4,NULL)) t(i,v);
---------
 i | sum
---+-----
 1 | 3
 2 | 2
 3 |
 4 |

statement skipped query
SELECT i,SUM(v::int) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
  FROM (VALUES(1,1),(2,2),(3,3),(4,4)) t(i,v);
---------
 i | sum
---+-----
 1 | 3
 2 | 6
 3 | 9
 4 | 7

statement skipped query
SELECT a, b,
       SUM(b) OVER(ORDER BY A ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM (VALUES(1,1::numeric),(2,2),(3,'NaN'),(4,3),(5,4)) t(a,b);
---------------
 a | b   | sum
---+-----+-----
 1 | 1   | 1
 2 | 2   | 3
 3 | NaN | NaN
 4 | 3   | NaN
 5 | 4   | 7

statement skipped query
SELECT to_char(SUM(n::float8) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING),'999999999999999999999D9')
  FROM (VALUES(1,1e20),(2,1)) n(i,n);
-----------------------
 to_char
-----------------------
 100000000000000000000
 1.0

statement skipped query
SELECT i, b, bool_and(b) OVER w, bool_or(b) OVER w
  FROM (VALUES (1,true), (2,true), (3,false), (4,false), (5,true)) v(i,b)
  WINDOW w AS (ORDER BY i ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING);
--------------------------------
 i | b     | bool_and | bool_or
---+-------+----------+---------
 1 | True  | True     | True
 2 | True  | False    | True
 3 | False | False    | False
 4 | False | False    | True
 5 | True  | True     | True

