statement ok
CREATE TABLE empsalary (
    depname String,
    empno Int64,
    salary Int64,
    enroll_date Date,
    primary key(empno)
);

statement ok
INSERT INTO empsalary (depname, empno, salary, enroll_date) VALUES
('develop', 10, 5200, Date('2007-08-01')),
('sales', 1, 5000, Date('2006-10-01')),
('personnel', 5, 3500, Date('2007-12-10')),
('sales', 4, 4800, Date('2007-08-08')),
('personnel', 2, 3900, Date('2006-12-23')),
('develop', 7, 4200, Date('2008-01-01')),
('develop', 9, 4500, Date('2008-01-01')),
('sales', 3, 4800, Date('2007-08-01')),
('develop', 8, 6000, Date('2006-10-01')),
('develop', 11, 5200, Date('2007-08-15'));

statement ok
CREATE TABLE tenk1 (
    unique1		Int64,
    unique2		Int64,
    two			Int64,
    four		Int64,
    ten			Int64,
    twenty		Int64,
    hundred		Int64,
    thousand	Int64,
    twothousand	Int64,
    fivethous	Int64,
    tenthous	Int64,
    odd			Int64,
    even		Int64,
    stringu1	String,
    stringu2	String,
    string4		String,
    primary key (unique1, unique2)
);

statement ok
CREATE TABLE int4_tbl(f1 Int32, primary key (f1));

statement ok
INSERT INTO int4_tbl(f1) VALUES (123456), (0);

statement import table data
insert into tenk1 (unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4) values postgres/data/tenk.data

statement stream query
SELECT depname, empno, salary, sum(salary) OVER w FROM empsalary WINDOW w AS (PARTITION BY depname) ORDER BY depname, salary;

statement stream query
SELECT depname, empno, salary, rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary);

-- with GROUP BY
statement stream query
SELECT four, ten, SUM(SUM(four)) OVER w, AVG(ten) FROM tenk1
GROUP BY four, ten WINDOW w AS (PARTITION BY four) ORDER BY four, ten;

statement stream query
SELECT depname, empno, salary, sum(salary) OVER w FROM empsalary WINDOW w AS (PARTITION BY depname);

statement stream query
SELECT depname, empno, salary, rank() OVER w AS r FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary) ORDER BY r;

-- empty window specification
statement stream query
SELECT COUNT(*) OVER w FROM tenk1 WHERE unique2 < 10 WINDOW w AS ();

-- no window operation
statement stream query
SELECT four FROM tenk1 WHERE FALSE WINDOW w AS (PARTITION BY ten);

-- cumulative aggregate
statement stream query
SELECT sum(four) OVER w AS sum_1, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY ten ORDER BY unique2);

statement stream query
SELECT row_number() OVER w FROM tenk1 WHERE unique2 < 10 WINDOW w AS (ORDER BY unique2);

statement stream query
SELECT rank() OVER w AS rank_1, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY four ORDER BY ten);

statement stream query
SELECT dense_rank() OVER w, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY four ORDER BY ten);

statement error
SELECT percent_rank() OVER w, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY four ORDER BY ten);

statement error
SELECT cume_dist() OVER w, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY four ORDER BY ten);

statement error
SELECT ntile(3) OVER w, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (ORDER BY ten, four);

statement error
SELECT ntile(NULL) OVER w, ten, four FROM tenk1 WINDOW w AS (ORDER BY ten, four) LIMIT 2;

statement stream query
SELECT lag(ten) OVER w, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY four ORDER BY ten);

statement error
SELECT lag(ten, four) OVER w, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY four ORDER BY ten);

statement error
SELECT lag(ten, four, 0) OVER w, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY four ORDER BY ten);

statement stream query
SELECT lead(ten) OVER w, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY four ORDER BY ten);

statement stream query
SELECT lead(ten * 2, 1) OVER w, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY four ORDER BY ten);

statement error
SELECT lead(ten * 2, 1, -1) OVER w, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY four ORDER BY ten);

statement stream query
SELECT first_value(ten) OVER w, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY four ORDER BY ten);

-- last_value returns the last row of the frame, which is CURRENT ROW in ORDER BY window.
-- XXX: different behavior w.r.t postgres
statement stream query
SELECT last_value(four) OVER w, last_value(four) OVER w, ten, four FROM tenk1 WHERE unique2 < 10 WINDOW w AS (ORDER BY ten);

statement stream query
SELECT last_value(ten) OVER w, ten, four FROM
    (SELECT * FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten LIMIT 1000)
WINDOW w AS (PARTITION BY four)
ORDER BY four, ten;

statement error
SELECT nth_value(ten, four + 1) OVER w, ten, four FROM
    (SELECT * FROM tenk1 WHERE unique2 < 10 ORDER BY four, ten)
WINDOW w AS (PARTITION BY four);

statement stream query
SELECT ten, two, sum(hundred) AS gsum, sum(sum(hundred)) OVER w AS wsum
FROM tenk1 GROUP BY ten, two WINDOW w AS (PARTITION BY two ORDER BY ten);

statement stream query
SELECT count(*) OVER w, four FROM (SELECT * FROM tenk1 WHERE two = 1) WHERE unique2 < 10 WINDOW w AS (PARTITION BY four);

-- WRONG!
statement stream query
SELECT (count(*) OVER w + sum(hundred) OVER w) AS cntsum
FROM tenk1 WHERE unique2 < 10
WINDOW w AS (PARTITION BY four ORDER BY ten);

-- opexpr with different windows evaluation.
statement stream query
SELECT * FROM(
  SELECT count(*) OVER w1 +
    sum(hundred) OVER w2 AS total,
    count(*) OVER w1 AS fourcount,
    sum(hundred) OVER w2 AS twosum
    FROM tenk1
    WINDOW w1 AS (PARTITION BY four ORDER BY ten), w2 AS (PARTITION BY two ORDER BY ten)
)
WHERE total <> fourcount + twosum;

statement stream query
SELECT avg(four) OVER w FROM tenk1 WHERE unique2 < 10 WINDOW w AS (PARTITION BY four ORDER BY thousand / 100);

statement stream query
SELECT ten, two, sum(hundred) AS gsum, sum(sum(hundred)) OVER win AS wsum
FROM tenk1 GROUP BY ten, two WINDOW win AS (PARTITION BY two ORDER BY ten);

-- more than one window with GROUP BY
statement stream query
SELECT sum(salary),
    row_number() OVER w1,
    sum(sum(salary)) OVER w2
FROM empsalary GROUP BY depname
WINDOW w1 AS (ORDER BY depname), w2 AS (ORDER BY depname DESC);

-- identical windows with different names
statement stream query
SELECT sum(salary) OVER w1, count(*) OVER w2
FROM empsalary WINDOW w1 AS (ORDER BY salary), w2 AS (ORDER BY salary);

-- subplan
statement error
SELECT lead(ten, (SELECT two FROM tenk1 WHERE s.unique2 = unique2)) OVER w
FROM tenk1 s WHERE unique2 < 10
WINDOW w AS (PARTITION BY four ORDER BY ten);

-- empty table
statement stream query
SELECT count(*) OVER w FROM (SELECT * FROM tenk1 WHERE FALSE) WINDOW w AS (PARTITION BY four);

-- mixture of agg/wfunc in the same window
statement stream query
SELECT sum(salary) OVER w, rank() OVER w FROM empsalary WINDOW w AS (PARTITION BY depname ORDER BY salary DESC);

-- strict aggs
statement stream query
SELECT empno, depname, salary, bonus, depadj, MIN(bonus) OVER w, MAX(depadj) OVER w FROM(
    SELECT empsalary.*,
        CASE WHEN enroll_date < DateTime::MakeDatetime(DateTime::Parse("%Y-%m-%d")('2007-08-01'))
            THEN 2008 - DateTime::GetYear(enroll_date)
            ELSE 42 END * 500 AS bonus,
        CASE WHEN AVG(salary) OVER wi < salary
            THEN 200
            ELSE 42 END AS depadj
    FROM empsalary
    WINDOW wi AS (PARTITION BY depname)
)
WINDOW w AS (ORDER BY empno);

-- window function over ungrouped agg over empty row set (bug before 9.1)
statement stream query
SELECT SUM(COUNT(f1)) OVER w FROM int4_tbl WHERE f1=42 WINDOW w AS ();

-- window function with ORDER BY an expression involving aggregates (9.1 bug)
statement stream query
select ten,
  sum(unique1) + sum(unique2) as res,
  rank() over w as rank
from tenk1
group by ten
window w AS (order by sum(unique1) + sum(unique2))
order by ten;

-- test non-default frame specifications
statement stream query
SELECT four, ten,
	sum(ten) over w,
	last_value(ten) over w
FROM (select distinct ten, four from tenk1)
WINDOW w AS (partition by four order by ten)
ORDER BY four, ten;

statement error
SELECT four, ten,
	sum(ten) over w,
	last_value(ten) over w
FROM (select distinct ten, four from tenk1)
WINDOW w AS (partition by four order by ten range between unbounded preceding and current row);

statement error
SELECT four, ten,
	sum(ten) over w,
	last_value(ten) over w
FROM (select distinct ten, four from tenk1)
WINDOW w AS (partition by four order by ten range between unbounded preceding and unbounded following);

statement error
SELECT four, ten/4 as two,
	sum(ten/4) over w,
	last_value(ten/4) over w
FROM (select distinct ten, four from tenk1)
WINDOW w AS (partition by four order by ten/4 range between unbounded preceding and current row);

statement stream query
SELECT four, ten/4 as two,
	sum(ten/4) over w as three,
	last_value(ten/4) over w
FROM (select distinct ten, four from tenk1)
WINDOW w AS (partition by four order by ten/4 rows between unbounded preceding and current row)
ORDER BY four, two, three;

statement error
SELECT sum(unique1) over w,
	unique1, four
FROM tenk1 WHERE unique1 < 10
WINDOW w AS (order by four range between current row and unbounded following);

statement stream query
SELECT sum(unique1) over w,
	unique1, four
FROM tenk1 WHERE unique1 < 10
WINDOW w AS (rows between current row and unbounded following);

statement stream query
SELECT sum(unique1) over w,
	unique1, four
FROM tenk1 WHERE unique1 < 10
WINDOW w AS (rows between 2 preceding and 2 following);

statement stream query
SELECT sum(unique1) over w,
	unique1, four
FROM tenk1 WHERE unique1 < 10
WINDOW w AS (rows between 2 preceding and 2 following exclude no others);

