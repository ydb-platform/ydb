Usage: ydb [global options...] scripting yql [options...]

Description: Execute YQL script

Global options:
  {-e|--endpoint}, {-d|--database}, {-v|--verbose}, {-p|--profile}, --ca-file, --iam-token-file, --yc-token-file, --use-metadata-credentials, --sa-key-file, --token-file, --user, --password-file, --no-password, --oauth2-key-file, --iam-endpoint, --profile-file
  To get full description of these options run 'ydb --help'.

Options:
  {-?|-h|--help}           Print usage, -hh for detailed help
  --help-ex                Print usage with examples
  --timeout ms             Operation timeout. Operation should be executed on server within this timeout. There could also be a delay up to 200ms to receive timeout error from server.
  --stats [String]         Collect statistics mode [none, basic, full]
  --flame-graph [Path]     Path for statistics flame graph image, works only with full stats
  {-s|--script} [String]   Text of script to execute
  {-f|--file} PATH         [Required] Script file
  --explain                Explain query (default: 0)
  --show-response-metadata Show response metadata for ydb call (default: 0)
  --format STRING          Output format. Available options:
                             pretty
                               Human readable output
                             json-unicode
                               Output in json format, binary strings are encoded with unicode characters. Every row is a separate json on a separate line.
                             json-unicode-array
                               Output in json format, binary strings are encoded with unicode characters. Every resultset is a json array of rows. Every row is a separate json on a separate line.
                             json-base64
                               Output in json format, binary strings are encoded with base64. Every row is a separate json on a separate line.
                             json-base64-array
                               Output in json format, binary strings are encoded with base64. Every resultset is a json array of rows. Every row is a separate json on a separate line.
                             parquet
                               Output in parquet format
                           Default: "pretty".
  {-p|--param} $name=value Query parameter[s].
                           Several parameter options can be specified.
                           To change input format use --input-format option.
                           Escaping depends on operating system.
  --param-file PATH        File name with parameter names and values in json format. You may specify this option repeatedly.
  --input-format STRING    Input format. Available options:
                             json-unicode
                               Input in json format, binary strings are decoded with unicode characters
                             json-base64
                               Input in json format, binary strings are decoded with base64
                           Default: "json-unicode".
  --stdin-format STRING    Stdin parameters format and framing. Specify this option twice to select both.
                           1. Parameters format. Available options:
                             json-unicode
                               Parameter names and values in json unicode format
                             json-base64
                               Parameter names and values in json unicode format, binary string parameter values are base64-encoded
                             raw
                               Binary value with no transformations or parsing, parameter name is set by an "stdin-par" option
                             csv
                               Parameter names and values in csv format
                             tsv
                               Parameter names and values in tsv format
                           Default: "json-unicode".
                           2. Framing: defines how parameter sets are delimited on the stdin. Available options:
                             no-framing
                               Data from stdin is taken as a single set of parameters
                             newline-delimited
                               Newline character delimits parameter sets on stdin and triggers processing in accordance to "batch" option
                           Default: "no-framing".
  --columns STR            String with column names that replaces header. Relevant when passing parameters in CSV/TSV format only. It is assumed that there is no header in the file
  --skip-rows NUM          Number of header rows to skip (not including the row of column names, if any). Relevant when passing parameters in CSV/TSV format only.
                           Default: 0.
  --stdin-par STRING       Parameter name on stdin, required/applicable when stdin-format implies values only.
  --batch STRING           Batching mode for stdin parameters processing. Available options:
                             iterative
                               Executes script for each parameter set (exactly one execution when no framing specified in "stdin-format")
                             full
                               Executes script once, with all parameter sets wrapped in json list, when EOF is reached on stdin
                             adaptive
                               Executes script with a json list of parameter sets every time when its number reaches batch-limit, or the waiting time reaches batch-max-delay.
                           Default: "iterative".
  --batch-limit INT        Maximum size of list for adaptive batching mode (default: 1000)
  --batch-max-delay VAL    Maximum delay to process first item in the list for adaptive batching mode (default: "1.000000s")
