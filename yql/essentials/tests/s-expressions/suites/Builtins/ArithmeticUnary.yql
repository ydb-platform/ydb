(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let table1map (Map table1 (lambda '(item) (block '(
   (let u (Uint32 '2))
   (let u64 (Uint64 '333))
   (let u8 (Uint8 '7))
   (let s (Int32 '-2))
   (let d (Double '3.1415))
   (let ju (Just u))
   (let js (Just s))
   (let jd (Just d))
   (let newValue (Member item 'value))
   (let newValue (Concat newValue (String '" => ")))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (CountBits u)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (CountBits u64)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (CountBits u8)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Inc u)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Dec u)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Plus u)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Minus u)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (Inc ju) (Uint32 '999))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (Dec ju) (Uint32 '999))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (Plus ju) (Uint32 '999))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (Minus ju) (Uint32 '999))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Inc s)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Dec s)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Plus s)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Minus s)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (Inc js) (Int32 '-999))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (Dec js) (Int32 '-999))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (Plus js) (Int32 '-999))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (Minus js) (Int32 '-999))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Abs s)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Abs d)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Plus d)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Minus d)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (Plus jd) (Double '0))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (Minus jd) (Double '0))))))
   (let s (Struct))
   (let s (AddMember s 'key (Member item 'key)))
   (let s (AddMember s 'subkey (Member item 'subkey)))
   (let s (AddMember s 'value newValue))
   (return s)
)))))
(let mr_sink (DataSink 'result))
(let world (Write! world mr_sink (Key) table1map '()))
(let world (Commit! world mr_sink))
(return world)
)
