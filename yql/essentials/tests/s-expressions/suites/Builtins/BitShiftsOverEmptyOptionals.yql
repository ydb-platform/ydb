(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let table1map (Map table1 (lambda '(item) (block '(
   (let value (Member item 'value))
   (let x (Uint32 '7))
   (let y (Uint8 '2))
   (let jx (Just x))
   (let n (Nothing (OptionalType (DataType 'Uint32))))
   (let newValue value)
   (let newValue (Concat newValue (String '" => ")))
   (let newValue (Concat newValue (String '" ShiftLeft ")))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (ShiftLeft x y)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (ShiftLeft jx y) (Uint32 '999))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (ShiftLeft n y) (Uint32 '999))))))
   (let newValue (Concat newValue (String '" RotLeft ")))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (RotLeft x y)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (RotLeft jx y) (Uint32 '999))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (RotLeft n y) (Uint32 '999))))))
   (let newValue (Concat newValue (String '" ShiftRight ")))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (ShiftRight x y)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (ShiftRight jx y) (Uint32 '999))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (ShiftRight n y) (Uint32 '999))))))
   (let newValue (Concat newValue (String '" RotRight ")))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (RotRight x y)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (RotRight jx y) (Uint32 '999))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (RotRight n y) (Uint32 '999))))))

   (let s (Struct))
   (let s (AddMember s 'key (Member item 'key)))
   (let s (AddMember s 'subkey (Member item 'subkey)))
   (let s (AddMember s 'value newValue))
   (return s)
)))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) table1map '('('mode 'append))))
(let world (Commit! world mr_sink))
(return world)
)
