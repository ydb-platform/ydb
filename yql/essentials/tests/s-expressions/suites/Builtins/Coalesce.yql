(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let table1map (Map table1 (lambda '(item) (block '(
   (let value (Member item 'value))
   (let x (Uint32 '1))
   (let y (Uint32 '2))
   (let z (Uint32 '3))
   (let n (Nothing (OptionalType (TypeOf x))))
   (let newValue value)
   (let newValue (Concat newValue (String '" => ")))
   # single arg
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce x)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Unwrap (Coalesce (Just x)))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Exists (Coalesce n))))))
   # two arg
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce x y)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (Just x) y)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Unwrap (Coalesce (Just x) (Just y)))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce n y)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Unwrap (Coalesce n (Just y)))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Exists (Coalesce n n))))))
   # more args
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce x y z)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce (Just x) (Just y) z)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Unwrap (Coalesce (Just x) (Just y) (Just z)))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce n (Just y) z)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Unwrap (Coalesce n (Just y) (Just z)))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Coalesce n n z)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Unwrap (Coalesce n n (Just z)))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Exists (Coalesce n n n))))))
   (let s (Struct))
   (let s (AddMember s 'key (Member item 'key)))
   (let s (AddMember s 'subkey (Member item 'subkey)))
   (let s (AddMember s 'value newValue))
   (return s)
)))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) table1map '('('mode 'append))))
(let world (Commit! world mr_sink))
(return world)
)
