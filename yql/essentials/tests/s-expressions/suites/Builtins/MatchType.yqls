(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let table1map (Map table1 (lambda '(item) (block '(
   (let key (FromString (Member item 'key) 'Uint64))
   (let res (MatchType key 'Optional (lambda '(item) (Coalesce item (Uint64 '0))) (lambda '(item) item)))
   (let s (Struct))
   (let s (AddMember s 'key (ToString res)))
   (let s (AddMember s 'subkey (Member item 'subkey)))
   (let s (AddMember s 'value (Member item 'value)))
   (return s)
)))))
(let mr_sink (DataSink 'result))
(let world (Write! world mr_sink (Key) table1map '()))
(let world (Commit! world mr_sink))
(return world)
)
