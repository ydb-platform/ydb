(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (RemoveSystemMembers (Right! x)))
(let table1map (Map table1 (lambda '(item) (block '(
   (let value (Member item 'value))
   (let x (Uint32 '2))
   (let y (String '!))
   (let newValue value)
   (let t1 (DataType 'Uint32))
   (let o1 (OptionalType t1))
   (let u1 (TupleType t1 o1))
   (let str (DataType 'String))
   (let s1 (StructType '('key str) '('subkey str) '('value str)))
   (let s2 (Struct s1 '('subkey (String 'a)) '('key y) '('value y)))
   (let s3 (AsStruct '('subkey (String 'a)) '('key y) '('value y)))
   (let d1 (DictType t1 u1))
   (let d2 (Dict d1))
   (let d3 (Dict d1 '(x '(x (Just x)))))
   (let d4 (AsDict '((String 'aaa) (Uint32 '17)) '((String 'aaa) (Uint32 '18)) '((String 'bbb) (Uint32 '5))))
   (let z1 (Nothing (OptionalType (VoidType))))
   (let newValue (Concat newValue (String '" => ")))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (+ (Size value) x)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Length (List (ListType t1) x x))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Length (List (ListType o1)))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Length (List (ListType u1) '(x (Just x))))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Exists (Nothing o1))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Length (AsList x x))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Length (List (ListType s1) item))))))
   (let newValue (Concat newValue (Concat (String '" ") (Member s2 'key))))
   (let newValue (Concat newValue (Concat (String '" ") (Member s3 'subkey))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Length d2)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Length d3)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Length d4)))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Exists (Optional o1 x))))))
   (let newValue (Concat newValue (Concat (String '" ") (ToString (Exists z1)))))
   (let s (Struct))
   (let s (AddMember s 'key (Member item 'key)))
   (let s (AddMember s 'subkey (Member item 'subkey)))
   (let s (AddMember s 'value newValue))
   (return s)
)))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) table1map '('('mode 'append))))
(let world (Commit! world mr_sink))
(return world)
)
