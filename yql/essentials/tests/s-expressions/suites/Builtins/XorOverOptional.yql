(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let writer (lambda '(x) (MatchType x 'Optional 
(lambda '(x) (Coalesce (Map x (lambda '(y) (ToString y))) (String 'NULL)))
(lambda '(x) (ToString x)))))
(let table1map (Map table1 (lambda '(item) (block '(
   (let value (Member item 'value))
   (let t (Bool 'true))
   (let jt (Just t))
   (let f (Bool 'false))
   (let jf (Just f))
   (let n (Nothing (OptionalType (DataType 'Bool))))
   (let newValue value)

   (let newValue (Concat newValue (String '" => XOR true : ")))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor t t)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor t jt)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor t f)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor t jf)))))         
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor t n)))))
   (let newValue (Concat newValue (String '" => XOR false : ")))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor f t)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor f jt)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor f f)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor f jf)))))         
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor f n)))))          
   (let newValue (Concat newValue (String '" => XOR just true : ")))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor jt t)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor jt jt)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor jt f)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor jt jf)))))         
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor jt n)))))
   (let newValue (Concat newValue (String '" => XOR just false : ")))   
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor jf t)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor jf jt)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor jf f)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor jf jf)))))         
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor jf n)))))                
   (let newValue (Concat newValue (String '" => XOR nothing : ")))      
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor n t)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor n jt)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor n f)))))
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor n jf)))))         
   (let newValue (Concat newValue (Concat (String '" ") (Apply writer (Xor n n)))))                
   
   (let s (Struct))
   (let s (AddMember s 'key (Member item 'key)))
   (let s (AddMember s 'subkey (Member item 'subkey)))
   (let s (AddMember s 'value newValue))
   (return s)
)))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) table1map '('('mode 'append))))
(let world (Commit! world mr_sink))
(return world)
)
