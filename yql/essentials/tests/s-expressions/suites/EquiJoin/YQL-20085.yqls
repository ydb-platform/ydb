(
(let config (DataSource 'config))

(let list1 (AsList 
  (AsStruct '('key1 (Int32 '1)) '('value1 (String 'A)))
  (AsStruct '('key1 (Int32 '4)) '('value1 (String 'C)))
  (AsStruct '('key1 (Int32 '4)) '('value1 (String 'D)))
))

(let list2 (AsList
  (AsStruct '('key2 (Uint64 '2)) '('value2 (String 'U)))
  (AsStruct '('key2 (Uint64 '4)) '('value2 (String 'Y)))
  (AsStruct '('key2 (Uint64 '4)) '('value2 (String 'W)))
))

(let joinInner (EquiJoin '(list2 'b) '(list1 'a) '('Inner 'a 'b '('a 'key1) '('b 'key2) '()) '()))
(let joinLeft (EquiJoin '(list2 'b) '(list1 'a) '('Left 'a 'b '('a 'key1) '('b 'key2) '()) '()))
(let joinRight (EquiJoin '(list2 'b) '(list1 'a) '('Right 'a 'b '('a 'key1) '('b 'key2) '()) '()))
(let joinFull (EquiJoin '(list2 'b) '(list1 'a) '('Full 'a 'b '('a 'key1) '('b 'key2) '()) '()))
(let joinLeftOnly (EquiJoin '(list2 'b) '(list1 'a) '('LeftOnly 'a 'b '('a 'key1) '('b 'key2) '()) '()))
(let joinRightOnly (EquiJoin '(list2 'b) '(list1 'a) '('RightOnly 'a 'b '('a 'key1) '('b 'key2) '()) '()))
(let joinExclusion (EquiJoin '(list2 'b) '(list1 'a) '('Exclusion 'a 'b '('a 'key1) '('b 'key2) '()) '()))
(let joinLeftSemi (EquiJoin '(list2 'b) '(list1 'a) '('LeftSemi 'a 'b '('a 'key1) '('b 'key2) '()) '()))
(let joinRightSemi (EquiJoin '(list2 'b) '(list1 'a) '('RightSemi 'a 'b '('a 'key1) '('b 'key2) '()) '()))
(let joinCross (EquiJoin '(list2 'b) '(list1 'a) '('Cross 'a 'b '() '() '()) '()))

(let settings '(
    '('rename '"a.key1" 'qwerty1)
    '('rename '"a.value1" '"")
    '('rename '"b.key2" '"")
    '('rename '"b.value2" 'qwerty2)
  )
)
(let joinInnerRename (EquiJoin '(list2 'b) '(list1 'a) '('Inner 'a 'b '('a 'key1) '('b 'key2) '()) settings))
(let joinLeftRename (EquiJoin '(list2 'b) '(list1 'a) '('Left 'a 'b '('a 'key1) '('b 'key2) '()) settings))
(let joinRightRename (EquiJoin '(list2 'b) '(list1 'a) '('Right 'a 'b '('a 'key1) '('b 'key2) '()) settings))
(let joinFullRename (EquiJoin '(list2 'b) '(list1 'a) '('Full 'a 'b '('a 'key1) '('b 'key2) '()) settings))
(let joinLeftOnlyRename (EquiJoin '(list2 'b) '(list1 'a) '('LeftOnly 'a 'b '('a 'key1) '('b 'key2) '()) settings))
(let joinRightOnlyRename (EquiJoin '(list2 'b) '(list1 'a) '('RightOnly 'a 'b '('a 'key1) '('b 'key2) '()) settings))
(let joinExclusionRename (EquiJoin '(list2 'b) '(list1 'a) '('Exclusion 'a 'b '('a 'key1) '('b 'key2) '()) settings))
(let joinLeftSemiRename (EquiJoin '(list2 'b) '(list1 'a) '('LeftSemi 'a 'b '('a 'key1) '('b 'key2) '()) settings))
(let joinRightSemiRename (EquiJoin '(list2 'b) '(list1 'a) '('RightSemi 'a 'b '('a 'key1) '('b 'key2) '()) settings))
(let joinCrossRename (EquiJoin '(list2 'b) '(list1 'a) '('Cross 'a 'b '() '() '()) settings))

(let res_sink (DataSink 'result))
(let world (Write! world res_sink (Key) joinInner '('('type))))
(let world (Write! world res_sink (Key) joinLeft '('('type))))
(let world (Write! world res_sink (Key) joinRight '('('type))))
(let world (Write! world res_sink (Key) joinFull '('('type))))
(let world (Write! world res_sink (Key) joinLeftOnly '('('type))))
(let world (Write! world res_sink (Key) joinRightOnly '('('type))))
(let world (Write! world res_sink (Key) joinExclusion '('('type))))
(let world (Write! world res_sink (Key) joinLeftSemi '('('type))))
(let world (Write! world res_sink (Key) joinRightSemi '('('type))))
(let world (Write! world res_sink (Key) joinCross '('('type))))
(let world (Write! world res_sink (Key) joinInnerRename '('('type))))
(let world (Write! world res_sink (Key) joinLeftRename '('('type))))
(let world (Write! world res_sink (Key) joinRightRename '('('type))))
(let world (Write! world res_sink (Key) joinFullRename '('('type))))
(let world (Write! world res_sink (Key) joinLeftOnlyRename '('('type))))
(let world (Write! world res_sink (Key) joinRightOnlyRename '('('type))))
(let world (Write! world res_sink (Key) joinExclusionRename '('('type))))
(let world (Write! world res_sink (Key) joinLeftSemiRename '('('type))))
(let world (Write! world res_sink (Key) joinRightSemiRename '('('type))))
(let world (Write! world res_sink (Key) joinCrossRename '('('type))))

(let world (Commit! world res_sink))
(return world)
)
