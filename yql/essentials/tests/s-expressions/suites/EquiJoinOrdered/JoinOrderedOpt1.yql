(
(let world (Configure! world (DataSource '"yt" '"$all") '"Attr" '"joinmergetableslimit" '"10"))
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input1Opt))) (Void) '()))
(let world (Left! x))
(let list1 (Right! x))

(let x (Read! world mr_source (Key '('table (String 'Input2))) (Void) '()))
(let world (Left! x))
(let list2 (Right! x))

(let joinInner (EquiJoin '(list1 'a) '(list2 'b) '('Inner 'a 'b '('a 'key1) '('b 'key1) '()) '()))
(let joinLeft (EquiJoin '(list1 'a) '(list2 'b) '('Left 'a 'b '('a 'key1) '('b 'key1) '()) '()))
(let joinRight (EquiJoin '(list1 'a) '(list2 'b) '('Right 'a 'b '('a 'key1) '('b 'key1) '()) '()))
(let joinFull (EquiJoin '(list1 'a) '(list2 'b) '('Full 'a 'b '('a 'key1) '('b 'key1) '()) '()))
(let joinLeftOnly (EquiJoin '(list1 'a) '(list2 'b) '('LeftOnly 'a 'b '('a 'key1) '('b 'key1) '()) '()))
(let joinRightOnly (EquiJoin '(list1 'a) '(list2 'b) '('RightOnly 'a 'b '('a 'key1) '('b 'key1) '()) '()))
(let joinExclusion (EquiJoin '(list1 'a) '(list2 'b) '('Exclusion 'a 'b '('a 'key1) '('b 'key1) '()) '()))
(let joinLeftSemi (EquiJoin '(list1 'a) '(list2 'b) '('LeftSemi 'a 'b '('a 'key1) '('b 'key1) '()) '()))
(let joinRightSemi (EquiJoin '(list1 'a) '(list2 'b) '('RightSemi 'a 'b '('a 'key1) '('b 'key1) '()) '()))

(let sortDir4 '((Bool 'true) (Bool 'true) (Bool 'true) (Bool 'true)))
(let sortDir2 '((Bool 'true) (Bool 'true)))
(let keySelectorAB (lambda '(row) '((Member row '"a.key1") (Member row '"a.subkey1") (Member row '"a.value1") (Member row '"b.key1"))))
(let keySelectorA (lambda '(row) '((Member row '"a.key1") (Member row '"a.subkey1"))))
(let keySelectorB (lambda '(row) '((Member row '"b.key1") (Member row '"b.subkey1"))))

(let res_sink (DataSink 'result))
(let world (Write! world res_sink (Key) (Sort joinInner sortDir4 keySelectorAB) '('('type))))
(let world (Write! world res_sink (Key) (Sort joinLeft sortDir4 keySelectorAB) '('('type))))
(let world (Write! world res_sink (Key) (Sort joinRight sortDir4 keySelectorAB) '('('type))))
(let world (Write! world res_sink (Key) (Sort joinFull sortDir4 keySelectorAB) '('('type))))
(let world (Write! world res_sink (Key) (Sort joinLeftOnly sortDir2 keySelectorA) '('('type))))
(let world (Write! world res_sink (Key) (Sort joinRightOnly sortDir2 keySelectorB) '('('type))))
(let world (Write! world res_sink (Key) (Sort joinExclusion sortDir4 keySelectorAB) '('('type))))
(let world (Write! world res_sink (Key) (Sort joinLeftSemi sortDir2 keySelectorA) '('('type))))
(let world (Write! world res_sink (Key) (Sort joinRightSemi sortDir2 keySelectorB) '('('type))))

(let world (Commit! world res_sink))
(return world)
)
