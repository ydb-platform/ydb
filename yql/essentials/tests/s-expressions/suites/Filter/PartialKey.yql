(
(let source (DataSource '"yt" '"plato"))
(let sink (DataSink '"yt" '"plato"))
(let result (DataSink 'result))

(let r (Read! world source (Key '('table (String '"Input"))) (Void) '()))
(let world (Left! r))
(let input (Right! r))

(let test (lambda '(world cmp) (block '(
  (let filter (lambda '(item) (block '(
    (let key (Member item '"key"))
    (let subkey (Member item '"subkey"))
    (let res (Coalesce (Apply cmp '(key subkey)) (Bool 'false)))
    (return res)
  ))))

  (let out (Filter input filter))
  (let world (Write! world result (Key) out '()))
  (return world)
))))

(let world (Apply test world (lambda '(item) (And (> (Nth item '0) (String '"020")) (<= (Nth item '0) (String '"150"))) )))
(let world (Apply test world (lambda '(item) (And (== (Nth item '0) (String '"075")) (And (> (Nth item '1) (String '"2")) (<= (Nth item '1) (String '"5")))) )))

(let world (Commit! world sink))
(let world (Commit! world result))
(return world)
)
