(
(let source (DataSource '"yt" '"plato"))
(let sink (DataSink '"yt" '"plato"))
(let result (DataSink 'result))

(let r (Read! world source (Key '('table (String '"Input"))) (Void) '()))
(let world (Left! r))
(let input (Right! r))

(let filter (lambda '(item) (block '(
  (let key (Member item '"key"))
  (let a1 (And (> key (String '"100")) (< key (String '"400"))))
  (let a2 (And (> key (String '"020")) (< key (String '"200"))))
  (let res (Coalesce (And a1 a2) (Bool 'false)))
  (return res)
)
)))

(let out (Filter input filter))

(let world (Write! world result (Key) out '('('type))))
(let world (Commit! world sink))
(let world (Commit! world result))
(return world)
)
