(
(let world (Configure! world (DataSource '"config") '"LLVM" '"OFF"))
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input1))) (Void) '()))
(let world (Left! x))
(let list1 (Right! x))

(let x (Read! world mr_source (Key '('table (String 'Input2))) (Void) '()))
(let world (Left! x))
(let list2 (Right! x))

(let joinInner (GraceJoinCore
(ExpandMap (ToFlow list1) (lambda '(m)(Member m 'key1)))
(ExpandMap (ToFlow list2) (lambda '(m)(Member m 'key2)))
'Inner  '('0) '('0) '('0 '0) '('0 '1) '('key1) '('key2) '()))

(let res_sink (DataSink 'result))

(let world (Write! world res_sink (Key) (Collect (NarrowMap joinInner (lambda '(a b) (AsStruct '('a a) '('b b))))) '('('type))))

(let world (Commit! world res_sink))
(return world)
)
