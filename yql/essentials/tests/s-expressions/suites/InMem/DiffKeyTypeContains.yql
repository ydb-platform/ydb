(
#comment
(let config (DataSource 'config))
(let world (Configure! world config 'PureDataSource 'yt))

(let res_sink (DataSink 'result))
(let t1 (DataType 'Uint32))
(let t2 (DataType 'String))
(let dt (DictType t1 t2))
(let d (Dict dt '((Uint32 '4) (String 'aaa)) '((Uint32 '5) (String 'bbb))) )
(let jd (Just d))
(let n (Nothing (TypeOf jd)))

(let nu (Nothing (OptionalType (DataType 'Uint32))))
(let t3 (OptionalType (DataType 'Uint32)))
(let t4 (OptionalType (DataType 'String)))
(let dt2 (DictType t3 t4))
(let d2 (Dict dt2 
'((Just (Uint32 '4)) (Just (String 'aaa))) 
'((Just (Uint32 '5)) (Just (String 'bbb)))
'(nu (Just (String 'ccc)))
))
(let jd2 (Just d2))
(let n2 (Nothing (TypeOf jd2)))

(let world (Write! world res_sink (Key) (Contains d (Uint32 '4)) '()))
(let world (Write! world res_sink (Key) (Contains d (Uint8 '4)) '()))
(let world (Write! world res_sink (Key) (Contains d (Int64 '4)) '()))
(let world (Write! world res_sink (Key) (Contains d (Int64 '-4)) '()))
(let world (Write! world res_sink (Key) (Contains d (Uint64 '4)) '()))

(let world (Write! world res_sink (Key) (Contains jd (Uint32 '4)) '()))
(let world (Write! world res_sink (Key) (Contains jd (Uint8 '4)) '()))
(let world (Write! world res_sink (Key) (Contains jd (Int64 '4)) '()))
(let world (Write! world res_sink (Key) (Contains jd (Int64 '-4)) '()))
(let world (Write! world res_sink (Key) (Contains jd (Uint64 '4)) '()))

(let world (Write! world res_sink (Key) (Contains n (Uint32 '4)) '()))
(let world (Write! world res_sink (Key) (Contains n (Uint8 '4)) '()))
(let world (Write! world res_sink (Key) (Contains n (Int64 '4)) '()))
(let world (Write! world res_sink (Key) (Contains n (Int64 '-4)) '()))
(let world (Write! world res_sink (Key) (Contains n (Uint64 '4)) '()))

(let world (Write! world res_sink (Key) (Contains d nu) '()))
(let world (Write! world res_sink (Key) (Contains d (Just (Uint32 '4))) '()))
(let world (Write! world res_sink (Key) (Contains d (Just (Uint8 '4))) '()))
(let world (Write! world res_sink (Key) (Contains d (Just (Int64 '4))) '()))
(let world (Write! world res_sink (Key) (Contains d (Just (Int64 '-4))) '()))
(let world (Write! world res_sink (Key) (Contains d (Just (Uint64 '4))) '()))

(let world (Write! world res_sink (Key) (Contains d2 (Uint8 '4)) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Int32 '4)) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Uint32 '4)) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Int64 '4)) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Int64 '-4)) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Uint64 '4)) '()))

(let world (Write! world res_sink (Key) (Contains d2 (Just (Uint8 '4))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Just (Int32 '4))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Just (Uint32 '4))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Just (Int64 '4))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Just (Int64 '-4))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Just (Uint64 '4))) '()))

(let world (Write! world res_sink (Key) (Contains d2 (Nothing (OptionalType (DataType 'Uint8)))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Nothing (OptionalType (DataType 'Int32)))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Nothing (OptionalType (DataType 'Uint32)))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Nothing (OptionalType (DataType 'Int64)))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Nothing (OptionalType (DataType 'Uint64)))) '()))

(let world (Write! world res_sink (Key) (Contains d2 (Just (Just (Uint8 '4)))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Just (Just (Int32 '4)))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Just (Just (Uint32 '4)))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Just (Just (Int64 '4)))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Just (Just (Int64 '-4)))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Just (Just (Uint64 '4)))) '()))
(let world (Write! world res_sink (Key) (Contains d2 (Just (Nothing (OptionalType (DataType 'Int64))))) '()))

(let world (Commit! world res_sink))
(return world)
)
