# program
(
(let config (DataSource 'config))
(let world (Configure! world config 'PureDataSource 'yt))

(import agg_module '"/lib/yql/aggregate.yql")
(let list (AsList
(AsStruct '('key (Uint32 '2)) '('pred (Bool '1)) '('value (Uint32 '5)))
(AsStruct '('key (Uint32 '1)) '('pred (Bool '1)) '('value (Uint32 '17)))
(AsStruct '('key (Uint32 '2)) '('pred (Bool '0)) '('value (Uint32 '2)))
(AsStruct '('key (Uint32 '1)) '('pred (Bool '1)) '('value (Uint32 '4)))
(AsStruct '('key (Uint32 '3)) '('pred (Bool '0)) '('value (Uint32 '1)))
(AsStruct '('key (Uint32 '2)) '('pred (Bool '0)) '('value (Uint32 '3)))
(AsStruct '('key (Uint32 '2)) '('pred (Bool '1)) '('value (Uint32 '9)))
))
(let avg_traits (Apply (bind agg_module 'avg_if_traits_factory) (TypeOf list) (lambda '(row) (Member row 'value)) (lambda '(row) (Member row 'pred))))
(let res_sink (DataSink 'result))
(let resKey (Aggregate list '('key) '('('avg_value avg_traits))))
(let world (Write! world res_sink (Key) resKey '('('type))))
(let world (Commit! world res_sink))
(return world)
)
