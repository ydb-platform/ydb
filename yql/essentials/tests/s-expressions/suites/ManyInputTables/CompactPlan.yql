(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input1))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input2))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table2 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input3))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table3 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input4))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table4 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input5))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table5 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input6))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table6 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input7))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table7 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input8))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table8 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input9))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table9 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input10))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table10 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input11))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table11 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input12))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table12 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input13))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table13 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input14))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table14 (Right! x))
(let x (Read! world mr_source (Key '('table (String 'Input15))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table15 (Right! x))
(let lens (AsList
   (Length table1) (Length table2) (Length table3) (Length table4) (Length table5)
   (Length table6) (Length table7) (Length table8) (Length table9) (Length table10)
   (Length table11) (Length table12) (Length table13) (Length table14) (Length table15)))
(let result (Fold lens (Uint64 '0) (lambda '(x y) (+ x y))))
(let res_sink (DataSink 'result))
(let world (Write! world res_sink (Key) result '()))
(let world (Commit! world res_sink))
(return world)
)
