(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input1))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let result1 (Sort table1 (Bool 'true) (lambda '(row) (block '(
    (let res (Member row 'value))
    (return res)
)
))))
(let x (Read! world mr_source (Key '('table (String 'Input2))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table2 (Right! x))
(let offset (Uint64 '5))
(let result2 (Extend result1 table2))
(let result2 (Sort result2 '((Bool 'true) (Bool 'true)) (lambda '(row) (block '(
    (let res '((Member row 'key) (Member row 'subkey)))
    (return res)
)
))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) result2 '()))
(let res_sink (DataSink 'result))
(let world (Write! world res_sink (Key) result2 '()))
(let world (Commit! world mr_sink))
(let world (Commit! world res_sink))
(return world)
)
