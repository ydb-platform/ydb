(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (MrTableConcat (Key '('table (String 'Input1))) (Key '('table (String 'Input2)))) (Void) '()))
(let world (Left! x))
(let tables (Right! x))
(let tables (Sort tables '((Bool 'true) (Bool 'true)) (lambda '(row) '((Member row 'name) (Member row 'name2)))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) tables '()))
(let res_sink (DataSink 'result))
(let world (Write! world res_sink (Key) tables '('('type))))
(let world (Commit! world mr_sink))
(let world (Commit! world res_sink))
(return world)
)
