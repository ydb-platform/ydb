(
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source
    (Key '('table (String 'Input)))
    (Void) '()))
(let world (Left! x))
(let table1 (Right! x))

(let table2 (Map table1 (lambda '(x) (block '(
   (let s (Struct))
   (let s (AddMember s 'value (Member x 'value)))
   (let s (AddMember s 'subkey (Member x 'subkey)))   
   (let s (AddMember s 'key (Member x 'key)))   
   (return s)
)))))
(let res_sink (DataSink 'result))
(let world (Write! world res_sink
    (Key)
    table2 '()))

(let world (Commit! world res_sink))
(return world)
)
