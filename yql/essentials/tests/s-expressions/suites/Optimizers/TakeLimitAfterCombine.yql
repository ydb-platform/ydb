(
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source
    (Key '('table (String 'Input)))
    (Void) '()))
(let world (Left! x))
(let table1 (Right! x))

(let preMap (lambda '(item) (Just item)))
(let keyExtractor (lambda '(item) (Member item 'key)))
(let init (lambda '(key item) (FromString (Member item 'subkey) 'Uint32)))
(let update (lambda '(key item state) (+ state (FromString (Member item 'subkey) 'Uint32))))
(let finish (lambda '(key state) (block '(
  (let s (Struct))
  (let s (AddMember s 'key key))
  (let s (AddMember s 'subkey (String '.)))
  (let s (AddMember s 'value (Coalesce (Map state (lambda '(x) (ToString x))) (String '""))))
  (return (Just s))
))))

(let table2 (CombineByKey table1 preMap keyExtractor init update finish))
(let table2 (Take table2 (Uint64 '2)))
(let res_sink (DataSink 'result))
(let world (Write! world res_sink
    (Key)
    table2 '()))
    
(let world (Commit! world res_sink))
(return world)
)
