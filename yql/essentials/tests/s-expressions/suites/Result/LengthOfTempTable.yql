(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let tresh (Int32 'x"64000000"))
(let table1low (FlatMap table1 (lambda '(item) (block '(
   (let intValueOpt (FromString (Member item 'key) 'Int32))
   (let ret (FlatMap intValueOpt (lambda '(item2) (block '(
      (return (ListIf (< item2 tresh) item))
   )))))
   (return ret)
)))))

(let res_sink (DataSink 'result))
(let world (Write! world res_sink (Key) (Length table1low) '()))
(let world (Commit! world res_sink))
(return world)
)
