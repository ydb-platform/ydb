(
#comment
(let config (DataSource 'config))
(let world (Configure! world config 'PureDataSource 'yt))

(let res_sink (DataSink 'result))
(let x (Uint32 '1))
(let y (String 'asd))
(let o (Just x))
(let l (AsList x))
(let d (AsDict '(x y)))
(let t '(x y))
(let s (AsStruct '('a x) '('b y)))
(let vt1 (VariantType (TupleType (DataType 'Int32) (DataType 'String))))
(let vt2 (VariantType (StructType '('x (DataType 'Int32)) '('y (DataType 'String)))))
(let world (Write! world res_sink (Key) (FormatType (OptionalItemType (TypeOf o))) '()))
(let world (Write! world res_sink (Key) (FormatType (ListItemType (TypeOf l))) '()))
(let world (Write! world res_sink (Key) (FormatType (DictKeyType (TypeOf d))) '()))
(let world (Write! world res_sink (Key) (FormatType (DictPayloadType (TypeOf d))) '()))
(let world (Write! world res_sink (Key) (FormatType (TupleElementType (TypeOf t) '0)) '()))
(let world (Write! world res_sink (Key) (FormatType (TupleElementType (TypeOf t) '1)) '()))
(let world (Write! world res_sink (Key) (FormatType (StructMemberType (TypeOf s) 'a)) '()))
(let world (Write! world res_sink (Key) (FormatType (StructMemberType (TypeOf s) 'b)) '()))
(let world (Write! world res_sink (Key) (FormatType (VariantUnderlyingType vt1)) '()))
(let world (Write! world res_sink (Key) (FormatType (VariantUnderlyingType vt2)) '()))
(let world (Write! world res_sink (Key) (FormatType (StreamItemType (StreamType (DataType 'String)))) '()))
(let world (Commit! world res_sink))
(return world)
)
