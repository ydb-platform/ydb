(
# read data from Input table
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source
    (Key '('table (String 'Input)))
    '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))

# filter keys less than 100
(let tresh (Int32 '100))
(let table1low (Map table1 (lambda '(item) (block '(
   (let val (Struct))
   (let val (AddMember val 'foo (Member item 'key)))   
   (let val (AddMember val 'bar (Member item 'value)))   
   (let ret (Struct))
   (let ret (AddMember ret 'key (Member item 'value)))
   (let ret (AddMember ret 'subkey (String '"")))
   (let ret (AddMember ret 'value val))
   (return ret)
)))))

# write table1low to result sink
(let res_sink (DataSink 'result))
(let world (Write! world res_sink
    (Key)
    table1low '()))

# finish
(let world (Commit! world res_sink))
(return world)
)
