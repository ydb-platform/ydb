(
(let mr_source (DataSource 'yt 'plato))
(let data (block '(
  (let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
  (let world (Left! x))
  (let input (Right! x))
  (let output (FlatMap input (lambda '(item) (block '(
     (let res (Struct))
     (let res (AddMember res 'foo (Member item 'key)))
     (let res (AddMember res 'bar (Member item 'subkey)))
     (return (AsList res))
  )))))
  (return output)
)))
(let mr_sink (DataSink 'result))
(let world (Write! world mr_sink (Key) data '()))
(let world (Commit! world mr_sink))
(return world)
)

