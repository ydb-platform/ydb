(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table (Right! x))
(let keySelector (lambda '(x) '((Member x 'value) (Member x 'subkey))))
(let listHandler (lambda '(stream) (FlatMap stream (lambda '(pair) (block '(
  (let key (Nth pair '0))
  (let list (ForwardList (Nth pair '1)))
  (let s (Struct))
  (let s (AddMember s 'key (Nth key '0)))
  (let s (AddMember s 'subkey (Nth key '1)))
  (let s (AddMember s 'value (ToString (Length list))))
  (let ret (AsList s))
  (return ret)
))))))
(let result (PartitionByKey table keySelector (Void) (Void) listHandler))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) result '()))
(let world (Commit! world mr_sink))
(return world)
)
