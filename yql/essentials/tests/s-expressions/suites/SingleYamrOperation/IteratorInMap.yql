(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let handler (lambda '(row) (block '(
    (let value (Member row 'value))
    (return (ReplaceMember row 'value (Collect (Iterator (AsList value value)))))
  ))))
(let data (Map table1 handler))
(let data (Sort data (Bool 'true) (lambda '(row) (Member row 'key))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) data '('('mode 'append))))
(let res_sink (DataSink 'result))
(let world (Write! world res_sink (Key) data '('('type))))
(let world (Commit! world mr_sink))
(let world (Commit! world res_sink))
(return world)
)
