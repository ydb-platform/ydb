(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let tresh (Int32 '100))
(let table1low (LMap table1 (lambda '(stream) (block '(
   (return (FlatMap stream (lambda '(item) (block '(
   (let intValueOpt (FromString (Member item 'key) 'Int32))
   (let ret (FlatMap intValueOpt (lambda '(item2) (block '(
      (return (ListIf (< item2 tresh) item))
   )))))
   (return ret))))))
)))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) table1low '('('mode 'append))))
(let world (Commit! world mr_sink))
(return world)
)
