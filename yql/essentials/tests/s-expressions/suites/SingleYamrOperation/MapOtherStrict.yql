(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('_other) '()))
(let world (Left! x))
(let table1 (Right! x))
(let tresh (String 'abc))
(let table1low (FlatMap table1 (lambda '(item) (block '(
   (let value (Lookup (Member item '_other) (String 'value)) )
   (let ret (FlatMap value (lambda '(item2) (block '(
      (return (ListIf (== item2 tresh) item))
   )))))
   (return ret)
)))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) table1low '('('mode 'append))))
(let world (Commit! world mr_sink))
(return world)
)
