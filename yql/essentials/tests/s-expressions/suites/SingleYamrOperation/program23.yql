(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let tresh (Int32 '100))
(let table1low (FlatMap table1 (lambda '(item) (block '(
   (let intValueOpt (FromString (Member item 'key) 'Int32))
   (let optPlus50 (Map intValueOpt (lambda '(item2) (+ (Int32 '50) item2))))
   (let ret (FlatMap optPlus50 (lambda '(item2) (block '(
      (let s (ListIf (< item2 tresh) item))
      (return s)
   )))))
   (return ret)
)))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) table1low '('('mode 'append))))
(let world (Commit! world mr_sink))
(return world)
)
