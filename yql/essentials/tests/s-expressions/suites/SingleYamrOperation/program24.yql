(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let table1even (FlatMap table1 (lambda '(item) (block '(
   (let intValueOpt (FromString (Member item 'key) 'Int32))
   (let equalsZero (lambda '(x) (== x (Int32 '0))))
   (let isEven (lambda '(x) (Coalesce (Map (% x (Int32 '2)) equalsZero) (Bool 'false))))
   (let filteredValue (Filter intValueOpt isEven))
   (let ret (ListIf (Exists filteredValue) item))
   (return ret)
)))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) table1even '('('mode 'append))))
(let world (Commit! world mr_sink))
(return world)
)
