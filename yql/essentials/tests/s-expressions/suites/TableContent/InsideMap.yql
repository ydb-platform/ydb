(
    #comment
    (let mr_source (DataSource 'yt 'plato))
    (let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
    (let world (Left! x))
    (let table1 (Right! x))

    (let mrtc (Right! (Read! world mr_source (Key '('table (String 'Input))) (Void) '('('inline)))))
    (let mrtc (FlatMap mrtc (lambda '(item) (block '(
           (let key (Member item 'key))
           (return (ListIf (> key (String '100)) item))
    )))))
    (let filter (ToDict mrtc (lambda '(x) (Member x 'key)) (lambda '(x) (Member x 'value)) '('Hashed 'One 'Compact)))

    (let tresh (String '500))
    (let out (FlatMap table1 (lambda '(item) (block '(
           (let key (Member item 'key))
           (return (ListIf (And (< key tresh) (Contains filter key)) item))
    )))))
    (let mr_sink (DataSink 'yt 'plato))
    (let world (Write! world mr_sink (Key '('table (String 'Output))) out '('('mode 'append))))
    (let world (Commit! world mr_sink))
    (return world)
)
