(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source 
'(
(Key '('table (String 'Input))) 
(Key '('table (String 'Input2))) 
)

'('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let udf (Udf 'Pire.Match (String '@@.*\d.*@@)))
(let table1map (Filter table1 (lambda '(item) (block '(
   (let value (Member item 'value))
   (return (Apply udf value))
)))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) table1map '('('mode 'append))))
(let world (Commit! world mr_sink))
(return world)
)
