(
#comment
(let mr_source (DataSource 'yt 'plato))
(let x (Read! world mr_source (Key '('table (String 'Input))) '('key 'subkey 'value) '()))
(let world (Left! x))
(let table1 (Right! x))
(let udf (Udf 'String.JoinFromList))
(let table1map (Map table1 (lambda '(item) (block '(
   (let key (Member item 'key))
   (let value (Apply udf (AsList (Member item 'key) (Member item 'subkey) (Member item 'value)) (String '"_")))
   (let s (Struct))
   (let s (AddMember s 'key key))
   (let s (AddMember s 'subkey (String '.)))
   (let s (AddMember s 'value value))
   (return s)
)))))
(let mr_sink (DataSink 'yt (quote plato)))
(let world (Write! world mr_sink (Key '('table (String 'Output))) table1map '('('mode 'append))))
(let world (Commit! world mr_sink))
(return world)
)
