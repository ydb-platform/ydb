/* syntax version 1 *//* do not execute */
DECLARE $c_void AS Void;
DECLARE $c_unit AS Unit;
DECLARE $c_bool AS Bool;
DECLARE $c_uint8 AS Uint8;
DECLARE $c_uint16 AS Uint16;
DECLARE $c_uint32 AS Uint32;
DECLARE $c_uint64 AS Uint64;
DECLARE $c_int8 AS int8;
DECLARE $c_int16 AS int16;
DECLARE $c_int32 AS int32;
DECLARE $c_int64 AS int64;
DECLARE $c_tinyint AS TINYINT;
DECLARE $c_smallint AS SMALLINT;
DECLARE $c_int AS INT;
DECLARE $c_integer AS INTEGER;
DECLARE $c_bigint AS BIGINT;
DECLARE $c_float AS float;
DECLARE $c_double AS double;
DECLARE $c_string AS String;
DECLARE $c_varchar AS Varchar;
DECLARE $c_utf8 AS Utf8;
DECLARE $c_yson AS Yson;
DECLARE $c_json AS Json;
DECLARE $c_uuid AS Uuid;
DECLARE $c_date AS Date;
DECLARE $c_datetime AS Datetime;
DECLARE $c_timestamp AS Timestamp;
DECLARE $c_interval AS Interval;
DECLARE $c_tzdate AS TzDate;
DECLARE $c_tzdatetime AS TzDatetime;
DECLARE $c_tztimestamp AS TzTimestamp;
DECLARE $c_decimal0 AS Decimal (20, 10);
DECLARE $c_optional0 AS Optional<string>;
DECLARE $c_optional1 AS string?;
DECLARE $c_optional2 AS string??;
DECLARE $c_optional3 AS string???;
DECLARE $c_optional4 AS optional<string>?;
DECLARE $c_tuple AS Tuple<bool, uint64>;
DECLARE $c_struct AS Struct<foo: string, 'bar': float>;
DECLARE $c_variant1 AS Variant<int, bool>;
DECLARE $c_variant2 AS Variant<foo: int, "bar": bool>;
DECLARE $c_list0 AS List<Yson>;
DECLARE $c_list1 AS List<$c_yson>;
DECLARE $c_stream AS Stream<Date>;
DECLARE $c_flow AS Flow<Uuid>;
DECLARE $c_dict AS Dict<string, interval>;
DECLARE $c_set AS Set<TzTimestamp>;
DECLARE $c_enum AS Enum<'first', 'second', 'third'>;
DECLARE $c_resource0 AS Resource<'foo'>;
DECLARE $c_resource1 AS Resource<bar>;
DECLARE $resource AS string;
DECLARE $c_resource2 AS Resource<$resource>;
DECLARE $c_tagged AS Tagged<Uint64, 'tag'>;
DECLARE $c_generic AS Generic;
DECLARE $c_sometype0 AS set<list<dict<string, int??>?>>;
DECLARE $c_callable0 AS Callable<() -> bool>;
DECLARE $c_callable1 AS Callable<(int32) -> int8>;
DECLARE $c_callable2 AS Callable<(int32, string) -> float>;
DECLARE $c_callable3 AS Callable<(int32, foo: string) -> float>;
DECLARE $c_callable4 AS Callable<(foo: int32, bar: string) -> float>;
DECLARE $c_callable5 AS Callable<([foo: int32, bar: string]) -> float>;
DECLARE $c_callable6 AS Callable<(foo: int32, [bar: string]) -> float>;
DECLARE $c_callable7 AS Callable<(foo: int32, bar: optional<string>) -> float>;
DECLARE $c_callable8 AS Callable<(int32 {automap}, foo: string {Automap}) -> float>;
