SELECT
    Yson::Serialize(Yson::From(null)) AS `null`,
    Yson::Serialize(Yson::From([])) AS `empty_list`,
    Yson::Serialize(Yson::From({})) AS `empty_dict`,
    Yson::Serialize(Yson::From(true)) AS `bool`,
    Yson::Serialize(Yson::From(123)) AS `int`,
    Yson::Serialize(Yson::From(123u)) AS `uint`,
    Yson::Serialize(Yson::From(Just(1.23))) AS optional_double,
    Yson::Serialize(Yson::From(Nothing(Int8?))) AS empty_int,
    Yson::Serialize(Yson::From("123")) AS `string`,
    Yson::Serialize(Yson::From(AsList(1, 2, 3))) AS int_list,
    Yson::Serialize(Yson::From(AsList(AsList(1, 2), AsList(3, 1/0)))) AS nested_list,
    Yson::Serialize(Yson::From(AsDict(AsTuple("foo", 1), AsTuple("bar", 2)))) AS int_dict,
    Yson::Serialize(Yson::From(AsTuple(false, 1, "foo", AsList(1,2)))) AS `tuple`,
    Yson::Serialize(Yson::From(AsStruct(false AS a, 1 AS b, "foo" AS c, AsList(1,2) AS d, AsTuple(1.0, "bar") AS e))) AS `struct`,
    Yson::Serialize(Yson::From(Utf8("проверка связи"))) AS `utf8`,
    Yson::Serialize(Yson::From(Yson("{a=1;b=#}"))) AS `yson`,
    Yson::Serialize(Yson::From(Json(@@{"a":"foo","b":[1,2,3,4,5]}@@))) AS `json`,
    Yson::Serialize(Yson::From(AsList(Yson::From(1), Yson::From("foo")))) AS resource_list,
    Yson::Serialize(Yson::From([AsVariant(1, "one"), AsVariant("2", "two")])) AS `variants`,
    Yson::Serialize(Yson::From(Just(1u/0u))) AS double_optional;
