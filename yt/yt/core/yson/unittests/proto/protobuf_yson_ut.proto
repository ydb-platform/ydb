package NYT.NYson.NProto;

import "yt_proto/yt/core/misc/proto/guid.proto";
import "yt_proto/yt/core/misc/proto/protobuf_helpers.proto";
import "yt_proto/yt/core/yson/proto/protobuf_interop.proto";
import "yt_proto/yt/core/ytree/proto/attributes.proto";

enum EColor
{
    Color_Green = -1 [(NYT.NYson.NProto.enum_value_name) = "green"];
    Color_Red = 2 [(NYT.NYson.NProto.enum_value_name) = "red"];
    Color_Blue = 3 [(NYT.NYson.NProto.enum_value_name) = "blue"];
}

enum EFlag
{
    option allow_alias = true;

    Flag_False = 0 [(NYT.NYson.NProto.enum_value_name) = "false"];
    Flag_No = 0 [(NYT.NYson.NProto.enum_value_name) = "no"];
    Flag_True = 1 [(NYT.NYson.NProto.enum_value_name) = "true"];
    Flag_Yes = 1 [(NYT.NYson.NProto.enum_value_name) = "yes"];
}

message TNestedMessage
{
    optional int32 int32_field = 1;
    optional EColor color = 19;
    optional EFlag flag = 20;
    optional TNestedMessage nested_message = 2;
    repeated int32 repeated_int32_field = 100;
    map<string, TNestedMessage> nested_message_map = 3 [(NYT.NYson.NProto.yson_map) = true];
}

message TMessage
{
    optional int32 int32_field_xxx = 1
    [
        (NYT.NYson.NProto.field_name) = "int32_field",
        (NYT.NYson.NProto.field_name_alias) = "int32_field_alias1",
        (NYT.NYson.NProto.field_name_alias) = "int32_field_alias2"
    ];
    optional uint32 uint32_field = 2;
    optional sint32 sint32_field = 3;
    optional int64 int64_field = 4;
    optional uint64 uint64_field = 5;
    optional sint64 sint64_field = 6;
    optional fixed32 fixed32_field = 7;
    optional fixed64 fixed64_field = 8;
    optional sfixed32 sfixed32_field = 9;
    optional sfixed64 sfixed64_field = 10;
    optional bool bool_field = 11;
    optional string string_field = 12;
    optional float float_field = 13;
    optional double double_field = 14;
    optional TNestedMessage nested_message1 = 15;
    optional TNestedMessage nested_message2 = 16;
    repeated int32 repeated_int32_field = 17;
    repeated TNestedMessage repeated_nested_message1 = 18;
    repeated TNestedMessage repeated_nested_message2 = 21;
    optional NYT.NYTree.NProto.TAttributeDictionary attributes = 19;
    optional bytes yson_field = 20 [(NYT.NYson.NProto.yson_string) = true];
    map<string, TNestedMessage> nested_message_map = 22 [(NYT.NYson.NProto.yson_map) = true];
    map<string, int32> string_to_int32_map = 23 [(NYT.NYson.NProto.yson_map) = true];
    map<int32, int32> int32_to_int32_map = 24 [(NYT.NYson.NProto.yson_map) = true];
    optional TNestedMessageWithCustomConverter nested_message_with_custom_converter = 25;
    repeated TNestedMessageWithCustomConverter repeated_nested_message_with_custom_converter = 26;
    map<int32, TNestedMessageWithCustomConverter> int32_to_nested_message_with_custom_converter_map = 27 [(NYT.NYson.NProto.yson_map) = true];
    optional NYT.NProto.TGuid guid = 28;
    optional bytes bytes_with_custom_converter = 29;
    repeated bytes repeated_bytes_with_custom_converter = 30;
    optional NYT.NProto.TExtensionSet extensions = 31;

    extensions 100 to 199;
}

message TMessageExtension
{
    extend TMessage
    {
        optional TMessageExtension extension = 123;
    }

    optional uint32 extension_field = 1;

    extensions 200 to 299;
}

message TMessageExtensionExtension
{
    extend TMessageExtension
    {
        optional TMessageExtensionExtension extension_extension = 234;
    }

    optional uint32 extension_extension_field = 1;
}

message TMessageExt
{
    optional int32 x = 1;
}

message TNestedMessageWithRequiredFields
{
    optional int32 optional_field = 1;
    required int32 required_field = 2;
}

message TMessageWithRequiredFields
{
    optional int32 optional_field = 1;
    required int32 required_field = 2;
    repeated TNestedMessageWithRequiredFields nested_messages = 3;
}

message TMessageWithReservedFields
{
    reserved 99 to 101;
    reserved "reserved_field1";
    reserved "reserved_field2";
    reserved "reserved_field3";
}

message TExtensibleMessage
{
    message TSubmessage
    {
        optional int32 known_int = 1;
        optional string known_string = 2;
    }

    optional string known_string = 1;
    repeated TSubmessage known_submessages = 2;
    optional TSubmessage known_submessage = 3;
}

message TMessageWithRequiredAnnotation
{
    optional string required_string = 1 [(NYT.NYson.NProto.required) = true];
}

message TNestedMessageWithCustomConverter
{
    optional int32 x = 1;
    optional int32 y = 2;
}

message TPackedRepeatedMessage
{
    enum EEnum {
        VALUE0 = 0;
        VALUE1 = 1;
    };
    repeated int32 int32_rep = 1 [packed = true];
    repeated uint32 uint32_rep = 2 [packed = true];
    repeated int64 int64_rep = 3 [packed = true];
    repeated uint64 uint64_rep = 4 [packed = true];
    repeated float float_rep = 5 [packed = true];
    repeated double double_rep = 6 [packed = true];
    repeated fixed32 fixed32_rep = 7 [packed = true];
    repeated fixed64 fixed64_rep = 8 [packed = true];
    repeated sfixed32 sfixed32_rep = 9 [packed = true];
    repeated sfixed64 sfixed64_rep = 10 [packed = true];
    repeated EEnum enum_rep = 11 [packed = true];
    
}
